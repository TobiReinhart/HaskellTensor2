
==================== FINAL INTERFACE ====================
2018-12-22 19:09:01.316008 UTC

interface main:Perturbation 8043
  interface hash: 94de515e377fa32b5a7300fdd2bc22ff
  ABI hash: 86ade4a35031a7923795650af6c4ad33
  export-list hash: 2151821fea7fdcfba530bb109075c579
  orphan hash: fd32531c54dc7aa768bba348542be920
  flag hash: 707c86cfbee6a9c65f08462953a21ad8
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Perturbation.areaEvalMap10
  Perturbation.areaEvalMap14
  Perturbation.areaList14
  Perturbation.evalFullAns
  Perturbation.evalPertAns
  Perturbation.getRepIndsPert
  Perturbation.indexPermSeqPert
  Perturbation.mkPertAns
  Perturbation.symAnsSetPert
  Perturbation.PertAnsatz
module dependencies: Ansatz Symmetrize
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0* deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  containers-0.5.11.0:Data.Sequence.Internal.Sorting 481f0d31b76dfcad90c740727653678b
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Ansatz fceab4c3109e895058fcc6810ff83fa5
  exports: 59de763b5ed7159158b40cd802183e31
  mkIndMap 7a1883f6d2f07bda88482cc980b808dc
import  -/  Symmetrize b5f0b4927f9e36a72e9b4cc67721e63e
  exports: c79a0ef965b8f406eb0b9e72ceb58ef0
  Symmetry f51775b478da3c80f3a4963df025dc97
f7389b902888e93b7f110ae4a9a0f722
  $s$fEqSeq ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq [GHC.Types.Int])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ [GHC.Types.Int]
                     GHC.Classes.$fEq[]_$s$fEq[])
                  Perturbation.$s$fEqSeq_$s$fEqSeq_$c/= -}
1d48eec79dc6632022759d732028766f
  $s$fEqSeq_$s$fEqSeq_$c/= ::
    Data.Sequence.Internal.Seq [GHC.Types.Int]
    -> Data.Sequence.Internal.Seq [GHC.Types.Int] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq [GHC.Types.Int])
                   (y :: Data.Sequence.Internal.Seq [GHC.Types.Int]) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ [GHC.Types.Int]
                        GHC.Classes.$fEq[]_$s$fEq[]
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ebb54f6591f1336fde50b15fbf414a1a
  $s$fOrdSeq ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq [GHC.Types.Int])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                  Perturbation.$s$fEqSeq
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ [GHC.Types.Int]
                     GHC.Classes.$fOrd[]_$s$fOrd[])
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ [GHC.Types.Int]
                     GHC.Classes.$fOrd[]_$s$fOrd[])
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ [GHC.Types.Int]
                     GHC.Classes.$fOrd[]_$s$fOrd[])
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ [GHC.Types.Int]
                     GHC.Classes.$fOrd[]_$s$fOrd[])
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ [GHC.Types.Int]
                     GHC.Classes.$fOrd[]_$s$fOrd[])
                  (\ (x :: Data.Sequence.Internal.Seq [GHC.Types.Int])
                     (y :: Data.Sequence.Internal.Seq [GHC.Types.Int]) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ [GHC.Types.Int]
                          GHC.Classes.$fOrd[]_$s$fOrd[]
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq [GHC.Types.Int])
                     (y :: Data.Sequence.Internal.Seq [GHC.Types.Int]) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ [GHC.Types.Int]
                          GHC.Classes.$fOrd[]_$s$fOrd[]
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
2100c45f271d9f0936edd4d0cf890f63
  $s$fOrdSeq_$cmax ::
    Data.Sequence.Internal.Seq [GHC.Types.Int]
    -> Data.Sequence.Internal.Seq [GHC.Types.Int]
    -> Data.Sequence.Internal.Seq [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq [GHC.Types.Int])
                   (y :: Data.Sequence.Internal.Seq [GHC.Types.Int]) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ [GHC.Types.Int]
                        GHC.Classes.$fOrd[]_$s$fOrd[]
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
24ebaf273737ee5f8c8e0c6e27e3d77a
  $s$fOrdSeq_$cmin ::
    Data.Sequence.Internal.Seq [GHC.Types.Int]
    -> Data.Sequence.Internal.Seq [GHC.Types.Int]
    -> Data.Sequence.Internal.Seq [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq [GHC.Types.Int])
                   (y :: Data.Sequence.Internal.Seq [GHC.Types.Int]) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ [GHC.Types.Int]
                        GHC.Classes.$fOrd[]_$s$fOrd[]
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
9ca00d5f91169a55daaf06244b07cc64
  $sconcat :: [[a]] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (xs :: [[a]]) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ [a]
                      @ b
                      (\ (x :: [a]) (y :: b)[OneShot] -> GHC.Base.foldr @ a @ b c y x)
                      n
                      xs)) -}
2f14e84ee084bfc368a708e64848048b
  $sfromList ::
    [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <[GHC.Types.Int]>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R))
                             x
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ [GHC.Types.Int]
                                  GHC.Classes.$fOrd[]_$s$fOrd[]
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <[GHC.Types.Int]>_R) of nt { DEFAULT ->
                                Perturbation.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a))
                                  wild2 }
                             GHC.Types.True
                             -> case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <[GHC.Types.Int]>_R) of nt { DEFAULT ->
                                Perturbation.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a))
                                  wild2 } } } } } }) -}
1633b9278900e525f7c0c40d2133e12a
  $sfromList1 ::
    Data.Map.Internal.Map
      (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
    -> [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bf194dbcaf3a570c5e72794481bb264e
  $sfromList2 ::
    [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <[GHC.Types.Int]>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ [GHC.Types.Int]
                                  GHC.Classes.$fOrd[]_$s$fOrd[]
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <[GHC.Types.Int]>_R) of nt { DEFAULT ->
                                Perturbation.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <[GHC.Types.Int]>_R) of nt { DEFAULT ->
                                Perturbation.$sfromList3
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                        @ a))
                                  wild2 } } } } } } }) -}
5573498aaabd5f413d0ec980ffb4859a
  $sfromList3 ::
    Data.Map.Internal.Map
      (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
    -> [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2e0e5d3a2cafe5ea1a8e8f56370496bf
  $sfromList4 ::
    [(GHC.Types.Int, a)] -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Int, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt1 { GHC.Types.I# ipv ->
                           Data.Map.Internal.Bin
                             @ GHC.Types.Int
                             @ a
                             1#
                             dt1
                             x1
                             (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Internal.Tip @ GHC.Types.Int @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                Perturbation.$wpoly_go2
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x0
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a))
                                  wild2 }
                             1#
                             -> case x of x0 { DEFAULT ->
                                Perturbation.$sfromList5
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x0
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a))
                                  wild2 } } } } } } } }) -}
0898960eb4e244fb71dc8039ca15b20e
  $sfromList5 ::
    Data.Map.Internal.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)] -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
21bce92c46fe45e77290aa1fce2bec81
  $sinsertWithKey_go8 ::
    GHC.Classes.Ord k1 =>
    (k1 -> a1 -> a1 -> a1)
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*C1(C1(C1(U)))><S,1*U><L,U><S,1*U> -}
53ccf9da010cad7cec584d4ff92a666a
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
f5e043ba356efb7218196bff74fa7131
  $sintersection ::
    Data.Set.Internal.Set (Data.Sequence.Internal.Seq [GHC.Types.Int])
    -> Data.Set.Internal.Set
         (Data.Sequence.Internal.Seq [GHC.Types.Int])
    -> Data.Set.Internal.Set
         (Data.Sequence.Internal.Seq [GHC.Types.Int])
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
2069006b8b3c7be179ab87d38374abca
  $slookup1 ::
    GHC.Types.Int
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Types.Int)
                   (w1 :: Data.Map.Internal.Map GHC.Types.Int a) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Perturbation.$wpoly_go3 @ a ww1 w1 }) -}
f08d14fdbb1a4352d45b0471d3ba9f6b
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
f4f39e0d28d7c4d9feaa285794bf4111
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Perturbation.$trModule3
                   Perturbation.$trModule1) -}
e573fda4fb433f97ee8581850d436a45
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Perturbation.$trModule2) -}
f5766357f6e87561267ea7695b034d40
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Perturbation"#) -}
562ed0271b4377ccaa8c0bb493dc3f40
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Perturbation.$trModule4) -}
532d5a2fc11c420f1e4d544dbffd3c74
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
33754e84d4b7103bec02648c8128006b
  $w$sevalPertAns ::
    Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
    -> Perturbation.PertAnsatz GHC.Real.Rational
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
70b79b6a13f8e004ecba0ea128b1296b
  $w$sgo8 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
be2c0255a015de5e3193d0008914dfa6
  $wgetRepIndsPert ::
    GHC.Base.String -> [Perturbation.PertAnsatz a] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Base.String)
                   (w1 :: [Perturbation.PertAnsatz a]) ->
                 GHC.CString.unpackAppendCString#
                   Perturbation.indexPermSeqPert3
                   (let {
                      iMap :: Data.IntMap.Internal.IntMap GHC.Types.Char
                      = Data.IntMap.Strict.fromList1
                          @ GHC.Types.Char
                          (Data.IntMap.Internal.Nil @ GHC.Types.Char)
                          (Ansatz.getAllIndsLabel_go1 1# w)
                    } in
                    case GHC.Base.map
                           @ (Data.Map.Internal.Map
                                (Data.Sequence.Internal.Seq [GHC.Types.Int]) a)
                           @ [GHC.Types.Char]
                           (\ (x :: Data.Map.Internal.Map
                                      (Data.Sequence.Internal.Seq [GHC.Types.Int]) a) ->
                            Perturbation.indexPermSeqPert
                              (GHC.List.$w!!
                                 @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                 (Data.Map.Internal.keys_go
                                    @ (Data.Sequence.Internal.Seq [GHC.Types.Int])
                                    @ a
                                    (GHC.Types.[] @ (Data.Sequence.Internal.Seq [GHC.Types.Int]))
                                    x)
                                 0#)
                              iMap)
                           w1 of wild {
                      [] -> Perturbation.getRepIndsPert3
                      : x xs
                      -> Perturbation.getRepIndsPert_go
                           (GHC.Types.:
                              @ [GHC.Types.Char]
                              x
                              (Data.OldList.prependToAll
                                 @ [GHC.Types.Char]
                                 Perturbation.getRepIndsPert1
                                 xs)) })) -}
3214d3802526be338b15af5f3c6f23cf
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
    -> [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
cbbfc2a80bd194da292d9ec7ffbe7b12
  $wpoly_go13 ::
    GHC.Prim.Int# -> Data.Map.Internal.Map GHC.Types.Int a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
4edc7c578810da898ddfe55437301827
  $wpoly_go2 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
b77ddef605d95270047e5cf8472cec81
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
7c312f56c50f9ae5e37cf6a31f10f614
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
    -> [(Data.Sequence.Internal.Seq [GHC.Types.Int], a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
49c16eefccbca44d2ca7fe60c6d926aa
  type PertAnsatz a =
    Data.Map.Internal.Map
      (Data.Sequence.Internal.Seq [GHC.Types.Int]) a
67345f5d1a490d72f3f9761f045dee22
  areaEvalMap1 ::
    [GHC.Types.Int]
    -> Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [GHC.Types.Int]) ->
                 case x of wild {
                   [] -> Perturbation.areaEvalMap18
                   : y ys
                   -> Perturbation.$sfromList4
                        @ GHC.Types.Int
                        (GHC.Types.:
                           @ (GHC.Types.Int, GHC.Types.Int)
                           (Perturbation.areaEvalMap17, y)
                           (case ys of wild1 {
                              [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int)
                              : y1 ys1
                              -> GHC.Types.:
                                   @ (GHC.Types.Int, GHC.Types.Int)
                                   (Perturbation.areaEvalMap16, y1)
                                   (case ys1 of wild2 {
                                      [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int)
                                      : y2 ys2
                                      -> GHC.Types.:
                                           @ (GHC.Types.Int, GHC.Types.Int)
                                           (Perturbation.areaEvalMap15, y2)
                                           (case ys2 of wild3 {
                                              [] -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int)
                                              : y3 ys3
                                              -> GHC.Types.:
                                                   @ (GHC.Types.Int, GHC.Types.Int)
                                                   (Perturbation.areaEvalMap13, y3)
                                                   (case ys3 of wild4 {
                                                      []
                                                      -> GHC.Types.[]
                                                           @ (GHC.Types.Int, GHC.Types.Int)
                                                      : y4 ys4
                                                      -> GHC.Types.:
                                                           @ (GHC.Types.Int, GHC.Types.Int)
                                                           (Perturbation.areaEvalMap12, y4)
                                                           (case ys4 of wild5 {
                                                              []
                                                              -> GHC.Types.[]
                                                                   @ (GHC.Types.Int, GHC.Types.Int)
                                                              : y5 ys5
                                                              -> GHC.Types.:
                                                                   @ (GHC.Types.Int, GHC.Types.Int)
                                                                   (Perturbation.areaEvalMap11, y5)
                                                                   (case ys5 of wild6 {
                                                                      []
                                                                      -> GHC.Types.[]
                                                                           @ (GHC.Types.Int,
                                                                              GHC.Types.Int)
                                                                      : y6 ys6
                                                                      -> GHC.Types.:
                                                                           @ (GHC.Types.Int,
                                                                              GHC.Types.Int)
                                                                           (Perturbation.areaEvalMap9,
                                                                            y6)
                                                                           (case ys6 of wild7 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ (GHC.Types.Int,
                                                                                      GHC.Types.Int)
                                                                              : y7 ys7
                                                                              -> GHC.Types.:
                                                                                   @ (GHC.Types.Int,
                                                                                      GHC.Types.Int)
                                                                                   (Perturbation.areaEvalMap8,
                                                                                    y7)
                                                                                   (case ys7 of wild8 {
                                                                                      []
                                                                                      -> GHC.Types.[]
                                                                                           @ (GHC.Types.Int,
                                                                                              GHC.Types.Int)
                                                                                      : y8 ys8
                                                                                      -> GHC.Types.:
                                                                                           @ (GHC.Types.Int,
                                                                                              GHC.Types.Int)
                                                                                           (Perturbation.areaEvalMap7,
                                                                                            y8)
                                                                                           (case ys8 of wild9 {
                                                                                              []
                                                                                              -> GHC.Types.[]
                                                                                                   @ (GHC.Types.Int,
                                                                                                      GHC.Types.Int)
                                                                                              : y9 ys9
                                                                                              -> GHC.Types.:
                                                                                                   @ (GHC.Types.Int,
                                                                                                      GHC.Types.Int)
                                                                                                   (Perturbation.areaEvalMap6,
                                                                                                    y9)
                                                                                                   (case ys9 of wild10 {
                                                                                                      []
                                                                                                      -> GHC.Types.[]
                                                                                                           @ (GHC.Types.Int,
                                                                                                              GHC.Types.Int)
                                                                                                      : y10 ys10
                                                                                                      -> GHC.Types.:
                                                                                                           @ (GHC.Types.Int,
                                                                                                              GHC.Types.Int)
                                                                                                           (Perturbation.areaEvalMap5,
                                                                                                            y10)
                                                                                                           (case ys10 of wild11 {
                                                                                                              []
                                                                                                              -> GHC.Types.[]
                                                                                                                   @ (GHC.Types.Int,
                                                                                                                      GHC.Types.Int)
                                                                                                              : y11 ys11
                                                                                                              -> GHC.Types.:
                                                                                                                   @ (GHC.Types.Int,
                                                                                                                      GHC.Types.Int)
                                                                                                                   (Perturbation.areaEvalMap4,
                                                                                                                    y11)
                                                                                                                   (case ys11 of wild12 {
                                                                                                                      []
                                                                                                                      -> GHC.Types.[]
                                                                                                                           @ (GHC.Types.Int,
                                                                                                                              GHC.Types.Int)
                                                                                                                      : y12 ys12
                                                                                                                      -> GHC.Types.:
                                                                                                                           @ (GHC.Types.Int,
                                                                                                                              GHC.Types.Int)
                                                                                                                           (Perturbation.areaEvalMap3,
                                                                                                                            y12)
                                                                                                                           (case ys12 of wild13 {
                                                                                                                              []
                                                                                                                              -> GHC.Types.[]
                                                                                                                                   @ (GHC.Types.Int,
                                                                                                                                      GHC.Types.Int)
                                                                                                                              : y13 ys13
                                                                                                                              -> GHC.Types.:
                                                                                                                                   @ (GHC.Types.Int,
                                                                                                                                      GHC.Types.Int)
                                                                                                                                   (Perturbation.areaEvalMap2,
                                                                                                                                    y13)
                                                                                                                                   (GHC.Types.[]
                                                                                                                                      @ (GHC.Types.Int,
                                                                                                                                         GHC.Types.Int)) }) }) }) }) }) }) }) }) }) }) }) }) })) }) -}
4e2df46b64592f64cd10a4e436145a25
  areaEvalMap10 ::
    [Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int]
  {- Unfolding: (Perturbation.areaEvalMap10_go 0#) -}
192857ad8dd9916215a5b3dc987d95be
  areaEvalMap10_go ::
    GHC.Prim.Int#
    -> [Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U> -}
36005e69d67d1f01925fa57f0346834d
  areaEvalMap11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
e904d889d3c9e49664dacde3fb6a7ae1
  areaEvalMap12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
1b483ea4718341111d17ae49eaed2451
  areaEvalMap13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
9785e41a4a69641d2e2862c1ae367f7f
  areaEvalMap14 ::
    [Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int]
  {- Unfolding: (GHC.Base.map
                   @ [GHC.Types.Int]
                   @ (Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int)
                   Perturbation.areaEvalMap1
                   Perturbation.areaList14) -}
989f4d5c37094637f55d9b44142f6c9a
  areaEvalMap15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
32caf99953b194b94089a34c68072082
  areaEvalMap16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
5e8f4510bf447acb4d1bca5cb155e706
  areaEvalMap17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
f229161f738bf53297a5a028d9a0dced
  areaEvalMap18 :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
  {- Unfolding: (Perturbation.$sfromList4
                   @ GHC.Types.Int
                   (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))) -}
c6fce343e5a4bf050806cfaf31ae90d0
  areaEvalMap2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 14#) -}
f97301c1282c7a994eefe5e294412d28
  areaEvalMap3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 13#) -}
c8dc5b9c09458411b97b09caeb133d14
  areaEvalMap4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
7a8f9c9701d4169ff30069f9f989890e
  areaEvalMap5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
2c8839c23d700afaebc9b3e25d31ced7
  areaEvalMap6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
d99bca686c3f8d8f6df128898c822f5f
  areaEvalMap7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 9#) -}
c64e4d51da30dacc19ef04befd1e5cf6
  areaEvalMap8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
5374d0559a870f0764d6d8e46f16019e
  areaEvalMap9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
0f54261ad6ff46fd6ec5a105dfdfe0f8
  areaList14 :: [[GHC.Types.Int]]
  {- Unfolding: (Perturbation.areaList14_go 0#) -}
5a04785cafc1a533c362d791a1d59564
  areaList14_go :: GHC.Prim.Int# -> [[GHC.Types.Int]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U> -}
2d20900e5382b0af4462bec02b4eb33b
  evalFullAns ::
    [Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int]
    -> [Perturbation.PertAnsatz GHC.Real.Rational]
    -> [[GHC.Real.Rational]]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (evalMap :: [Data.Map.Internal.Map
                                  GHC.Types.Int GHC.Types.Int])
                   (ans :: [Perturbation.PertAnsatz GHC.Real.Rational]) ->
                 GHC.Base.map
                   @ (Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int)
                   @ [GHC.Real.Rational]
                   (\ (x :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int) ->
                    GHC.Base.map
                      @ (Data.Map.Internal.Map
                           (Data.Sequence.Internal.Seq [GHC.Types.Int]) GHC.Real.Rational)
                      @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      (\ (eta :: Perturbation.PertAnsatz GHC.Real.Rational) ->
                       Perturbation.evalFullAns_$sevalPertAns x eta)
                      ans)
                   evalMap) -}
1914549bfa2fe90bf8a5e81eb0675111
  evalFullAns_$sevalPertAns ::
    Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
    -> Perturbation.PertAnsatz GHC.Real.Rational -> GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int)
                   (w1 :: Perturbation.PertAnsatz GHC.Real.Rational) ->
                 case Perturbation.$w$sevalPertAns w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww1 ww2 }) -}
8ef1d0699548709cc0bd63024d59a607
  evalPertAns ::
    GHC.Num.Num a =>
    Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
    -> Perturbation.PertAnsatz a -> a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C1(U)),1*C1(U),A,A,C(U))><L,U><S,1*U> -}
0b0f504db262da94ad7657bee44c2907
  getRepIndsPert ::
    GHC.Real.Fractional a =>
    GHC.Base.String -> [Perturbation.PertAnsatz a] -> GHC.Base.String
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Base.String)
                   (w2 :: [Perturbation.PertAnsatz a]) ->
                 Perturbation.$wgetRepIndsPert @ a w1 w2) -}
c714eb39200017a2740e32ec6c36673c
  getRepIndsPert1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Perturbation.getRepIndsPert2) -}
4edfb3ad0498d366e49789db2f6e5a60
  getRepIndsPert2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
71f43e22c1cbcf437a0796490d5adb27
  getRepIndsPert3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Perturbation.getRepIndsPert4) -}
c4a98a510cf06ae5043d67dce073a9e3
  getRepIndsPert4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("]"#) -}
f4654c5ea812983dc988f8511fa8442a
  getRepIndsPert_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
64b9f9ceed8ca808cd472764dc12ddc0
  indexPermSeqPert ::
    Data.Sequence.Internal.Seq [GHC.Types.Int]
    -> Data.IntMap.Internal.IntMap GHC.Types.Char -> GHC.Base.String
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (a :: Data.Sequence.Internal.Seq [GHC.Types.Int])
                   (b :: Data.IntMap.Internal.IntMap GHC.Types.Char) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Base.String
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                     case Data.IntMap.Internal.$wgo
                            @ GHC.Types.Char
                            0#
                            b of ww { DEFAULT ->
                     case GHC.Prim./=# (GHC.Prim.*# 2# y) ww of lwild {
                       DEFAULT
                       -> GHC.CString.unpackAppendCString#
                            Perturbation.indexPermSeqPert3
                            (let {
                               lvl59 :: Data.IntSet.Internal.Key -> GHC.Types.Char
                                 {- Arity: 1, Strictness: <S(S),1*U(U)>,
                                    Unfolding: InlineRule (1, True, False)
                                               (\ (x :: Data.IntSet.Internal.Key) ->
                                                Data.IntMap.Internal.! @ GHC.Types.Char b x) -}
                               = \ (x :: Data.IntSet.Internal.Key) ->
                                 Data.IntMap.Internal.! @ GHC.Types.Char b x
                             } in
                             case Data.Sequence.Internal.$fEq1Seq_$cfoldr
                                    @ (Data.Sequence.Internal.Elem GHC.Base.String)
                                    @ [GHC.Base.String]
                                    (GHC.Types.: @ GHC.Base.String)
                                      `cast`
                                    (Sym (Data.Sequence.Internal.N:Elem[0] <GHC.Base.String>_R)
                                     ->_R <[GHC.Base.String] -> [GHC.Base.String]>_R)
                                    (GHC.Types.[] @ GHC.Base.String)
                                    (Data.Sequence.Internal.$fFunctorSeq_$cfmap
                                       @ (Data.Sequence.Internal.Elem [GHC.Types.Int])
                                       @ (Data.Sequence.Internal.Elem GHC.Base.String)
                                       (\ (inds :: [GHC.Types.Int]) ->
                                        GHC.CString.unpackAppendCString#
                                          Perturbation.indexPermSeqPert3
                                          (case GHC.Base.map
                                                  @ GHC.Types.Int
                                                  @ GHC.Types.Char
                                                  lvl59
                                                  inds of wild {
                                             [] -> Perturbation.getRepIndsPert3
                                             : x xs
                                             -> GHC.Base.++_$s++
                                                  @ GHC.Types.Char
                                                  Perturbation.getRepIndsPert3
                                                  x
                                                  (Data.OldList.prependToAll
                                                     @ GHC.Types.Char
                                                     Perturbation.indexPermSeqPert2
                                                     xs) }))
                                         `cast`
                                       (Sym (Data.Sequence.Internal.N:Elem[0] <[GHC.Types.Int]>_R)
                                        ->_R Sym (Data.Sequence.Internal.N:Elem[0]
                                                      <GHC.Base.String>_R))
                                       a `cast`
                                       (Data.Sequence.Internal.N:Seq[0]
                                            <[GHC.Types.Int]>_R)) of wild {
                               [] -> Perturbation.getRepIndsPert3
                               : x xs
                               -> Perturbation.getRepIndsPert_go
                                    (GHC.Types.:
                                       @ [GHC.Types.Char]
                                       x
                                       (Data.OldList.prependToAll
                                          @ [GHC.Types.Char]
                                          Perturbation.getRepIndsPert1
                                          xs)) })
                       1# -> Perturbation.indexPermSeqPert1 } }
                 } in
                 case a `cast`
                      (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R) of wild {
                   Data.Sequence.Internal.EmptyT -> $j 0#
                   Data.Sequence.Internal.Single x -> $j 1#
                   Data.Sequence.Internal.Deep dt1 ds1 ds2 ds3 -> $j dt1 }) -}
b5c4373d11442986b006eac08cf2f665
  indexPermSeqPert1 :: GHC.Base.String
  {- Strictness: x -}
58ece11cc74883fb346a773775f0740e
  indexPermSeqPert2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ','#) -}
d122972fa71c0cfb78d0fa3e5d7072d7
  indexPermSeqPert3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("["#) -}
7de5bb19932085d89984fecca65953b8
  mkPertAns ::
    GHC.Real.Fractional a =>
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Perturbation.PertAnsatz a
  {- Arity: 1, Strictness: <L,1*U(1*U(A,A,A,A,A,A,1*C1(U)),A,A,A)>,
     Unfolding: (\ @ a ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   lvl59 :: a
                   = GHC.Num.fromInteger
                       @ a
                       (GHC.Real.$p1Fractional @ a $dFractional)
                       Perturbation.mkPertAns1
                 } in
                 \ (seq :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 Perturbation.$sfromList2
                   @ a
                   (GHC.Types.:
                      @ (Data.Sequence.Internal.Seq [GHC.Types.Int], a)
                      ((Data.Sequence.Internal.$fFunctorSeq_$cfmap
                          @ (Data.Sequence.Internal.Elem
                               (Data.Sequence.Internal.Seq GHC.Types.Int))
                          @ (Data.Sequence.Internal.Elem [GHC.Types.Int])
                          (Data.Sequence.Internal.$fFoldableSeq_$ctoList @ GHC.Types.Int)
                            `cast`
                          (Sym (Data.Sequence.Internal.N:Elem[0]
                                    <Data.Sequence.Internal.Seq GHC.Types.Int>_R)
                           ->_R Sym (Data.Sequence.Internal.N:Elem[0] <[GHC.Types.Int]>_R))
                          (Data.Sequence.Internal.$wchunksOf @ GHC.Types.Int 2# seq)
                            `cast`
                          (Data.Sequence.Internal.N:Seq[0]
                               <Data.Sequence.Internal.Seq GHC.Types.Int>_R))
                         `cast`
                       (Sym (Data.Sequence.Internal.N:Seq[0] <[GHC.Types.Int]>_R)),
                       lvl59)
                      (GHC.Types.[]
                         @ (Data.Sequence.Internal.Seq [GHC.Types.Int], a)))) -}
804c1a1c6e0816f609d79be364085180
  mkPertAns1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
2dc22dcb1b0de462f8027f9a29873628
  symAnsSetPert ::
    (GHC.Classes.Eq a, GHC.Real.Fractional a) =>
    Symmetrize.Symmetry
    -> [Perturbation.PertAnsatz a] -> [Perturbation.PertAnsatz a]
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A)><L,U(U(C(C1(U)),A,C(C1(U)),C(U),A,A,C(U)),C(C1(U)),A,A)><L,1*U(U,U,U,U,U)><S,1*U> -}
"SPEC evalPertAns @ Rational" forall ($dNum :: GHC.Num.Num
                                                 GHC.Real.Rational)
  Perturbation.evalPertAns @ (GHC.Real.Ratio
                                GHC.Integer.Type.Integer)
                           $dNum
  = Perturbation.evalFullAns_$sevalPertAns
"SPEC/Perturbation $fEqSeq @ [Int]" [orphan] forall (v :: GHC.Classes.Eq
                                                            [GHC.Types.Int])
  Data.Sequence.Internal.$fEqSeq @ [GHC.Types.Int] v
  = Perturbation.$s$fEqSeq
"SPEC/Perturbation $fEqSeq_$c/= @ [Int]" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                    [GHC.Types.Int])
  Data.Sequence.Internal.$fEqSeq_$c/= @ [GHC.Types.Int] $dEq
  = Perturbation.$s$fEqSeq_$s$fEqSeq_$c/=
"SPEC/Perturbation $fOrdSeq @ [Int]" [orphan] forall (v :: GHC.Classes.Ord
                                                             [GHC.Types.Int])
  Data.Sequence.Internal.$fOrdSeq @ [GHC.Types.Int] v
  = Perturbation.$s$fOrdSeq
"SPEC/Perturbation $fOrdSeq_$cmax @ [Int]" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                       [GHC.Types.Int])
  Data.Sequence.Internal.$fOrdSeq_$cmax @ [GHC.Types.Int] $dOrd
  = Perturbation.$s$fOrdSeq_$cmax
"SPEC/Perturbation $fOrdSeq_$cmin @ [Int]" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                       [GHC.Types.Int])
  Data.Sequence.Internal.$fOrdSeq_$cmin @ [GHC.Types.Int] $dOrd
  = Perturbation.$s$fOrdSeq_$cmin
"SPEC/Perturbation concat @ [] _" [orphan] forall @ a
                                                  ($dFoldable :: Data.Foldable.Foldable [])
  Data.Foldable.concat @ [] @ a $dFoldable
  = Perturbation.$sconcat @ a
"SPEC/Perturbation fromList @ (Seq [Int]) _" [orphan] forall @ a
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         (Data.Sequence.Internal.Seq
                                                                            [GHC.Types.Int]))
  Data.Map.Internal.fromList @ (Data.Sequence.Internal.Seq
                                  [GHC.Types.Int])
                             @ a
                             $dOrd
  = Perturbation.$sfromList @ a
"SPEC/Perturbation fromList @ (Seq [Int]) _" [orphan] forall @ a
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         (Data.Sequence.Internal.Seq
                                                                            [GHC.Types.Int]))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         [GHC.Types.Int])
                                    @ a
                                    $dOrd
  = Perturbation.$sfromList2 @ a
"SPEC/Perturbation fromList @ Int _" [orphan] forall @ a
                                                     ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  Data.Map.Strict.Internal.fromList @ GHC.Types.Int @ a $dOrd
  = Perturbation.$sfromList4 @ a
"SPEC/Perturbation intersection @ (Seq [Int])" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                           (Data.Sequence.Internal.Seq
                                                                              [GHC.Types.Int]))
  Data.Set.Internal.intersection @ (Data.Sequence.Internal.Seq
                                      [GHC.Types.Int])
                                 $dOrd
  = Perturbation.$sintersection
"SPEC/Perturbation unionWith @ (Seq [Int]) _" [orphan] forall @ a
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          (Data.Sequence.Internal.Seq
                                                                             [GHC.Types.Int]))
  Data.Map.Strict.Internal.unionWith @ (Data.Sequence.Internal.Seq
                                          [GHC.Types.Int])
                                     @ a
                                     $dOrd
  = Perturbation.$sunionWith @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

