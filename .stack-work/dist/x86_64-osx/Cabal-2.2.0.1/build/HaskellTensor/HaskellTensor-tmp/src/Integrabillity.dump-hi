
==================== FINAL INTERFACE ====================
2019-01-14 15:48:21.750328 UTC

interface main:Integrabillity [hpc] 8043
  interface hash: e4449ad9ede3cc6d49fe9efbe59cbada
  ABI hash: d228707934964cc5d4985a843f52fc02
  export-list hash: f7811f7e2add78f14be0731bd2330bbf
  orphan hash: 91acb3e7361ed053e58a3ca5a5840a96
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Integrabillity.areaMetricMetric1
  Integrabillity.areaMetricMetric1intCond
  Integrabillity.densityEqnArea1
  Integrabillity.densityEqnArea2
  Integrabillity.densityEqnMetric1
  Integrabillity.densityEqnMetric2
  Integrabillity.flatMetricInter
  Integrabillity.flatMetricInterProlong
  Integrabillity.index2SparseAreaM
  Integrabillity.index2SparseAreaMintCond
  Integrabillity.index2SparseBlock1Eta
  Integrabillity.index2SparseCond1
  Integrabillity.index2SparseCond1Zero
  Integrabillity.index2SparseCond2
  Integrabillity.index2SparseCond3
  Integrabillity.index2SparseDens1
  Integrabillity.index2SparseDens1Area
  Integrabillity.index2SparseDens2
  Integrabillity.index2SparseDens2Area
  Integrabillity.index2SparseProjector
  Integrabillity.index2SparseProjector2
  Integrabillity.index2SparseintCond2_1
  Integrabillity.index2SparseintCond2_1Symbol
  Integrabillity.index2SparseintCond2_1SymbolPure
  Integrabillity.index2SparseintCond2_1SymbolRed
  Integrabillity.int1Test
  Integrabillity.int1Test2
  Integrabillity.int1Test3
  Integrabillity.int1Zero
  Integrabillity.intCond1
  Integrabillity.intCond1RelFac
  Integrabillity.intCond1Zero
  Integrabillity.intCond1noFactor
  Integrabillity.intCond2
  Integrabillity.intCond2_1
  Integrabillity.intCond2_1Symbol
  Integrabillity.intCond2_1SymbolPure
  Integrabillity.intCond2_1SymbolRed
  Integrabillity.intCond2_1SymbolRedWrong
  Integrabillity.intCond3
  Integrabillity.intCondComp
  Integrabillity.intCondCompNoSym
  Integrabillity.intCondCompZero
  Integrabillity.intCondOrd2
  Integrabillity.intCondSym
  Integrabillity.intRankDef1
  Integrabillity.intRankDef2
  Integrabillity.intRankDef3
  Integrabillity.intRankDef4
  Integrabillity.intRankDef5
  Integrabillity.inter4Factor
  Integrabillity.inter4noFactor
  Integrabillity.inter6Factor
  Integrabillity.inter6noFactor
  Integrabillity.interProTest
  Integrabillity.mkEqnSparseAreaM
  Integrabillity.mkEqnSparseAreaMintCond
  Integrabillity.mkEqnSparseBlock1Eta
  Integrabillity.mkEqnSparseCond1
  Integrabillity.mkEqnSparseCond1Zero
  Integrabillity.mkEqnSparseCond2
  Integrabillity.mkEqnSparseCond3
  Integrabillity.mkEqnSparseDens1
  Integrabillity.mkEqnSparseDens1Area
  Integrabillity.mkEqnSparseDens2
  Integrabillity.mkEqnSparseDens2Area
  Integrabillity.mkEqnSparseProjector
  Integrabillity.mkEqnSparseProjector2
  Integrabillity.mkEqnSparseflatMetricInter
  Integrabillity.mkEqnSparseflatMetricInterProlong
  Integrabillity.mkEqnSparseintCond2_1
  Integrabillity.mkEqnSparseintCond2_1New
  Integrabillity.mkEqnSparseintCond2_1Symbol
  Integrabillity.mkEqnSparseintCond2_1SymbolPure
  Integrabillity.mkEqnSparseintCond2_1SymbolRed
  Integrabillity.mkEqnSparseintCond2_1SymbolRedFull
  Integrabillity.mkEqnSparseintCondComp
  Integrabillity.mkEqnSparseintCondCompNew
  Integrabillity.mkEqnSparseintCondCompNoSym
  Integrabillity.mkEqnSparseintCondOrd2
  Integrabillity.mkEqnSparseintCondSym
  Integrabillity.mkEqnSparseintRankDef1
  Integrabillity.mkEqnSparseintRankDef3
  Integrabillity.mkEqnSparseintRankDef4
  Integrabillity.mkEqnSparseinter6Mat
  Integrabillity.mkEqnSparseinterMat
  Integrabillity.projectorMatrix
  Integrabillity.projectorMatrix2
  Integrabillity.projectorMatrixMixed1
  Integrabillity.projectorMatrixMixed2
  Integrabillity.projectorMatrixSym
module dependencies: BasicTensors EquivarianceEqns Index Ivar Pde
                     Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  BasicTensors 0df78451cdb64d61e6036444805588ff
  exports: e3eb46cbf5e0ff0a91078b17412e1317
  aSymI_2 81372182b9e998230d0d2faab3b7e62a
  delta_20 b77804eb482505214a8985e4180aefe4
  delta_3 746fafc3bda1c359b0397abeed82111a
  delta_9 d22b99ceb5d7fccaba80523aeb233ebd
  eta 47019b0f65a60cc81c88751d3c37cc0a
  etaAbs 0a066a9679d3f23867cc6fda61db6a14
  flatArea dafe102fa9e82f4531fea855a20ac749
  interArea 1e922b70f8b8767391aca79280ddd758
  interAreanoFactor ec35242246ef5d4ce281c9fae9a43d52
  interI_2 c8752b46a2fc2f04c0a3069d6d1c6ce8
  interI_Area f3734ba43d063782b93cd2f91232057c
  interJ_2 362b1aa162de63a16d8e4ffc4dc03f56
  interJ_2noFactor ad2f22fd4323faab5df5cd909cee0ac5
  interJ_Area 987c62b3368a5d0eb9619727446b86ff
  interJ_AreanoFactor 9fd313c4de7553efb064709404632be2
  interMetric b140de30bf770a3116b03bc7af40f1a6
  interMetricnoFactor 5f819ac47c3635b9bd4f79798740c0f7
  invEta 29cbd6497485ab1e1bb9ae455a681bd3
  symI_2 22ba522dbeba8c1baac905e21ee90713
  symI_Area 436685bcd53c745c1cfbb33a7c9398ea
import  -/  EquivarianceEqns 944da51003f384ade1029a7d52cf5384
  exports: 84062590276b987b26bd45d594b7213f
  eqn1_1Flat 0e1c7f9fde7827589fd1255121fdee68
import  -/  Index e389b597f52dbfefe3745bcba1949c62
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index a01a9190ec51cc115d3358a99c063fe2
  Lind_20 9976c80afe3129a8da6eeef509cd939d
  Lind_9 199ec47d455794929a9c39c4489984a9
  Linds_3 b7f25c6c6ec24e0defe93a5bf531b4b2
  Uind_20 b5e99ed389304ee9c82083925596c8cb
  Uind_9 8fce60bf392f1d712124e42ff35dcfc1
  Uinds_3 311b0a992b6841d7d23b3d8756aed0ef
  getValInd b1c032a982e0f73608bad6b7953c3ea2
import  -/  Ivar 52a8dc212ab2f8456a526e9d381a1784
  exports: 847b7f62b7be31da91814bf314ffd8e5
import  -/  Pde 6cb99ff48b3771dcca3d3397050c4c62
  exports: cfda6ba989dea29b657cfa7f1b7972bc
import  -/  Tensor 70d6952dea62d47ab6f2d598c8b571ec
  exports: cc1f578937ee3122bbbb4f8cf3eb8582
  Tensor 9baff54d5c983efc9b4dd7dd14f4d579
  Tensor 6b5aa7fabc304949e9aed286ed95183b
  tensorAdd 3f2d80707436db7c861987a2763b8ae6
  tensorContractWith_20 0d2a4af00084d1d61ca64810a39ab9ae
  tensorContractWith_3 d4730f4187bd6ebe8b3dd0280edaf514
  tensorContractWith_9 8930e2e4933f3ae0d2c7678e040aa484
  tensorProductWith 1110039333b95adaab3b9466e9a23aae
  tensorSMult 87ac1fc931fedd0d8cbb4f13a3cf68b2
  tensorSub 631c1c57b5264eed0ff22494ec87ff89
  tensorTranspose 317a8f2f993e8cc2a39a39388f3629fe
e48738e6e6f6dd07c04cf0ca7d7c8f5b
  $sfind3 ::
    [GHC.Types.Int] -> Data.Map.Internal.Map [GHC.Types.Int] a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
4a2cdd47acde88089fb3ef79b5ca9111
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> Integrabillity.$sfromList1
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> Integrabillity.$sfromList1
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> Integrabillity.$wpoly_go1
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> Integrabillity.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
3d163e4888b31440642344bdb8f690d1
  $sfromList1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
18fdccd6172ba7a0b28b0073663efc1e
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case Integrabillity.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
6bc4cc56dcfddacb028a3db8f2d03035
  $stensorContractWith_15 :: GHC.Natural.Natural
  {- Unfolding: (case Integrabillity.$stensorContractWith_16 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
041f7c77ffc38de610690b92f44288d2
  $stensorContractWith_16 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
cf00c8bdc2d7d951c1ff639e6eca74e1
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
381dd4e7ac347f83a37f6551219fb8f4
  $stensorContractWith_20_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
56238a55fdff42f7fcdfffc493d2aa5a
  $stensorContractWith_4 :: GHC.Natural.Natural
  {- Unfolding: (case Integrabillity.$stensorContractWith_5 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
456ef46e55ad298fedb474df157286aa
  $stensorContractWith_5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
e38f206e700413ac1a391c43fe0ac672
  $stensorContractWith_8 :: GHC.Natural.Natural
  {- Unfolding: (case Integrabillity.$stensorContractWith_20_dt of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
2efcdc0fe00a2bc6780cd3955d55e0c7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Integrabillity.$trModule3
                   Integrabillity.$trModule1) -}
b36c2c0e7a39a1f47b525d0f6793eeaf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Integrabillity.$trModule2) -}
ca8587e25f29c45e0f5840a7969d1d19
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Integrabillity"#) -}
a4f48ba37676506d535312ea1e065736
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Integrabillity.$trModule4) -}
382737b00b805f2aa0ba07883d8fec67
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
98d2f18e398489bac8b92bfa4e580632
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
f57c87aa42bf151ca30eba2d601b2af6
  $wareaMetricMetric1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 {__scc {main:Integrabillity.areaMetricMetric1} True False} case BasicTensors.delta_9 of ww { Tensor.Tensor ww1 ->
                                                                            case {__scc {main:Integrabillity.areaMetricMetric1} False True} {__scc {main:Integrabillity.areaMetricMetric1.flat} True False} {__scc {main:Integrabillity.areaMetricMetric1.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                                                                w
                                                                                                                                                                                                                                                                                w1 of ww2 { Tensor.Tensor ww3 ->
                                                                            case {__scc {main:Integrabillity.areaMetricMetric1} False True} {__scc {main:Integrabillity.areaMetricMetric1.flat} False True} BasicTensors.$wflatArea
                                                                                                                                                                                                              w1 of ww4 { Unit# ww5 ->
                                                                            case {__scc {main:Integrabillity.areaMetricMetric1} False True} {__scc {main:Integrabillity.areaMetricMetric1.flat} False True} Tensor.$wtensorProductWith
                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                                                              ww3
                                                                                                                                                                                                              ww5 of ww6 { Unit# ww7 ->
                                                                            case {__scc {main:Integrabillity.areaMetricMetric1} False True} {__scc {main:Integrabillity.areaMetricMetric1.flat} False True} Tensor.$wtensorContractWith_20
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                              Integrabillity.$stensorContractWith_1
                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                                              Integrabillity.$stensorContractWith_4
                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                                                              Integrabillity.areaMetricMetric2
                                                                                                                                                                                                              GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                                                              ww7
                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                                                                    <Index.Ind
                                                                                                                                                                                                                       (1
                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                       Index.Lind_20>_N
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                 <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                                                                            case {__scc {main:Integrabillity.areaMetricMetric1} False True} Tensor.$wtensorProductWith
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                              ww1
                                                                                                                                              ww9 of ww10 { Unit# ww11 ->
                                                                            (# ww11
                                                                                 `cast`
                                                                               (Data.Map.Internal.Map
                                                                                  ((,,,,,,,)
                                                                                     (Index.Ind
                                                                                        (Add0L (<0>_N))
                                                                                        <Index.Uind_20>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0L (<1>_N))
                                                                                        <Index.Lind_20>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0L (<0>_N))
                                                                                        <Index.Uind_19>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0L (<0>_N))
                                                                                        <Index.Lind_19>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0R (<1>_N))
                                                                                        <Index.Uind_9>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0R (<1>_N))
                                                                                        <Index.Lind_9>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0L (<1>_N))
                                                                                        <Index.Uind_3>_N)_N
                                                                                     (Index.Ind
                                                                                        (Add0L (<1>_N))
                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                  <GHC.Real.Rational>_R)_R #) } } } } } }) -}
72d8fc7257edbcb00f367f6e6c07a13f
  $wareaMetricMetric1intCond ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} True True} {__scc {main:Integrabillity.areaMetricMetric1intCond.intArea} True True} BasicTensors.interArea
                                                                                                                                                                  w
                                                                                                                                                                  w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.sum1} True False} BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.sum1} False True} Tensor.$wtensorProductWith
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                 ww1
                                                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.intMetric} True True} BasicTensors.interMetric
                                                                                                                                                                     w2
                                                                                                                                                                     w3 of ww8 { Tensor.Tensor ww9 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.sum2} True False} BasicTensors.delta_20 of ww10 { Tensor.Tensor ww11 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.sum2} False True} Tensor.$wtensorProductWith
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                 ww11
                                                                                                                                                                 ww9 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.diff} True False} {__scc {main:Integrabillity.areaMetricMetric1intCond.diff} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                                 @ 1)
                                                                                                                                                                                                                                                                                                                              Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                                                                                                              ww5
                                                                                                                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                                                                 <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                                                                              ww13
                                                                                                                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                                                                 <GHC.Real.Rational>_R)_R of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                                                   w2 of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.block2} True False} BasicTensors.invEta of ww16 { Tensor.Tensor ww17 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 2
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 1
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 2
                                                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                   ww17
                                                                                                                                                                   ww15 of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.block2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                                   @ 1
                                                                                                                                                                   @ 1
                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 0
                                                                                                                                                                   @ 1
                                                                                                                                                                   @ 0
                                                                                                                                                                   Integrabillity.$stensorContractWith_4
                                                                                                                                                                     `cast`
                                                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                   Integrabillity.$stensorContractWith_4
                                                                                                                                                                     `cast`
                                                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                   Integrabillity.areaMetricMetric1intCond2
                                                                                                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                   ww19
                                                                                                                                                                     `cast`
                                                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                                                      ((,,,,,,,)
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                          <1>_N)))
                                                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                                                         (Index.Ind
                                                                                                                                                                            (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                          <1>_N)))
                                                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                                                      <GHC.Real.Rational>_R)_R of ww20 { Unit# ww21 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.tens} True True} Tensor.$wtensorProductWith
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ 1
                                                                                                                                                                @ 1
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 1
                                                                                                                                                                @ 1
                                                                                                                                                                @ 1
                                                                                                                                                                @ 1
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 1
                                                                                                                                                                @ 0
                                                                                                                                                                @ 1
                                                                                                                                                                @ 1
                                                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                dt1
                                                                                                                                                                ww21 of ww22 { Unit# ww23 ->
                 case {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 2
                                                                                                                                                                 @ 1
                                                                                                                                                                 Integrabillity.$stensorContractWith_4
                                                                                                                                                                   `cast`
                                                                                                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                 Integrabillity.$stensorContractWith_4
                                                                                                                                                                   `cast`
                                                                                                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                 Integrabillity.areaMetricMetric2
                                                                                                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                 ww23
                                                                                                                                                                   `cast`
                                                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                                                    ((,,,,,,,)
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                                   <1>_N))
                                                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                                                       <Index.Ind
                                                                                                                                                                          (1
                                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                                          Index.Uind_3>_N
                                                                                                                                                                       <Index.Ind
                                                                                                                                                                          (1
                                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                                          Index.Lind_3>_N)_N
                                                                                                                                                                    <GHC.Real.Rational>_R)_R of ww24 { Unit# ww25 ->
                 {__scc {main:Integrabillity.areaMetricMetric1intCond} False True} {__scc {main:Integrabillity.areaMetricMetric1intCond.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            @ 1
                                                                                                                                                            @ 1
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 2
                                                                                                                                                            @ 1
                                                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                                                              `cast`
                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                                                              `cast`
                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                            Integrabillity.areaMetricMetric1intCond1
                                                                                                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                            ww25
                                                                                                                                                              `cast`
                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     1
                                                                                                                                                                     Index.Uind_20>_N
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     1
                                                                                                                                                                     Index.Lind_20>_N
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     0
                                                                                                                                                                     Index.Uind_19>_N
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     0
                                                                                                                                                                     Index.Lind_19>_N
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     2
                                                                                                                                                                     Index.Uind_9>_N
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     1
                                                                                                                                                                     Index.Lind_9>_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Sym (Add0L (<1>_N)))
                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Sym (Add0L (<1>_N)))
                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                               <GHC.Real.Rational>_R)_R } } } } } } } } } } } } }) -}
d7650b274ba3824b7249a4a3842ebdd1
  $wdensityEqnArea2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 0 0 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case ({__scc {main:Integrabillity.densityEqnArea2} True True} {__scc {main:Integrabillity.densityEqnArea2.tens} True False} Integrabillity.densityEqnArea6)
                        `cast`
                      (Tensor.Tensor
                         (AddDef (<1>_N, <1>_N))
                         (AddDef (<1>_N, <1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.block2} True False} {__scc {main:Integrabillity.densityEqnArea2.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                 w
                                                                                                                                                                                                                 w1 of ww2 { Tensor.Tensor ww3 ->
                 case BasicTensors.delta_20 of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                 ww3
                                                                                                                                                 ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.block3} True False} {__scc {main:Integrabillity.densityEqnArea2.block3} False True} Tensor.$wtensorProductWith
                                                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                                                                 ww5
                                                                                                                                                                                                                 ww3 of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.block3} False True} Tensor.$wtensorTranspose
                                                                                                                                                 @ 2
                                                                                                                                                 @ 2
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                 Integrabillity.densityEqnArea5
                                                                                                                                                 Integrabillity.areaMetricMetric2
                                                                                                                                                 ww9
                                                                                                                                                   `cast`
                                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                                    ((,,,,,,,)
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                   <1>_N))
                                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                   <1>_N))
                                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                                    <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                          1)
                                                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                                                     (Tensor.aSymTensor3
                                                                                                                                                                                                                                        @ 2
                                                                                                                                                                                                                                        @ 2
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 1
                                                                                                                                                                                                                                        @ 1)
                                                                                                                                                                                                                                     Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                     ww7
                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                                                                                                                        ((,,,,,,,)
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (AddDef (<1>_N,
                                                                                                                                                                                                                                                       <1>_N))
                                                                                                                                                                                                                                              <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (AddDef (<1>_N,
                                                                                                                                                                                                                                                       <1>_N))
                                                                                                                                                                                                                                              <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                                                                                                              <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                                                                                                              <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                                                                                                              <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                                                                                                              <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (Add0R (<1>_N))
                                                                                                                                                                                                                                              <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                           (Index.Ind
                                                                                                                                                                                                                                              (Add0R (<1>_N))
                                                                                                                                                                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                        <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                     ww11 of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                          2
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                          1)
                                                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                                                     (Tensor.aSymTensor3
                                                                                                                                                                                                                                        @ 2
                                                                                                                                                                                                                                        @ 2
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 1
                                                                                                                                                                                                                                        @ 1)
                                                                                                                                                                                                                                     Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                     ww1
                                                                                                                                                                                                                                     dt1 of dt2 { DEFAULT ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.tens2} True True} Tensor.$wtensorTranspose
                                                                                                                                               @ 2
                                                                                                                                               @ 2
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               Integrabillity.densityEqnArea5
                                                                                                                                               Integrabillity.areaMetricMetric2
                                                                                                                                               dt2 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                       @ (Index.Index
                                                                                                                                                                            2
                                                                                                                                                                            2
                                                                                                                                                                            0
                                                                                                                                                                            0
                                                                                                                                                                            0
                                                                                                                                                                            0
                                                                                                                                                                            1
                                                                                                                                                                            1)
                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                       (Tensor.aSymTensor3
                                                                                                                                                                          @ 2
                                                                                                                                                                          @ 2
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 1
                                                                                                                                                                          @ 1)
                                                                                                                                                                       Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                       dt2
                                                                                                                                                                       ww13 of dt3 { DEFAULT ->
                 (# dt3 #) } } } } } } } } } }) -}
01a8f85ae6af715d3825e5b7e027b006
  $wdensityEqnMetric2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 2 2 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case ({__scc {main:Integrabillity.densityEqnMetric2} True True} {__scc {main:Integrabillity.densityEqnMetric2.tens} True False} Integrabillity.densityEqnMetric6)
                        `cast`
                      (Tensor.Tensor
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (AddDef (<1>_N, <1>_N))
                         (AddDef (<1>_N, <1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.block2} True False} {__scc {main:Integrabillity.densityEqnMetric2.intMetric} True True} BasicTensors.interMetric
                                                                                                                                                                                                                         w
                                                                                                                                                                                                                         w1 of ww2 { Tensor.Tensor ww3 ->
                 case BasicTensors.delta_9 of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 1
                                                                                                                                                     @ 1
                                                                                                                                                     @ 1
                                                                                                                                                     @ 1
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 1
                                                                                                                                                     @ 1
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                     ww3
                                                                                                                                                     ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.block3} True False} {__scc {main:Integrabillity.densityEqnMetric2.block3} False True} Tensor.$wtensorProductWith
                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                                                                       ww5
                                                                                                                                                                                                                       ww3 of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.block3} False True} Tensor.$wtensorTranspose
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 0
                                                                                                                                                     @ 2
                                                                                                                                                     @ 2
                                                                                                                                                     @ 1
                                                                                                                                                     @ 1
                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                     Integrabillity.densityEqnMetric5
                                                                                                                                                     Integrabillity.areaMetricMetric2
                                                                                                                                                     ww9
                                                                                                                                                       `cast`
                                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                                        ((,,,,,,,)
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                              <Index.Uind_20>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                              <Index.Lind_20>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                              <Index.Uind_19>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                                              <Index.Lind_19>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (AddDef (<1>_N,
                                                                                                                                                                       <1>_N))
                                                                                                                                                              <Index.Uind_9>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (AddDef (<1>_N,
                                                                                                                                                                       <1>_N))
                                                                                                                                                              <Index.Lind_9>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (Add0L (<1>_N))
                                                                                                                                                              <Index.Uind_3>_N)_N
                                                                                                                                                           (Index.Ind
                                                                                                                                                              (Add0L (<1>_N))
                                                                                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                                                                                        <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                              1)
                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 2
                                                                                                                                                                                                                                            @ 2
                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                            @ 1)
                                                                                                                                                                                                                                         Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                         ww7
                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                                                                                                                            ((,,,,,,,)
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                  <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                  <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                  <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                  <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                                                                                                                           <1>_N))
                                                                                                                                                                                                                                                  <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                                                                                                                           <1>_N))
                                                                                                                                                                                                                                                  <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                                                                                                  <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                                                                                                  <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                            <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                         ww11 of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                              1)
                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 2
                                                                                                                                                                                                                                            @ 2
                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                            @ 1)
                                                                                                                                                                                                                                         Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                         ww1
                                                                                                                                                                                                                                         dt1 of dt2 { DEFAULT ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.tens2} True True} Tensor.$wtensorTranspose
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 2
                                                                                                                                                   @ 2
                                                                                                                                                   @ 1
                                                                                                                                                   @ 1
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   Integrabillity.densityEqnMetric5
                                                                                                                                                   Integrabillity.areaMetricMetric2
                                                                                                                                                   dt2 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                              0
                                                                                                                                                                              0
                                                                                                                                                                              0
                                                                                                                                                                              0
                                                                                                                                                                              2
                                                                                                                                                                              2
                                                                                                                                                                              1
                                                                                                                                                                              1)
                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                                            @ 0
                                                                                                                                                                            @ 0
                                                                                                                                                                            @ 0
                                                                                                                                                                            @ 0
                                                                                                                                                                            @ 2
                                                                                                                                                                            @ 2
                                                                                                                                                                            @ 1
                                                                                                                                                                            @ 1)
                                                                                                                                                                         Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                         dt2
                                                                                                                                                                         ww13 of dt3 { DEFAULT ->
                 (# dt3 #) } } } } } } } } } }) -}
68ab51a48f48a358a2e814af6741b617
  $wflatMetricInter ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 0 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.flatMetricInter} True True} {__scc {main:Integrabillity.flatMetricInter.tens} True False} {__scc {main:Integrabillity.flatMetricInter.metInter} True True} BasicTensors.interMetric
                                                                                                                                                                                                               w
                                                                                                                                                                                                               w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.flatMetricInter} False True} {__scc {main:Integrabillity.flatMetricInter.tens} False True} BasicTensors.$wetaAbs
                                                                                                                                               w1 of ww2 { Unit# ww3 ->
                 case {__scc {main:Integrabillity.flatMetricInter} False True} {__scc {main:Integrabillity.flatMetricInter.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww1
                                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 {__scc {main:Integrabillity.flatMetricInter} False True} Tensor.$wtensorContractWith_9
                                                                            @ 0
                                                                            @ 1
                                                                            @ GHC.Real.Rational
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 1
                                                                            @ 1
                                                                            Integrabillity.$stensorContractWith_1
                                                                              `cast`
                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                            Integrabillity.$stensorContractWith_4
                                                                              `cast`
                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                      <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                            Integrabillity.areaMetricMetric2
                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                            ww5
                                                                              `cast`
                                                                            (Data.Map.Internal.Map
                                                                               ((,,,,,,,)
                                                                                  (Index.Ind
                                                                                     (Add0L (<0>_N))
                                                                                     <Index.Uind_20>_N)_N
                                                                                  (Index.Ind
                                                                                     (Add0L (<0>_N))
                                                                                     <Index.Lind_20>_N)_N
                                                                                  (Index.Ind
                                                                                     (Add0L (<0>_N))
                                                                                     <Index.Uind_19>_N)_N
                                                                                  (Index.Ind
                                                                                     (Add0L (<0>_N))
                                                                                     <Index.Lind_19>_N)_N
                                                                                  (Index.Ind
                                                                                     (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                     <Index.Uind_9>_N)_N
                                                                                  <Index.Ind
                                                                                     (1
                                                                                      GHC.TypeNats.+ 1)
                                                                                     Index.Lind_9>_N
                                                                                  (Index.Ind
                                                                                     (Add0R (<1>_N))
                                                                                     <Index.Uind_3>_N)_N
                                                                                  (Index.Ind
                                                                                     (Add0R (<1>_N))
                                                                                     <Index.Lind_3>_N)_N)_N
                                                                               <GHC.Real.Rational>_R)_R } } }) -}
10c806c558bee33b56b67e94701427ff
  $wflatMetricInterProlong ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 2 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.flatMetricInterProlong} True True} {__scc {main:Integrabillity.flatMetricInterProlong.tens} True False} BasicTensors.delta_9 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.flatMetricInterProlong} False True} {__scc {main:Integrabillity.flatMetricInterProlong.flatInter} True True} Integrabillity.flatMetricInter
                                                                                                                                                                 w
                                                                                                                                                                 w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.flatMetricInterProlong} False True} {__scc {main:Integrabillity.flatMetricInterProlong.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 1
                                                                                                                                                             @ 1
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 0
                                                                                                                                                             @ 1
                                                                                                                                                             @ 1
                                                                                                                                                             @ 1
                                                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                             ww1
                                                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.flatMetricInterProlong} False True} {__scc {main:Integrabillity.flatMetricInterProlong.tensTrans} True True} Tensor.$wtensorTranspose
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 2
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 Integrabillity.densityEqnMetric5
                                                                                                                                                                 Integrabillity.areaMetricMetric2
                                                                                                                                                                 ww5
                                                                                                                                                                   `cast`
                                                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                                                    ((,,,,,,,)
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                                   <1>_N))
                                                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                                                    <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:Integrabillity.flatMetricInterProlong} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                   0
                                                                                                                                                                                   0
                                                                                                                                                                                   0
                                                                                                                                                                                   0
                                                                                                                                                                                   1
                                                                                                                                                                                   2
                                                                                                                                                                                   1
                                                                                                                                                                                   1)
                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 2
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 1)
                                                                                                                                                                              Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                              ww5
                                                                                                                                                                                `cast`
                                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                       <Index.Lind_20>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (AddDef (<1>_N,
                                                                                                                                                                                                <1>_N))
                                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                 <GHC.Real.Rational>_R)_R
                                                                                                                                                                              ww8 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } }) -}
301ddb530b672c468acd631a50e4d65b
  $windex2SparseAreaM ::
    Index.Linds_20 1
    -> Index.Uinds_9 1
    -> Index.Linds_9 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Uinds_9 1)
                   (ww2 :: Index.Linds_9 1)
                   (ww3 :: Index.Uinds_3 1)
                   (ww4 :: Index.Linds_3 1) ->
                 {__scc {main:Integrabillity.index2SparseAreaM} True False} (# {__scc {main:Integrabillity.index2SparseAreaM} False True} case {__scc {main:Integrabillity.index2SparseAreaM.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseAreaM.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Uind_9
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseAreaM.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Uind_9
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseAreaM.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseAreaM.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_3
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> let {
                                                                                                                                                      $j :: GHC.Prim.Int#
                                                                                                                                                            -> GHC.Types.Int
                                                                                                                                                        <join 1> {- Arity: 1,
                                                                                                                                                                    Strictness: <S,U>m -}
                                                                                                                                                      = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                        case {__scc {main:Integrabillity.index2SparseAreaM.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww4 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                        case {__scc {main:Integrabillity.index2SparseAreaM.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                      @ Index.Lind_3
                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                      s2 of wild5 {
                                                                                                                                                          GHC.Base.Nothing
                                                                                                                                                          -> case Data.Maybe.fromJust1
                                                                                                                                                             ret_ty GHC.Types.Int
                                                                                                                                                             of {}
                                                                                                                                                          GHC.Base.Just x2
                                                                                                                                                          -> case x2 of wild6 {
                                                                                                                                                               Index.L0_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       1#)
                                                                                                                                                               Index.L1_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       2#)
                                                                                                                                                               Index.L2_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       3#)
                                                                                                                                                               Index.L3_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseAreaM.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       4#) } } }
                                                                                                                                                    } in
                                                                                                                                                    case x1 of wild4 {
                                                                                                                                                      Index.U0_3
                                                                                                                                                      -> $j
                                                                                                                                                           0#
                                                                                                                                                      Index.U1_3
                                                                                                                                                      -> $j
                                                                                                                                                           1#
                                                                                                                                                      Index.U2_3
                                                                                                                                                      -> $j
                                                                                                                                                           2#
                                                                                                                                                      Index.U3_3
                                                                                                                                                      -> $j
                                                                                                                                                           3# } } } } } },
                                                                               {__scc {main:Integrabillity.index2SparseAreaM} False True} case {__scc {main:Integrabillity.index2SparseAreaM.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseAreaM.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Lind_20
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseAreaM.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseAreaM.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseAreaM.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseAreaM.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Lind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    GHC.Types.I#
                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseAreaM.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                               1#)
                                                                                                                                                            10#)
                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseAreaM.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                         1#
                                                                                                                                                                                                                         a#1)) } } } } } } #)) -}
2f648d0edccd2b6f5f9b8d341b10268f
  $windex2SparseAreaMintCond ::
    Index.Uinds_20 1
    -> Index.Linds_20 1
    -> Index.Uinds_9 2
    -> Index.Linds_9 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 1)
                   (ww1 :: Index.Linds_20 1)
                   (ww2 :: Index.Uinds_9 2)
                   (ww3 :: Index.Linds_9 1) ->
                 {__scc {main:Integrabillity.index2SparseAreaMintCond} True False} (# {__scc {main:Integrabillity.index2SparseAreaMintCond} False True} case {__scc {main:Integrabillity.index2SparseAreaMintCond.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                        case {__scc {main:Integrabillity.index2SparseAreaMintCond.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                             @ Index.Uind_20
                                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                                             s of wild1 {
                                                                                                                                                          GHC.Base.Nothing
                                                                                                                                                          -> case Data.Maybe.fromJust1
                                                                                                                                                             ret_ty GHC.Types.Int
                                                                                                                                                             of {}
                                                                                                                                                          GHC.Base.Just x
                                                                                                                                                          -> case {__scc {main:Integrabillity.index2SparseAreaMintCond.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                 @ Index.Uind_20
                                                                                                                                                                                                                                                                                 x of a# { DEFAULT ->
                                                                                                                                                             case {__scc {main:Integrabillity.index2SparseAreaMintCond.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                             case {__scc {main:Integrabillity.index2SparseAreaMintCond.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                  @ Index.Uind_9
                                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                                  s1 of wild3 {
                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                  ret_ty GHC.Types.Int
                                                                                                                                                                  of {}
                                                                                                                                                               GHC.Base.Just x1
                                                                                                                                                               -> case {__scc {main:Integrabillity.index2SparseAreaMintCond.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                      @ Index.Uind_9
                                                                                                                                                                                                                                                                                      x1 of a#1 { DEFAULT ->
                                                                                                                                                                  case {__scc {main:Integrabillity.index2SparseAreaMintCond.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild2 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                                  case {__scc {main:Integrabillity.index2SparseAreaMintCond.k} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                       @ Index.Uind_9
                                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                                       s2 of wild5 {
                                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                                       ret_ty GHC.Types.Int
                                                                                                                                                                       of {}
                                                                                                                                                                    GHC.Base.Just x2
                                                                                                                                                                    -> case {__scc {main:Integrabillity.index2SparseAreaMintCond.k} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                           @ Index.Uind_9
                                                                                                                                                                                                                                                                                           x2 of a#2 { DEFAULT ->
                                                                                                                                                                       GHC.Types.I#
                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseAreaMintCond.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            a#)
                                                                                                                                                                                     1#)
                                                                                                                                                                                  100#)
                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseAreaMintCond.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            a#1)
                                                                                                                                                                                     1#)
                                                                                                                                                                                  10#))
                                                                                                                                                                            ({__scc {main:Integrabillity.index2SparseAreaMintCond.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                   1#
                                                                                                                                                                                                                                                   a#2)) } } } } } } } } },
                                                                                      {__scc {main:Integrabillity.index2SparseAreaMintCond} False True} case {__scc {main:Integrabillity.index2SparseAreaMintCond.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                        case {__scc {main:Integrabillity.index2SparseAreaMintCond.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                             @ Index.Lind_20
                                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                                             s of wild1 {
                                                                                                                                                          GHC.Base.Nothing
                                                                                                                                                          -> case Data.Maybe.fromJust1
                                                                                                                                                             ret_ty GHC.Types.Int
                                                                                                                                                             of {}
                                                                                                                                                          GHC.Base.Just x
                                                                                                                                                          -> case {__scc {main:Integrabillity.index2SparseAreaMintCond.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                 @ Index.Lind_20
                                                                                                                                                                                                                                                                                 x of a# { DEFAULT ->
                                                                                                                                                             case {__scc {main:Integrabillity.index2SparseAreaMintCond.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                             case {__scc {main:Integrabillity.index2SparseAreaMintCond.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                  @ Index.Lind_9
                                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                                  s1 of wild3 {
                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                  ret_ty GHC.Types.Int
                                                                                                                                                                  of {}
                                                                                                                                                               GHC.Base.Just x1
                                                                                                                                                               -> case {__scc {main:Integrabillity.index2SparseAreaMintCond.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                      @ Index.Lind_9
                                                                                                                                                                                                                                                                                      x1 of a#1 { DEFAULT ->
                                                                                                                                                                  GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                             ({__scc {main:Integrabillity.index2SparseAreaMintCond.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                    a#)
                                                                                                                                                                             1#)
                                                                                                                                                                          10#)
                                                                                                                                                                       ({__scc {main:Integrabillity.index2SparseAreaMintCond.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                              a#1)) } } } } } } #)) -}
3ed61cd02de6e306158bf67b1ea24988
  $windex2SparseBlock1Eta ::
    Index.Linds_20 1
    -> Index.Uinds_3 2 -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1) (ww1 :: Index.Uinds_3 2) ->
                 {__scc {main:Integrabillity.index2SparseBlock1Eta} True False} (# {__scc {main:Integrabillity.index2SparseBlock1Eta} False True} case {__scc {main:Integrabillity.index2SparseBlock1Eta.r} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                  case {__scc {main:Integrabillity.index2SparseBlock1Eta.r} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                       ret_ty GHC.Types.Int
                                                                                                                                                       of {}
                                                                                                                                                    GHC.Base.Just x
                                                                                                                                                    -> let {
                                                                                                                                                         $j :: GHC.Prim.Int#
                                                                                                                                                               -> GHC.Types.Int
                                                                                                                                                           <join 1> {- Arity: 1,
                                                                                                                                                                       Strictness: <S,U>m -}
                                                                                                                                                         = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                           case {__scc {main:Integrabillity.index2SparseBlock1Eta.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                           case {__scc {main:Integrabillity.index2SparseBlock1Eta.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                             @ Index.Uind_3
                                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                                of {}
                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                                  Index.U0_3
                                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseBlock1Eta.r} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                    y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#)
                                                                                                                                                                          1#)
                                                                                                                                                                  Index.U1_3
                                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseBlock1Eta.r} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                    y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#)
                                                                                                                                                                          2#)
                                                                                                                                                                  Index.U2_3
                                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseBlock1Eta.r} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                    y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#)
                                                                                                                                                                          3#)
                                                                                                                                                                  Index.U3_3
                                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseBlock1Eta.r} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                    y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#)
                                                                                                                                                                          4#) } } }
                                                                                                                                                       } in
                                                                                                                                                       case x of wild2 {
                                                                                                                                                         Index.U0_3
                                                                                                                                                         -> $j
                                                                                                                                                              0#
                                                                                                                                                         Index.U1_3
                                                                                                                                                         -> $j
                                                                                                                                                              1#
                                                                                                                                                         Index.U2_3
                                                                                                                                                         -> $j
                                                                                                                                                              2#
                                                                                                                                                         Index.U3_3
                                                                                                                                                         -> $j
                                                                                                                                                              3# } } },
                                                                                   {__scc {main:Integrabillity.index2SparseBlock1Eta} False True} {__scc {main:Integrabillity.index2SparseBlock1Eta.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                          ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                                                                       -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                          @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                          x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                          GHC.Types.I#
                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                                                                                               a#) } } } #)) -}
2990ec64a74048c0fe220d59baff6076
  $windex2SparseCond1 ::
    Index.Uinds_20 1
    -> Index.Linds_20 1
    -> Index.Uinds_9 2
    -> Index.Linds_9 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 1)
                   (ww1 :: Index.Linds_20 1)
                   (ww2 :: Index.Uinds_9 2)
                   (ww3 :: Index.Linds_9 1) ->
                 {__scc {main:Integrabillity.index2SparseCond1} True False} (# {__scc {main:Integrabillity.index2SparseCond1} False True} case {__scc {main:Integrabillity.index2SparseCond1.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseCond1.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Uind_20
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseCond1.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond1.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond1.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseCond1.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Uind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseCond1.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild2 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseCond1.k} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                  @ Index.Uind_9
                                                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                                                  s2 of wild5 {
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      -> case Data.Maybe.fromJust1
                                                                                                                                                         ret_ty GHC.Types.Int
                                                                                                                                                         of {}
                                                                                                                                                      GHC.Base.Just x2
                                                                                                                                                      -> case {__scc {main:Integrabillity.index2SparseCond1.k} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                      @ Index.Uind_9
                                                                                                                                                                                                                                                                      x2 of a#2 { DEFAULT ->
                                                                                                                                                         GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.*#
                                                                                                                                                                    (GHC.Prim.-#
                                                                                                                                                                       ({__scc {main:Integrabillity.index2SparseCond1.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                       a#)
                                                                                                                                                                       1#)
                                                                                                                                                                    100#)
                                                                                                                                                                 (GHC.Prim.*#
                                                                                                                                                                    (GHC.Prim.-#
                                                                                                                                                                       ({__scc {main:Integrabillity.index2SparseCond1.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                       a#1)
                                                                                                                                                                       1#)
                                                                                                                                                                    10#))
                                                                                                                                                              ({__scc {main:Integrabillity.index2SparseCond1.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                              a#2)) } } } } } } } } },
                                                                               {__scc {main:Integrabillity.index2SparseCond1} False True} case {__scc {main:Integrabillity.index2SparseCond1.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseCond1.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Lind_20
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseCond1.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond1.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond1.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseCond1.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Lind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    GHC.Types.I#
                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseCond1.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                               1#)
                                                                                                                                                            10#)
                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseCond1.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                         1#
                                                                                                                                                                                                                         a#1)) } } } } } } #)) -}
94d0c65332a4f588abf8dda074c9b354
  $windex2SparseCond1Zero ::
    Index.Linds_20 1
    -> Index.Uinds_9 1 -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1) (ww1 :: Index.Uinds_9 1) ->
                 {__scc {main:Integrabillity.index2SparseCond1Zero} True False} (# {__scc {main:Integrabillity.index2SparseCond1Zero} False True} {__scc {main:Integrabillity.index2SparseCond1Zero.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                      @ Index.Uind_9
                                                                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                          ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                                                                       -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                          @ Index.Uind_9
                                                                                                                                                                                                                                                                                                                                                          x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                          GHC.Types.I#
                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                                                                                               a#) } } },
                                                                                   {__scc {main:Integrabillity.index2SparseCond1Zero} False True} {__scc {main:Integrabillity.index2SparseCond1Zero.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                          ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                                                                       -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                          @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                          x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                          GHC.Types.I#
                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                                                                                               a#) } } } #)) -}
f3274d6e28631458f583274cb13a1b5d
  $windex2SparseCond2 ::
    Index.Uinds_20 1
    -> Index.Linds_20 1
    -> Index.Uinds_9 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 1)
                   (ww1 :: Index.Linds_20 1)
                   (ww2 :: Index.Uinds_9 1)
                   (ww3 :: Index.Uinds_3 1)
                   (ww4 :: Index.Linds_3 1) ->
                 {__scc {main:Integrabillity.index2SparseCond2} True False} (# {__scc {main:Integrabillity.index2SparseCond2} False True} case {__scc {main:Integrabillity.index2SparseCond2.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseCond2.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Uind_20
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseCond2.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond2.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond2.k} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseCond2.k} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Uind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseCond2.r} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseCond2.r} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                  s2 of wild5 {
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      -> case Data.Maybe.fromJust1
                                                                                                                                                         ret_ty GHC.Types.Int
                                                                                                                                                         of {}
                                                                                                                                                      GHC.Base.Just x2
                                                                                                                                                      -> case x2 of wild6 {
                                                                                                                                                           Index.U0_3
                                                                                                                                                           -> GHC.Types.I#
                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      347#
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:Integrabillity.index2SparseCond2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                            a#)
                                                                                                                                                                            1#)
                                                                                                                                                                         40#))
                                                                                                                                                                   (GHC.Prim.*#
                                                                                                                                                                      (GHC.Prim.-#
                                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseCond2.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                         1#
                                                                                                                                                                                                                                         a#1)
                                                                                                                                                                         1#)
                                                                                                                                                                      4#))
                                                                                                                                                           Index.U1_3
                                                                                                                                                           -> GHC.Types.I#
                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                                         347#
                                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseCond2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                               a#)
                                                                                                                                                                               1#)
                                                                                                                                                                            40#))
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:Integrabillity.index2SparseCond2.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                            a#1)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#))
                                                                                                                                                                   1#)
                                                                                                                                                           Index.U2_3
                                                                                                                                                           -> GHC.Types.I#
                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                                         347#
                                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseCond2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                               a#)
                                                                                                                                                                               1#)
                                                                                                                                                                            40#))
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:Integrabillity.index2SparseCond2.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                            a#1)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#))
                                                                                                                                                                   2#)
                                                                                                                                                           Index.U3_3
                                                                                                                                                           -> GHC.Types.I#
                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                                         347#
                                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseCond2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                               a#)
                                                                                                                                                                               1#)
                                                                                                                                                                            40#))
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:Integrabillity.index2SparseCond2.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                            a#1)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#))
                                                                                                                                                                   3#) } } } } } } } } },
                                                                               {__scc {main:Integrabillity.index2SparseCond2} False True} case {__scc {main:Integrabillity.index2SparseCond2.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseCond2.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Lind_20
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseCond2.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond2.s} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww4 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond2.s} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Lind_3
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case x1 of wild4 {
                                                                                                                                                      Index.L0_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                    21#
                                                                                                                                                                    (GHC.Prim.*#
                                                                                                                                                                       (GHC.Prim.-#
                                                                                                                                                                          ({__scc {main:Integrabillity.index2SparseCond2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                          a#)
                                                                                                                                                                          1#)
                                                                                                                                                                       4#))
                                                                                                                                                                 1#)
                                                                                                                                                              1#)
                                                                                                                                                      Index.L1_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                    21#
                                                                                                                                                                    (GHC.Prim.*#
                                                                                                                                                                       (GHC.Prim.-#
                                                                                                                                                                          ({__scc {main:Integrabillity.index2SparseCond2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                          a#)
                                                                                                                                                                          1#)
                                                                                                                                                                       4#))
                                                                                                                                                                 2#)
                                                                                                                                                              1#)
                                                                                                                                                      Index.L2_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                    21#
                                                                                                                                                                    (GHC.Prim.*#
                                                                                                                                                                       (GHC.Prim.-#
                                                                                                                                                                          ({__scc {main:Integrabillity.index2SparseCond2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                          a#)
                                                                                                                                                                          1#)
                                                                                                                                                                       4#))
                                                                                                                                                                 3#)
                                                                                                                                                              1#)
                                                                                                                                                      Index.L3_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                    21#
                                                                                                                                                                    (GHC.Prim.*#
                                                                                                                                                                       (GHC.Prim.-#
                                                                                                                                                                          ({__scc {main:Integrabillity.index2SparseCond2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                          a#)
                                                                                                                                                                          1#)
                                                                                                                                                                       4#))
                                                                                                                                                                 4#)
                                                                                                                                                              1#) } } } } } } #)) -}
c9e01884551048e1f2ecae37c759b901
  $windex2SparseCond3 ::
    Index.Uinds_20 1
    -> Index.Linds_20 1
    -> Index.Uinds_9 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 1)
                   (ww1 :: Index.Linds_20 1)
                   (ww2 :: Index.Uinds_9 1) ->
                 {__scc {main:Integrabillity.index2SparseCond3} True False} (# {__scc {main:Integrabillity.index2SparseCond3} False True} case {__scc {main:Integrabillity.index2SparseCond3.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseCond3.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Uind_20
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseCond3.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond3.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseCond3.k} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseCond3.k} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Uind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    GHC.Types.I#
                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseCond3.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                               1#)
                                                                                                                                                            10#)
                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseCond3.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                         1#
                                                                                                                                                                                                                         a#1)) } } } } } },
                                                                               {__scc {main:Integrabillity.index2SparseCond3} False True} {__scc {main:Integrabillity.index2SparseCond3.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                         case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                          @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                          0#
                                                                                                                                                                                                                                                                                                                                          s of wild1 {
                                                                                                                                                                                                                                                                                           GHC.Base.Nothing
                                                                                                                                                                                                                                                                                           -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                              ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                              of {}
                                                                                                                                                                                                                                                                                           GHC.Base.Just x
                                                                                                                                                                                                                                                                                           -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                              @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                              x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                              GHC.Types.I#
                                                                                                                                                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                   1#
                                                                                                                                                                                                                                                                                                   a#) } } } #)) -}
203cd2aec7846d86dd928b1f6b34a05a
  $windex2SparseDens1 ::
    Index.Uinds_9 1
    -> Index.Linds_9 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_9 1)
                   (ww1 :: Index.Linds_9 1)
                   (ww2 :: Index.Uinds_3 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:Integrabillity.index2SparseDens1} True False} (# {__scc {main:Integrabillity.index2SparseDens1} False True} case {__scc {main:Integrabillity.index2SparseDens1.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseDens1.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Uind_9
                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseDens1.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Uind_9
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseDens1.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseDens1.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_3
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> let {
                                                                                                                                                      $j :: GHC.Prim.Int#
                                                                                                                                                            -> GHC.Types.Int
                                                                                                                                                        <join 1> {- Arity: 1,
                                                                                                                                                                    Strictness: <S,U>m -}
                                                                                                                                                      = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                        case {__scc {main:Integrabillity.index2SparseDens1.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                        case {__scc {main:Integrabillity.index2SparseDens1.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                      @ Index.Lind_3
                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                      s2 of wild5 {
                                                                                                                                                          GHC.Base.Nothing
                                                                                                                                                          -> case Data.Maybe.fromJust1
                                                                                                                                                             ret_ty GHC.Types.Int
                                                                                                                                                             of {}
                                                                                                                                                          GHC.Base.Just x2
                                                                                                                                                          -> case x2 of wild6 {
                                                                                                                                                               Index.L0_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       1#)
                                                                                                                                                               Index.L1_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       2#)
                                                                                                                                                               Index.L2_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       3#)
                                                                                                                                                               Index.L3_3
                                                                                                                                                               -> GHC.Types.I#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                a#)
                                                                                                                                                                                1#)
                                                                                                                                                                             16#)
                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                1#
                                                                                                                                                                                                                                                y)
                                                                                                                                                                                1#)
                                                                                                                                                                             4#))
                                                                                                                                                                       4#) } } }
                                                                                                                                                    } in
                                                                                                                                                    case x1 of wild4 {
                                                                                                                                                      Index.U0_3
                                                                                                                                                      -> $j
                                                                                                                                                           0#
                                                                                                                                                      Index.U1_3
                                                                                                                                                      -> $j
                                                                                                                                                           1#
                                                                                                                                                      Index.U2_3
                                                                                                                                                      -> $j
                                                                                                                                                           2#
                                                                                                                                                      Index.U3_3
                                                                                                                                                      -> $j
                                                                                                                                                           3# } } } } } },
                                                                               {__scc {main:Integrabillity.index2SparseDens1} False True} {__scc {main:Integrabillity.index2SparseDens1.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                         case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                          @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                          0#
                                                                                                                                                                                                                                                                                                                                          s of wild1 {
                                                                                                                                                                                                                                                                                           GHC.Base.Nothing
                                                                                                                                                                                                                                                                                           -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                              ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                              of {}
                                                                                                                                                                                                                                                                                           GHC.Base.Just x
                                                                                                                                                                                                                                                                                           -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                              @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                              x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                              GHC.Types.I#
                                                                                                                                                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                   1#
                                                                                                                                                                                                                                                                                                   a#) } } } #)) -}
7fc1881987ff5debd775c4d530a5589c
  $windex2SparseDens1Area ::
    Index.Uinds_20 1
    -> Index.Linds_20 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 1)
                   (ww1 :: Index.Linds_20 1)
                   (ww2 :: Index.Uinds_3 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:Integrabillity.index2SparseDens1Area} True False} (# {__scc {main:Integrabillity.index2SparseDens1Area} False True} case {__scc {main:Integrabillity.index2SparseDens1Area.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                  case {__scc {main:Integrabillity.index2SparseDens1Area.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                    @ Index.Uind_20
                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                       ret_ty GHC.Types.Int
                                                                                                                                                       of {}
                                                                                                                                                    GHC.Base.Just x
                                                                                                                                                    -> case {__scc {main:Integrabillity.index2SparseDens1Area.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                        @ Index.Uind_20
                                                                                                                                                                                                                                                                        x of a# { DEFAULT ->
                                                                                                                                                       case {__scc {main:Integrabillity.index2SparseDens1Area.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                       case {__scc {main:Integrabillity.index2SparseDens1Area.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                         @ Index.Uind_3
                                                                                                                                                                                                                                                                         0#
                                                                                                                                                                                                                                                                         s1 of wild3 {
                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                         -> case Data.Maybe.fromJust1
                                                                                                                                                            ret_ty GHC.Types.Int
                                                                                                                                                            of {}
                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                         -> let {
                                                                                                                                                              $j :: GHC.Prim.Int#
                                                                                                                                                                    -> GHC.Types.Int
                                                                                                                                                                <join 1> {- Arity: 1,
                                                                                                                                                                            Strictness: <S,U>m -}
                                                                                                                                                              = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                                case {__scc {main:Integrabillity.index2SparseDens1Area.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                                case {__scc {main:Integrabillity.index2SparseDens1Area.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                                  s2 of wild5 {
                                                                                                                                                                  GHC.Base.Nothing
                                                                                                                                                                  -> case Data.Maybe.fromJust1
                                                                                                                                                                     ret_ty GHC.Types.Int
                                                                                                                                                                     of {}
                                                                                                                                                                  GHC.Base.Just x2
                                                                                                                                                                  -> case x2 of wild6 {
                                                                                                                                                                       Index.L0_3
                                                                                                                                                                       -> GHC.Types.I#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            y)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     4#))
                                                                                                                                                                               1#)
                                                                                                                                                                       Index.L1_3
                                                                                                                                                                       -> GHC.Types.I#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            y)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     4#))
                                                                                                                                                                               2#)
                                                                                                                                                                       Index.L2_3
                                                                                                                                                                       -> GHC.Types.I#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            y)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     4#))
                                                                                                                                                                               3#)
                                                                                                                                                                       Index.L3_3
                                                                                                                                                                       -> GHC.Types.I#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens1Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            y)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     4#))
                                                                                                                                                                               4#) } } }
                                                                                                                                                            } in
                                                                                                                                                            case x1 of wild4 {
                                                                                                                                                              Index.U0_3
                                                                                                                                                              -> $j
                                                                                                                                                                   0#
                                                                                                                                                              Index.U1_3
                                                                                                                                                              -> $j
                                                                                                                                                                   1#
                                                                                                                                                              Index.U2_3
                                                                                                                                                              -> $j
                                                                                                                                                                   2#
                                                                                                                                                              Index.U3_3
                                                                                                                                                              -> $j
                                                                                                                                                                   3# } } } } } },
                                                                                   {__scc {main:Integrabillity.index2SparseDens1Area} False True} {__scc {main:Integrabillity.index2SparseDens1Area.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                          ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                                                                       -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                          @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                          x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                          GHC.Types.I#
                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                                                                                               a#) } } } #)) -}
90563b0c9dee541c8bf5688595b2b05c
  $windex2SparseDens2 ::
    Index.Uinds_9 2
    -> Index.Linds_9 2
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_9 2)
                   (ww1 :: Index.Linds_9 2)
                   (ww2 :: Index.Uinds_3 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:Integrabillity.index2SparseDens2} True False} (# {__scc {main:Integrabillity.index2SparseDens2} False True} case {__scc {main:Integrabillity.index2SparseDens2.c} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseDens2.c} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Uind_9
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseDens2.c} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Uind_9
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseDens2.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseDens2.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseDens2.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Uind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseDens2.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseDens2.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                  s2 of wild5 {
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      -> case Data.Maybe.fromJust1
                                                                                                                                                         ret_ty GHC.Types.Int
                                                                                                                                                         of {}
                                                                                                                                                      GHC.Base.Just x2
                                                                                                                                                      -> let {
                                                                                                                                                           $j :: GHC.Prim.Int#
                                                                                                                                                                 -> GHC.Types.Int
                                                                                                                                                             <join 1> {- Arity: 1,
                                                                                                                                                                         Strictness: <S,U>m -}
                                                                                                                                                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                             case {__scc {main:Integrabillity.index2SparseDens2.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild6 { Index.UnsafemkInd s3 ->
                                                                                                                                                             case {__scc {main:Integrabillity.index2SparseDens2.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                           @ Index.Lind_3
                                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                                           s3 of wild7 {
                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                  ret_ty GHC.Types.Int
                                                                                                                                                                  of {}
                                                                                                                                                               GHC.Base.Just x3
                                                                                                                                                               -> case x3 of wild8 {
                                                                                                                                                                    Index.L0_3
                                                                                                                                                                    -> GHC.Types.I#
                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     160#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#1)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#))
                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseDens2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                                     y)
                                                                                                                                                                                     1#)
                                                                                                                                                                                  4#))
                                                                                                                                                                            1#)
                                                                                                                                                                    Index.L1_3
                                                                                                                                                                    -> GHC.Types.I#
                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     160#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#1)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#))
                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseDens2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                                     y)
                                                                                                                                                                                     1#)
                                                                                                                                                                                  4#))
                                                                                                                                                                            2#)
                                                                                                                                                                    Index.L2_3
                                                                                                                                                                    -> GHC.Types.I#
                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     160#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#1)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#))
                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseDens2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                                     y)
                                                                                                                                                                                     1#)
                                                                                                                                                                                  4#))
                                                                                                                                                                            3#)
                                                                                                                                                                    Index.L3_3
                                                                                                                                                                    -> GHC.Types.I#
                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     160#)
                                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                                     (GHC.Prim.-#
                                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseDens2.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#1)
                                                                                                                                                                                        1#)
                                                                                                                                                                                     16#))
                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseDens2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                                     y)
                                                                                                                                                                                     1#)
                                                                                                                                                                                  4#))
                                                                                                                                                                            4#) } } }
                                                                                                                                                         } in
                                                                                                                                                         case x2 of wild6 {
                                                                                                                                                           Index.U0_3
                                                                                                                                                           -> $j
                                                                                                                                                                0#
                                                                                                                                                           Index.U1_3
                                                                                                                                                           -> $j
                                                                                                                                                                1#
                                                                                                                                                           Index.U2_3
                                                                                                                                                           -> $j
                                                                                                                                                                2#
                                                                                                                                                           Index.U3_3
                                                                                                                                                           -> $j
                                                                                                                                                                3# } } } } } } } } },
                                                                               {__scc {main:Integrabillity.index2SparseDens2} False True} case {__scc {main:Integrabillity.index2SparseDens2.d} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:Integrabillity.index2SparseDens2.d} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                        @ Index.Lind_9
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        s of wild1 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:Integrabillity.index2SparseDens2.d} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                            @ Index.Lind_9
                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseDens2.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:Integrabillity.index2SparseDens2.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case {__scc {main:Integrabillity.index2SparseDens2.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                 @ Index.Lind_9
                                                                                                                                                                                                                                                                 x1 of a#1 { DEFAULT ->
                                                                                                                                                    GHC.Types.I#
                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                         (GHC.Prim.*#
                                                                                                                                                            (GHC.Prim.-#
                                                                                                                                                               ({__scc {main:Integrabillity.index2SparseDens2.d} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                               1#)
                                                                                                                                                            10#)
                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseDens2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                         1#
                                                                                                                                                                                                                         a#1)) } } } } } } #)) -}
baa927c664cece22ec1aedc03b00df31
  $windex2SparseDens2Area ::
    Index.Uinds_20 2
    -> Index.Linds_20 2
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 2)
                   (ww1 :: Index.Linds_20 2)
                   (ww2 :: Index.Uinds_3 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:Integrabillity.index2SparseDens2Area} True False} (# {__scc {main:Integrabillity.index2SparseDens2Area} False True} case {__scc {main:Integrabillity.index2SparseDens2Area.c} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                  case {__scc {main:Integrabillity.index2SparseDens2Area.c} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                    @ Index.Uind_20
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                       ret_ty GHC.Types.Int
                                                                                                                                                       of {}
                                                                                                                                                    GHC.Base.Just x
                                                                                                                                                    -> case {__scc {main:Integrabillity.index2SparseDens2Area.c} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                        @ Index.Uind_20
                                                                                                                                                                                                                                                                        x of a# { DEFAULT ->
                                                                                                                                                       case {__scc {main:Integrabillity.index2SparseDens2Area.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                       case {__scc {main:Integrabillity.index2SparseDens2Area.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                         @ Index.Uind_20
                                                                                                                                                                                                                                                                         0#
                                                                                                                                                                                                                                                                         s1 of wild3 {
                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                         -> case Data.Maybe.fromJust1
                                                                                                                                                            ret_ty GHC.Types.Int
                                                                                                                                                            of {}
                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                         -> case {__scc {main:Integrabillity.index2SparseDens2Area.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                             @ Index.Uind_20
                                                                                                                                                                                                                                                                             x1 of a#1 { DEFAULT ->
                                                                                                                                                            case {__scc {main:Integrabillity.index2SparseDens2Area.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                            case {__scc {main:Integrabillity.index2SparseDens2Area.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                              @ Index.Uind_3
                                                                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                                                                              s2 of wild5 {
                                                                                                                                                              GHC.Base.Nothing
                                                                                                                                                              -> case Data.Maybe.fromJust1
                                                                                                                                                                 ret_ty GHC.Types.Int
                                                                                                                                                                 of {}
                                                                                                                                                              GHC.Base.Just x2
                                                                                                                                                              -> let {
                                                                                                                                                                   $j :: GHC.Prim.Int#
                                                                                                                                                                         -> GHC.Types.Int
                                                                                                                                                                     <join 1> {- Arity: 1,
                                                                                                                                                                                 Strictness: <S,U>m -}
                                                                                                                                                                   = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                                     case {__scc {main:Integrabillity.index2SparseDens2Area.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild6 { Index.UnsafemkInd s3 ->
                                                                                                                                                                     case {__scc {main:Integrabillity.index2SparseDens2Area.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                                                       s3 of wild7 {
                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                          ret_ty GHC.Types.Int
                                                                                                                                                                          of {}
                                                                                                                                                                       GHC.Base.Just x3
                                                                                                                                                                       -> case x3 of wild8 {
                                                                                                                                                                            Index.L0_3
                                                                                                                                                                            -> GHC.Types.I#
                                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                                                   ({__scc {main:Integrabillity.index2SparseDens2Area.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                       a#)
                                                                                                                                                                                                   1#)
                                                                                                                                                                                                16#)
                                                                                                                                                                                             21#)
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens2Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    a#1)
                                                                                                                                                                                                1#)
                                                                                                                                                                                             16#))
                                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                                             ({__scc {main:Integrabillity.index2SparseDens2Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                 y)
                                                                                                                                                                                             1#)
                                                                                                                                                                                          4#))
                                                                                                                                                                                    1#)
                                                                                                                                                                            Index.L1_3
                                                                                                                                                                            -> GHC.Types.I#
                                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                                                   ({__scc {main:Integrabillity.index2SparseDens2Area.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                       a#)
                                                                                                                                                                                                   1#)
                                                                                                                                                                                                16#)
                                                                                                                                                                                             21#)
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens2Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    a#1)
                                                                                                                                                                                                1#)
                                                                                                                                                                                             16#))
                                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                                             ({__scc {main:Integrabillity.index2SparseDens2Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                 y)
                                                                                                                                                                                             1#)
                                                                                                                                                                                          4#))
                                                                                                                                                                                    2#)
                                                                                                                                                                            Index.L2_3
                                                                                                                                                                            -> GHC.Types.I#
                                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                                                   ({__scc {main:Integrabillity.index2SparseDens2Area.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                       a#)
                                                                                                                                                                                                   1#)
                                                                                                                                                                                                16#)
                                                                                                                                                                                             21#)
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens2Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    a#1)
                                                                                                                                                                                                1#)
                                                                                                                                                                                             16#))
                                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                                             ({__scc {main:Integrabillity.index2SparseDens2Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                 y)
                                                                                                                                                                                             1#)
                                                                                                                                                                                          4#))
                                                                                                                                                                                    3#)
                                                                                                                                                                            Index.L3_3
                                                                                                                                                                            -> GHC.Types.I#
                                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                                                   ({__scc {main:Integrabillity.index2SparseDens2Area.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                       a#)
                                                                                                                                                                                                   1#)
                                                                                                                                                                                                16#)
                                                                                                                                                                                             21#)
                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                             (GHC.Prim.-#
                                                                                                                                                                                                ({__scc {main:Integrabillity.index2SparseDens2Area.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    a#1)
                                                                                                                                                                                                1#)
                                                                                                                                                                                             16#))
                                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                                             ({__scc {main:Integrabillity.index2SparseDens2Area.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                 y)
                                                                                                                                                                                             1#)
                                                                                                                                                                                          4#))
                                                                                                                                                                                    4#) } } }
                                                                                                                                                                 } in
                                                                                                                                                                 case x2 of wild6 {
                                                                                                                                                                   Index.U0_3
                                                                                                                                                                   -> $j
                                                                                                                                                                        0#
                                                                                                                                                                   Index.U1_3
                                                                                                                                                                   -> $j
                                                                                                                                                                        1#
                                                                                                                                                                   Index.U2_3
                                                                                                                                                                   -> $j
                                                                                                                                                                        2#
                                                                                                                                                                   Index.U3_3
                                                                                                                                                                   -> $j
                                                                                                                                                                        3# } } } } } } } } },
                                                                                   {__scc {main:Integrabillity.index2SparseDens2Area} False True} case {__scc {main:Integrabillity.index2SparseDens2Area.d} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                  case {__scc {main:Integrabillity.index2SparseDens2Area.d} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                       ret_ty GHC.Types.Int
                                                                                                                                                       of {}
                                                                                                                                                    GHC.Base.Just x
                                                                                                                                                    -> case {__scc {main:Integrabillity.index2SparseDens2Area.d} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                        @ Index.Lind_20
                                                                                                                                                                                                                                                                        x of a# { DEFAULT ->
                                                                                                                                                       case {__scc {main:Integrabillity.index2SparseDens2Area.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                       case {__scc {main:Integrabillity.index2SparseDens2Area.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                         @ Index.Lind_20
                                                                                                                                                                                                                                                                         0#
                                                                                                                                                                                                                                                                         s1 of wild3 {
                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                         -> case Data.Maybe.fromJust1
                                                                                                                                                            ret_ty GHC.Types.Int
                                                                                                                                                            of {}
                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                         -> case {__scc {main:Integrabillity.index2SparseDens2Area.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                             @ Index.Lind_20
                                                                                                                                                                                                                                                                             x1 of a#1 { DEFAULT ->
                                                                                                                                                            GHC.Types.I#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.*#
                                                                                                                                                                    (GHC.Prim.-#
                                                                                                                                                                       ({__scc {main:Integrabillity.index2SparseDens2Area.d} False True} GHC.Prim.+#
                                                                                                                                                                                                                                           1#
                                                                                                                                                                                                                                           a#)
                                                                                                                                                                       1#)
                                                                                                                                                                    21#)
                                                                                                                                                                 ({__scc {main:Integrabillity.index2SparseDens2Area.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                     a#1)) } } } } } } #)) -}
a2105aa1f7af3724229b1ca8481a3fde
  $windex2SparseProjector ::
    Index.Uinds_20 1
    -> Index.Uinds_9 1
    -> Index.Linds_3 6
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><L,U(U)>,
     Inline: [0] -}
40804e2cc90cd21cdc0475e9d68b2a8a
  $windex2SparseProjector2 ::
    Index.Uinds_20 1
    -> Index.Linds_3 4 -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 1) (ww1 :: Index.Linds_3 4) ->
                 {__scc {main:Integrabillity.index2SparseProjector2} True False} (# {__scc {main:Integrabillity.index2SparseProjector2} False True} {__scc {main:Integrabillity.index2SparseProjector2.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                        case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                         @ Index.Uind_20
                                                                                                                                                                                                                                                                                                                                                         0#
                                                                                                                                                                                                                                                                                                                                                         s of wild1 {
                                                                                                                                                                                                                                                                                                          GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                          -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                             ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                             of {}
                                                                                                                                                                                                                                                                                                          GHC.Base.Just x
                                                                                                                                                                                                                                                                                                          -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                             @ Index.Uind_20
                                                                                                                                                                                                                                                                                                                                                             x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                             GHC.Types.I#
                                                                                                                                                                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                                                                                                  a#) } } },
                                                                                    {__scc {main:Integrabillity.index2SparseProjector2} False True} case {__scc {main:Integrabillity.index2SparseProjector2.i} True True} let {
                                                                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                       case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                                                                              s of wild1 {
                                                                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                         GHC.Base.Just x
                                                                                                                                                                                                                                                                         -> x } }
                                                                                                                                                                                                                          } in
                                                                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric4
                                                                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric3
                                                                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                                                                    -> Integrabillity.densityEqnArea5
                                                                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                                                                    -> Integrabillity.index2SparseProjector1 } of wild { GHC.Types.I# x ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseProjector2.j} True True} let {
                                                                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case ww1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                       case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                                                              s of wild2 {
                                                                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                                                                                                                                         -> x1 } }
                                                                                                                                                                                                                          } in
                                                                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric4
                                                                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric3
                                                                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                                                                    -> Integrabillity.densityEqnArea5
                                                                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                                                                    -> Integrabillity.index2SparseProjector1 } of wild1 { GHC.Types.I# x1 ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseProjector2.k} True True} let {
                                                                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case ww1 of wild2 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                       case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                              2#
                                                                                                                                                                                                                                                                              s of wild3 {
                                                                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                         GHC.Base.Just x2
                                                                                                                                                                                                                                                                         -> x2 } }
                                                                                                                                                                                                                          } in
                                                                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild2 {
                                                                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric4
                                                                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric3
                                                                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                                                                    -> Integrabillity.densityEqnArea5
                                                                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                                                                    -> Integrabillity.index2SparseProjector1 } of wild2 { GHC.Types.I# x2 ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseProjector2.l} True True} let {
                                                                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case ww1 of wild3 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                       case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                              3#
                                                                                                                                                                                                                                                                              s of wild4 {
                                                                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                         GHC.Base.Just x3
                                                                                                                                                                                                                                                                         -> x3 } }
                                                                                                                                                                                                                          } in
                                                                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild3 {
                                                                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric4
                                                                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                                                                    -> Integrabillity.areaMetricMetric3
                                                                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                                                                    -> Integrabillity.densityEqnArea5
                                                                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                                                                    -> Integrabillity.index2SparseProjector1 } of wild3 { GHC.Types.I# y ->
                                                                                                                                                    GHC.Types.I#
                                                                                                                                                      (GHC.Prim.+#
                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                               (GHC.Prim.+#
                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                     x
                                                                                                                                                                     64#)
                                                                                                                                                                  (GHC.Prim.*#
                                                                                                                                                                     x1
                                                                                                                                                                     16#))
                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                  x2
                                                                                                                                                                  4#))
                                                                                                                                                            y)
                                                                                                                                                         1#) } } } } #)) -}
e340a1702d756140f013be79091de116
  $windex2SparseintCond2_1 ::
    Index.Uinds_20 2
    -> Index.Linds_20 2
    -> Index.Uinds_9 2
    -> Index.Linds_9 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_20 2)
                   (ww1 :: Index.Linds_20 2)
                   (ww2 :: Index.Uinds_9 2)
                   (ww3 :: Index.Linds_9 1) ->
                 {__scc {main:Integrabillity.index2SparseintCond2_1} True False} (# {__scc {main:Integrabillity.index2SparseintCond2_1} False True} case {__scc {main:Integrabillity.index2SparseintCond2_1.e} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseintCond2_1.e} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                       @ Index.Uind_20
                                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                                       s of wild1 {
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      -> case Data.Maybe.fromJust1
                                                                                                                                                         ret_ty GHC.Types.Int
                                                                                                                                                         of {}
                                                                                                                                                      GHC.Base.Just x
                                                                                                                                                      -> case {__scc {main:Integrabillity.index2SparseintCond2_1.e} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                           @ Index.Uind_20
                                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                                                                                                         case {__scc {main:Integrabillity.index2SparseintCond2_1.f} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                         case {__scc {main:Integrabillity.index2SparseintCond2_1.f} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                            s1 of wild3 {
                                                                                                                                                           GHC.Base.Nothing
                                                                                                                                                           -> case Data.Maybe.fromJust1
                                                                                                                                                              ret_ty GHC.Types.Int
                                                                                                                                                              of {}
                                                                                                                                                           GHC.Base.Just x1
                                                                                                                                                           -> case {__scc {main:Integrabillity.index2SparseintCond2_1.f} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                @ Index.Uind_20
                                                                                                                                                                                                                                                                                x1 of a#1 { DEFAULT ->
                                                                                                                                                              case {__scc {main:Integrabillity.index2SparseintCond2_1.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                              case {__scc {main:Integrabillity.index2SparseintCond2_1.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                 @ Index.Uind_9
                                                                                                                                                                                                                                                                                 0#
                                                                                                                                                                                                                                                                                 s2 of wild5 {
                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                   ret_ty GHC.Types.Int
                                                                                                                                                                   of {}
                                                                                                                                                                GHC.Base.Just x2
                                                                                                                                                                -> case {__scc {main:Integrabillity.index2SparseintCond2_1.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                     @ Index.Uind_9
                                                                                                                                                                                                                                                                                     x2 of a#2 { DEFAULT ->
                                                                                                                                                                   case {__scc {main:Integrabillity.index2SparseintCond2_1.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild4 of wild6 { Index.UnsafemkInd s3 ->
                                                                                                                                                                   case {__scc {main:Integrabillity.index2SparseintCond2_1.k} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                      @ Index.Uind_9
                                                                                                                                                                                                                                                                                      1#
                                                                                                                                                                                                                                                                                      s3 of wild7 {
                                                                                                                                                                     GHC.Base.Nothing
                                                                                                                                                                     -> case Data.Maybe.fromJust1
                                                                                                                                                                        ret_ty GHC.Types.Int
                                                                                                                                                                        of {}
                                                                                                                                                                     GHC.Base.Just x3
                                                                                                                                                                     -> case {__scc {main:Integrabillity.index2SparseintCond2_1.k} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                          @ Index.Uind_9
                                                                                                                                                                                                                                                                                          x3 of a#3 { DEFAULT ->
                                                                                                                                                                        GHC.Types.I#
                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                                   (GHC.Prim.*#
                                                                                                                                                                                      (GHC.Prim.-#
                                                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseintCond2_1.e} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                                              a#)
                                                                                                                                                                                         1#)
                                                                                                                                                                                      2100#)
                                                                                                                                                                                   (GHC.Prim.*#
                                                                                                                                                                                      (GHC.Prim.-#
                                                                                                                                                                                         ({__scc {main:Integrabillity.index2SparseintCond2_1.f} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                                              a#1)
                                                                                                                                                                                         1#)
                                                                                                                                                                                      100#))
                                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                                      ({__scc {main:Integrabillity.index2SparseintCond2_1.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                           1#
                                                                                                                                                                                                                                                           a#2)
                                                                                                                                                                                      1#)
                                                                                                                                                                                   10#))
                                                                                                                                                                             ({__scc {main:Integrabillity.index2SparseintCond2_1.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                                  a#3)) } } } } } } } } } } } },
                                                                                    {__scc {main:Integrabillity.index2SparseintCond2_1} False True} case {__scc {main:Integrabillity.index2SparseintCond2_1.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                    case {__scc {main:Integrabillity.index2SparseintCond2_1.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                       @ Index.Lind_20
                                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                                       s of wild1 {
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      -> case Data.Maybe.fromJust1
                                                                                                                                                         ret_ty GHC.Types.Int
                                                                                                                                                         of {}
                                                                                                                                                      GHC.Base.Just x
                                                                                                                                                      -> case {__scc {main:Integrabillity.index2SparseintCond2_1.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                           @ Index.Lind_20
                                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                                                                                                         case {__scc {main:Integrabillity.index2SparseintCond2_1.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                         case {__scc {main:Integrabillity.index2SparseintCond2_1.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                            s1 of wild3 {
                                                                                                                                                           GHC.Base.Nothing
                                                                                                                                                           -> case Data.Maybe.fromJust1
                                                                                                                                                              ret_ty GHC.Types.Int
                                                                                                                                                              of {}
                                                                                                                                                           GHC.Base.Just x1
                                                                                                                                                           -> case {__scc {main:Integrabillity.index2SparseintCond2_1.b} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                @ Index.Lind_20
                                                                                                                                                                                                                                                                                x1 of a#1 { DEFAULT ->
                                                                                                                                                              case {__scc {main:Integrabillity.index2SparseintCond2_1.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild4 { Index.UnsafemkInd s2 ->
                                                                                                                                                              case {__scc {main:Integrabillity.index2SparseintCond2_1.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                 @ Index.Lind_9
                                                                                                                                                                                                                                                                                 0#
                                                                                                                                                                                                                                                                                 s2 of wild5 {
                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                   ret_ty GHC.Types.Int
                                                                                                                                                                   of {}
                                                                                                                                                                GHC.Base.Just x2
                                                                                                                                                                -> case {__scc {main:Integrabillity.index2SparseintCond2_1.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                     @ Index.Lind_9
                                                                                                                                                                                                                                                                                     x2 of a#2 { DEFAULT ->
                                                                                                                                                                   GHC.Types.I#
                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                        (GHC.Prim.+#
                                                                                                                                                                           (GHC.Prim.*#
                                                                                                                                                                              (GHC.Prim.-#
                                                                                                                                                                                 ({__scc {main:Integrabillity.index2SparseintCond2_1.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                      1#
                                                                                                                                                                                                                                                      a#)
                                                                                                                                                                                 1#)
                                                                                                                                                                              210#)
                                                                                                                                                                           (GHC.Prim.*#
                                                                                                                                                                              (GHC.Prim.-#
                                                                                                                                                                                 ({__scc {main:Integrabillity.index2SparseintCond2_1.b} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                      1#
                                                                                                                                                                                                                                                      a#1)
                                                                                                                                                                                 1#)
                                                                                                                                                                              10#))
                                                                                                                                                                        ({__scc {main:Integrabillity.index2SparseintCond2_1.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                                             1#
                                                                                                                                                                                                                                             a#2)) } } } } } } } } } #)) -}
9ff65623f870a402d60bac736fabad83
  $windex2SparseintCond2_1Symbol ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Index.Uinds_20 2
    -> Index.Linds_20 3
    -> Index.Uinds_9 2
    -> Index.Linds_9 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 5,
     Strictness: <L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
d56cbcfe8c087f4bea1068308ef7c7cd
  $windex2SparseintCond2_1SymbolPure ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Index.Uinds_20 2
    -> Index.Linds_20 3
    -> Index.Uinds_9 1
    -> Index.Linds_9 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 7,
     Strictness: <L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0] -}
bc2e579fac6607f345f1a13a5c0fc5c3
  $windex2SparseintCond2_1SymbolRed ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Index.Uinds_20 1
    -> Index.Linds_20 2
    -> Index.Uinds_9 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (ww :: Index.Uinds_20 1)
                   (ww1 :: Index.Linds_20 2)
                   (ww2 :: Index.Uinds_9 1) ->
                 {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed} True False} (# {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed} False True} case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.e} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                      case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.e} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                  @ Index.Uind_20
                                                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                                                           of {}
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.e} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                      @ Index.Uind_20
                                                                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                                                           case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.k} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                           case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.k} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                       @ Index.Uind_9
                                                                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                                                of {}
                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                             -> case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.k} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                           @ Index.Uind_9
                                                                                                                                                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                                                                                                                                GHC.Types.I#
                                                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                                                     (GHC.Prim.*#
                                                                                                                                                                                        10#
                                                                                                                                                                                        (GHC.Prim.-#
                                                                                                                                                                                           ({__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.e} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                         1#
                                                                                                                                                                                                                                                                         a#)
                                                                                                                                                                                           1#))
                                                                                                                                                                                     ({__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.k} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                   1#
                                                                                                                                                                                                                                                                   a#1)) } } } } } },
                                                                                             {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed} False True} case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                      case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                                                           of {}
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                                                           case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.c} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                           case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.c} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                       @ Index.Lind_20
                                                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                                                of {}
                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                             -> case {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.c} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                           @ Index.Lind_20
                                                                                                                                                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                                                                                                                                let {
                                                                                                                                                                                  c :: GHC.Prim.Int#
                                                                                                                                                                                  = {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.c} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                 a#1
                                                                                                                                                                                } in
                                                                                                                                                                                let {
                                                                                                                                                                                  c1 :: GHC.Types.Int
                                                                                                                                                                                  = GHC.Types.I#
                                                                                                                                                                                      c
                                                                                                                                                                                } in
                                                                                                                                                                                let {
                                                                                                                                                                                  a :: GHC.Prim.Int#
                                                                                                                                                                                  = {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                } in
                                                                                                                                                                                let {
                                                                                                                                                                                  a1 :: GHC.Types.Int
                                                                                                                                                                                  = GHC.Types.I#
                                                                                                                                                                                      a
                                                                                                                                                                                } in
                                                                                                                                                                                {__scc {main:Integrabillity.index2SparseintCond2_1SymbolRed.x} True True} case GHC.Prim.<=#
                                                                                                                                                                                                                                                                 a
                                                                                                                                                                                                                                                                 c of lwild {
                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                            -> Integrabillity.$wpoly_go13
                                                                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                                                                 c
                                                                                                                                                                                                                                                                 a1
                                                                                                                                                                                                                                                                 w
                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                            -> Integrabillity.$wpoly_go13
                                                                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                                                                 a
                                                                                                                                                                                                                                                                 c1
                                                                                                                                                                                                                                                                 w } } } } } } } #)) -}
1e00edc4e3a6cffb941e76e11d5a864f
  $wint1Test ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.int1Test} True True} {__scc {main:Integrabillity.int1Test.prod} True False} {__scc {main:Integrabillity.int1Test.flat} True True} EquivarianceEqns.eqn1_1Flat
                                                                                                                                                                                      w
                                                                                                                                                                                      w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.invEta of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.int1Test} False True} {__scc {main:Integrabillity.int1Test.sym} True True} BasicTensors.symI_2
                                                                                                                               w2 of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.int1Test} False True} {__scc {main:Integrabillity.int1Test.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww3
                                                                                                                                 ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.int1Test} False True} {__scc {main:Integrabillity.int1Test.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww7
                                                                                                                                   `cast`
                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                    ((,,,,,,,)
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<2>_N))
                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<2>_N))
                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.int1Test} False True} Tensor.$wtensorContractWith_3
                                                                          @ 2
                                                                          @ 2
                                                                          @ GHC.Real.Rational
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.int1Test1
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww9
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Lind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<1>_N))
                                                                                   <Index.Uind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.int1Test} False True} Tensor.$wtensorContractWith_3
                                                                          @ 1
                                                                          @ 1
                                                                          @ GHC.Real.Rational
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_4
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          Integrabillity.$stensorContractWith_4
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          Integrabillity.areaMetricMetric1intCond2
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww11
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Uind_20>_N
                                                                                <Index.Ind
                                                                                   1
                                                                                   Index.Lind_20>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Uind_19>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Lind_19>_N
                                                                                <Index.Ind
                                                                                   1 Index.Uind_9>_N
                                                                                <Index.Ind
                                                                                   0 Index.Lind_9>_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<1>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<1>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww12 { Unit# ww13 ->
                 {__scc {main:Integrabillity.int1Test} False True} Tensor.$wtensorContractWith_3
                                                                     @ 0
                                                                     @ 0
                                                                     @ GHC.Real.Rational
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     Integrabillity.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     Integrabillity.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     Integrabillity.areaMetricMetric1intCond1
                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                     ww13
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           <Index.Ind
                                                                              0 Index.Uind_20>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_20>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_9>_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <GHC.Real.Rational>_R)_R } } } } } } }) -}
324ab85f38a6fa9eaecad7fdcc7a99d7
  $wint1Test2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.int1Test2} True True} {__scc {main:Integrabillity.int1Test2.prod} True False} BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} {__scc {main:Integrabillity.int1Test2.flat} True True} EquivarianceEqns.eqn1_1Flat
                                                                                                                                  w
                                                                                                                                  w1 of ww2 { Tensor.Tensor ww3 ->
                 case BasicTensors.invEta of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} {__scc {main:Integrabillity.int1Test2.sym} True True} BasicTensors.interI_2
                                                                                                                                 w2 of ww6 { Tensor.Tensor ww7 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} {__scc {main:Integrabillity.int1Test2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww5
                                                                                                                                   ww7 of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} {__scc {main:Integrabillity.int1Test2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww3
                                                                                                                                   ww9
                                                                                                                                     `cast`
                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                      ((,,,,,,,)
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0R (<2>_N))
                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<2>_N))
                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} {__scc {main:Integrabillity.int1Test2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 3
                                                                                                                                   @ 3
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww11
                                                                                                                                     `cast`
                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                      ((,,,,,,,)
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0R (<1>_N))
                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                     <2>_N))
                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                     <2>_N))
                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} Tensor.$wtensorContractWith_3
                                                                           @ 2
                                                                           @ 2
                                                                           @ GHC.Real.Rational
                                                                           @ 1
                                                                           @ 2
                                                                           @ 0
                                                                           @ 0
                                                                           @ 1
                                                                           @ 0
                                                                           Integrabillity.$stensorContractWith_8
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                           Integrabillity.$stensorContractWith_8
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                           Integrabillity.int1Test1
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           ww13
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 (Index.Ind
                                                                                    (Add0R (<1>_N))
                                                                                    <Index.Uind_20>_N)_N
                                                                                 (Index.Ind
                                                                                    (AddDef (<1>_N,
                                                                                             <1>_N))
                                                                                    <Index.Lind_20>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Uind_19>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Lind_19>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<1>_N))
                                                                                    <Index.Uind_9>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Lind_9>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<3>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<3>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R of ww14 { Unit# ww15 ->
                 case {__scc {main:Integrabillity.int1Test2} False True} Tensor.$wtensorContractWith_3
                                                                           @ 1
                                                                           @ 1
                                                                           @ GHC.Real.Rational
                                                                           @ 1
                                                                           @ 2
                                                                           @ 0
                                                                           @ 0
                                                                           @ 1
                                                                           @ 0
                                                                           Integrabillity.$stensorContractWith_4
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           Integrabillity.$stensorContractWith_4
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           Integrabillity.areaMetricMetric1intCond2
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           ww15
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_20>_N
                                                                                 <Index.Ind
                                                                                    2
                                                                                    Index.Lind_20>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Uind_19>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_19>_N
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_9>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_9>_N
                                                                                 (Index.Ind
                                                                                    (Sym (AddDef (<1>_N,
                                                                                                  <1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Sym (AddDef (<1>_N,
                                                                                                  <1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R of ww16 { Unit# ww17 ->
                 {__scc {main:Integrabillity.int1Test2} False True} Tensor.$wtensorContractWith_3
                                                                      @ 0
                                                                      @ 0
                                                                      @ GHC.Real.Rational
                                                                      @ 1
                                                                      @ 2
                                                                      @ 0
                                                                      @ 0
                                                                      @ 1
                                                                      @ 0
                                                                      Integrabillity.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      Integrabillity.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      Integrabillity.areaMetricMetric1intCond1
                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                      ww17
                                                                        `cast`
                                                                      (Data.Map.Internal.Map
                                                                         ((,,,,,,,)
                                                                            <Index.Ind
                                                                               1 Index.Uind_20>_N
                                                                            <Index.Ind
                                                                               2 Index.Lind_20>_N
                                                                            <Index.Ind
                                                                               0 Index.Uind_19>_N
                                                                            <Index.Ind
                                                                               0 Index.Lind_19>_N
                                                                            <Index.Ind
                                                                               1 Index.Uind_9>_N
                                                                            <Index.Ind
                                                                               0 Index.Lind_9>_N
                                                                            (Index.Ind
                                                                               (Sym (Add0L (<1>_N)))
                                                                               <Index.Uind_3>_N)_N
                                                                            (Index.Ind
                                                                               (Sym (Add0L (<1>_N)))
                                                                               <Index.Lind_3>_N)_N)_N
                                                                         <GHC.Real.Rational>_R)_R } } } } } } } } }) -}
95aafdc95b37aab52e8af78fcdb76a3b
  $wint1Test3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.int1Test3} True True} {__scc {main:Integrabillity.int1Test3.tens} True False} {__scc {main:Integrabillity.int1Test3.prod} True False} BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.flat} True True} EquivarianceEqns.eqn1_1Flat
                                                                                                                                  w
                                                                                                                                  w1 of ww2 { Tensor.Tensor ww3 ->
                 case BasicTensors.invEta of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.sym} True True} BasicTensors.interI_2
                                                                                                                                 w2 of ww6 { Tensor.Tensor ww7 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww5
                                                                                                                                   ww7 of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww3
                                                                                                                                   ww9
                                                                                                                                     `cast`
                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                      ((,,,,,,,)
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0R (<2>_N))
                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<2>_N))
                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 3
                                                                                                                                   @ 3
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww11
                                                                                                                                     `cast`
                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                      ((,,,,,,,)
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0R (<1>_N))
                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                     <2>_N))
                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                     <2>_N))
                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.tens} False True} Tensor.$wtensorTranspose
                                                                                                                                   @ 1
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 3
                                                                                                                                   @ 3
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   Integrabillity.densityEqnArea5
                                                                                                                                   Integrabillity.areaMetricMetric2
                                                                                                                                   ww13
                                                                                                                                     `cast`
                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                      ((,,,,,,,)
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0R (<1>_N))
                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                     <1>_N))
                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<3>_N))
                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<3>_N))
                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww14 { Unit# ww15 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} {__scc {main:Integrabillity.int1Test3.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                              1
                                                                                                                                                                                                                              2
                                                                                                                                                                                                                              0
                                                                                                                                                                                                                              0
                                                                                                                                                                                                                              1
                                                                                                                                                                                                                              0
                                                                                                                                                                                                                              3
                                                                                                                                                                                                                              3)
                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                            @ 2
                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                            @ 3
                                                                                                                                                                                                                            @ 3)
                                                                                                                                                                                                                         Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                         ww13
                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                                                                                                            ((,,,,,,,)
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                                                                                  <Index.Uind_20>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                                                                                                           <1>_N))
                                                                                                                                                                                                                                  <Index.Lind_20>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                  <Index.Uind_19>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                  <Index.Lind_19>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                                                                                  <Index.Uind_9>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                  <Index.Lind_9>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0L (<3>_N))
                                                                                                                                                                                                                                  <Index.Uind_3>_N)_N
                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                  (Add0L (<3>_N))
                                                                                                                                                                                                                                  <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                            <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                         ww15 of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.int1Test3} False True} Tensor.$wtensorContractWith_3
                                                                           @ 2
                                                                           @ 2
                                                                           @ GHC.Real.Rational
                                                                           @ 1
                                                                           @ 2
                                                                           @ 0
                                                                           @ 0
                                                                           @ 1
                                                                           @ 0
                                                                           Integrabillity.$stensorContractWith_8
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                           Integrabillity.$stensorContractWith_8
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                           Integrabillity.int1Test1
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           dt1
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_20>_N
                                                                                 <Index.Ind
                                                                                    2
                                                                                    Index.Lind_20>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Uind_19>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_19>_N
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_9>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_9>_N
                                                                                 (Index.Ind
                                                                                    (Sym (AddDef (<2>_N,
                                                                                                  <1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Sym (AddDef (<2>_N,
                                                                                                  <1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R of ww16 { Unit# ww17 ->
                 case {__scc {main:Integrabillity.int1Test3} False True} Tensor.$wtensorContractWith_3
                                                                           @ 1
                                                                           @ 1
                                                                           @ GHC.Real.Rational
                                                                           @ 1
                                                                           @ 2
                                                                           @ 0
                                                                           @ 0
                                                                           @ 1
                                                                           @ 0
                                                                           Integrabillity.$stensorContractWith_4
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           Integrabillity.$stensorContractWith_4
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           Integrabillity.areaMetricMetric1intCond2
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           ww17
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_20>_N
                                                                                 <Index.Ind
                                                                                    2
                                                                                    Index.Lind_20>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Uind_19>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_19>_N
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_9>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_9>_N
                                                                                 (Index.Ind
                                                                                    (Sym (AddDef (<1>_N,
                                                                                                  <1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Sym (AddDef (<1>_N,
                                                                                                  <1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R of ww18 { Unit# ww19 ->
                 {__scc {main:Integrabillity.int1Test3} False True} Tensor.$wtensorContractWith_3
                                                                      @ 0
                                                                      @ 0
                                                                      @ GHC.Real.Rational
                                                                      @ 1
                                                                      @ 2
                                                                      @ 0
                                                                      @ 0
                                                                      @ 1
                                                                      @ 0
                                                                      Integrabillity.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      Integrabillity.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      Integrabillity.areaMetricMetric1intCond1
                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                      ww19
                                                                        `cast`
                                                                      (Data.Map.Internal.Map
                                                                         ((,,,,,,,)
                                                                            <Index.Ind
                                                                               1 Index.Uind_20>_N
                                                                            <Index.Ind
                                                                               2 Index.Lind_20>_N
                                                                            <Index.Ind
                                                                               0 Index.Uind_19>_N
                                                                            <Index.Ind
                                                                               0 Index.Lind_19>_N
                                                                            <Index.Ind
                                                                               1 Index.Uind_9>_N
                                                                            <Index.Ind
                                                                               0 Index.Lind_9>_N
                                                                            (Index.Ind
                                                                               (Sym (Add0L (<1>_N)))
                                                                               <Index.Uind_3>_N)_N
                                                                            (Index.Ind
                                                                               (Sym (Add0L (<1>_N)))
                                                                               <Index.Lind_3>_N)_N)_N
                                                                         <GHC.Real.Rational>_R)_R } } } } } } } } } } }) -}
880e8c1a4b4a2829384117917f7f9f04
  $wint1Zero ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.int1Zero} True True} {__scc {main:Integrabillity.int1Zero.prod} True False} {__scc {main:Integrabillity.int1Zero.flat} True True} EquivarianceEqns.eqn1_1Flat
                                                                                                                                                                                      w
                                                                                                                                                                                      w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.invEta of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.int1Zero} False True} {__scc {main:Integrabillity.int1Zero.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                   w2 of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.int1Zero} False True} {__scc {main:Integrabillity.int1Zero.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww3
                                                                                                                                 ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.int1Zero} False True} {__scc {main:Integrabillity.int1Zero.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww7
                                                                                                                                   `cast`
                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                    ((,,,,,,,)
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<2>_N))
                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<2>_N))
                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.int1Zero} False True} Tensor.$wtensorContractWith_3
                                                                          @ 2
                                                                          @ 2
                                                                          @ GHC.Real.Rational
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.int1Test1
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww9
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Lind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<1>_N))
                                                                                   <Index.Uind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.int1Zero} False True} Tensor.$wtensorContractWith_3
                                                                          @ 1
                                                                          @ 1
                                                                          @ GHC.Real.Rational
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_4
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          Integrabillity.$stensorContractWith_4
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          Integrabillity.areaMetricMetric1intCond2
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww11
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Uind_20>_N
                                                                                <Index.Ind
                                                                                   1
                                                                                   Index.Lind_20>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Uind_19>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Lind_19>_N
                                                                                <Index.Ind
                                                                                   1 Index.Uind_9>_N
                                                                                <Index.Ind
                                                                                   0 Index.Lind_9>_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<1>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<1>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww12 { Unit# ww13 ->
                 {__scc {main:Integrabillity.int1Zero} False True} Tensor.$wtensorContractWith_3
                                                                     @ 0
                                                                     @ 0
                                                                     @ GHC.Real.Rational
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     Integrabillity.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     Integrabillity.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     Integrabillity.areaMetricMetric1intCond1
                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                     ww13
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           <Index.Ind
                                                                              0 Index.Uind_20>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_20>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_9>_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <GHC.Real.Rational>_R)_R } } } } } } }) -}
ad5726282d7d2bc7c0b2325a2091eb3b
  $wintCond1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.intCond1} True True} {__scc {main:Integrabillity.intCond1.intArea} True True} BasicTensors.interArea
                                                                                                                                  w
                                                                                                                                  w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.part1} True False} BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.part1} False True} Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww1
                                                                                                                                  ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.intMetric} True True} BasicTensors.interMetric
                                                                                                                                     w2
                                                                                                                                     w3 of ww8 { Tensor.Tensor ww9 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.part2} True False} BasicTensors.delta_20 of ww10 { Tensor.Tensor ww11 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.part2} False True} Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww9
                                                                                                                                  ww11 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.block1} True False} {__scc {main:Integrabillity.intCond1.block1} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                  @ (Index.Index
                                                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                                                       0
                                                                                                                                                                                                                                                                                       0
                                                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                  (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                                                     @ 1)
                                                                                                                                                                                                                                                                                  Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                                                                  ww5
                                                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                     ((,,,,,,,)
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                     <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                                  ww13
                                                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                     ((,,,,,,,)
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                     <GHC.Real.Rational>_R)_R of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                   w2 of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.block2} True False} BasicTensors.invEta of ww16 { Tensor.Tensor ww17 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww17
                                                                                                                                   ww15 of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.block2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   Integrabillity.$stensorContractWith_4
                                                                                                                                     `cast`
                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                   Integrabillity.$stensorContractWith_4
                                                                                                                                     `cast`
                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                   Integrabillity.areaMetricMetric1intCond2
                                                                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                   ww19
                                                                                                                                     `cast`
                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                      ((,,,,,,,)
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                          <1>_N)))
                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                         (Index.Ind
                                                                                                                                            (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                          <1>_N)))
                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww20 { Unit# ww21 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.tens} True True} Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                dt1
                                                                                                                                ww21 of ww22 { Unit# ww23 ->
                 case {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 1
                                                                                                                                 Integrabillity.$stensorContractWith_4
                                                                                                                                   `cast`
                                                                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                 Integrabillity.$stensorContractWith_4
                                                                                                                                   `cast`
                                                                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                 Integrabillity.int1Test1
                                                                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                 ww23
                                                                                                                                   `cast`
                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                    ((,,,,,,,)
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                   <1>_N))
                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                       <Index.Ind
                                                                                                                                          (1
                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                          Index.Uind_3>_N
                                                                                                                                       <Index.Ind
                                                                                                                                          (1
                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                          Index.Lind_3>_N)_N
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww24 { Unit# ww25 ->
                 {__scc {main:Integrabillity.intCond1} False True} {__scc {main:Integrabillity.intCond1.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                            @ 0
                                                                                                                            @ 0
                                                                                                                            @ GHC.Real.Rational
                                                                                                                            @ 1
                                                                                                                            @ 1
                                                                                                                            @ 0
                                                                                                                            @ 0
                                                                                                                            @ 2
                                                                                                                            @ 1
                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                              `cast`
                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                              `cast`
                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                            Integrabillity.areaMetricMetric1intCond1
                                                                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                                                                            ww25
                                                                                                                              `cast`
                                                                                                                            (Data.Map.Internal.Map
                                                                                                                               ((,,,,,,,)
                                                                                                                                  <Index.Ind
                                                                                                                                     1
                                                                                                                                     Index.Uind_20>_N
                                                                                                                                  <Index.Ind
                                                                                                                                     1
                                                                                                                                     Index.Lind_20>_N
                                                                                                                                  <Index.Ind
                                                                                                                                     0
                                                                                                                                     Index.Uind_19>_N
                                                                                                                                  <Index.Ind
                                                                                                                                     0
                                                                                                                                     Index.Lind_19>_N
                                                                                                                                  <Index.Ind
                                                                                                                                     2
                                                                                                                                     Index.Uind_9>_N
                                                                                                                                  <Index.Ind
                                                                                                                                     1
                                                                                                                                     Index.Lind_9>_N
                                                                                                                                  (Index.Ind
                                                                                                                                     (Sym (Add0L (<1>_N)))
                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                  (Index.Ind
                                                                                                                                     (Sym (Add0L (<1>_N)))
                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                               <GHC.Real.Rational>_R)_R } } } } } } } } } } } } }) -}
a04f1020afab22e59ab3b97f5c0484f8
  $wintCond1RelFac ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.intCond1RelFac} True True} {__scc {main:Integrabillity.intCond1RelFac.intArea} True True} BasicTensors.interAreanoFactor
                                                                                                                                              w
                                                                                                                                              w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.part1} True False} BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.part1} False True} Tensor.$wtensorProductWith
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                              ww1
                                                                                                                                              ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.intMetric} True True} BasicTensors.interMetricnoFactor
                                                                                                                                                 w2
                                                                                                                                                 w3 of ww8 { Tensor.Tensor ww9 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.part2} True False} BasicTensors.delta_20 of ww10 { Tensor.Tensor ww11 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.part2} False True} Tensor.$wtensorProductWith
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                              ww9
                                                                                                                                              ww11 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.part2} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} Integrabillity.intCond1RelFac_go8
                                                                                                                                                                                                                                                                             ww13
                                                                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                ((,,,,,,,)
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                <GHC.Real.Rational>_R)_R of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.block1} True False} {__scc {main:Integrabillity.intCond1RelFac.block1} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                    @ (Index.Index
                                                                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                    (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                                                                       @ 1)
                                                                                                                                                                                                                                                                                                    Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                                                                                    ww5
                                                                                                                                                                                                                                                                                                      `cast`
                                                                                                                                                                                                                                                                                                    (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                       ((,,,,,,,)
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                             <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                             <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                             <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                             <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                             <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                             <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                             <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                                          (Index.Ind
                                                                                                                                                                                                                                                                                                             (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                             <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                                       <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                                                    dt1 of dt2 { DEFAULT ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                               w2 of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.block2} True False} BasicTensors.invEta of ww16 { Tensor.Tensor ww17 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 2
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 2
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww17
                                                                                                                                               ww15 of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.block2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               Integrabillity.$stensorContractWith_4
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_4
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               Integrabillity.areaMetricMetric1intCond2
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww19
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww20 { Unit# ww21 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.tens} True True} Tensor.$wtensorProductWith
                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                            @ 1
                                                                                                                                            @ 1
                                                                                                                                            @ 0
                                                                                                                                            @ 0
                                                                                                                                            @ 1
                                                                                                                                            @ 1
                                                                                                                                            @ 1
                                                                                                                                            @ 1
                                                                                                                                            @ 0
                                                                                                                                            @ 0
                                                                                                                                            @ 0
                                                                                                                                            @ 0
                                                                                                                                            @ 1
                                                                                                                                            @ 0
                                                                                                                                            @ 1
                                                                                                                                            @ 1
                                                                                                                                            GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                            dt2
                                                                                                                                            ww21 of ww22 { Unit# ww23 ->
                 case {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 2
                                                                                                                                             @ 1
                                                                                                                                             Integrabillity.$stensorContractWith_4
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                             Integrabillity.$stensorContractWith_4
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                             Integrabillity.int1Test1
                                                                                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                             ww23
                                                                                                                                               `cast`
                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                ((,,,,,,,)
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                               <1>_N))
                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      (1
                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                      Index.Uind_3>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      (1
                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                      Index.Lind_3>_N)_N
                                                                                                                                                <GHC.Real.Rational>_R)_R of ww24 { Unit# ww25 ->
                 {__scc {main:Integrabillity.intCond1RelFac} False True} {__scc {main:Integrabillity.intCond1RelFac.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                        @ 0
                                                                                                                                        @ 0
                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                        @ 1
                                                                                                                                        @ 1
                                                                                                                                        @ 0
                                                                                                                                        @ 0
                                                                                                                                        @ 2
                                                                                                                                        @ 1
                                                                                                                                        Integrabillity.$stensorContractWith_1
                                                                                                                                          `cast`
                                                                                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                  <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                        Integrabillity.$stensorContractWith_1
                                                                                                                                          `cast`
                                                                                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                  <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                        Integrabillity.areaMetricMetric1intCond1
                                                                                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                        ww25
                                                                                                                                          `cast`
                                                                                                                                        (Data.Map.Internal.Map
                                                                                                                                           ((,,,,,,,)
                                                                                                                                              <Index.Ind
                                                                                                                                                 1
                                                                                                                                                 Index.Uind_20>_N
                                                                                                                                              <Index.Ind
                                                                                                                                                 1
                                                                                                                                                 Index.Lind_20>_N
                                                                                                                                              <Index.Ind
                                                                                                                                                 0
                                                                                                                                                 Index.Uind_19>_N
                                                                                                                                              <Index.Ind
                                                                                                                                                 0
                                                                                                                                                 Index.Lind_19>_N
                                                                                                                                              <Index.Ind
                                                                                                                                                 2
                                                                                                                                                 Index.Uind_9>_N
                                                                                                                                              <Index.Ind
                                                                                                                                                 1
                                                                                                                                                 Index.Lind_9>_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Sym (Add0L (<1>_N)))
                                                                                                                                                 <Index.Uind_3>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Sym (Add0L (<1>_N)))
                                                                                                                                                 <Index.Lind_3>_N)_N)_N
                                                                                                                                           <GHC.Real.Rational>_R)_R } } } } } } } } } } } } } }) -}
0761f8d00ceb308520fdff0ed109a121
  $wintCond1Zero ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.intCond1Zero} True True} {__scc {main:Integrabillity.intCond1Zero.intMetric} True True} BasicTensors.interMetric
                                                                                                                                            w
                                                                                                                                            w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.block1} True False} {__scc {main:Integrabillity.intCond1Zero.part2} True False} BasicTensors.delta_20 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.part2} False True} Tensor.$wtensorProductWith
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 1
                                                                                                                                          @ 1
                                                                                                                                          @ 1
                                                                                                                                          @ 1
                                                                                                                                          @ 1
                                                                                                                                          @ 1
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                          ww1
                                                                                                                                          ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                           w of ww8 { Tensor.Tensor ww9 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.block2} True False} BasicTensors.invEta of ww10 { Tensor.Tensor ww11 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 2
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 1
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 2
                                                                                                                                           GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                           ww11
                                                                                                                                           ww9 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.block2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 1
                                                                                                                                           @ 0
                                                                                                                                           Integrabillity.$stensorContractWith_4
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_4
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                           Integrabillity.areaMetricMetric1intCond2
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww13
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Uind_20>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_20>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Uind_19>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_19>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                                    <Index.Uind_9>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_9>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww14 { Unit# ww15 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.tens} True True} Tensor.$wtensorProductWith
                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                        @ 1
                                                                                                                                        @ 1
                                                                                                                                        @ 0
                                                                                                                                        @ 0
                                                                                                                                        @ 1
                                                                                                                                        @ 1
                                                                                                                                        @ 1
                                                                                                                                        @ 1
                                                                                                                                        @ 0
                                                                                                                                        @ 0
                                                                                                                                        @ 0
                                                                                                                                        @ 0
                                                                                                                                        @ 1
                                                                                                                                        @ 0
                                                                                                                                        @ 1
                                                                                                                                        @ 1
                                                                                                                                        GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                        ww5
                                                                                                                                          `cast`
                                                                                                                                        (Data.Map.Internal.Map
                                                                                                                                           ((,,,,,,,)
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0L (<1>_N))
                                                                                                                                                 <Index.Uind_20>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0L (<1>_N))
                                                                                                                                                 <Index.Lind_20>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0L (<0>_N))
                                                                                                                                                 <Index.Uind_19>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0L (<0>_N))
                                                                                                                                                 <Index.Lind_19>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0R (<1>_N))
                                                                                                                                                 <Index.Uind_9>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0R (<1>_N))
                                                                                                                                                 <Index.Lind_9>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0R (<1>_N))
                                                                                                                                                 <Index.Uind_3>_N)_N
                                                                                                                                              (Index.Ind
                                                                                                                                                 (Add0R (<1>_N))
                                                                                                                                                 <Index.Lind_3>_N)_N)_N
                                                                                                                                           <GHC.Real.Rational>_R)_R
                                                                                                                                        ww15 of ww16 { Unit# ww17 ->
                 case {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 2
                                                                                                                                         @ 1
                                                                                                                                         Integrabillity.$stensorContractWith_4
                                                                                                                                           `cast`
                                                                                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                         Integrabillity.$stensorContractWith_4
                                                                                                                                           `cast`
                                                                                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                         Integrabillity.int1Test1
                                                                                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                         ww17
                                                                                                                                           `cast`
                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                            ((,,,,,,,)
                                                                                                                                               (Index.Ind
                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                  <Index.Uind_20>_N)_N
                                                                                                                                               (Index.Ind
                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                  <Index.Lind_20>_N)_N
                                                                                                                                               (Index.Ind
                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                  <Index.Uind_19>_N)_N
                                                                                                                                               (Index.Ind
                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                  <Index.Lind_19>_N)_N
                                                                                                                                               (Index.Ind
                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                           <1>_N))
                                                                                                                                                  <Index.Uind_9>_N)_N
                                                                                                                                               (Index.Ind
                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                  <Index.Lind_9>_N)_N
                                                                                                                                               <Index.Ind
                                                                                                                                                  (1
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  Index.Uind_3>_N
                                                                                                                                               <Index.Ind
                                                                                                                                                  (1
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  Index.Lind_3>_N)_N
                                                                                                                                            <GHC.Real.Rational>_R)_R of ww18 { Unit# ww19 ->
                 {__scc {main:Integrabillity.intCond1Zero} False True} {__scc {main:Integrabillity.intCond1Zero.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ 1
                                                                                                                                    @ 1
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 2
                                                                                                                                    @ 1
                                                                                                                                    Integrabillity.$stensorContractWith_1
                                                                                                                                      `cast`
                                                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                              <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                    Integrabillity.$stensorContractWith_1
                                                                                                                                      `cast`
                                                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                              <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                    Integrabillity.areaMetricMetric1intCond1
                                                                                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                    ww19
                                                                                                                                      `cast`
                                                                                                                                    (Data.Map.Internal.Map
                                                                                                                                       ((,,,,,,,)
                                                                                                                                          <Index.Ind
                                                                                                                                             1
                                                                                                                                             Index.Uind_20>_N
                                                                                                                                          <Index.Ind
                                                                                                                                             1
                                                                                                                                             Index.Lind_20>_N
                                                                                                                                          <Index.Ind
                                                                                                                                             0
                                                                                                                                             Index.Uind_19>_N
                                                                                                                                          <Index.Ind
                                                                                                                                             0
                                                                                                                                             Index.Lind_19>_N
                                                                                                                                          <Index.Ind
                                                                                                                                             2
                                                                                                                                             Index.Uind_9>_N
                                                                                                                                          <Index.Ind
                                                                                                                                             1
                                                                                                                                             Index.Lind_9>_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Sym (Add0L (<1>_N)))
                                                                                                                                             <Index.Uind_3>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Sym (Add0L (<1>_N)))
                                                                                                                                             <Index.Lind_3>_N)_N)_N
                                                                                                                                       <GHC.Real.Rational>_R)_R } } } } } } } } }) -}
788f6b0b42a6f9cfa0f4c89785c86666
  $wintCond1noFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.intCond1noFactor} True True} {__scc {main:Integrabillity.intCond1noFactor.intArea} True True} BasicTensors.interAreanoFactor
                                                                                                                                                  w
                                                                                                                                                  w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.part1} True False} BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.part1} False True} Tensor.$wtensorProductWith
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                  ww1
                                                                                                                                                  ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.intMetric} True True} BasicTensors.interMetricnoFactor
                                                                                                                                                     w2
                                                                                                                                                     w3 of ww8 { Tensor.Tensor ww9 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.part2} True False} BasicTensors.delta_20 of ww10 { Tensor.Tensor ww11 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.part2} False True} Tensor.$wtensorProductWith
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 1
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                  ww9
                                                                                                                                                  ww11 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.block1} True False} {__scc {main:Integrabillity.intCond1noFactor.block1} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                          @ (Index.Index
                                                                                                                                                                                                                                                                                                               1
                                                                                                                                                                                                                                                                                                               1
                                                                                                                                                                                                                                                                                                               0
                                                                                                                                                                                                                                                                                                               0
                                                                                                                                                                                                                                                                                                               1
                                                                                                                                                                                                                                                                                                               1
                                                                                                                                                                                                                                                                                                               1
                                                                                                                                                                                                                                                                                                               1)
                                                                                                                                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                          (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                                                                                                             @ 1)
                                                                                                                                                                                                                                                                                                          Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                                                                                          ww5
                                                                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                                                                          (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                             ((,,,,,,,)
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                                             <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                                                          ww13
                                                                                                                                                                                                                                                                                                            `cast`
                                                                                                                                                                                                                                                                                                          (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                             ((,,,,,,,)
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                                                                                                                                                   (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                                                   <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                                                             <GHC.Real.Rational>_R)_R of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                                   w2 of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.block2} True False} BasicTensors.invEta of ww16 { Tensor.Tensor ww17 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 2
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 2
                                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                   ww17
                                                                                                                                                   ww15 of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.block2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                   @ 1
                                                                                                                                                   @ 1
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 0
                                                                                                                                                   Integrabillity.$stensorContractWith_4
                                                                                                                                                     `cast`
                                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                   Integrabillity.$stensorContractWith_4
                                                                                                                                                     `cast`
                                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                   Integrabillity.areaMetricMetric1intCond2
                                                                                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                   ww19
                                                                                                                                                     `cast`
                                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                                      ((,,,,,,,)
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<1>_N))
                                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                          <1>_N)))
                                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                                         (Index.Ind
                                                                                                                                                            (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                          <1>_N)))
                                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                                      <GHC.Real.Rational>_R)_R of ww20 { Unit# ww21 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.tens} True True} Tensor.$wtensorProductWith
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 1
                                                                                                                                                @ 0
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                dt1
                                                                                                                                                ww21 of ww22 { Unit# ww23 ->
                 case {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                 @ 1
                                                                                                                                                 @ 1
                                                                                                                                                 @ 0
                                                                                                                                                 @ 0
                                                                                                                                                 @ 2
                                                                                                                                                 @ 1
                                                                                                                                                 Integrabillity.$stensorContractWith_4
                                                                                                                                                   `cast`
                                                                                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                 Integrabillity.$stensorContractWith_4
                                                                                                                                                   `cast`
                                                                                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                 Integrabillity.int1Test1
                                                                                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                 ww23
                                                                                                                                                   `cast`
                                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                                    ((,,,,,,,)
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                   <1>_N))
                                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                                       (Index.Ind
                                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                                       <Index.Ind
                                                                                                                                                          (1
                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                          Index.Uind_3>_N
                                                                                                                                                       <Index.Ind
                                                                                                                                                          (1
                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                          Index.Lind_3>_N)_N
                                                                                                                                                    <GHC.Real.Rational>_R)_R of ww24 { Unit# ww25 ->
                 {__scc {main:Integrabillity.intCond1noFactor} False True} {__scc {main:Integrabillity.intCond1noFactor.tens} False True} Tensor.$wtensorContractWith_3
                                                                                                                                            @ 0
                                                                                                                                            @ 0
                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                            @ 1
                                                                                                                                            @ 1
                                                                                                                                            @ 0
                                                                                                                                            @ 0
                                                                                                                                            @ 2
                                                                                                                                            @ 1
                                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                                              `cast`
                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                                              `cast`
                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                            Integrabillity.areaMetricMetric1intCond1
                                                                                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                            ww25
                                                                                                                                              `cast`
                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                               ((,,,,,,,)
                                                                                                                                                  <Index.Ind
                                                                                                                                                     1
                                                                                                                                                     Index.Uind_20>_N
                                                                                                                                                  <Index.Ind
                                                                                                                                                     1
                                                                                                                                                     Index.Lind_20>_N
                                                                                                                                                  <Index.Ind
                                                                                                                                                     0
                                                                                                                                                     Index.Uind_19>_N
                                                                                                                                                  <Index.Ind
                                                                                                                                                     0
                                                                                                                                                     Index.Lind_19>_N
                                                                                                                                                  <Index.Ind
                                                                                                                                                     2
                                                                                                                                                     Index.Uind_9>_N
                                                                                                                                                  <Index.Ind
                                                                                                                                                     1
                                                                                                                                                     Index.Lind_9>_N
                                                                                                                                                  (Index.Ind
                                                                                                                                                     (Sym (Add0L (<1>_N)))
                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                  (Index.Ind
                                                                                                                                                     (Sym (Add0L (<1>_N)))
                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                               <GHC.Real.Rational>_R)_R } } } } } } } } } } } } }) -}
adbe9a41385fd08f4969416eaa7746eb
  $wintCond2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 0 1 1) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.intCond2} True True} {__scc {main:Integrabillity.intCond2.prod} True False} {__scc {main:Integrabillity.intCond2.intTotal} True False} {__scc {main:Integrabillity.intCond2.int1} True True} BasicTensors.$winterArea
                                                                                                                                                                                                                                                 w
                                                                                                                                                                                                                                                 w1 of ww { Unit# ww1 ->
                 case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case Integrabillity.intCond6
                        `cast`
                      (Tensor.Tensor
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0R (<2>_N))
                         (Add0R (<2>_N))
                         <GHC.Real.Rational>_R)_R of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.intTotal} False True} {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} Integrabillity.intCond2_go8
                                                                                                                                                                                                                                                                                                              ww8 of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.intTotal} False True} {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                                                                                           1
                                                                                                                                                                                                                                                                           1
                                                                                                                                                                                                                                                                           0
                                                                                                                                                                                                                                                                           0
                                                                                                                                                                                                                                                                           0
                                                                                                                                                                                                                                                                           0
                                                                                                                                                                                                                                                                           2
                                                                                                                                                                                                                                                                           2)
                                                                                                                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                                                                                                                      (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                         @ 1
                                                                                                                                                                                                                                                                         @ 1
                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                         @ 2
                                                                                                                                                                                                                                                                         @ 2)
                                                                                                                                                                                                                                                                      Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                                                      ww5
                                                                                                                                                                                                                                                                        `cast`
                                                                                                                                                                                                                                                                      (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                         ((,,,,,,,)
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (Add0R (<1>_N))
                                                                                                                                                                                                                                                                               <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (Add0R (<1>_N))
                                                                                                                                                                                                                                                                               <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                                                                                                                               <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                                                                                                                               <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                                                                                                                               <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                                                                                                                               <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                        <1>_N))
                                                                                                                                                                                                                                                                               <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                            (Index.Ind
                                                                                                                                                                                                                                                                               (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                        <1>_N))
                                                                                                                                                                                                                                                                               <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                         <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                      dt1 of dt2 { DEFAULT ->
                 case BasicTensors.invEta of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                   w2 of ww11 { Tensor.Tensor ww12 ->
                 case {__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww10
                                                                                                                                 ww12 of ww13 { Unit# ww14 ->
                 case {__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 dt2
                                                                                                                                 ww14
                                                                                                                                   `cast`
                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                    ((,,,,,,,)
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<2>_N))
                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<2>_N))
                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww15 { Unit# ww16 ->
                 case {__scc {main:Integrabillity.intCond2} False True} Tensor.$wtensorContractWith_3
                                                                          @ 3
                                                                          @ 3
                                                                          @ GHC.Real.Rational
                                                                          @ 1
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_15
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                          Integrabillity.$stensorContractWith_15
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                          Integrabillity.intCond5
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww16
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Lind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<1>_N))
                                                                                   <Index.Uind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<2>_N,
                                                                                            <2>_N) ; Sym (AddDef (<3>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<2>_N,
                                                                                            <2>_N) ; Sym (AddDef (<3>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww17 { Unit# ww18 ->
                 case {__scc {main:Integrabillity.intCond2} False True} Tensor.$wtensorContractWith_3
                                                                          @ 2
                                                                          @ 2
                                                                          @ GHC.Real.Rational
                                                                          @ 1
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.intCond4
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww18
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                <Index.Ind
                                                                                   1
                                                                                   Index.Uind_20>_N
                                                                                <Index.Ind
                                                                                   1
                                                                                   Index.Lind_20>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Uind_19>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Lind_19>_N
                                                                                <Index.Ind
                                                                                   1 Index.Uind_9>_N
                                                                                <Index.Ind
                                                                                   0 Index.Lind_9>_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<2>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<2>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww19 { Unit# ww20 ->
                 {__scc {main:Integrabillity.intCond2} False True} Tensor.$wtensorContractWith_3
                                                                     @ 1
                                                                     @ 1
                                                                     @ GHC.Real.Rational
                                                                     @ 1
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     Integrabillity.$stensorContractWith_4
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     Integrabillity.$stensorContractWith_4
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     Integrabillity.int1Test1
                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                     ww20
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           <Index.Ind
                                                                              1 Index.Uind_20>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_20>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_9>_N
                                                                           (Index.Ind
                                                                              (Sym (AddDef (<1>_N,
                                                                                            <1>_N)))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (AddDef (<1>_N,
                                                                                            <1>_N)))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <GHC.Real.Rational>_R)_R } } } } } } } } } } } }) -}
f47cfab4e83e5d8bfc6931cde3a33fe2
  $wintCond2_1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
627a1ae5b5a781fe850d245d8adc6de7
  $wintCond2_1Symbol ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 3 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
648d0eff4de5ce01283278e8261e2373
  $wintCond2_1SymbolPure ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 2 3 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} True True} {__scc {main:Integrabillity.intCond2_1SymbolPure.tens} True False} BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.flatInter} True False} {__scc {main:Integrabillity.intCond2_1SymbolPure.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                   w
                                                                                                                                                                                                                                   w1 of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.flatInter} False True} BasicTensors.$wflatArea
                                                                                                                                                              w1 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.flatInter} False True} Tensor.$wtensorProductWith
                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                              @ 1
                                                                                                                                                              @ 1
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 1
                                                                                                                                                              @ 1
                                                                                                                                                              @ 0
                                                                                                                                                              @ 1
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                              ww5
                                                                                                                                                              ww7 of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.flatInter} False True} Tensor.$wtensorContractWith_20
                                                                                                                                                              @ 0
                                                                                                                                                              @ 1
                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 0
                                                                                                                                                              @ 1
                                                                                                                                                              @ 1
                                                                                                                                                              Integrabillity.$stensorContractWith_1
                                                                                                                                                                `cast`
                                                                                                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                              Integrabillity.$stensorContractWith_4
                                                                                                                                                                `cast`
                                                                                                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                              Integrabillity.areaMetricMetric2
                                                                                                                                                              GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                              ww9
                                                                                                                                                                `cast`
                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                    <Index.Ind
                                                                                                                                                                       (1
                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                       Index.Lind_20>_N
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                    (Index.Ind
                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                 <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                         ww3
                                                                                                                                                         ww11 of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                         ww1
                                                                                                                                                         ww13
                                                                                                                                                           `cast`
                                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                                            ((,,,,,,,)
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                  <Index.Uind_20>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Lind_20>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                  <Index.Uind_19>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                  <Index.Lind_19>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                  <Index.Uind_9>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                  <Index.Lind_9>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Uind_3>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Lind_3>_N)_N)_N
                                                                                                                                                            <GHC.Real.Rational>_R)_R of ww14 { Unit# ww15 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 2
                                                                                                                                                         @ 0
                                                                                                                                                         @ 0
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         @ 1
                                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                         ww1
                                                                                                                                                         ww15
                                                                                                                                                           `cast`
                                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                                            ((,,,,,,,)
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                  <Index.Uind_20>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                                           <1>_N))
                                                                                                                                                                  <Index.Lind_20>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                  <Index.Uind_19>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                  <Index.Lind_19>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Uind_9>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Lind_9>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Uind_3>_N)_N
                                                                                                                                                               (Index.Ind
                                                                                                                                                                  (Add0L (<1>_N))
                                                                                                                                                                  <Index.Lind_3>_N)_N)_N
                                                                                                                                                            <GHC.Real.Rational>_R)_R of ww16 { Unit# ww17 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Integrabillity.intCond2_1SymbolPure.tensTranspose} True True} Tensor.$wtensorTranspose
                                                                                                                                                                 @ 2
                                                                                                                                                                 @ 3
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 Integrabillity.densityEqnArea5
                                                                                                                                                                 Integrabillity.intCond4
                                                                                                                                                                 ww17
                                                                                                                                                                   `cast`
                                                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                                                    ((,,,,,,,)
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                                   <1>_N))
                                                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                                                   <2>_N))
                                                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                                                       (Index.Ind
                                                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                                                    <GHC.Real.Rational>_R)_R of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolPure} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                 2
                                                                                                                                                                                 3
                                                                                                                                                                                 0
                                                                                                                                                                                 0
                                                                                                                                                                                 1
                                                                                                                                                                                 1
                                                                                                                                                                                 1
                                                                                                                                                                                 1)
                                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ 3
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 1)
                                                                                                                                                                            Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                            ww17
                                                                                                                                                                              `cast`
                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (AddDef (<1>_N,
                                                                                                                                                                                              <1>_N))
                                                                                                                                                                                     <Index.Uind_20>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (AddDef (<1>_N,
                                                                                                                                                                                              <2>_N))
                                                                                                                                                                                     <Index.Lind_20>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                     <Index.Uind_19>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                     <Index.Lind_19>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                     <Index.Uind_9>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                     <Index.Lind_9>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                                               <GHC.Real.Rational>_R)_R
                                                                                                                                                                            ww19 of dt1 { DEFAULT ->
                 (# dt1 #) } } } } } } } } } } }) -}
9dc7674cc8a1b8ddfaf2884d0324f24b
  $wintCond2_1SymbolRed ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} True True} {__scc {main:Integrabillity.intCond2_1SymbolRed.total} True False} {__scc {main:Integrabillity.intCond2_1SymbolRed.totalTens} True False} {__scc {main:Integrabillity.intCond2_1SymbolRed.tens} True False} BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.flatInter} True False} {__scc {main:Integrabillity.intCond2_1SymbolRed.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                w
                                                                                                                                                                                                                                w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.flatInter} False True} BasicTensors.$wflatArea
                                                                                                                                                            w1 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.flatInter} False True} Tensor.$wtensorProductWith
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            @ 1
                                                                                                                                                            @ 1
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 1
                                                                                                                                                            @ 1
                                                                                                                                                            @ 0
                                                                                                                                                            @ 1
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                            ww3
                                                                                                                                                            ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.flatInter} False True} Tensor.$wtensorContractWith_20
                                                                                                                                                            @ 0
                                                                                                                                                            @ 1
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 0
                                                                                                                                                            @ 1
                                                                                                                                                            @ 1
                                                                                                                                                            Integrabillity.$stensorContractWith_1
                                                                                                                                                              `cast`
                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                            Integrabillity.$stensorContractWith_4
                                                                                                                                                              `cast`
                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                      <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                            Integrabillity.areaMetricMetric2
                                                                                                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                            ww7
                                                                                                                                                              `cast`
                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                                     <Index.Uind_20>_N)_N
                                                                                                                                                                  <Index.Ind
                                                                                                                                                                     (1
                                                                                                                                                                      GHC.TypeNats.+ 1)
                                                                                                                                                                     Index.Lind_20>_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                     <Index.Uind_19>_N)_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                     <Index.Lind_19>_N)_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                     <Index.Uind_9>_N)_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                     <Index.Lind_9>_N)_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                  (Index.Ind
                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                               <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                       @ 1
                                                                                                                                                       @ 1
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 1
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 0
                                                                                                                                                       @ 1
                                                                                                                                                       @ 1
                                                                                                                                                       GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                       ww1
                                                                                                                                                       ww9 of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.tensTranspose} True False} {__scc {main:Integrabillity.intCond2_1SymbolRed.tensTranspose} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                           @ 2
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                                                                                                                           Integrabillity.densityEqnArea5
                                                                                                                                                                                                                                           Integrabillity.areaMetricMetric2
                                                                                                                                                                                                                                           ww11
                                                                                                                                                                                                                                             `cast`
                                                                                                                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                                                                                                                              ((,,,,,,,)
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                                                                                                                    <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (AddDef (<1>_N,
                                                                                                                                                                                                                                                             <1>_N))
                                                                                                                                                                                                                                                    <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                    <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                    <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                    <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                    <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                              <GHC.Real.Rational>_R)_R of ww12 { Unit# ww13 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.totalTens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                  @ (Index.Index
                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                       2
                                                                                                                                                                                                                                                       0
                                                                                                                                                                                                                                                       0
                                                                                                                                                                                                                                                       0
                                                                                                                                                                                                                                                       0
                                                                                                                                                                                                                                                       1
                                                                                                                                                                                                                                                       1)
                                                                                                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                                                                                                  (Tensor.aSymTensor3
                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                     @ 2
                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                                                                     @ 1)
                                                                                                                                                                                                                                                  Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                                  ww11
                                                                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                                                                                                                                     ((,,,,,,,)
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (AddDef (<1>_N,
                                                                                                                                                                                                                                                                    <1>_N))
                                                                                                                                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                        (Index.Ind
                                                                                                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                     <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                  ww13 of dt1 { DEFAULT ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.totalBlockEta} True False} BasicTensors.invEta of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.sym} True True} BasicTensors.interI_2
                                                                                                                                                     w2 of ww16 { Tensor.Tensor ww17 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.totalBlockEta} False True} Tensor.$wtensorProductWith
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 2
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 1
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 2
                                                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                ww15
                                                                                                                                                                ww17 of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.totalBlockEta} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                                @ 1
                                                                                                                                                                @ 1
                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 0
                                                                                                                                                                @ 1
                                                                                                                                                                @ 0
                                                                                                                                                                Integrabillity.$stensorContractWith_4
                                                                                                                                                                  `cast`
                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                Integrabillity.$stensorContractWith_4
                                                                                                                                                                  `cast`
                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                Integrabillity.areaMetricMetric1intCond2
                                                                                                                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                ww19
                                                                                                                                                                  `cast`
                                                                                                                                                                (Data.Map.Internal.Map
                                                                                                                                                                   ((,,,,,,,)
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                                         <Index.Uind_20>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                                         <Index.Lind_20>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                                         <Index.Uind_19>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                                         <Index.Lind_19>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<1>_N))
                                                                                                                                                                         <Index.Uind_9>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                                         <Index.Lind_9>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                       <1>_N)))
                                                                                                                                                                         <Index.Uind_3>_N)_N
                                                                                                                                                                      (Index.Ind
                                                                                                                                                                         (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                       <1>_N)))
                                                                                                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                                                                                                   <GHC.Real.Rational>_R)_R of ww20 { Unit# ww21 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} {__scc {main:Integrabillity.intCond2_1SymbolRed.total} False True} Tensor.$wtensorProductWith
                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                        @ 1
                                                                                                                                                        @ 2
                                                                                                                                                        @ 0
                                                                                                                                                        @ 0
                                                                                                                                                        @ 0
                                                                                                                                                        @ 0
                                                                                                                                                        @ 1
                                                                                                                                                        @ 1
                                                                                                                                                        @ 0
                                                                                                                                                        @ 0
                                                                                                                                                        @ 0
                                                                                                                                                        @ 0
                                                                                                                                                        @ 1
                                                                                                                                                        @ 0
                                                                                                                                                        @ 1
                                                                                                                                                        @ 1
                                                                                                                                                        GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                        dt1
                                                                                                                                                        ww21 of ww22 { Unit# ww23 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} Tensor.$wtensorContractWith_3
                                                                                     @ 1
                                                                                     @ 1
                                                                                     @ GHC.Real.Rational
                                                                                     @ 1
                                                                                     @ 2
                                                                                     @ 0
                                                                                     @ 0
                                                                                     @ 1
                                                                                     @ 0
                                                                                     Integrabillity.$stensorContractWith_4
                                                                                       `cast`
                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                     Integrabillity.$stensorContractWith_4
                                                                                       `cast`
                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                     Integrabillity.areaMetricMetric2
                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                     ww23
                                                                                       `cast`
                                                                                     (Data.Map.Internal.Map
                                                                                        ((,,,,,,,)
                                                                                           (Index.Ind
                                                                                              (Add0R (<1>_N))
                                                                                              <Index.Uind_20>_N)_N
                                                                                           (Index.Ind
                                                                                              (Add0R (<2>_N))
                                                                                              <Index.Lind_20>_N)_N
                                                                                           (Index.Ind
                                                                                              (Add0L (<0>_N))
                                                                                              <Index.Uind_19>_N)_N
                                                                                           (Index.Ind
                                                                                              (Add0L (<0>_N))
                                                                                              <Index.Lind_19>_N)_N
                                                                                           (Index.Ind
                                                                                              (Add0L (<1>_N))
                                                                                              <Index.Uind_9>_N)_N
                                                                                           (Index.Ind
                                                                                              (Add0L (<0>_N))
                                                                                              <Index.Lind_9>_N)_N
                                                                                           <Index.Ind
                                                                                              (1
                                                                                               GHC.TypeNats.+ 1)
                                                                                              Index.Uind_3>_N
                                                                                           <Index.Ind
                                                                                              (1
                                                                                               GHC.TypeNats.+ 1)
                                                                                              Index.Lind_3>_N)_N
                                                                                        <GHC.Real.Rational>_R)_R of ww24 { Unit# ww25 ->
                 {__scc {main:Integrabillity.intCond2_1SymbolRed} False True} Tensor.$wtensorContractWith_3
                                                                                @ 0
                                                                                @ 0
                                                                                @ GHC.Real.Rational
                                                                                @ 1
                                                                                @ 2
                                                                                @ 0
                                                                                @ 0
                                                                                @ 1
                                                                                @ 0
                                                                                Integrabillity.$stensorContractWith_1
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                Integrabillity.$stensorContractWith_1
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                Integrabillity.areaMetricMetric1intCond1
                                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                                ww25
                                                                                  `cast`
                                                                                (Data.Map.Internal.Map
                                                                                   ((,,,,,,,)
                                                                                      <Index.Ind
                                                                                         1
                                                                                         Index.Uind_20>_N
                                                                                      <Index.Ind
                                                                                         2
                                                                                         Index.Lind_20>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Uind_19>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Lind_19>_N
                                                                                      <Index.Ind
                                                                                         1
                                                                                         Index.Uind_9>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Lind_9>_N
                                                                                      (Index.Ind
                                                                                         (Sym (Add0L (<1>_N)))
                                                                                         <Index.Uind_3>_N)_N
                                                                                      (Index.Ind
                                                                                         (Sym (Add0L (<1>_N)))
                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                   <GHC.Real.Rational>_R)_R } } } } } } } } } } } } } }) -}
804589e524d69fecf33829b69f71c67e
  $wintCond2_1SymbolRedWrong ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} True True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.total} True False} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.totalTens} True False} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.tens} True False} BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.flatInter} True False} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                               w
                                                                                                                                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.flatInter} False True} BasicTensors.$wflatArea
                                                                                                                                                                      w1 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.flatInter} False True} Tensor.$wtensorProductWith
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                      ww3
                                                                                                                                                                      ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.flatInter} False True} Tensor.$wtensorContractWith_20
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 1
                                                                                                                                                                      Integrabillity.$stensorContractWith_1
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                      Integrabillity.$stensorContractWith_4
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                      Integrabillity.areaMetricMetric2
                                                                                                                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                      ww7
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Data.Map.Internal.Map
                                                                                                                                                                         ((,,,,,,,)
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                                               <Index.Uind_20>_N)_N
                                                                                                                                                                            <Index.Ind
                                                                                                                                                                               (1
                                                                                                                                                                                GHC.TypeNats.+ 1)
                                                                                                                                                                               Index.Lind_20>_N
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                               <Index.Uind_19>_N)_N
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                               <Index.Lind_19>_N)_N
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                               <Index.Uind_9>_N)_N
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                                                               <Index.Lind_9>_N)_N
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0R (<1>_N))
                                                                                                                                                                               <Index.Uind_3>_N)_N
                                                                                                                                                                            (Index.Ind
                                                                                                                                                                               (Add0R (<1>_N))
                                                                                                                                                                               <Index.Lind_3>_N)_N)_N
                                                                                                                                                                         <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.tens} False True} Tensor.$wtensorProductWith
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 0
                                                                                                                                                                 @ 1
                                                                                                                                                                 @ 1
                                                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                 ww1
                                                                                                                                                                 ww9 of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.totalBlockEta} True False} BasicTensors.invEta of ww12 { Tensor.Tensor ww13 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.sym} True True} BasicTensors.interI_2
                                                                                                                                                               w2 of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.totalBlockEta} False True} Tensor.$wtensorProductWith
                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 2
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 1
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 2
                                                                                                                                                                          GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                          ww13
                                                                                                                                                                          ww15 of ww16 { Unit# ww17 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.totalBlockEta} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                                          @ 1
                                                                                                                                                                          @ 1
                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 0
                                                                                                                                                                          @ 1
                                                                                                                                                                          @ 0
                                                                                                                                                                          Integrabillity.$stensorContractWith_4
                                                                                                                                                                            `cast`
                                                                                                                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                          Integrabillity.$stensorContractWith_4
                                                                                                                                                                            `cast`
                                                                                                                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                          Integrabillity.areaMetricMetric1intCond2
                                                                                                                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                          ww17
                                                                                                                                                                            `cast`
                                                                                                                                                                          (Data.Map.Internal.Map
                                                                                                                                                                             ((,,,,,,,)
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                   <Index.Uind_20>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                   <Index.Lind_20>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                   <Index.Uind_19>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                   <Index.Lind_19>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<1>_N))
                                                                                                                                                                                   <Index.Uind_9>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<0>_N))
                                                                                                                                                                                   <Index.Lind_9>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                                 <1>_N)))
                                                                                                                                                                                   <Index.Uind_3>_N)_N
                                                                                                                                                                                (Index.Ind
                                                                                                                                                                                   (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                                 <1>_N)))
                                                                                                                                                                                   <Index.Lind_3>_N)_N)_N
                                                                                                                                                                             <GHC.Real.Rational>_R)_R of ww18 { Unit# ww19 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} {__scc {main:Integrabillity.intCond2_1SymbolRedWrong.total} False True} Tensor.$wtensorProductWith
                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                  @ 1
                                                                                                                                                                  @ 2
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 1
                                                                                                                                                                  @ 1
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 1
                                                                                                                                                                  @ 0
                                                                                                                                                                  @ 1
                                                                                                                                                                  @ 1
                                                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                                  ww11
                                                                                                                                                                    `cast`
                                                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                                                     ((,,,,,,,)
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0R (<1>_N))
                                                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (AddDef (<1>_N,
                                                                                                                                                                                    <1>_N))
                                                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                                                        (Index.Ind
                                                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                                                     <GHC.Real.Rational>_R)_R
                                                                                                                                                                  ww19 of ww20 { Unit# ww21 ->
                 case {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} Tensor.$wtensorContractWith_3
                                                                                          @ 1
                                                                                          @ 1
                                                                                          @ GHC.Real.Rational
                                                                                          @ 1
                                                                                          @ 2
                                                                                          @ 0
                                                                                          @ 0
                                                                                          @ 1
                                                                                          @ 0
                                                                                          Integrabillity.$stensorContractWith_4
                                                                                            `cast`
                                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                          Integrabillity.$stensorContractWith_4
                                                                                            `cast`
                                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                          Integrabillity.areaMetricMetric2
                                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                                          ww21
                                                                                            `cast`
                                                                                          (Data.Map.Internal.Map
                                                                                             ((,,,,,,,)
                                                                                                (Index.Ind
                                                                                                   (Add0R (<1>_N))
                                                                                                   <Index.Uind_20>_N)_N
                                                                                                (Index.Ind
                                                                                                   (Add0R (<2>_N))
                                                                                                   <Index.Lind_20>_N)_N
                                                                                                (Index.Ind
                                                                                                   (Add0L (<0>_N))
                                                                                                   <Index.Uind_19>_N)_N
                                                                                                (Index.Ind
                                                                                                   (Add0L (<0>_N))
                                                                                                   <Index.Lind_19>_N)_N
                                                                                                (Index.Ind
                                                                                                   (Add0L (<1>_N))
                                                                                                   <Index.Uind_9>_N)_N
                                                                                                (Index.Ind
                                                                                                   (Add0L (<0>_N))
                                                                                                   <Index.Lind_9>_N)_N
                                                                                                <Index.Ind
                                                                                                   (1
                                                                                                    GHC.TypeNats.+ 1)
                                                                                                   Index.Uind_3>_N
                                                                                                <Index.Ind
                                                                                                   (1
                                                                                                    GHC.TypeNats.+ 1)
                                                                                                   Index.Lind_3>_N)_N
                                                                                             <GHC.Real.Rational>_R)_R of ww22 { Unit# ww23 ->
                 {__scc {main:Integrabillity.intCond2_1SymbolRedWrong} False True} Tensor.$wtensorContractWith_3
                                                                                     @ 0
                                                                                     @ 0
                                                                                     @ GHC.Real.Rational
                                                                                     @ 1
                                                                                     @ 2
                                                                                     @ 0
                                                                                     @ 0
                                                                                     @ 1
                                                                                     @ 0
                                                                                     Integrabillity.$stensorContractWith_1
                                                                                       `cast`
                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                     Integrabillity.$stensorContractWith_1
                                                                                       `cast`
                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                     Integrabillity.areaMetricMetric1intCond1
                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                     ww23
                                                                                       `cast`
                                                                                     (Data.Map.Internal.Map
                                                                                        ((,,,,,,,)
                                                                                           <Index.Ind
                                                                                              1
                                                                                              Index.Uind_20>_N
                                                                                           <Index.Ind
                                                                                              2
                                                                                              Index.Lind_20>_N
                                                                                           <Index.Ind
                                                                                              0
                                                                                              Index.Uind_19>_N
                                                                                           <Index.Ind
                                                                                              0
                                                                                              Index.Lind_19>_N
                                                                                           <Index.Ind
                                                                                              1
                                                                                              Index.Uind_9>_N
                                                                                           <Index.Ind
                                                                                              0
                                                                                              Index.Lind_9>_N
                                                                                           (Index.Ind
                                                                                              (Sym (Add0L (<1>_N)))
                                                                                              <Index.Uind_3>_N)_N
                                                                                           (Index.Ind
                                                                                              (Sym (Add0L (<1>_N)))
                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                        <GHC.Real.Rational>_R)_R } } } } } } } } } } } }) -}
026bb5184c220d5b53e82f4d434e19d9
  $wintCond3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.intCond3} True True} {__scc {main:Integrabillity.intCond3.prod} True False} {__scc {main:Integrabillity.intCond3.intTotal} True True} BasicTensors.interArea
                                                                                                                                                                                          w
                                                                                                                                                                                          w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.invEta of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.intCond3} False True} {__scc {main:Integrabillity.intCond3.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                   w2 of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:Integrabillity.intCond3} False True} {__scc {main:Integrabillity.intCond3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww3
                                                                                                                                 ww5 of ww6 { Unit# ww7 ->
                 case {__scc {main:Integrabillity.intCond3} False True} {__scc {main:Integrabillity.intCond3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww7
                                                                                                                                   `cast`
                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                    ((,,,,,,,)
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<1>_N))
                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<2>_N))
                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<2>_N))
                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                 case {__scc {main:Integrabillity.intCond3} False True} Tensor.$wtensorContractWith_3
                                                                          @ 2
                                                                          @ 2
                                                                          @ GHC.Real.Rational
                                                                          @ 1
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.$stensorContractWith_8
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          Integrabillity.intCond8
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww9
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Lind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<1>_N))
                                                                                   <Index.Uind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                  <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:Integrabillity.intCond3} False True} Tensor.$wtensorContractWith_3
                                                                          @ 1
                                                                          @ 1
                                                                          @ GHC.Real.Rational
                                                                          @ 1
                                                                          @ 1
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 0
                                                                          Integrabillity.$stensorContractWith_4
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          Integrabillity.$stensorContractWith_4
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          Integrabillity.areaMetricMetric2
                                                                          GHC.Real.$fEnumRatio_$s$c+
                                                                          ww11
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                <Index.Ind
                                                                                   1
                                                                                   Index.Uind_20>_N
                                                                                <Index.Ind
                                                                                   1
                                                                                   Index.Lind_20>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Uind_19>_N
                                                                                <Index.Ind
                                                                                   0
                                                                                   Index.Lind_19>_N
                                                                                <Index.Ind
                                                                                   1 Index.Uind_9>_N
                                                                                <Index.Ind
                                                                                   0 Index.Lind_9>_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<1>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (Sym (AddDef (<1>_N,
                                                                                                 <1>_N)))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <GHC.Real.Rational>_R)_R of ww12 { Unit# ww13 ->
                 {__scc {main:Integrabillity.intCond3} False True} Tensor.$wtensorContractWith_3
                                                                     @ 0
                                                                     @ 0
                                                                     @ GHC.Real.Rational
                                                                     @ 1
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     Integrabillity.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     Integrabillity.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     Integrabillity.areaMetricMetric1intCond1
                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                     ww13
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           <Index.Ind
                                                                              1 Index.Uind_20>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_20>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_9>_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <GHC.Real.Rational>_R)_R } } } } } } }) -}
ec6715a2169eaa7cddc185f34d5c6ba1
  $wintCondComp ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 3 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
ec8775ef666bee9f613778b09b8fb665
  $wintCondCompNoSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 1 2 2) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
c2480cf6910d46ded1cb75b7dc2fad4d
  $wintCondCompZero ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 3 1 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
82df703e07dde4d09c3ff541f01a6e6c
  $wintCondOrd2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 3 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
9a1e42eec307ac2f1a3d48ea99a5d62b
  $wintCondSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 2 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
54909a6ee4e1d8181cf218da7f795ee7
  $wintRankDef1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 2 0 0 3 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
e2b73892a80afb3334d26e5b0ffcf0e6
  $wintRankDef2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
568cbb406c33f4430a749179070e920f
  $wintRankDef3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 2 0 0 2 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
28003fed346d20fe9e7aa0472842a2b5
  $wintRankDef4 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 2 2 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
efc9a40dac52816fe734f83024868e6d
  $wintRankDef5 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 2 0 0 2 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
b2ba32ef99344e0653500917d6d194a6
  $winter4Factor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 0 0) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:Integrabillity.inter4Factor} True True} {__scc {main:Integrabillity.inter4Factor.prod} True False} {__scc {main:Integrabillity.inter4Factor.intI} True True} BasicTensors.symI_Area
                                                                                                                                                                                                  w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.inter4Factor} False True} {__scc {main:Integrabillity.inter4Factor.intJnoF} True True} BasicTensors.interJ_Area
                                                                                                                                           w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.inter4Factor} False True} {__scc {main:Integrabillity.inter4Factor.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 4
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 4
                                                                                                                                         @ 0
                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                         ww1
                                                                                                                                         ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.inter4Factor} False True} Tensor.$wtensorContractWith_3
                                                                              @ 3
                                                                              @ 3
                                                                              @ GHC.Real.Rational
                                                                              @ 1
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              Integrabillity.$stensorContractWith_15
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                              Integrabillity.$stensorContractWith_15
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                              Integrabillity.intCond5
                                                                              GHC.Real.$fEnumRatio_$s$c+
                                                                              ww5
                                                                                `cast`
                                                                              (Data.Map.Internal.Map
                                                                                 ((,,,,,,,)
                                                                                    (Index.Ind
                                                                                       (Add0R (<1>_N))
                                                                                       <Index.Uind_20>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0L (<1>_N))
                                                                                       <Index.Lind_20>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0L (<0>_N))
                                                                                       <Index.Uind_19>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0L (<0>_N))
                                                                                       <Index.Lind_19>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0L (<0>_N))
                                                                                       <Index.Uind_9>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0L (<0>_N))
                                                                                       <Index.Lind_9>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                     <1>_N)))
                                                                                       <Index.Uind_3>_N)_N
                                                                                    (Index.Ind
                                                                                       (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                     <1>_N)))
                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                 <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:Integrabillity.inter4Factor} False True} Tensor.$wtensorContractWith_3
                                                                              @ 2
                                                                              @ 2
                                                                              @ GHC.Real.Rational
                                                                              @ 1
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              Integrabillity.$stensorContractWith_8
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                              Integrabillity.$stensorContractWith_8
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                              Integrabillity.intCond8
                                                                              GHC.Real.$fEnumRatio_$s$c+
                                                                              ww8
                                                                                `cast`
                                                                              (Data.Map.Internal.Map
                                                                                 ((,,,,,,,)
                                                                                    <Index.Ind
                                                                                       1
                                                                                       Index.Uind_20>_N
                                                                                    <Index.Ind
                                                                                       1
                                                                                       Index.Lind_20>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Uind_19>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Lind_19>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Uind_9>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Lind_9>_N
                                                                                    (Index.Ind
                                                                                       (Sym (AddDef (<2>_N,
                                                                                                     <1>_N)))
                                                                                       <Index.Uind_3>_N)_N
                                                                                    (Index.Ind
                                                                                       (Sym (AddDef (<2>_N,
                                                                                                     <1>_N)))
                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                 <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:Integrabillity.inter4Factor} False True} Tensor.$wtensorContractWith_3
                                                                              @ 1
                                                                              @ 1
                                                                              @ GHC.Real.Rational
                                                                              @ 1
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              Integrabillity.$stensorContractWith_4
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                              Integrabillity.$stensorContractWith_4
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                              Integrabillity.areaMetricMetric1intCond2
                                                                              GHC.Real.$fEnumRatio_$s$c+
                                                                              ww10
                                                                                `cast`
                                                                              (Data.Map.Internal.Map
                                                                                 ((,,,,,,,)
                                                                                    <Index.Ind
                                                                                       1
                                                                                       Index.Uind_20>_N
                                                                                    <Index.Ind
                                                                                       1
                                                                                       Index.Lind_20>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Uind_19>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Lind_19>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Uind_9>_N
                                                                                    <Index.Ind
                                                                                       0
                                                                                       Index.Lind_9>_N
                                                                                    (Index.Ind
                                                                                       (Sym (AddDef (<1>_N,
                                                                                                     <1>_N)))
                                                                                       <Index.Uind_3>_N)_N
                                                                                    (Index.Ind
                                                                                       (Sym (AddDef (<1>_N,
                                                                                                     <1>_N)))
                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                 <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 {__scc {main:Integrabillity.inter4Factor} False True} Tensor.$wtensorContractWith_3
                                                                         @ 0
                                                                         @ 0
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         Integrabillity.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                         Integrabillity.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                         Integrabillity.areaMetricMetric1intCond1
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww12
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               <Index.Ind
                                                                                  1 Index.Uind_20>_N
                                                                               <Index.Ind
                                                                                  1 Index.Lind_20>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_9>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_9>_N
                                                                               (Index.Ind
                                                                                  (Sym (Add0L (<1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Sym (Add0L (<1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R } } } } } }) -}
c5a4291604ff0c060d24c826f594ba78
  $winter4noFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 0 0) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:Integrabillity.inter4noFactor} True True} {__scc {main:Integrabillity.inter4noFactor.prod} True False} {__scc {main:Integrabillity.inter4noFactor.intI} True True} BasicTensors.interI_Area
                                                                                                                                                                                                        w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.inter4noFactor} False True} {__scc {main:Integrabillity.inter4noFactor.intJnoF} True True} BasicTensors.interJ_AreanoFactor
                                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.inter4noFactor} False True} {__scc {main:Integrabillity.inter4noFactor.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 4
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 4
                                                                                                                                             @ 0
                                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                             ww1
                                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.inter4noFactor} False True} Tensor.$wtensorContractWith_3
                                                                                @ 3
                                                                                @ 3
                                                                                @ GHC.Real.Rational
                                                                                @ 1
                                                                                @ 1
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                Integrabillity.$stensorContractWith_15
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                Integrabillity.$stensorContractWith_15
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                Integrabillity.intCond5
                                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                                ww5
                                                                                  `cast`
                                                                                (Data.Map.Internal.Map
                                                                                   ((,,,,,,,)
                                                                                      (Index.Ind
                                                                                         (Add0R (<1>_N))
                                                                                         <Index.Uind_20>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0L (<1>_N))
                                                                                         <Index.Lind_20>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0L (<0>_N))
                                                                                         <Index.Uind_19>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0L (<0>_N))
                                                                                         <Index.Lind_19>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0L (<0>_N))
                                                                                         <Index.Uind_9>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0L (<0>_N))
                                                                                         <Index.Lind_9>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                       <1>_N)))
                                                                                         <Index.Uind_3>_N)_N
                                                                                      (Index.Ind
                                                                                         (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                       <1>_N)))
                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                   <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:Integrabillity.inter4noFactor} False True} Tensor.$wtensorContractWith_3
                                                                                @ 2
                                                                                @ 2
                                                                                @ GHC.Real.Rational
                                                                                @ 1
                                                                                @ 1
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                Integrabillity.$stensorContractWith_8
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                Integrabillity.$stensorContractWith_8
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                Integrabillity.intCond8
                                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                                ww8
                                                                                  `cast`
                                                                                (Data.Map.Internal.Map
                                                                                   ((,,,,,,,)
                                                                                      <Index.Ind
                                                                                         1
                                                                                         Index.Uind_20>_N
                                                                                      <Index.Ind
                                                                                         1
                                                                                         Index.Lind_20>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Uind_19>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Lind_19>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Uind_9>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Lind_9>_N
                                                                                      (Index.Ind
                                                                                         (Sym (AddDef (<2>_N,
                                                                                                       <1>_N)))
                                                                                         <Index.Uind_3>_N)_N
                                                                                      (Index.Ind
                                                                                         (Sym (AddDef (<2>_N,
                                                                                                       <1>_N)))
                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                   <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:Integrabillity.inter4noFactor} False True} Tensor.$wtensorContractWith_3
                                                                                @ 1
                                                                                @ 1
                                                                                @ GHC.Real.Rational
                                                                                @ 1
                                                                                @ 1
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                Integrabillity.$stensorContractWith_4
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                Integrabillity.$stensorContractWith_4
                                                                                  `cast`
                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                Integrabillity.areaMetricMetric1intCond2
                                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                                ww10
                                                                                  `cast`
                                                                                (Data.Map.Internal.Map
                                                                                   ((,,,,,,,)
                                                                                      <Index.Ind
                                                                                         1
                                                                                         Index.Uind_20>_N
                                                                                      <Index.Ind
                                                                                         1
                                                                                         Index.Lind_20>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Uind_19>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Lind_19>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Uind_9>_N
                                                                                      <Index.Ind
                                                                                         0
                                                                                         Index.Lind_9>_N
                                                                                      (Index.Ind
                                                                                         (Sym (AddDef (<1>_N,
                                                                                                       <1>_N)))
                                                                                         <Index.Uind_3>_N)_N
                                                                                      (Index.Ind
                                                                                         (Sym (AddDef (<1>_N,
                                                                                                       <1>_N)))
                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                   <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 {__scc {main:Integrabillity.inter4noFactor} False True} Tensor.$wtensorContractWith_3
                                                                           @ 0
                                                                           @ 0
                                                                           @ GHC.Real.Rational
                                                                           @ 1
                                                                           @ 1
                                                                           @ 0
                                                                           @ 0
                                                                           @ 0
                                                                           @ 0
                                                                           Integrabillity.$stensorContractWith_1
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                           Integrabillity.$stensorContractWith_1
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                           Integrabillity.areaMetricMetric1intCond1
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           ww12
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Uind_20>_N
                                                                                 <Index.Ind
                                                                                    1
                                                                                    Index.Lind_20>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Uind_19>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_19>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Uind_9>_N
                                                                                 <Index.Ind
                                                                                    0
                                                                                    Index.Lind_9>_N
                                                                                 (Index.Ind
                                                                                    (Sym (Add0L (<1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Sym (Add0L (<1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R } } } } } }) -}
8a30280f2d75d69b616a55b64a515528
  $winter6Factor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.inter6Factor} True True} {__scc {main:Integrabillity.inter6Factor.contr1} True False} {__scc {main:Integrabillity.inter6Factor.prod1} True False} {__scc {main:Integrabillity.inter6Factor.symI} True True} BasicTensors.symI_Area
                                                                                                                                                                                                                                                                w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.intJ} True True} BasicTensors.interJ_Area
                                                                                                                                        w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.prod1} False True} Tensor.$wtensorProductWith
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ 1
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 4
                                                                                                                                          @ 0
                                                                                                                                          @ 1
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 4
                                                                                                                                          @ 0
                                                                                                                                          GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                          ww1
                                                                                                                                          ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 3
                                                                                                                                           @ 3
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           Integrabillity.$stensorContractWith_15
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_15
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                                                                           Integrabillity.intCond5
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww5
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                    <Index.Uind_20>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                                    <Index.Lind_20>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Uind_19>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_19>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Uind_9>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_9>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 2
                                                                                                                                           @ 2
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           Integrabillity.$stensorContractWith_8
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_8
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                           Integrabillity.intCond8
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww8
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Uind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Lind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_9>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_9>_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (AddDef (<2>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (AddDef (<2>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           Integrabillity.$stensorContractWith_4
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_4
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                           Integrabillity.areaMetricMetric1intCond2
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww10
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Uind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Lind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_9>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_9>_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (AddDef (<1>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (AddDef (<1>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           Integrabillity.$stensorContractWith_1
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_1
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                           Integrabillity.areaMetricMetric1intCond1
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww12
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Uind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Lind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_9>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_9>_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (Add0L (<1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (Add0L (<1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww13 { Unit# ww14 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr2} True False} {__scc {main:Integrabillity.inter6Factor.prod2} True False} {__scc {main:Integrabillity.inter6Factor.symI2} True True} BasicTensors.symI_2
                                                                                                                                                                                                                                                                  w2 of ww15 { Tensor.Tensor ww16 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.intJ2} True True} BasicTensors.interJ_2
                                                                                                                                         w3 of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.prod2} False True} Tensor.$wtensorProductWith
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 1
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 2
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 0
                                                                                                                                          @ 1
                                                                                                                                          @ 2
                                                                                                                                          @ 0
                                                                                                                                          GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                          ww16
                                                                                                                                          ww18 of ww19 { Unit# ww20 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           Integrabillity.$stensorContractWith_4
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_4
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                           Integrabillity.areaMetricMetric1intCond2
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww20
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Uind_20>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_20>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Uind_19>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                    <Index.Lind_19>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                    <Index.Uind_9>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                                    <Index.Lind_9>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                  <1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww21 { Unit# ww22 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} {__scc {main:Integrabillity.inter6Factor.contr2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 0
                                                                                                                                           @ 1
                                                                                                                                           @ 1
                                                                                                                                           Integrabillity.$stensorContractWith_1
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                           Integrabillity.$stensorContractWith_1
                                                                                                                                             `cast`
                                                                                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                     <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                           Integrabillity.areaMetricMetric1intCond1
                                                                                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                           ww22
                                                                                                                                             `cast`
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              ((,,,,,,,)
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_20>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Uind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    0
                                                                                                                                                    Index.Lind_19>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Uind_9>_N
                                                                                                                                                 <Index.Ind
                                                                                                                                                    1
                                                                                                                                                    Index.Lind_9>_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (Add0L (<1>_N)))
                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                 (Index.Ind
                                                                                                                                                    (Sym (Add0L (<1>_N)))
                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                              <GHC.Real.Rational>_R)_R of ww23 { Unit# ww24 ->
                 case {__scc {main:Integrabillity.inter6Factor} False True} Tensor.$wtensorProductWith
                                                                              @ GHC.Real.Rational
                                                                              @ GHC.Real.Rational
                                                                              @ GHC.Real.Rational
                                                                              @ 1
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 1
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                              ww14
                                                                              ww24 of ww25 { Unit# ww26 ->
                 (# ww26
                      `cast`
                    (Data.Map.Internal.Map
                       ((,,,,,,,)
                          (Index.Ind (Add0R (<1>_N)) <Index.Uind_20>_N)_N
                          (Index.Ind (Add0R (<1>_N)) <Index.Lind_20>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Uind_19>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Lind_19>_N)_N
                          (Index.Ind (Add0L (<1>_N)) <Index.Uind_9>_N)_N
                          (Index.Ind (Add0L (<1>_N)) <Index.Lind_9>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Uind_3>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Lind_3>_N)_N)_N
                       <GHC.Real.Rational>_R)_R #) } } } } } } } } } } } } }) -}
f6e1e2be0b453c94b3ab2f8bddeca6d2
  $winter6noFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.inter6noFactor} True True} {__scc {main:Integrabillity.inter6noFactor.contr1} True False} {__scc {main:Integrabillity.inter6noFactor.prod1} True False} {__scc {main:Integrabillity.inter6noFactor.intI} True True} BasicTensors.interI_Area
                                                                                                                                                                                                                                                                        w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.intJnoF} True True} BasicTensors.interJ_AreanoFactor
                                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.prod1} False True} Tensor.$wtensorProductWith
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 4
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 4
                                                                                                                                              @ 0
                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                              ww1
                                                                                                                                              ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 3
                                                                                                                                               @ 3
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               Integrabillity.$stensorContractWith_15
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_15
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                                                                               Integrabillity.intCond5
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww5
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 2
                                                                                                                                               @ 2
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               Integrabillity.$stensorContractWith_8
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_8
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                               Integrabillity.intCond8
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww8
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Uind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Lind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_9>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_9>_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (AddDef (<2>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (AddDef (<2>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               Integrabillity.$stensorContractWith_4
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_4
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               Integrabillity.areaMetricMetric1intCond2
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww10
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Uind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Lind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_9>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_9>_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (AddDef (<1>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (AddDef (<1>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr1} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               Integrabillity.$stensorContractWith_1
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_1
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                               Integrabillity.areaMetricMetric1intCond1
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww12
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Uind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Lind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_9>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_9>_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (Add0L (<1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (Add0L (<1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww13 { Unit# ww14 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr2} True False} {__scc {main:Integrabillity.inter6noFactor.prod2} True False} {__scc {main:Integrabillity.inter6noFactor.intI2} True True} BasicTensors.interI_2
                                                                                                                                                                                                                                                                          w2 of ww15 { Tensor.Tensor ww16 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.intJ2noFac} True True} BasicTensors.interJ_2noFactor
                                                                                                                                                  w3 of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.prod2} False True} Tensor.$wtensorProductWith
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 2
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 2
                                                                                                                                              @ 0
                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                              ww16
                                                                                                                                              ww18 of ww19 { Unit# ww20 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               Integrabillity.$stensorContractWith_4
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_4
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               Integrabillity.areaMetricMetric1intCond2
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww20
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                      <1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww21 { Unit# ww22 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} {__scc {main:Integrabillity.inter6noFactor.contr2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               Integrabillity.$stensorContractWith_1
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                               Integrabillity.$stensorContractWith_1
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                               Integrabillity.areaMetricMetric1intCond1
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww22
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_20>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Uind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        0
                                                                                                                                                        Index.Lind_19>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Uind_9>_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        1
                                                                                                                                                        Index.Lind_9>_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (Add0L (<1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Sym (Add0L (<1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww23 { Unit# ww24 ->
                 case {__scc {main:Integrabillity.inter6noFactor} False True} Tensor.$wtensorProductWith
                                                                                @ GHC.Real.Rational
                                                                                @ GHC.Real.Rational
                                                                                @ GHC.Real.Rational
                                                                                @ 1
                                                                                @ 1
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 0
                                                                                @ 1
                                                                                @ 1
                                                                                @ 0
                                                                                @ 0
                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                ww14
                                                                                ww24 of ww25 { Unit# ww26 ->
                 (# ww26
                      `cast`
                    (Data.Map.Internal.Map
                       ((,,,,,,,)
                          (Index.Ind (Add0R (<1>_N)) <Index.Uind_20>_N)_N
                          (Index.Ind (Add0R (<1>_N)) <Index.Lind_20>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Uind_19>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Lind_19>_N)_N
                          (Index.Ind (Add0L (<1>_N)) <Index.Uind_9>_N)_N
                          (Index.Ind (Add0L (<1>_N)) <Index.Lind_9>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Uind_3>_N)_N
                          (Index.Ind (Add0L (<0>_N)) <Index.Lind_3>_N)_N)_N
                       <GHC.Real.Rational>_R)_R #) } } } } } } } } } } } } }) -}
db2bf8631610c6360a2b6c997f505f1b
  $winterProTest ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 2 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
9dcb8997eb22460ddaec2afeeb4b4b7d
  $wmkEqnSparseintCond2_1New ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 2 1 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
9627bd9cc9b67551c1852dad18f6c25d
  $wmkEqnSparseintCond2_1Symbol ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 2 1 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index 2 3 0 0 2 1 0 0) GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCond2_1Symbol} True True} letrec {
                                                                                       go13 :: [((GHC.Types.Int,
                                                                                                  GHC.Types.Int),
                                                                                                 GHC.Real.Rational)]
                                                                                               -> Data.Map.Internal.Map
                                                                                                    (Index.Index
                                                                                                       2
                                                                                                       3
                                                                                                       0
                                                                                                       0
                                                                                                       2
                                                                                                       1
                                                                                                       0
                                                                                                       0)
                                                                                                    GHC.Real.Rational
                                                                                               -> [((GHC.Types.Int,
                                                                                                     GHC.Types.Int),
                                                                                                    GHC.Real.Rational)]
                                                                                         {- Arity: 2,
                                                                                            Strictness: <L,1*U><S,1*U> -}
                                                                                       = \ (z' :: [((GHC.Types.Int,
                                                                                                     GHC.Types.Int),
                                                                                                    GHC.Real.Rational)])
                                                                                           (ds :: Data.Map.Internal.Map
                                                                                                    (Index.Index
                                                                                                       2
                                                                                                       3
                                                                                                       0
                                                                                                       0
                                                                                                       2
                                                                                                       1
                                                                                                       0
                                                                                                       0)
                                                                                                    GHC.Real.Rational) ->
                                                                                         case ds of wild {
                                                                                           Data.Map.Internal.Bin dt1 kx x l r
                                                                                           -> case kx of ww1 { (,,,,,,,) ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                                                              go13
                                                                                                (GHC.Types.:
                                                                                                   @ ((GHC.Types.Int,
                                                                                                       GHC.Types.Int),
                                                                                                      GHC.Real.Rational)
                                                                                                   (case Integrabillity.$windex2SparseintCond2_1Symbol
                                                                                                           w
                                                                                                           ww2
                                                                                                           ww3
                                                                                                           ww6
                                                                                                           ww7 of ww10 { (#,#) ww11 ww12 ->
                                                                                                    (ww11,
                                                                                                     ww12) },
                                                                                                    x)
                                                                                                   (go13
                                                                                                      z'
                                                                                                      r))
                                                                                                l }
                                                                                           Data.Map.Internal.Tip
                                                                                           -> z' }
                                                                                     } in
                                                                                     Integrabillity.$sfromList
                                                                                       @ (GHC.Real.Ratio
                                                                                            GHC.Integer.Type.Integer)
                                                                                       (go13
                                                                                          (GHC.Types.[]
                                                                                             @ ((GHC.Types.Int,
                                                                                                 GHC.Types.Int),
                                                                                                GHC.Real.Rational))
                                                                                          ww)) -}
6f9d9517be4b83952dd160c86853d10e
  $wmkEqnSparseintCond2_1SymbolPure ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 1 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index 2 3 0 0 1 1 1 1) GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCond2_1SymbolPure} True True} letrec {
                                                                                           go13 :: [((GHC.Types.Int,
                                                                                                      GHC.Types.Int),
                                                                                                     GHC.Real.Rational)]
                                                                                                   -> Data.Map.Internal.Map
                                                                                                        (Index.Index
                                                                                                           2
                                                                                                           3
                                                                                                           0
                                                                                                           0
                                                                                                           1
                                                                                                           1
                                                                                                           1
                                                                                                           1)
                                                                                                        GHC.Real.Rational
                                                                                                   -> [((GHC.Types.Int,
                                                                                                         GHC.Types.Int),
                                                                                                        GHC.Real.Rational)]
                                                                                             {- Arity: 2,
                                                                                                Strictness: <L,1*U><S,1*U> -}
                                                                                           = \ (z' :: [((GHC.Types.Int,
                                                                                                         GHC.Types.Int),
                                                                                                        GHC.Real.Rational)])
                                                                                               (ds :: Data.Map.Internal.Map
                                                                                                        (Index.Index
                                                                                                           2
                                                                                                           3
                                                                                                           0
                                                                                                           0
                                                                                                           1
                                                                                                           1
                                                                                                           1
                                                                                                           1)
                                                                                                        GHC.Real.Rational) ->
                                                                                             case ds of wild {
                                                                                               Data.Map.Internal.Bin dt1 kx x l r
                                                                                               -> case kx of ww1 { (,,,,,,,) ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                                                                  go13
                                                                                                    (GHC.Types.:
                                                                                                       @ ((GHC.Types.Int,
                                                                                                           GHC.Types.Int),
                                                                                                          GHC.Real.Rational)
                                                                                                       (case Integrabillity.$windex2SparseintCond2_1SymbolPure
                                                                                                               w
                                                                                                               ww2
                                                                                                               ww3
                                                                                                               ww6
                                                                                                               ww7
                                                                                                               ww8
                                                                                                               ww9 of ww10 { (#,#) ww11 ww12 ->
                                                                                                        (ww11,
                                                                                                         ww12) },
                                                                                                        x)
                                                                                                       (go13
                                                                                                          z'
                                                                                                          r))
                                                                                                    l }
                                                                                               Data.Map.Internal.Tip
                                                                                               -> z' }
                                                                                         } in
                                                                                         Integrabillity.$sfromList
                                                                                           @ (GHC.Real.Ratio
                                                                                                GHC.Integer.Type.Integer)
                                                                                           (go13
                                                                                              (GHC.Types.[]
                                                                                                 @ ((GHC.Types.Int,
                                                                                                     GHC.Types.Int),
                                                                                                    GHC.Real.Rational))
                                                                                              ww)) -}
e85c7ae414b7b7193e320850dc423f3a
  $wmkEqnSparseintCond2_1SymbolRed ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCond2_1SymbolRed} True True} letrec {
                                                                                          go13 :: [((GHC.Types.Int,
                                                                                                     GHC.Types.Int),
                                                                                                    GHC.Real.Rational)]
                                                                                                  -> Data.Map.Internal.Map
                                                                                                       (Index.Index
                                                                                                          1
                                                                                                          2
                                                                                                          0
                                                                                                          0
                                                                                                          1
                                                                                                          0
                                                                                                          0
                                                                                                          0)
                                                                                                       GHC.Real.Rational
                                                                                                  -> [((GHC.Types.Int,
                                                                                                        GHC.Types.Int),
                                                                                                       GHC.Real.Rational)]
                                                                                            {- Arity: 2,
                                                                                               Strictness: <L,1*U><S,1*U> -}
                                                                                          = \ (z' :: [((GHC.Types.Int,
                                                                                                        GHC.Types.Int),
                                                                                                       GHC.Real.Rational)])
                                                                                              (ds :: Data.Map.Internal.Map
                                                                                                       (Index.Index
                                                                                                          1
                                                                                                          2
                                                                                                          0
                                                                                                          0
                                                                                                          1
                                                                                                          0
                                                                                                          0
                                                                                                          0)
                                                                                                       GHC.Real.Rational) ->
                                                                                            case ds of wild {
                                                                                              Data.Map.Internal.Bin dt1 kx x l r
                                                                                              -> case kx of ww1 { (,,,,,,,) ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                                                                                                 go13
                                                                                                   (GHC.Types.:
                                                                                                      @ ((GHC.Types.Int,
                                                                                                          GHC.Types.Int),
                                                                                                         GHC.Real.Rational)
                                                                                                      (case Integrabillity.$windex2SparseintCond2_1SymbolRed
                                                                                                              w
                                                                                                              ww2
                                                                                                              ww3
                                                                                                              ww6 of ww10 { (#,#) ww11 ww12 ->
                                                                                                       (ww11,
                                                                                                        ww12) },
                                                                                                       x)
                                                                                                      (go13
                                                                                                         z'
                                                                                                         r))
                                                                                                   l }
                                                                                              Data.Map.Internal.Tip
                                                                                              -> z' }
                                                                                        } in
                                                                                        Integrabillity.$sfromList
                                                                                          @ (GHC.Real.Ratio
                                                                                               GHC.Integer.Type.Integer)
                                                                                          (go13
                                                                                             (GHC.Types.[]
                                                                                                @ ((GHC.Types.Int,
                                                                                                    GHC.Types.Int),
                                                                                                   GHC.Real.Rational))
                                                                                             ww)) -}
5171a773ca9e959a375a0397ac84011a
  $wmkEqnSparseintCondCompNew ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 1 2 0 0 3 1 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
201897693c8f34408894169a77b49d80
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c6194ec14aeeeba0c9ff7976436f3bce
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> a
  {- Arity: 3, Strictness: <S,U><S(S),1*U(U)><S,1*U>, Inline: [0] -}
5a2643cd13937334dcb3702d3af9efb8
  $wprojectorMatrix ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index
               (1 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 1)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (4 GHC.TypeNats.+ 2))
            GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.projectorMatrix} True True} {__scc {main:BasicTensors.interI_Area} True True} BasicTensors.interI_Area2
                                                                                                                                  BasicTensors.interI_Area1
                                                                                                                                  (BasicTensors.interF_IArea
                                                                                                                                     w) of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.projectorMatrix} False True} BasicTensors.interI_2
                                                                                 w1 of ww2 { Tensor.Tensor ww3 ->
                 {__scc {main:Integrabillity.projectorMatrix} False True} Tensor.$wtensorProductWith
                                                                            @ GHC.Real.Rational
                                                                            @ GHC.Real.Rational
                                                                            @ GHC.Real.Rational
                                                                            @ 1
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 4
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 0
                                                                            @ 1
                                                                            @ 0
                                                                            @ 0
                                                                            @ 2
                                                                            GHC.Real.$fFractionalRatio_$s$c*
                                                                            ww1
                                                                            ww3 } }) -}
77d4f22b44917a52a442dcae3a432856
  $wprojectorMatrixMixed1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index
               (1 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 1)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (4 GHC.TypeNats.+ 2))
            GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.projectorMatrixMixed1} True True} {__scc {main:BasicTensors.interI_Area} True True} BasicTensors.interI_Area2
                                                                                                                                        BasicTensors.interI_Area1
                                                                                                                                        (BasicTensors.interF_IArea
                                                                                                                                           w) of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.projectorMatrixMixed1} False True} BasicTensors.symI_2
                                                                                       w1 of ww2 { Tensor.Tensor ww3 ->
                 {__scc {main:Integrabillity.projectorMatrixMixed1} False True} Tensor.$wtensorProductWith
                                                                                  @ GHC.Real.Rational
                                                                                  @ GHC.Real.Rational
                                                                                  @ GHC.Real.Rational
                                                                                  @ 1
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 4
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 1
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 2
                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                  ww1
                                                                                  ww3 } }) -}
e61b1049ddd0bbc1f2bf76e5be7a89aa
  $wprojectorMatrixMixed2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index
               (1 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 1)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (4 GHC.TypeNats.+ 2))
            GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.projectorMatrixMixed2} True True} BasicTensors.symI_Area
                                                                                      w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.projectorMatrixMixed2} False True} BasicTensors.interI_2
                                                                                       w1 of ww2 { Tensor.Tensor ww3 ->
                 {__scc {main:Integrabillity.projectorMatrixMixed2} False True} Tensor.$wtensorProductWith
                                                                                  @ GHC.Real.Rational
                                                                                  @ GHC.Real.Rational
                                                                                  @ GHC.Real.Rational
                                                                                  @ 1
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 4
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 1
                                                                                  @ 0
                                                                                  @ 0
                                                                                  @ 2
                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                  ww1
                                                                                  ww3 } }) -}
67862e4f7d514a2909f6c31253568269
  $wprojectorMatrixSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index
               (1 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 1)
               (0 GHC.TypeNats.+ 0)
               (0 GHC.TypeNats.+ 0)
               (4 GHC.TypeNats.+ 2))
            GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Integrabillity.projectorMatrixSym} True True} BasicTensors.symI_Area
                                                                                   w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Integrabillity.projectorMatrixSym} False True} BasicTensors.symI_2
                                                                                    w1 of ww2 { Tensor.Tensor ww3 ->
                 {__scc {main:Integrabillity.projectorMatrixSym} False True} Tensor.$wtensorProductWith
                                                                               @ GHC.Real.Rational
                                                                               @ GHC.Real.Rational
                                                                               @ GHC.Real.Rational
                                                                               @ 1
                                                                               @ 0
                                                                               @ 0
                                                                               @ 0
                                                                               @ 0
                                                                               @ 0
                                                                               @ 0
                                                                               @ 4
                                                                               @ 0
                                                                               @ 0
                                                                               @ 0
                                                                               @ 0
                                                                               @ 1
                                                                               @ 0
                                                                               @ 0
                                                                               @ 2
                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                               ww1
                                                                               ww3 } }) -}
bbe8071a66c16599e898ba037fe1981a
  areaMetricMetric1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case Integrabillity.$wareaMetricMetric1 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
32f7b4541c2d55757e5645dad0605aed
  areaMetricMetric1intCond ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wareaMetricMetric1intCond
                        w
                        w1
                        w2
                        w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
a1680db3ed4636f7527cba6e554f87d8
  areaMetricMetric1intCond1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.areaMetricMetric4,
                  Integrabillity.areaMetricMetric4)) -}
da55183407890fa8b38ec621a1d840f7
  areaMetricMetric1intCond2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.areaMetricMetric3,
                  Integrabillity.areaMetricMetric3)) -}
b71376ed1a68a16b970274e02d7fc97f
  areaMetricMetric1intCond_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
7d6a0fa1ff301f7e3f8294b9f6b75f98
  areaMetricMetric2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.areaMetricMetric4,
                  Integrabillity.areaMetricMetric3)) -}
e81e5af29ebb159733c0c36370a035ea
  areaMetricMetric3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
b70dfdf894cabcab67511fe9799208b2
  areaMetricMetric4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d883df2bea737af7ef8ecb9b996a1d96
  densityEqnArea1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:Integrabillity.densityEqnArea1} True True} {__scc {main:Integrabillity.densityEqnArea1.intArea} True True} BasicTensors.interArea
                                                                                                                                                w
                                                                                                                                                w1 of ww { Tensor.Tensor ww1 ->
                 case ({__scc {main:Integrabillity.densityEqnArea1} False True} {__scc {main:Integrabillity.densityEqnArea1.tens} True False} Integrabillity.densityEqnArea4)
                        `cast`
                      (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.densityEqnArea1} False True} {__scc {main:Integrabillity.densityEqnArea1.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          0
                                                                                                                                                                                                                                          1
                                                                                                                                                                                                                                          1)
                                                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                                                     (Tensor.aSymTensor3
                                                                                                                                                                                                                                        @ 1
                                                                                                                                                                                                                                        @ 1
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 0
                                                                                                                                                                                                                                        @ 1
                                                                                                                                                                                                                                        @ 1)
                                                                                                                                                                                                                                     Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                     ww3
                                                                                                                                                                                                                                     ww1 of dt1 { DEFAULT ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   dt1 } } }) -}
2cb4ff397e0d724f40016a0d67bdab8e
  densityEqnArea2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 2 2 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case Integrabillity.$wdensityEqnArea2 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
38cd31f3915185385b682deb9e2bb530
  densityEqnArea4 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:Integrabillity.densityEqnArea1} False True} {__scc {main:Integrabillity.densityEqnArea1.tens} False True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                                        case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                                        case Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww1
                                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                                                                                                                                        Tensor.Tensor
                                                                                                                                          @ (1
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (1
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          ww5 } } }) -}
5e47aef96a257962887ad85df3697812
  densityEqnArea5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
aced70fadc38feb3b5666793774dcd6b
  densityEqnArea6 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 1)
      (1 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:Integrabillity.densityEqnArea2} False True} {__scc {main:Integrabillity.densityEqnArea2.block1} True True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                                         case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                ww1
                                                                                                                                                ww3 of ww4 { Unit# ww5 ->
                                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 0
                                                                                                                                                @ 1
                                                                                                                                                @ 1
                                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                ww1
                                                                                                                                                ww5
                                                                                                                                                  `cast`
                                                                                                                                                (Data.Map.Internal.Map
                                                                                                                                                   ((,,,,,,,)
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0R (<1>_N))
                                                                                                                                                         <Index.Uind_20>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0R (<1>_N))
                                                                                                                                                         <Index.Lind_20>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                         <Index.Uind_19>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                         <Index.Lind_19>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                         <Index.Uind_9>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                                         <Index.Lind_9>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0L (<1>_N))
                                                                                                                                                         <Index.Uind_3>_N)_N
                                                                                                                                                      (Index.Ind
                                                                                                                                                         (Add0L (<1>_N))
                                                                                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                                                                                   <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                                                                                                                                         Tensor.Tensor
                                                                                                                                           @ (1
                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                           @ (1
                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                           @ (0
                                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                                           @ (0
                                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                                           @ (0
                                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                                           @ (0
                                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                                           @ (0
                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                           @ (0
                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                           ww8 } } } }) -}
df9b4138cbf425b99c379866c1f4113b
  densityEqnMetric1 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Integrabillity.densityEqnMetric1} True True} {__scc {main:Integrabillity.densityEqnMetric1.intMetric} True True} BasicTensors.interMetric
                                                                                                                                                      w
                                                                                                                                                      w1 of ww { Tensor.Tensor ww1 ->
                 case ({__scc {main:Integrabillity.densityEqnMetric1} False True} {__scc {main:Integrabillity.densityEqnMetric1.tens} True False} Integrabillity.densityEqnMetric4)
                        `cast`
                      (Tensor.Tensor
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Integrabillity.densityEqnMetric1} False True} {__scc {main:Integrabillity.densityEqnMetric1.tens} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                              1)
                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                            @ 1)
                                                                                                                                                                                                                                         Integrabillity.areaMetricMetric1intCond_lvl19
                                                                                                                                                                                                                                         ww3
                                                                                                                                                                                                                                         ww1 of dt1 { DEFAULT ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   dt1 } } }) -}
26e116590c118e999cefe275c6f2faa9
  densityEqnMetric2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 2 2 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wdensityEqnMetric2 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
c6f3dea43b0c28b392e8ab2c7ab616e7
  densityEqnMetric4 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:Integrabillity.densityEqnMetric1} False True} {__scc {main:Integrabillity.densityEqnMetric1.tens} False True} case BasicTensors.delta_9 of ww { Tensor.Tensor ww1 ->
                                                                                                                                            case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                                            case Tensor.$wtensorProductWith
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 1
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 1
                                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                   ww1
                                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                                                                                                                                            Tensor.Tensor
                                                                                                                                              @ (0
                                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                                              @ (0
                                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                                              @ (0
                                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                                              @ (0
                                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                                              @ (1
                                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                                              @ (1
                                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                                              @ (0
                                                                                                                                                 GHC.TypeNats.+ 1)
                                                                                                                                              @ (0
                                                                                                                                                 GHC.TypeNats.+ 1)
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              ww5 } } }) -}
08d0acd30cf155d10dee231152d90bdc
  densityEqnMetric5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
6a322cbe54f25c8946053fbf4de2ddb4
  densityEqnMetric6 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 1)
      (1 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:Integrabillity.densityEqnMetric2} False True} {__scc {main:Integrabillity.densityEqnMetric2.block1} True True} case BasicTensors.delta_9 of ww { Tensor.Tensor ww1 ->
                                                                                                                                             case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                                             case Tensor.$wtensorProductWith
                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 1
                                                                                                                                                    @ 1
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 1
                                                                                                                                                    @ 1
                                                                                                                                                    GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                    ww1
                                                                                                                                                    ww3 of ww4 { Unit# ww5 ->
                                                                                                                                             case Tensor.$wtensorProductWith
                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 1
                                                                                                                                                    @ 1
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 0
                                                                                                                                                    @ 1
                                                                                                                                                    @ 1
                                                                                                                                                    @ 1
                                                                                                                                                    @ 1
                                                                                                                                                    GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                    ww1
                                                                                                                                                    ww5
                                                                                                                                                      `cast`
                                                                                                                                                    (Data.Map.Internal.Map
                                                                                                                                                       ((,,,,,,,)
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                                             <Index.Uind_20>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                                             <Index.Lind_20>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                                             <Index.Uind_19>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                                             <Index.Lind_19>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0R (<1>_N))
                                                                                                                                                             <Index.Uind_9>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0R (<1>_N))
                                                                                                                                                             <Index.Lind_9>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0L (<1>_N))
                                                                                                                                                             <Index.Uind_3>_N)_N
                                                                                                                                                          (Index.Ind
                                                                                                                                                             (Add0L (<1>_N))
                                                                                                                                                             <Index.Lind_3>_N)_N)_N
                                                                                                                                                       <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                                                                                                                                             Tensor.Tensor
                                                                                                                                               @ (0
                                                                                                                                                  GHC.TypeNats.+ 0)
                                                                                                                                               @ (0
                                                                                                                                                  GHC.TypeNats.+ 0)
                                                                                                                                               @ (0
                                                                                                                                                  GHC.TypeNats.+ 0)
                                                                                                                                               @ (0
                                                                                                                                                  GHC.TypeNats.+ 0)
                                                                                                                                               @ (1
                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                               @ (1
                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                               @ (0
                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                               @ (0
                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               ww8 } } } }) -}
11c93fd8e7de26e0d6210f06f82c3f4e
  flatMetricInter ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wflatMetricInter w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
afd496628344ed2f55aeaa9530eaf7a0
  flatMetricInterProlong ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 1 2 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wflatMetricInterProlong
                        w
                        w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 2
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
cb385995547fb36de949102a432d13fa
  index2SparseAreaM ::
    Index.Index 0 1 0 0 1 1 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(A,1*U(U),A,A,1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 1 1 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseAreaM
                        ww2
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
abd9658fb55ac99368bcbfdceffb84e7
  index2SparseAreaMintCond ::
    Index.Index 1 1 0 0 2 1 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,1*U(U),1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 2 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseAreaMintCond
                        ww1
                        ww2
                        ww5
                        ww6 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
b94b92941d5bf2d2b96013ca30f5a260
  index2SparseBlock1Eta ::
    Index.Index 0 1 0 0 0 0 2 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,1*U(U),A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 2 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseBlock1Eta
                        ww2
                        ww7 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
681c39e703439848b7f60046a263e336
  index2SparseCond1 ::
    Index.Index 1 1 0 0 2 1 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,1*U(U),1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 2 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseCond1
                        ww1
                        ww2
                        ww5
                        ww6 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
3a4e5453ab82a5124e651e5cbafd24af
  index2SparseCond1Zero ::
    Index.Index 0 1 0 0 1 0 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,1*U(U),A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 1 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseCond1Zero
                        ww2
                        ww5 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
6bf3ff669b0efc08a02c5e065753b2f4
  index2SparseCond2 ::
    Index.Index 1 1 0 0 1 0 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,1*U(U),A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 1 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseCond2
                        ww1
                        ww2
                        ww5
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
49a22bac7d36324f8bbab2446e44694a
  index2SparseCond3 ::
    Index.Index 1 1 0 0 1 0 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),A,A,1*U(U),A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 1 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseCond3
                        ww1
                        ww2
                        ww5 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
94600da9390b2fbafa2f230551ea98e7
  index2SparseDens1 ::
    Index.Index 0 0 0 0 1 1 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(A,A,A,A,1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 1 1 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseDens1
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
4eecbd3f354dfeb3e1bd0d387a3356d0
  index2SparseDens1Area ::
    Index.Index 1 1 0 0 0 0 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,A,A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 0 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseDens1Area
                        ww1
                        ww2
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
bd52d59b3b45bf1a1bca78e57f5926fb
  index2SparseDens2 ::
    Index.Index 0 0 0 0 2 2 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(A,A,A,A,1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 2 2 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseDens2
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
a2ea7333625b00a358065892c1fa3631
  index2SparseDens2Area ::
    Index.Index 2 2 0 0 0 0 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,A,A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 2 2 0 0 0 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseDens2Area
                        ww1
                        ww2
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
8c1d9094f6708ef5e233132c096ce066
  index2SparseProjector ::
    Index.Index 1 0 0 0 1 0 0 6 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(1*U(U),A,A,A,1*U(U),A,A,U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 0 0 0 1 0 0 6) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseProjector
                        ww1
                        ww5
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
a88adcf5ec21035490922c8117563ab7
  index2SparseProjector1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
4e022534f4372815985d6db8175b905d
  index2SparseProjector2 ::
    Index.Index 1 0 0 0 0 0 0 4 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(1*U(U),A,A,A,A,A,A,U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 0 0 0 0 0 0 4) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseProjector2
                        ww1
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
829f2384ee9f90c38afa48a566b383da
  index2SparseintCond2_1 ::
    Index.Index 2 2 0 0 2 1 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U),1*U(U),A,A,1*U(U),1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 2 2 0 0 2 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseintCond2_1
                        ww1
                        ww2
                        ww5
                        ww6 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
f3910b728b9372ce9f27a15dcc95b6a4
  index2SparseintCond2_1Symbol ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Index.Index 2 3 0 0 2 1 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2,
     Strictness: <L,1*U><S,1*U(1*U(U),1*U(U),A,A,1*U(U),1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (w1 :: Index.Index 2 3 0 0 2 1 0 0) ->
                 case w1 of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseintCond2_1Symbol
                        w
                        ww1
                        ww2
                        ww5
                        ww6 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
220e07237f293334f0fc5945d7eaf66a
  index2SparseintCond2_1SymbolPure ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Index.Index 2 3 0 0 1 1 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2,
     Strictness: <L,1*U><S,1*U(1*U(U),1*U(U),A,A,1*U(U),1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (w1 :: Index.Index 2 3 0 0 1 1 1 1) ->
                 case w1 of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseintCond2_1SymbolPure
                        w
                        ww1
                        ww2
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
48fa7bd8aa45d9db23bbbf5a9d5965f7
  index2SparseintCond2_1SymbolRed ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Index.Index 1 2 0 0 1 0 0 0 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2,
     Strictness: <L,1*U><S,1*U(1*U(U),1*U(U),A,A,1*U(U),A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (w1 :: Index.Index 1 2 0 0 1 0 0 0) ->
                 case w1 of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Integrabillity.$windex2SparseintCond2_1SymbolRed
                        w
                        ww1
                        ww2
                        ww5 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
b835b3c74e4f06c9f7de5ec438887aff
  int1Test ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 1 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wint1Test w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
8090ba96bea45d6a0abe86d3aa167e56
  int1Test1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.areaMetricMetric3,
                  Integrabillity.areaMetricMetric4)) -}
de6f038a557e46c53f64520daf39b7d7
  int1Test2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wint1Test2 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
e6726a79ef80ae93da5041df196534d0
  int1Test3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wint1Test3 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
190bec525b96df681b11ec9e8884e1c9
  int1Zero ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 1 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wint1Zero w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
3d89276df4ac2644a927e4a9a91b7245
  intCond1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond1 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
c612129fedd074c318a93d9ea5cbce69
  intCond1RelFac ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond1RelFac
                        w
                        w1
                        w2
                        w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
2cf02e54c25a955960678814abcb83a0
  intCond1RelFac_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
165e1e96b4f1c9cb5717194f010b72b7
  intCond1Zero ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,A><L,A><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond1Zero w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
61514018173dfa8bfb074e0500ce191f
  intCond1noFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond1noFactor
                        w
                        w1
                        w2
                        w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
e5f2dbb5abff159eb9862f68c2041bf7
  intCond2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wintCond2 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
74ead4720dd8172b4969d9ad7cdd8c34
  intCond2_1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond2_1 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
f7dd987a9d0e2e4e65d28c92b2a448a5
  intCond2_1Symbol ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 3 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond2_1Symbol w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 3
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
10e6d1168ea694f6325da236eea15af9
  intCond2_1SymbolPure ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 3 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond2_1SymbolPure
                        w
                        w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 3
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
1a4e13fcb1ee30777cea84fdaeee3d2e
  intCond2_1SymbolRed ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond2_1SymbolRed
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
c6aec5a0b95040ceff2dd100b82a7fd5
  intCond2_1SymbolRedWrong ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCond2_1SymbolRedWrong
                        w
                        w1
                        w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
ba3076419d5f7ac0895f5fcf01f99d3e
  intCond2_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
14c94e1d667f7cb02e9b02eca2d006ec
  intCond3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wintCond3 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
2411b60b7c86b3f3157513a376fe3cdb
  intCond4 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.areaMetricMetric4,
                  Integrabillity.densityEqnArea5)) -}
0f65d1f708cf2af28643fe8b91fd1af2
  intCond5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.index2SparseProjector1,
                  Integrabillity.index2SparseProjector1)) -}
71b1fa6657328861e37f0a645acdfa87
  intCond6 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:Integrabillity.intCond2} False True} {__scc {main:Integrabillity.intCond2.int2} True True} case BasicTensors.delta_3 of ww { Tensor.Tensor ww1 ->
                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                ww1
                                                                                                                                ww1 of ww4 { Unit# ww5 ->
                                                                                                                         case Tensor.$wtensorTranspose
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 2
                                                                                                                                @ 2
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                Integrabillity.intCond7
                                                                                                                                Integrabillity.areaMetricMetric2
                                                                                                                                ww5
                                                                                                                                  `cast`
                                                                                                                                (Data.Map.Internal.Map
                                                                                                                                   ((,,,,,,,)
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_20>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_20>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_19>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_19>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_9>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_9>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (AddDef (<1>_N,
                                                                                                                                                  <1>_N))
                                                                                                                                         <Index.Uind_3>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (AddDef (<1>_N,
                                                                                                                                                  <1>_N))
                                                                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                                                                   <GHC.Real.Rational>_R)_R of ww2 { Unit# ww3 ->
                                                                                                                         case BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 2
                                                                                                                                @ 2
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                ww3
                                                                                                                                ww8 of ww9 { Unit# ww10 ->
                                                                                                                         Tensor.Tensor
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (2
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (2
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           ww10 } } } } }) -}
50502e0eb0c4bc07789c81692ac3598b
  intCond7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
1bc77c04d0c279615b4c9e8f4ad6fcd5
  intCond8 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Integrabillity.densityEqnArea5,
                  Integrabillity.densityEqnArea5)) -}
d4ef4d92fdebbc5fef2d3d02afa10f6e
  intCondComp ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 3 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCondComp w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 3
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
84945337f4ab98272933788ce4b1a1fe
  intCondCompNoSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 1 1 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCondCompNoSym
                        w
                        w1
                        w2
                        w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
cf4cdd0e521e732a7dc68feab6710e3a
  intCondCompZero ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 3 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCondCompZero w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 3
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
560fcb33287a348cca7c2f92bb71c274
  intCondOrd2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 3 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCondOrd2 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 3
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
c18b8f9f2997da4fafb2df8c9cfbb7b2
  intCondSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 1 0 0 2 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintCondSym w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
00cd005855e4102401a6e1c25c9a5108
  intRankDef1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 2 0 0 3 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintRankDef1 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 3
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
2da377583ab18d2860f7da3b3c612ac1
  intRankDef2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintRankDef2 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
23b803f3ee50ebcec4f3815cad7b9253
  intRankDef3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 2 0 0 2 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintRankDef3 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
3584d2db7061fda5c25456ca3d15a01f
  intRankDef4 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 2 2 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintRankDef4 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
fdeae808b6436e3bfbeaf45698b47b3a
  intRankDef5 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 2 0 0 2 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$wintRankDef5 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
9e4c6ee4e2fa55535e903b928256ae6c
  inter4Factor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case Integrabillity.$winter4Factor w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
6f9f1ea33969d2d34ef9b638cd7a7220
  inter4noFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case Integrabillity.$winter4noFactor w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
cb4773ca058a698a4a3c15cdc2610b34
  inter6Factor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$winter6Factor w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
a1e2fe0b0085b5ff12b14421ed0d950c
  inter6noFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$winter6noFactor
                        w
                        w1
                        w2
                        w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
842518518a00bf4226dbd54050405751
  interProTest ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 1 0 0 2 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Integrabillity.$winterProTest w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
413b499c8a254e20256ae1cd7514859b
  mkEqnSparseAreaM ::
    Tensor.Tensor 0 1 0 0 1 1 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 1 1 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseAreaM} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Integrabillity.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Integrabillity.mkEqnSparseAreaM_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
d70158ded89fd2851488adfe30b05397
  mkEqnSparseAreaM_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 1 1 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
813170269f0adb5e039e44bb71e1a0a9
  mkEqnSparseAreaMintCond ::
    Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseAreaMintCond} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                 Integrabillity.$sfromList
                                                                                   @ (GHC.Real.Ratio
                                                                                        GHC.Integer.Type.Integer)
                                                                                   (Integrabillity.mkEqnSparseAreaMintCond_go13
                                                                                      (GHC.Types.[]
                                                                                         @ ((GHC.Types.Int,
                                                                                             GHC.Types.Int),
                                                                                            GHC.Real.Rational))
                                                                                      map1) }) -}
1eca769a92520c6383260a817f9f6249
  mkEqnSparseAreaMintCond_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
0d1025409ce878ae250d31259688a88a
  mkEqnSparseBlock1Eta ::
    Tensor.Tensor 0 1 0 0 0 0 2 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 0 0 2 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseBlock1Eta} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                              Integrabillity.$sfromList
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                (Integrabillity.mkEqnSparseBlock1Eta_go13
                                                                                   (GHC.Types.[]
                                                                                      @ ((GHC.Types.Int,
                                                                                          GHC.Types.Int),
                                                                                         GHC.Real.Rational))
                                                                                   map1) }) -}
ca42efa9c686d2d5b22d864cefd0c665
  mkEqnSparseBlock1Eta_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
34d2e39b88ceb6e68bd170ed1aa0b6c7
  mkEqnSparseCond1 ::
    Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseCond1} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Integrabillity.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Integrabillity.mkEqnSparseCond1_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
cb543baeabd0a9efb1780f986caacb6f
  mkEqnSparseCond1Zero ::
    Tensor.Tensor 0 1 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 1 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseCond1Zero} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                              Integrabillity.$sfromList
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                (Integrabillity.mkEqnSparseCond1Zero_go13
                                                                                   (GHC.Types.[]
                                                                                      @ ((GHC.Types.Int,
                                                                                          GHC.Types.Int),
                                                                                         GHC.Real.Rational))
                                                                                   map1) }) -}
8a4ff35e1b6839f7073a5dac54495212
  mkEqnSparseCond1Zero_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 1 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
adf86d3acce69d492cb91f8e1e315085
  mkEqnSparseCond1_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
efe38a561ec4cbe977980a00da8f6ef4
  mkEqnSparseCond2 ::
    Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseCond2} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Integrabillity.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Integrabillity.mkEqnSparseCond2_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
bad943b2e56a3202553088f58e44d008
  mkEqnSparseCond2_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 0 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
13ff3d60f16f1c97d8fd2109630b4dfc
  mkEqnSparseCond3 ::
    Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseCond3} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Integrabillity.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Integrabillity.mkEqnSparseCond3_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
ee489c75e2557ff86dc1a0a079c7111c
  mkEqnSparseCond3_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
60300b9c0a67f0591e0e4cf5e0b4e8cb
  mkEqnSparseDens1 ::
    Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseDens1} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Integrabillity.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Integrabillity.mkEqnSparseDens1_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
5d7d85a7133a98e1991516746fe86683
  mkEqnSparseDens1Area ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseDens1Area} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                              Integrabillity.$sfromList
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                (Integrabillity.mkEqnSparseDens1Area_go13
                                                                                   (GHC.Types.[]
                                                                                      @ ((GHC.Types.Int,
                                                                                          GHC.Types.Int),
                                                                                         GHC.Real.Rational))
                                                                                   map1) }) -}
a0552668d391a2484710bced75930f46
  mkEqnSparseDens1Area_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
57994dfc145c8f5bd773cd830e145cd1
  mkEqnSparseDens1_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
d3c70b52413104e1bdf130f753311d2e
  mkEqnSparseDens2 ::
    Tensor.Tensor 0 0 0 0 2 2 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 0 0 0 2 2 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseDens2} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Integrabillity.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Integrabillity.mkEqnSparseDens2_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
8fa06f5de0fa9b64c0ef4ed988467e36
  mkEqnSparseDens2Area ::
    Tensor.Tensor 2 2 0 0 0 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 2 2 0 0 0 0 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseDens2Area} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                              Integrabillity.$sfromList
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                (Integrabillity.mkEqnSparseDens2Area_go13
                                                                                   (GHC.Types.[]
                                                                                      @ ((GHC.Types.Int,
                                                                                          GHC.Types.Int),
                                                                                         GHC.Real.Rational))
                                                                                   map1) }) -}
df275b95a9f8b6f64f5f2a3134947a0b
  mkEqnSparseDens2Area_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 0 0 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
9ccc9e52cdf391c6a21a8b93ce823698
  mkEqnSparseDens2_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 2 2 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
f476cee300758015fe33cc0459e1c4dd
  mkEqnSparseProjector ::
    Tensor.Tensor 1 0 0 0 1 0 0 6 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 0 0 0 1 0 0 6 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseProjector} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                              Integrabillity.$sfromList
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                (Integrabillity.mkEqnSparseProjector_go13
                                                                                   (GHC.Types.[]
                                                                                      @ ((GHC.Types.Int,
                                                                                          GHC.Types.Int),
                                                                                         GHC.Real.Rational))
                                                                                   map1) }) -}
70934047f27cefe1cbcb6c562eddeef5
  mkEqnSparseProjector2 ::
    Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseProjector2} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                               Integrabillity.$sfromList
                                                                                 @ (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                                 (Integrabillity.mkEqnSparseProjector2_go13
                                                                                    (GHC.Types.[]
                                                                                       @ ((GHC.Types.Int,
                                                                                           GHC.Types.Int),
                                                                                          GHC.Real.Rational))
                                                                                    map1) }) -}
c48f5645618d654fcdd7d00b7c140a3c
  mkEqnSparseProjector2_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 0 0 0 0 0 0 4) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
2ee26716ba981cd7052dae036d705e1f
  mkEqnSparseProjector_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 0 0 0 1 0 0 6) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
a48cebe9fc230b66865b51ad88eaf4db
  mkEqnSparseflatMetricInter ::
    Tensor.Tensor 0 0 0 0 0 1 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 0 0 0 0 1 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseflatMetricInter} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                    Integrabillity.$sfromList
                                                                                      @ (GHC.Real.Ratio
                                                                                           GHC.Integer.Type.Integer)
                                                                                      (Integrabillity.mkEqnSparseflatMetricInter_go13
                                                                                         (GHC.Types.[]
                                                                                            @ ((GHC.Types.Int,
                                                                                                GHC.Types.Int),
                                                                                               GHC.Real.Rational))
                                                                                         map1) }) -}
92a695ca7a8f6ee2390cb7e8811a70ff
  mkEqnSparseflatMetricInterProlong ::
    Tensor.Tensor 0 0 0 0 1 2 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 0 0 0 1 2 1 1 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseflatMetricInterProlong} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                           Integrabillity.$sfromList
                                                                                             @ (GHC.Real.Ratio
                                                                                                  GHC.Integer.Type.Integer)
                                                                                             (Integrabillity.mkEqnSparseflatMetricInterProlong_go13
                                                                                                (GHC.Types.[]
                                                                                                   @ ((GHC.Types.Int,
                                                                                                       GHC.Types.Int),
                                                                                                      GHC.Real.Rational))
                                                                                                map1) }) -}
f37f1e3c80c3628d9f29d9325354fbec
  mkEqnSparseflatMetricInterProlong_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 1 2 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
4624fb369cdf5dba4185473050cceaa9
  mkEqnSparseflatMetricInter_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 0 1 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
6f30b57164b2c7a35b70b58e5e2d8769
  mkEqnSparseintCond2_1 ::
    Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCond2_1} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                               Integrabillity.$sfromList
                                                                                 @ (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                                 (Integrabillity.mkEqnSparseintCond2_1_go13
                                                                                    (GHC.Types.[]
                                                                                       @ ((GHC.Types.Int,
                                                                                           GHC.Types.Int),
                                                                                          GHC.Real.Rational))
                                                                                    map1) }) -}
b40cd213cac4c25a6e0a75da543ab7da
  mkEqnSparseintCond2_1New ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Integrabillity.$wmkEqnSparseintCond2_1New w ww1 }) -}
8ef38c385e4216ff8084ba24e320a1b8
  mkEqnSparseintCond2_1Symbol ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Tensor.Tensor 2 3 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 3 0 0 2 1 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Integrabillity.$wmkEqnSparseintCond2_1Symbol w ww1 }) -}
1a40d8f9a95a44b592c094085d8fd02c
  mkEqnSparseintCond2_1SymbolPure ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Tensor.Tensor 2 3 0 0 1 1 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 3 0 0 1 1 1 1 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Integrabillity.$wmkEqnSparseintCond2_1SymbolPure w ww1 }) -}
32267d0bcdcae30b2af7a299bfac373e
  mkEqnSparseintCond2_1SymbolRed ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int)
                   (w1 :: Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Integrabillity.$wmkEqnSparseintCond2_1SymbolRed w ww1 }) -}
78e406bc99c5d8d424eb344efdaff5ca
  mkEqnSparseintCond2_1SymbolRedFull ::
    Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 2 0 0 1 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCond2_1SymbolRedFull} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                            Integrabillity.$sfromList
                                                                                              @ (GHC.Real.Ratio
                                                                                                   GHC.Integer.Type.Integer)
                                                                                              (Integrabillity.mkEqnSparseintCond2_1SymbolRedFull_go13
                                                                                                 (GHC.Types.[]
                                                                                                    @ ((GHC.Types.Int,
                                                                                                        GHC.Types.Int),
                                                                                                       GHC.Real.Rational))
                                                                                                 map1) }) -}
bdefebabd0d2abb9fb705a1ff3ecdecb
  mkEqnSparseintCond2_1SymbolRedFull_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 2 0 0 1 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
c3043931bb4b5b54a8c16aa166b13af0
  mkEqnSparseintCond2_1_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 2 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
fc441c14b591e0447926cae16760026e
  mkEqnSparseintCondComp ::
    Tensor.Tensor 1 2 0 0 3 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 2 0 0 3 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCondComp} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                Integrabillity.$sfromList
                                                                                  @ (GHC.Real.Ratio
                                                                                       GHC.Integer.Type.Integer)
                                                                                  (Integrabillity.mkEqnSparseintCondComp_go13
                                                                                     (GHC.Types.[]
                                                                                        @ ((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           GHC.Real.Rational))
                                                                                     map1) }) -}
570158158051610d6e6e344a6a9857d4
  mkEqnSparseintCondCompNew ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 1 2 0 0 3 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 1 2 0 0 3 1 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Integrabillity.$wmkEqnSparseintCondCompNew w ww1 }) -}
a553cae80e130616d581e29e7b27d5f5
  mkEqnSparseintCondCompNoSym ::
    Tensor.Tensor 1 2 0 0 1 1 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 2 0 0 1 1 2 2 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCondCompNoSym} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                     Integrabillity.$sfromList
                                                                                       @ (GHC.Real.Ratio
                                                                                            GHC.Integer.Type.Integer)
                                                                                       (Integrabillity.mkEqnSparseintCondCompNoSym_go13
                                                                                          (GHC.Types.[]
                                                                                             @ ((GHC.Types.Int,
                                                                                                 GHC.Types.Int),
                                                                                                GHC.Real.Rational))
                                                                                          map1) }) -}
243377691e5ab9733c8753aef1fa8d80
  mkEqnSparseintCondCompNoSym_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 2 0 0 1 1 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
c6cda9b1124c4741eb100d063930684b
  mkEqnSparseintCondComp_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 2 0 0 3 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
2f42837a3e2f1d2d492c2593c3e6ae4b
  mkEqnSparseintCondOrd2 ::
    Tensor.Tensor 1 1 0 0 3 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 3 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCondOrd2} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                Integrabillity.$sfromList
                                                                                  @ (GHC.Real.Ratio
                                                                                       GHC.Integer.Type.Integer)
                                                                                  (Integrabillity.mkEqnSparseintCondOrd2_go13
                                                                                     (GHC.Types.[]
                                                                                        @ ((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           GHC.Real.Rational))
                                                                                     map1) }) -}
098315ac1a33e1bc1d43023100f1a1c8
  mkEqnSparseintCondOrd2_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 3 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
4a0ff96c3c3a03b198967efe5e6c87ce
  mkEqnSparseintCondSym ::
    Tensor.Tensor 0 1 0 0 2 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 2 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintCondSym} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                               Integrabillity.$sfromList
                                                                                 @ (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                                 (Integrabillity.mkEqnSparseintCondSym_go13
                                                                                    (GHC.Types.[]
                                                                                       @ ((GHC.Types.Int,
                                                                                           GHC.Types.Int),
                                                                                          GHC.Real.Rational))
                                                                                    map1) }) -}
2d3e49d46049ea62dec6ad9506899a1c
  mkEqnSparseintCondSym_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 2 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
a3e45699cf904a69e84493d635348884
  mkEqnSparseintRankDef1 ::
    Tensor.Tensor 0 2 0 0 3 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 2 0 0 3 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintRankDef1} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                Integrabillity.$sfromList
                                                                                  @ (GHC.Real.Ratio
                                                                                       GHC.Integer.Type.Integer)
                                                                                  (Integrabillity.mkEqnSparseintRankDef1_go13
                                                                                     (GHC.Types.[]
                                                                                        @ ((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           GHC.Real.Rational))
                                                                                     map1) }) -}
6f3f814e00b838125aacddc1b6cab6d4
  mkEqnSparseintRankDef1_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 2 0 0 3 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
c74ed25ac8aca3d88630ed5092e8042b
  mkEqnSparseintRankDef3 ::
    Tensor.Tensor 0 2 0 0 2 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 2 0 0 2 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintRankDef3} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                Integrabillity.$sfromList
                                                                                  @ (GHC.Real.Ratio
                                                                                       GHC.Integer.Type.Integer)
                                                                                  (Integrabillity.mkEqnSparseintRankDef3_go13
                                                                                     (GHC.Types.[]
                                                                                        @ ((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           GHC.Real.Rational))
                                                                                     map1) }) -}
d339b2ffb0d8cd3acc50caf9bc8bdccc
  mkEqnSparseintRankDef3_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 2 0 0 2 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
44046b1da01c242fbebfc2b821029bfe
  mkEqnSparseintRankDef4 ::
    Tensor.Tensor 0 0 0 0 2 2 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 0 0 0 2 2 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseintRankDef4} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                Integrabillity.$sfromList
                                                                                  @ (GHC.Real.Ratio
                                                                                       GHC.Integer.Type.Integer)
                                                                                  (Integrabillity.mkEqnSparseintRankDef4_go13
                                                                                     (GHC.Types.[]
                                                                                        @ ((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           GHC.Real.Rational))
                                                                                     map1) }) -}
83bb7f894eaddd7ad930c19537171b23
  mkEqnSparseintRankDef4_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 2 2 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
8c50ffecb02ff1adf81e4a742a13fc68
  mkEqnSparseinter6Mat ::
    Tensor.Tensor 1 1 0 0 1 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseinter6Mat} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                              Integrabillity.$sfromList
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                (Integrabillity.mkEqnSparseinter6Mat_go13
                                                                                   (GHC.Types.[]
                                                                                      @ ((GHC.Types.Int,
                                                                                          GHC.Types.Int),
                                                                                         GHC.Real.Rational))
                                                                                   map1) }) -}
bd3d9c78d68efb3d9fc63427d2b62eb4
  mkEqnSparseinter6Mat_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
ffbe79535ccabf79288f88f36c028f90
  mkEqnSparseinterMat ::
    Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Integrabillity.mkEqnSparseinterMat} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                             Integrabillity.$sfromList
                                                                               @ (GHC.Real.Ratio
                                                                                    GHC.Integer.Type.Integer)
                                                                               (Integrabillity.mkEqnSparseinterMat_go13
                                                                                  (GHC.Types.[]
                                                                                     @ ((GHC.Types.Int,
                                                                                         GHC.Types.Int),
                                                                                        GHC.Real.Rational))
                                                                                  map1) }) -}
dcad98ebac237b4d16cd4df302690296
  mkEqnSparseinterMat_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
7b405e0a47f25c322b495217fee52a49
  projectorMatrix ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 0 0 0 1 0 0 6 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Integrabillity.projectorMatrix1
                  `cast`
                (<Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20>_R
                 ->_R <Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9>_R
                 ->_R (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (AddDef (<4>_N, <2>_N))
                         <GHC.Real.Rational>_R)_R) -}
e8e1b51c11caa48d139008f182d0d126
  projectorMatrix1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (4 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wprojectorMatrix w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ (1 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 1)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (4 GHC.TypeNats.+ 2)
                   @ GHC.Real.Rational
                   ww1 }) -}
dc7b8cf54475bfbb2ba7cf2c1baa827e
  projectorMatrix2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (map1Area :: Data.Map.Internal.Map
                                  (Index.Linds_3 4) Index.Uind_20) ->
                 {__scc {main:Integrabillity.projectorMatrix2} True True} BasicTensors.interI_Area
                                                                            map1Area) -}
94237c2cb75286568e33755bf16e0273
  projectorMatrixMixed1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 0 0 0 1 0 0 6 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Integrabillity.projectorMatrixMixed4
                  `cast`
                (<Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20>_R
                 ->_R <Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9>_R
                 ->_R (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (AddDef (<4>_N, <2>_N))
                         <GHC.Real.Rational>_R)_R) -}
3e8b6595002aab51a0ce4ff6bbae905d
  projectorMatrixMixed2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 0 0 0 1 0 0 6 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Integrabillity.projectorMatrixMixed5
                  `cast`
                (<Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20>_R
                 ->_R <Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9>_R
                 ->_R (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (AddDef (<4>_N, <2>_N))
                         <GHC.Real.Rational>_R)_R) -}
d01b1964f2a69c55774781b275eb755e
  projectorMatrixMixed4 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (4 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wprojectorMatrixMixed1
                        w
                        w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ (1 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 1)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (4 GHC.TypeNats.+ 2)
                   @ GHC.Real.Rational
                   ww1 }) -}
df10fdfecaed752fd62f3d59a68479d5
  projectorMatrixMixed5 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (4 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wprojectorMatrixMixed2
                        w
                        w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ (1 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 1)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (4 GHC.TypeNats.+ 2)
                   @ GHC.Real.Rational
                   ww1 }) -}
2b3758cb4c93aa9eadeb83c36808d782
  projectorMatrixSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 1 0 0 0 1 0 0 6 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Integrabillity.projectorMatrixSym1
                  `cast`
                (<Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20>_R
                 ->_R <Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9>_R
                 ->_R (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (AddDef (<4>_N, <2>_N))
                         <GHC.Real.Rational>_R)_R) -}
2b313575c7a857bc493c649bfa4e9f1e
  projectorMatrixSym1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (4 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case Integrabillity.$wprojectorMatrixSym w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ (1 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 1)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (0 GHC.TypeNats.+ 0)
                   @ (4 GHC.TypeNats.+ 2)
                   @ GHC.Real.Rational
                   ww1 }) -}
"SPEC/Integrabillity fromList @ (Int, Int) _" [orphan] forall @ a
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          (GHC.Types.Int,
                                                                           GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = Integrabillity.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

