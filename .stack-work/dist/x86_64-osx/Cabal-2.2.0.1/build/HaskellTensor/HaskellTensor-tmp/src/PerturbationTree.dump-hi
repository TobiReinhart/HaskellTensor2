
==================== FINAL INTERFACE ====================
2019-01-23 10:31:17.053734 UTC

interface main:PerturbationTree [hpc] 8043
  interface hash: a7722b5fd006c1f5be51c6e9abdcf82e
  ABI hash: 0d769f92700af139ac3964c89a31ae12
  export-list hash: 95ea0105078fba4fd2827412c567f1d9
  orphan hash: c514c2bcf542795640571bdbe2bda124
  flag hash: badd6e954112606c59e049e70d21435f
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  PerturbationTree.addForests
  PerturbationTree.getVarsForest
  PerturbationTree.getVarsTree
  PerturbationTree.mkAllVarsfrom2
  PerturbationTree.mkEpsilonSeq
  PerturbationTree.mkEtaSeq
  PerturbationTree.mkTreeEpsilon
  PerturbationTree.mkTreeEta
  PerturbationTree.printForest
  PerturbationTree.printTree
  PerturbationTree.reduceAnsatzEpsilon
  PerturbationTree.reduceAnsatzEta
  PerturbationTree.searchForestEpsilonSeq
  PerturbationTree.searchForestEtaSeq
  PerturbationTree.sortForest
  PerturbationTree.sortIndexEtas
  PerturbationTree.swapBlockLabelForest
  PerturbationTree.swapBlockLabelTree
  PerturbationTree.swapLabelForest
  PerturbationTree.swapLabelTree
  PerturbationTree.symAnsatzForest
  PerturbationTree.AnsatzNode
  PerturbationTree.Epsilon
  PerturbationTree.Eta
  PerturbationTree.Symmetry
  PerturbationTree.Var
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0* deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  containers-0.5.11.0:Data.Tree 334e5590b70599cff00c9af57a2f6140
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
603f5f0f4769f46f427ccf0961210899
  $fEqAnsatzNode :: GHC.Classes.Eq PerturbationTree.AnsatzNode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ PerturbationTree.AnsatzNode
                  PerturbationTree.$fEqAnsatzNode_$c==
                  PerturbationTree.$fEqAnsatzNode_$c/= -}
603f5f0f4769f46f427ccf0961210899
  $fEqAnsatzNode_$c/= ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fEqAnsatzNode_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
603f5f0f4769f46f427ccf0961210899
  $fEqAnsatzNode_$c== ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PerturbationTree.AnsatzNode)
                   (ds1 :: PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.==} True True} case ds of wild {
                                                                PerturbationTree.EpsilonNode a1
                                                                -> case ds1 of wild1 {
                                                                     DEFAULT -> GHC.Types.False
                                                                     PerturbationTree.EpsilonNode b1
                                                                     -> case a1 of wild2 { (,,,) a2 a3 a4 a5 ->
                                                                        case b1 of wild3 { (,,,) b2 b3 b4 b5 ->
                                                                        case a2 of wild4 { GHC.Types.I# x ->
                                                                        case b2 of wild5 { GHC.Types.I# y ->
                                                                        case GHC.Prim.==#
                                                                               x
                                                                               y of lwild {
                                                                          DEFAULT -> GHC.Types.False
                                                                          1#
                                                                          -> case a3 of wild6 { GHC.Types.I# x1 ->
                                                                             case b3 of wild7 { GHC.Types.I# y1 ->
                                                                             case GHC.Prim.==#
                                                                                    x1
                                                                                    y1 of lwild1 {
                                                                               DEFAULT
                                                                               -> GHC.Types.False
                                                                               1#
                                                                               -> case a4 of wild8 { GHC.Types.I# x2 ->
                                                                                  case b4 of wild9 { GHC.Types.I# y2 ->
                                                                                  case GHC.Prim.==#
                                                                                         x2
                                                                                         y2 of lwild2 {
                                                                                    DEFAULT
                                                                                    -> GHC.Types.False
                                                                                    1#
                                                                                    -> GHC.Classes.eqInt
                                                                                         a5
                                                                                         b5 } } } } } } } } } } } }
                                                                PerturbationTree.EtaNode a1
                                                                -> case ds1 of wild1 {
                                                                     DEFAULT -> GHC.Types.False
                                                                     PerturbationTree.EtaNode b1
                                                                     -> case a1 of ww { (,) ww1 ww2 ->
                                                                        case b1 of ww3 { (,) ww4 ww5 ->
                                                                        case ww1 of wild2 { GHC.Types.I# x ->
                                                                        case ww4 of wild3 { GHC.Types.I# y ->
                                                                        case GHC.Prim.==#
                                                                               x
                                                                               y of lwild {
                                                                          DEFAULT -> GHC.Types.False
                                                                          1#
                                                                          -> GHC.Classes.eqInt
                                                                               ww2
                                                                               ww5 } } } } } }
                                                                PerturbationTree.EpsilonLeaf a1 a2
                                                                -> case ds1 of wild1 {
                                                                     DEFAULT -> GHC.Types.False
                                                                     PerturbationTree.EpsilonLeaf b1 b2
                                                                     -> case a1 of wild2 { (,,,) a4 a5 a3 a6 ->
                                                                        case b1 of wild3 { (,,,) b4 b5 b3 b6 ->
                                                                        case a4 of wild4 { GHC.Types.I# x ->
                                                                        case b4 of wild5 { GHC.Types.I# y ->
                                                                        case GHC.Prim.==#
                                                                               x
                                                                               y of lwild {
                                                                          DEFAULT -> GHC.Types.False
                                                                          1#
                                                                          -> case a5 of wild6 { GHC.Types.I# x1 ->
                                                                             case b5 of wild7 { GHC.Types.I# y1 ->
                                                                             case GHC.Prim.==#
                                                                                    x1
                                                                                    y1 of lwild1 {
                                                                               DEFAULT
                                                                               -> GHC.Types.False
                                                                               1#
                                                                               -> case a3 of wild8 { GHC.Types.I# x2 ->
                                                                                  case b3 of wild9 { GHC.Types.I# y2 ->
                                                                                  case GHC.Prim.==#
                                                                                         x2
                                                                                         y2 of lwild2 {
                                                                                    DEFAULT
                                                                                    -> GHC.Types.False
                                                                                    1#
                                                                                    -> case a6 of wild10 { GHC.Types.I# x3 ->
                                                                                       case b6 of wild11 { GHC.Types.I# y3 ->
                                                                                       case GHC.Prim.==#
                                                                                              x3
                                                                                              y3 of lwild3 {
                                                                                         DEFAULT
                                                                                         -> GHC.Types.False
                                                                                         1#
                                                                                         -> Data.IntMap.Internal.equal
                                                                                              @ (GHC.Real.Ratio
                                                                                                   GHC.Integer.Type.Integer)
                                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio
                                                                                              a2
                                                                                              b2 } } } } } } } } } } } } } } }
                                                                PerturbationTree.EtaLeaf a1 a2
                                                                -> case ds1 of wild1 {
                                                                     DEFAULT -> GHC.Types.False
                                                                     PerturbationTree.EtaLeaf b1 b2
                                                                     -> case a1 of ww { (,) ww1 ww2 ->
                                                                        case b1 of ww3 { (,) ww4 ww5 ->
                                                                        case ww1 of wild2 { GHC.Types.I# x ->
                                                                        case ww4 of wild3 { GHC.Types.I# y ->
                                                                        case GHC.Prim.==#
                                                                               x
                                                                               y of lwild {
                                                                          DEFAULT -> GHC.Types.False
                                                                          1#
                                                                          -> case ww2 of wild4 { GHC.Types.I# x1 ->
                                                                             case ww5 of wild5 { GHC.Types.I# y1 ->
                                                                             case GHC.Prim.==#
                                                                                    x1
                                                                                    y1 of lwild1 {
                                                                               DEFAULT
                                                                               -> GHC.Types.False
                                                                               1#
                                                                               -> Data.IntMap.Internal.equal
                                                                                    @ (GHC.Real.Ratio
                                                                                         GHC.Integer.Type.Integer)
                                                                                    GHC.Real.$fOrdRatio_$s$fEqRatio
                                                                                    a2
                                                                                    b2 } } } } } } } } } }) -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode :: GHC.Classes.Ord PerturbationTree.AnsatzNode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ PerturbationTree.AnsatzNode
                  PerturbationTree.$fEqAnsatzNode
                  PerturbationTree.$fOrdAnsatzNode_$ccompare
                  PerturbationTree.$fOrdAnsatzNode_$c<
                  PerturbationTree.$fOrdAnsatzNode_$c<=
                  PerturbationTree.$fOrdAnsatzNode_$c>
                  PerturbationTree.$fOrdAnsatzNode_$c>=
                  PerturbationTree.$fOrdAnsatzNode_$cmax
                  PerturbationTree.$fOrdAnsatzNode_$cmin -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$c< ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$c<= ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$c> ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$c>= ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$ccompare ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$cmax ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
603f5f0f4769f46f427ccf0961210899
  $fOrdAnsatzNode_$cmin ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
603f5f0f4769f46f427ccf0961210899
  $fShowAnsatzNode :: GHC.Show.Show PerturbationTree.AnsatzNode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ PerturbationTree.AnsatzNode
                  PerturbationTree.$fShowAnsatzNode_$cshowsPrec
                  PerturbationTree.$fShowAnsatzNode_$cshow
                  PerturbationTree.$fShowAnsatzNode_$cshowList -}
603f5f0f4769f46f427ccf0961210899
  $fShowAnsatzNode1 :: PerturbationTree.AnsatzNode -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: PerturbationTree.AnsatzNode) ->
                 PerturbationTree.$w$cshowsPrec 0# w) -}
15c2cd3a55ab3be9ae4d4deefc023d33
  $fShowAnsatzNode2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
603f5f0f4769f46f427ccf0961210899
  $fShowAnsatzNode_$cshow ::
    PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PerturbationTree.AnsatzNode) ->
                 PerturbationTree.$fShowAnsatzNode_$cshowsPrec
                   PerturbationTree.$fShowAnsatzNode2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
603f5f0f4769f46f427ccf0961210899
  $fShowAnsatzNode_$cshowList ::
    [PerturbationTree.AnsatzNode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [PerturbationTree.AnsatzNode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ PerturbationTree.AnsatzNode
                   PerturbationTree.$fShowAnsatzNode1
                   ls
                   s) -}
603f5f0f4769f46f427ccf0961210899
  $fShowAnsatzNode_$cshowsPrec ::
    GHC.Types.Int -> PerturbationTree.AnsatzNode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: PerturbationTree.AnsatzNode) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PerturbationTree.$w$cshowsPrec ww1 w1 }) -}
d36dedd13a6c13da205320948d3f7a01
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/= -}
5214d7f39d6f35e7496496517eb0add5
  $s$fEq(,)1 ::
    GHC.Classes.Eq
      (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fEqInt
                     GHC.Real.$fOrdRatio_$s$fEqRatio)
                  PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/=1 -}
e52332305fe5c0fb656e68f72a76539d
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
c2064ed0f8b2f2c9d2ecc308ed9cd01a
  $s$fEq(,)_$s$fEq(,)_$c/=1 ::
    (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
    -> (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U,U))><S(S(S)L),1*U(1*U(U),1*U(U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer))
                   (y :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case a2 of wild4 { GHC.Real.:% a4 a5 ->
                      case b2 of wild5 { GHC.Real.:% b4 b5 ->
                      case GHC.Integer.Type.eqInteger# a4 b4 of wild6 {
                        DEFAULT -> GHC.Types.True
                        1#
                        -> case GHC.Integer.Type.eqInteger# a5 b5 of wild3 {
                             DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } } } } }) -}
c903a0d42b8ed532af707ab205eb6a56
  $s$fEqTree ::
    GHC.Classes.Eq (Data.Tree.Tree PerturbationTree.AnsatzNode)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                  (Data.Tree.$fEqTree_$c==
                     @ PerturbationTree.AnsatzNode
                     PerturbationTree.$fEqAnsatzNode)
                  PerturbationTree.$s$fEqTree_$s$fEqTree_$c/= -}
f8df0de655058f34b89f171285432c44
  $s$fEqTree_$s$fEqTree_$c/= ::
    Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Tree PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x4 :: Data.Tree.Tree PerturbationTree.AnsatzNode)
                   (y :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case Data.Tree.$fEqTree_$c==
                        @ PerturbationTree.AnsatzNode
                        PerturbationTree.$fEqAnsatzNode
                        x4
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ebde50f947ab2ccec752a3ef528069e3
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
                  PerturbationTree.$s$fEq(,)1
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (\ (a1 :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer))
                     (b1 :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio) -}
67d0c214df918ec292ddd9af41e6b101
  $tc'EpsilonLeaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4753938420670548784##
                   350947589073638828##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EpsilonLeaf2
                   0#
                   PerturbationTree.$tc'EpsilonLeaf1) -}
59dd582a69412aa37477d63905b4ce99
  $tc'EpsilonLeaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
85646bd89d6f288ea12db7eda59f54df
  $tc'EpsilonLeaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EpsilonLeaf3) -}
9da6fa034bcf15969fc60294efac08b3
  $tc'EpsilonLeaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EpsilonLeaf"#) -}
6033d93121ff4fb17c5e363ac761e7f6
  $tc'EpsilonNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17996255556894589955##
                   7675804717742088882##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EpsilonNode2
                   0#
                   PerturbationTree.$tc'EpsilonNode1) -}
8fc14ecfd5c57bd6c54ee89ab8e218f3
  $tc'EpsilonNode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e58f1a1e1c9c7a4f455c8a99fd59ae02
  $tc'EpsilonNode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EpsilonNode3) -}
3f1699b5af7a385297953df617b9016b
  $tc'EpsilonNode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EpsilonNode"#) -}
fa37e2445ecfd98bc8128a0d82c4be7d
  $tc'EtaLeaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15899163492397549099##
                   10324652338567301460##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EtaLeaf2
                   0#
                   PerturbationTree.$tc'EtaLeaf1) -}
d77ca704109227139db6b21a6af10294
  $tc'EtaLeaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
90e4095c91bf63c88a7900f10b912f25
  $tc'EtaLeaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EtaLeaf3) -}
1456a2a84fd18fd219bb9dce4e9ff51d
  $tc'EtaLeaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EtaLeaf"#) -}
37583794049d841ce2ea989965c453dc
  $tc'EtaNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   680726839784378728##
                   16495365673758478913##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EtaNode2
                   0#
                   PerturbationTree.$tc'EtaNode1) -}
6e6a7b1da4d221fb9420a603d3acf8c0
  $tc'EtaNode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3390eaefd8ba3d054e31e21102ec0351
  $tc'EtaNode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EtaNode3) -}
a9949d47a8fc3093cba7ffa0f3e9baed
  $tc'EtaNode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EtaNode"#) -}
edca90e8232cb1734e0848f578ec309b
  $tcAnsatzNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2968987490096776203##
                   9839280410892179781##
                   PerturbationTree.$trModule
                   PerturbationTree.$tcAnsatzNode1
                   0#
                   GHC.Types.krep$*) -}
c44fb9f7909e573a0a2d6d0fa16538e6
  $tcAnsatzNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tcAnsatzNode2) -}
ffa27dfeb21ce4b6650c709fe7595329
  $tcAnsatzNode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AnsatzNode"#) -}
250df17ffcab15d76bd72d00b7a4e701
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PerturbationTree.$trModule3
                   PerturbationTree.$trModule1) -}
4ba9adb716551aa4e266b65e69bca712
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$trModule2) -}
39ae9ca5ec81375fd2c9cd56333ac24d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PerturbationTree"#) -}
098d7d2d97cf2b0d439c8ed41e26edcb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$trModule4) -}
98bb877ac1db45aae886950a40e340d1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
603f5f0f4769f46f427ccf0961210899
  $w$cshowsPrec ::
    GHC.Prim.Int# -> PerturbationTree.AnsatzNode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
9faeb8c7914d4b9e0c495992f6075d8c
  $waddTree2Forest ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0] -}
98250206b3d3e9bc6f310cda208d4d4f
  $wlvl ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: PerturbationTree.AnsatzNode)
                   (ww1 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 case Data.Tree.$wfmapTree
                        @ PerturbationTree.AnsatzNode
                        @ GHC.Base.String
                        PerturbationTree.printAnsatzNode
                        ww
                        ww1 of ww3 { (#,#) ww4 ww5 ->
                 Data.Tree.$wdrawTree ww4 ww5 }) -}
24660f2dc3a3d3b4bea83d606b63405f
  $wmkAllVarsfrom2 ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [PerturbationTree.Var]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 {__scc {main:PerturbationTree.mkAllVarsfrom2} True True} case GHC.Prim.>#
                                                                                 ww
                                                                                 ww1 of lwild {
                                                                            DEFAULT
                                                                            -> letrec {
                                                                                 go8 :: GHC.Prim.Int#
                                                                                        -> [Data.IntMap.Internal.IntMap
                                                                                              GHC.Real.Rational]
                                                                                   {- Arity: 1,
                                                                                      Strictness: <L,U> -}
                                                                                 = \ (x :: GHC.Prim.Int#) ->
                                                                                   GHC.Types.:
                                                                                     @ (Data.IntMap.Internal.IntMap
                                                                                          GHC.Real.Rational)
                                                                                     (let {
                                                                                        x1 :: Data.IntSet.Internal.Key
                                                                                        = GHC.Types.I#
                                                                                            x
                                                                                      } in
                                                                                      {__scc {main:PerturbationTree.mkAllVarsfrom2.\} True True} Data.IntMap.Strict.fromList1
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   (Data.IntMap.Internal.Nil
                                                                                                                                                      @ GHC.Real.Rational)
                                                                                                                                                   (GHC.Types.:
                                                                                                                                                      @ (Data.IntSet.Internal.Key,
                                                                                                                                                         GHC.Real.Rational)
                                                                                                                                                      (x1,
                                                                                                                                                       PerturbationTree.mkAllVarsfrom1)
                                                                                                                                                      (GHC.Types.[]
                                                                                                                                                         @ (Data.IntSet.Internal.Key,
                                                                                                                                                            GHC.Real.Rational))))
                                                                                     (case GHC.Prim.==#
                                                                                             x
                                                                                             ww1 of lwild1 {
                                                                                        DEFAULT
                                                                                        -> go8
                                                                                             (GHC.Prim.+#
                                                                                                x
                                                                                                1#)
                                                                                        1#
                                                                                        -> GHC.Types.[]
                                                                                             @ (Data.IntMap.Internal.IntMap
                                                                                                  GHC.Real.Rational) })
                                                                               } in
                                                                               go8 ww
                                                                            1#
                                                                            -> GHC.Types.[]
                                                                                 @ (Data.IntMap.Internal.IntMap
                                                                                      GHC.Real.Rational) }) -}
5840544e1ca67aa75f2cd49885c6fccf
  $wmkEpsilonSeq ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> (# PerturbationTree.Epsilon,
          Data.Sequence.Internal.Seq PerturbationTree.Eta #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 {__scc {main:PerturbationTree.mkEpsilonSeq} True False} (# let {
                                                                              ww :: GHC.Types.Int
                                                                              = {__scc {main:PerturbationTree.mkEpsilonSeq} False True} {__scc {main:PerturbationTree.mkEpsilonSeq.eps} False True} Data.Sequence.Internal.$windex
                                                                                                                                                                                                      @ GHC.Types.Int
                                                                                                                                                                                                      w
                                                                                                                                                                                                      3#
                                                                            } in
                                                                            let {
                                                                              ww1 :: GHC.Types.Int
                                                                              = {__scc {main:PerturbationTree.mkEpsilonSeq} False True} {__scc {main:PerturbationTree.mkEpsilonSeq.eps} False True} Data.Sequence.Internal.$windex
                                                                                                                                                                                                      @ GHC.Types.Int
                                                                                                                                                                                                      w
                                                                                                                                                                                                      2#
                                                                            } in
                                                                            let {
                                                                              ww2 :: GHC.Types.Int
                                                                              = {__scc {main:PerturbationTree.mkEpsilonSeq} False True} {__scc {main:PerturbationTree.mkEpsilonSeq.eps} False True} Data.Sequence.Internal.$windex
                                                                                                                                                                                                      @ GHC.Types.Int
                                                                                                                                                                                                      w
                                                                                                                                                                                                      1#
                                                                            } in
                                                                            let {
                                                                              ww3 :: GHC.Types.Int
                                                                              = {__scc {main:PerturbationTree.mkEpsilonSeq} False True} {__scc {main:PerturbationTree.mkEpsilonSeq.eps} False True} Data.Sequence.Internal.$windex
                                                                                                                                                                                                      @ GHC.Types.Int
                                                                                                                                                                                                      w
                                                                                                                                                                                                      0#
                                                                            } in
                                                                            {__scc {main:PerturbationTree.mkEpsilonSeq} False True} {__scc {main:PerturbationTree.mkEpsilonSeq.eps} True False} (ww3,
                                                                                                                                                                                                 ww2,
                                                                                                                                                                                                 ww1,
                                                                                                                                                                                                 ww),
                                                                            {__scc {main:PerturbationTree.mkEpsilonSeq} False True} {__scc {main:PerturbationTree.mkEpsilonSeq.etaSeq} True True} let {
                                                                                                                                                                                                    seq :: Data.Sequence.Internal.Seq
                                                                                                                                                                                                             GHC.Types.Int
                                                                                                                                                                                                    = Data.Sequence.Internal.$wdrop
                                                                                                                                                                                                        @ GHC.Types.Int
                                                                                                                                                                                                        4#
                                                                                                                                                                                                        w
                                                                                                                                                                                                  } in
                                                                                                                                                                                                  ({__scc {main:PerturbationTree.mkEtaSeq} True True} Data.Sequence.Internal.$fFunctorSeq_$cfmap
                                                                                                                                                                                                                                                        @ (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                             (Data.Sequence.Internal.Seq
                                                                                                                                                                                                                                                                GHC.Types.Int))
                                                                                                                                                                                                                                                        @ (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                             (GHC.Types.Int,
                                                                                                                                                                                                                                                              GHC.Types.Int))
                                                                                                                                                                                                                                                        ({__scc {main:PerturbationTree.mkEtaSeq.f} True False} PerturbationTree.mkEpsilonSeq1)
                                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                                        (Sym (Data.Sequence.Internal.N:Elem[0]
                                                                                                                                                                                                                                                                  <Data.Sequence.Internal.Seq
                                                                                                                                                                                                                                                                     GHC.Types.Int>_R)
                                                                                                                                                                                                                                                         ->_R Sym (Data.Sequence.Internal.N:Elem[0]
                                                                                                                                                                                                                                                                       <(GHC.Types.Int,
                                                                                                                                                                                                                                                                         GHC.Types.Int)>_R))
                                                                                                                                                                                                                                                        ({__scc {main:PerturbationTree.mkEtaSeq.seq2} True True} Data.Sequence.Internal.$wchunksOf
                                                                                                                                                                                                                                                                                                                   @ GHC.Types.Int
                                                                                                                                                                                                                                                                                                                   2#
                                                                                                                                                                                                                                                                                                                   seq)
                                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                                        (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                                                                             <Data.Sequence.Internal.Seq
                                                                                                                                                                                                                                                                GHC.Types.Int>_R))
                                                                                                                                                                                                    `cast`
                                                                                                                                                                                                  (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                            <(GHC.Types.Int,
                                                                                                                                                                                                              GHC.Types.Int)>_R)) #)) -}
4e4774521f1af5fe689ccc1617fa4762
  $wmkTreeEta ::
    PerturbationTree.Var
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> (# PerturbationTree.AnsatzNode,
          Data.Tree.Forest PerturbationTree.AnsatzNode #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
7ca642d1ad568581f5c1bca2c788dee0
  $wprintAnsatzNode ::
    PerturbationTree.AnsatzNode
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
efa7eb1614dd789f67b004d988c9ac0d
  $wprintTree ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: PerturbationTree.AnsatzNode)
                   (ww1 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.printTree} True True} case Data.Tree.$wfmapTree
                                                                            @ PerturbationTree.AnsatzNode
                                                                            @ GHC.Base.String
                                                                            PerturbationTree.printAnsatzNode
                                                                            ww
                                                                            ww1 of ww3 { (#,#) ww4 ww5 ->
                                                                     Data.Tree.$wdrawTree
                                                                       ww4
                                                                       ww5 }) -}
be64090b2c2ddc6aaa1aae4ebfb4a96a
  $wsearchForestEpsilonSeq ::
    PerturbationTree.Epsilon
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(U(U),U(U),U(U),U(U))><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: PerturbationTree.Epsilon)
                   (ww1 :: Data.Sequence.Internal.Seq PerturbationTree.Eta)
                   (w :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.searchForestEpsilonSeq} True True} case {__scc {main:PerturbationTree.searchForestEpsilonSeq.epsIndMaybe} True True} letrec {
                                                                                                                                                                      go8 :: [Data.Tree.Tree
                                                                                                                                                                                PerturbationTree.AnsatzNode]
                                                                                                                                                                             -> GHC.Prim.Int#
                                                                                                                                                                             -> GHC.Base.Maybe
                                                                                                                                                                                  GHC.Types.Int
                                                                                                                                                                        <join 2> {- Arity: 2,
                                                                                                                                                                                    Strictness: <S,1*U><L,U> -}
                                                                                                                                                                      = \ (ds :: [Data.Tree.Tree
                                                                                                                                                                                    PerturbationTree.AnsatzNode])
                                                                                                                                                                          (eta :: GHC.Prim.Int#) ->
                                                                                                                                                                        case ds of wild {
                                                                                                                                                                          []
                                                                                                                                                                          -> GHC.Base.Nothing
                                                                                                                                                                               @ GHC.Types.Int
                                                                                                                                                                          : y ys
                                                                                                                                                                          -> case {__scc {main:PerturbationTree.searchForestEpsilonSeq.epsIndMaybe.\} True True} let {
                                                                                                                                                                                                                                                                   ds1 :: PerturbationTree.AnsatzNode
                                                                                                                                                                                                                                                                   = {__scc {main:PerturbationTree.getTopNode} True True} case y of wild1 { Data.Tree.Node x subTree ->
                                                                                                                                                                                                                                                                                                                          x }
                                                                                                                                                                                                                                                                 } in
                                                                                                                                                                                                                                                                 {__scc {main:PerturbationTree.getEpsilon} True True} case ds1 of wild1 {
                                                                                                                                                                                                                                                                                                                        DEFAULT
                                                                                                                                                                                                                                                                                                                        -> PerturbationTree.searchForestEpsilonSeq1
                                                                                                                                                                                                                                                                                                                        PerturbationTree.EpsilonNode i
                                                                                                                                                                                                                                                                                                                        -> i
                                                                                                                                                                                                                                                                                                                        PerturbationTree.EpsilonLeaf i j
                                                                                                                                                                                                                                                                                                                        -> i } of wild1 { (,,,) a1 a2 a3 a4 ->
                                                                                                                                                                             case ww of wild2 { (,,,) b1 b2 b3 b4 ->
                                                                                                                                                                             case {__scc {main:PerturbationTree.searchForestEpsilonSeq.epsIndMaybe.\} False True} GHC.Classes.eqInt
                                                                                                                                                                                                                                                                    a1
                                                                                                                                                                                                                                                                    b1 of wild3 {
                                                                                                                                                                               GHC.Types.False
                                                                                                                                                                               -> go8
                                                                                                                                                                                    ys
                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                       eta
                                                                                                                                                                                       1#)
                                                                                                                                                                               GHC.Types.True
                                                                                                                                                                               -> case {__scc {main:PerturbationTree.searchForestEpsilonSeq.epsIndMaybe.\} False True} GHC.Classes.eqInt
                                                                                                                                                                                                                                                                         a2
                                                                                                                                                                                                                                                                         b2 of wild4 {
                                                                                                                                                                                    GHC.Types.False
                                                                                                                                                                                    -> go8
                                                                                                                                                                                         ys
                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                            eta
                                                                                                                                                                                            1#)
                                                                                                                                                                                    GHC.Types.True
                                                                                                                                                                                    -> case {__scc {main:PerturbationTree.searchForestEpsilonSeq.epsIndMaybe.\} False True} GHC.Classes.eqInt
                                                                                                                                                                                                                                                                              a3
                                                                                                                                                                                                                                                                              b3 of wild5 {
                                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                                         -> go8
                                                                                                                                                                                              ys
                                                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                                                 eta
                                                                                                                                                                                                 1#)
                                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                                         -> case {__scc {main:PerturbationTree.searchForestEpsilonSeq.epsIndMaybe.\} False True} GHC.Classes.eqInt
                                                                                                                                                                                                                                                                                   a4
                                                                                                                                                                                                                                                                                   b4 of wild6 {
                                                                                                                                                                                              GHC.Types.False
                                                                                                                                                                                              -> go8
                                                                                                                                                                                                   ys
                                                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                                                      eta
                                                                                                                                                                                                      1#)
                                                                                                                                                                                              GHC.Types.True
                                                                                                                                                                                              -> GHC.Base.Just
                                                                                                                                                                                                   @ GHC.Types.Int
                                                                                                                                                                                                   (GHC.Types.I#
                                                                                                                                                                                                      eta) } } } } } } }
                                                                                                                                                                    } in
                                                                                                                                                                    go8
                                                                                                                                                                      w
                                                                                                                                                                      0# of wild {
                                                                                    GHC.Base.Nothing
                                                                                    -> GHC.Types.False
                                                                                    GHC.Base.Just ipv
                                                                                    -> {__scc {main:PerturbationTree.searchForestEpsilonSeq.ind1} True False} case ipv of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                              PerturbationTree.searchForestEtaSeq
                                                                                                                                                                ww1
                                                                                                                                                                ({__scc {main:PerturbationTree.searchForestEpsilonSeq.restForest} True True} case GHC.List.$w!!
                                                                                                                                                                                                                                                    @ (Data.Tree.Tree
                                                                                                                                                                                                                                                         PerturbationTree.AnsatzNode)
                                                                                                                                                                                                                                                    w
                                                                                                                                                                                                                                                    ww3 of ww4 { Data.Tree.Node ww5 ww6 ->
                                                                                                                                                                                                                                             {__scc {main:PerturbationTree.getSubForest} True False} ww6 }) } }) -}
cd65f346d5a62056f1f220df576068f6
  $wsortIndexEtas ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
f3c4a281b0bc400ef660223b58976a23
  $wswapBlockLabelTree ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> (# PerturbationTree.AnsatzNode,
          Data.Tree.Forest PerturbationTree.AnsatzNode #)
  {- Arity: 3, Strictness: <L,U(U,U)><S,U><L,1*U>, Inline: [0] -}
2c37f742c4c382f52c881661baa0b073
  $wswapLabelTree ::
    (GHC.Types.Int, GHC.Types.Int)
    -> PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> (# PerturbationTree.AnsatzNode,
          Data.Tree.Forest PerturbationTree.AnsatzNode #)
  {- Arity: 3, Strictness: <L,U(U(U),U(U))><S,U><L,1*U>,
     Inline: [0] -}
055e5fdcf39a3f3cc4c7eb7f3f825d99
  $wsymAnsatzForest ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [([GHC.Types.Int], [GHC.Types.Int])]
    -> [[GHC.Types.Int]]
    -> [[[GHC.Types.Int]]]
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 6, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0] -}
603f5f0f4769f46f427ccf0961210899
  data AnsatzNode
    = EpsilonNode PerturbationTree.Epsilon
    | EtaNode PerturbationTree.Eta
    | EpsilonLeaf PerturbationTree.Epsilon PerturbationTree.Var
    | EtaLeaf PerturbationTree.Eta PerturbationTree.Var
7e6d950c230b572472046612daee7e30
  type Epsilon =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
cb9bea3061fa2f7af7cecc2fe06cdf95
  type Eta = (GHC.Types.Int, GHC.Types.Int)
2b1836ec131461c798347995ace972a7
  type Symmetry =
    ([(GHC.Types.Int, GHC.Types.Int)],
     [(GHC.Types.Int, GHC.Types.Int)],
     [([GHC.Types.Int], [GHC.Types.Int])], [[GHC.Types.Int]],
     [[[GHC.Types.Int]]])
b5e2275ff0ec23297d708d83166317f2
  type Var = Data.IntMap.Internal.IntMap GHC.Real.Rational
cc3987cc976ae20aa92f9d8767421ab9
  addForests ::
    Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (f2 :: Data.Tree.Forest PerturbationTree.AnsatzNode)
                   (f3 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.addForests} True True} letrec {
                                                                        go8 :: [Data.Tree.Tree
                                                                                  PerturbationTree.AnsatzNode]
                                                                               -> Data.Tree.Forest
                                                                                    PerturbationTree.AnsatzNode
                                                                          {- Arity: 1,
                                                                             Strictness: <S,1*U> -}
                                                                        = \ (ds :: [Data.Tree.Tree
                                                                                      PerturbationTree.AnsatzNode]) ->
                                                                          case ds of wild {
                                                                            [] -> f3
                                                                            : y ys
                                                                            -> case y of ww { Data.Tree.Node ww1 ww2 ->
                                                                               PerturbationTree.$waddTree2Forest
                                                                                 ww1
                                                                                 ww2
                                                                                 (go8 ys) } }
                                                                      } in
                                                                      go8 f2) -}
399f080ea4bf22b2db0ca72674c79d2e
  getVarsForest ::
    Data.Tree.Forest PerturbationTree.AnsatzNode -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (forest :: Data.Tree.Forest
                                PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.getVarsForest} True True} Data.OldList.nubBy
                                                                           @ [GHC.Types.Int]
                                                                           GHC.Classes.$fEq[]_$s$c==
                                                                           (PerturbationTree.getVarsForest_go
                                                                              forest)) -}
739097ca73af123268b06260e0288ed2
  getVarsForest_go ::
    [Data.Tree.Tree PerturbationTree.AnsatzNode] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U> -}
da75b6b3413dd14bdb259899921a67de
  getVarsTree ::
    Data.Tree.Tree PerturbationTree.AnsatzNode -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (tree :: Data.Tree.Tree
                              PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.getVarsTree} True True} PerturbationTree.getVarsTree_go
                                                                         (Data.Tree.levels_$spoly_go2
                                                                            @ PerturbationTree.AnsatzNode
                                                                            tree
                                                                            (GHC.Types.[]
                                                                               @ (Data.Tree.Tree
                                                                                    PerturbationTree.AnsatzNode)))
                                                                         (GHC.List.lastError
                                                                            @ [PerturbationTree.AnsatzNode])) -}
6337c86c08b661bf5ccd11307aa077f9
  getVarsTree_go ::
    [[PerturbationTree.AnsatzNode]]
    -> [PerturbationTree.AnsatzNode] -> [[Data.IntSet.Internal.Key]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
8518b059099730c4f723af0be681e204
  groupForests ::
    Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 1, Strictness: <S,1*U> -}
de659a702053193c670a54a0b26297ec
  mkAllVarsfrom1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   PerturbationTree.mkAllVarsfrom3
                   GHC.Real.$fEnumRatio1) -}
7b34477ac3332cd2185ce2d560021121
  mkAllVarsfrom2 ::
    (GHC.Types.Int, GHC.Types.Int) -> [PerturbationTree.Var]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 PerturbationTree.$wmkAllVarsfrom2 ww4 ww6 } } }) -}
83255672a74039aa59d49c6dc95ed849
  mkAllVarsfrom3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c8a57fac0b165a5206af88e383fe749e
  mkEpsilonSeq ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> (PerturbationTree.Epsilon,
        Data.Sequence.Internal.Seq PerturbationTree.Eta)
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 case PerturbationTree.$wmkEpsilonSeq w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
75a1a59991591730e2ca7886fd99c2e4
  mkEpsilonSeq1 ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 {__scc {main:PerturbationTree.mkEtaSeq.f} False True} {__scc {main:PerturbationTree.mkEtaSeq.f.\} True False} ({__scc {main:PerturbationTree.mkEtaSeq.f.\} False True} Data.Sequence.Internal.$windex
                                                                                                                                                                                          @ GHC.Types.Int
                                                                                                                                                                                          s
                                                                                                                                                                                          0#,
                                                                                                                                {__scc {main:PerturbationTree.mkEtaSeq.f.\} False True} Data.Sequence.Internal.$windex
                                                                                                                                                                                          @ GHC.Types.Int
                                                                                                                                                                                          s
                                                                                                                                                                                          1#)) -}
31b261c1630a391b352dbc382fa879d3
  mkEtaSeq ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                PerturbationTree.mkEtaSeq1
                  `cast`
                (<Data.Sequence.Internal.Seq GHC.Types.Int>_R
                 ->_R Sym (Data.Sequence.Internal.N:Seq[0]
                               <(GHC.Types.Int, GHC.Types.Int)>_R)) -}
a52252026e7c6626057c3f0e944fc0be
  mkEtaSeq1 ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.FingerTree
         (Data.Sequence.Internal.Elem (GHC.Types.Int, GHC.Types.Int))
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (seq :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 {__scc {main:PerturbationTree.mkEtaSeq} True True} Data.Sequence.Internal.$fFunctorSeq_$cfmap
                                                                      @ (Data.Sequence.Internal.Elem
                                                                           (Data.Sequence.Internal.Seq
                                                                              GHC.Types.Int))
                                                                      @ (Data.Sequence.Internal.Elem
                                                                           (GHC.Types.Int,
                                                                            GHC.Types.Int))
                                                                      ({__scc {main:PerturbationTree.mkEtaSeq.f} True False} PerturbationTree.mkEpsilonSeq1)
                                                                        `cast`
                                                                      (Sym (Data.Sequence.Internal.N:Elem[0]
                                                                                <Data.Sequence.Internal.Seq
                                                                                   GHC.Types.Int>_R)
                                                                       ->_R Sym (Data.Sequence.Internal.N:Elem[0]
                                                                                     <(GHC.Types.Int,
                                                                                       GHC.Types.Int)>_R))
                                                                      ({__scc {main:PerturbationTree.mkEtaSeq.seq2} True True} Data.Sequence.Internal.$wchunksOf
                                                                                                                                 @ GHC.Types.Int
                                                                                                                                 2#
                                                                                                                                 seq)
                                                                        `cast`
                                                                      (Data.Sequence.Internal.N:Seq[0]
                                                                           <Data.Sequence.Internal.Seq
                                                                              GHC.Types.Int>_R)) -}
8a9f60f16bf300226810f2d90850bfe7
  mkTreeEpsilon ::
    PerturbationTree.Var
    -> (PerturbationTree.Epsilon,
        Data.Sequence.Internal.Seq PerturbationTree.Eta)
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U><S(LS),1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PerturbationTree.Var)
                   (w1 :: (PerturbationTree.Epsilon,
                           Data.Sequence.Internal.Seq PerturbationTree.Eta)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 {__scc {main:PerturbationTree.mkTreeEpsilon} True False} case ww2
                                                                                 `cast`
                                                                               (Data.Sequence.Internal.N:Seq[0]
                                                                                    <PerturbationTree.Eta>_R) of wild {
                                                                            Data.Sequence.Internal.EmptyT
                                                                            -> Data.Tree.Node
                                                                                 @ PerturbationTree.AnsatzNode
                                                                                 (PerturbationTree.EpsilonLeaf
                                                                                    ww1
                                                                                    w)
                                                                                 (GHC.Types.[]
                                                                                    @ (Data.Tree.Tree
                                                                                         PerturbationTree.AnsatzNode))
                                                                            Data.Sequence.Internal.Single x
                                                                            -> Data.Tree.Node
                                                                                 @ PerturbationTree.AnsatzNode
                                                                                 (PerturbationTree.EpsilonNode
                                                                                    ww1)
                                                                                 (GHC.Types.:
                                                                                    @ (Data.Tree.Tree
                                                                                         PerturbationTree.AnsatzNode)
                                                                                    ({__scc {main:PerturbationTree.mkTreeEpsilon} False True} case PerturbationTree.$wmkTreeEta
                                                                                                                                                     w
                                                                                                                                                     wild
                                                                                                                                                       `cast`
                                                                                                                                                     (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                               <PerturbationTree.Eta>_R)) of ww3 { (#,#) ww4 ww5 ->
                                                                                                                                              Data.Tree.Node
                                                                                                                                                @ PerturbationTree.AnsatzNode
                                                                                                                                                ww4
                                                                                                                                                ww5 })
                                                                                    (GHC.Types.[]
                                                                                       @ (Data.Tree.Tree
                                                                                            PerturbationTree.AnsatzNode)))
                                                                            Data.Sequence.Internal.Deep dt1 ds1 ds2 ds3
                                                                            -> case dt1 of wild1 {
                                                                                 DEFAULT
                                                                                 -> Data.Tree.Node
                                                                                      @ PerturbationTree.AnsatzNode
                                                                                      (PerturbationTree.EpsilonNode
                                                                                         ww1)
                                                                                      (GHC.Types.:
                                                                                         @ (Data.Tree.Tree
                                                                                              PerturbationTree.AnsatzNode)
                                                                                         ({__scc {main:PerturbationTree.mkTreeEpsilon} False True} case PerturbationTree.$wmkTreeEta
                                                                                                                                                          w
                                                                                                                                                          wild
                                                                                                                                                            `cast`
                                                                                                                                                          (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                    <PerturbationTree.Eta>_R)) of ww3 { (#,#) ww4 ww5 ->
                                                                                                                                                   Data.Tree.Node
                                                                                                                                                     @ PerturbationTree.AnsatzNode
                                                                                                                                                     ww4
                                                                                                                                                     ww5 })
                                                                                         (GHC.Types.[]
                                                                                            @ (Data.Tree.Tree
                                                                                                 PerturbationTree.AnsatzNode)))
                                                                                 0#
                                                                                 -> Data.Tree.Node
                                                                                      @ PerturbationTree.AnsatzNode
                                                                                      (PerturbationTree.EpsilonLeaf
                                                                                         ww1
                                                                                         w)
                                                                                      (GHC.Types.[]
                                                                                         @ (Data.Tree.Tree
                                                                                              PerturbationTree.AnsatzNode)) } } }) -}
628b485b19298c8a2c0ea66c01139f4e
  mkTreeEta ::
    PerturbationTree.Var
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U><S,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PerturbationTree.Var)
                   (w1 :: Data.Sequence.Internal.Seq PerturbationTree.Eta) ->
                 case PerturbationTree.$wmkTreeEta w w1 of ww { (#,#) ww1 ww2 ->
                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww1 ww2 }) -}
528414a9585fb5086caac7b357b52506
  printAnsatzNode :: PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$wprintAnsatzNode w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
c5de78a70c778ac2862abd8024c0156f
  printForest ::
    Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (forest :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.printForest} True True} Data.OldList.unlines
                                                                         (GHC.Base.build
                                                                            @ [GHC.Types.Char]
                                                                            (\ @ b1
                                                                               (c :: [GHC.Types.Char]
                                                                                     -> b1
                                                                                     -> b1)[OneShot]
                                                                               (n :: b1)[OneShot] ->
                                                                             GHC.Base.foldr
                                                                               @ (Data.Tree.Tree
                                                                                    PerturbationTree.AnsatzNode)
                                                                               @ b1
                                                                               (GHC.Base.mapFB
                                                                                  @ [GHC.Types.Char]
                                                                                  @ b1
                                                                                  @ (Data.Tree.Tree
                                                                                       PerturbationTree.AnsatzNode)
                                                                                  c
                                                                                  PerturbationTree.printForest1)
                                                                               n
                                                                               forest))) -}
d21caac80efecce5c01be6777e5bebe0
  printForest1 ::
    Data.Tree.Tree PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w of ww { Data.Tree.Node ww1 ww2 ->
                 PerturbationTree.$wlvl ww1 ww2 }) -}
cc124e4c667a61d1fbed27f7db21e278
  printTree ::
    Data.Tree.Tree PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w of ww { Data.Tree.Node ww1 ww2 ->
                 PerturbationTree.$wprintTree ww1 ww2 }) -}
ca96112e5b04f44ea64ae62755603ca1
  reduceAnsatzEpsilon ::
    PerturbationTree.Symmetry
    -> [((PerturbationTree.Epsilon,
          Data.Sequence.Internal.Seq PerturbationTree.Eta),
         PerturbationTree.Var)]
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U)><S,1*U> -}
10b4b701072aa3cf0d6cfc267923f1bc
  reduceAnsatzEta ::
    PerturbationTree.Symmetry
    -> [(Data.Sequence.Internal.Seq PerturbationTree.Eta,
         PerturbationTree.Var)]
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U)><S,1*U>,
     Unfolding: (\ (sym :: PerturbationTree.Symmetry)
                   (ds :: [(Data.Sequence.Internal.Seq PerturbationTree.Eta,
                            PerturbationTree.Var)]) ->
                 {__scc {main:PerturbationTree.reduceAnsatzEta} True True} case ds of wild {
                                                                             []
                                                                             -> GHC.Types.[]
                                                                                  @ (Data.Tree.Tree
                                                                                       PerturbationTree.AnsatzNode)
                                                                             : ipv ipv1
                                                                             -> let {
                                                                                  ds1 :: (Data.Sequence.Internal.Seq
                                                                                            PerturbationTree.Eta,
                                                                                          PerturbationTree.Var)
                                                                                  = {__scc {main:PerturbationTree.reduceAnsatzEta.(...)} True False} ipv
                                                                                } in
                                                                                let {
                                                                                  seq1 :: Data.Sequence.Internal.Seq
                                                                                            PerturbationTree.Eta
                                                                                  = {__scc {main:PerturbationTree.reduceAnsatzEta.seq1} True True} case ds1 of wild1 { (,) seq2 var1 ->
                                                                                                                                                   seq2 }
                                                                                } in
                                                                                let {
                                                                                  var1 :: PerturbationTree.Var
                                                                                  = {__scc {main:PerturbationTree.reduceAnsatzEta.var1} True True} case ds1 of wild1 { (,) seq2 var2 ->
                                                                                                                                                   var2 }
                                                                                } in
                                                                                let {
                                                                                  z :: Data.Tree.Forest
                                                                                         PerturbationTree.AnsatzNode
                                                                                  = {__scc {main:PerturbationTree.reduceAnsatzEta.forest1} True True} case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                                                                                                                                                      PerturbationTree.$wsymAnsatzForest
                                                                                                                                                        ww1
                                                                                                                                                        ww2
                                                                                                                                                        ww3
                                                                                                                                                        ww4
                                                                                                                                                        ww5
                                                                                                                                                        (GHC.Types.:
                                                                                                                                                           @ (Data.Tree.Tree
                                                                                                                                                                PerturbationTree.AnsatzNode)
                                                                                                                                                           (PerturbationTree.mkTreeEta
                                                                                                                                                              var1
                                                                                                                                                              seq1)
                                                                                                                                                           (GHC.Types.[]
                                                                                                                                                              @ (Data.Tree.Tree
                                                                                                                                                                   PerturbationTree.AnsatzNode))) }
                                                                                } in
                                                                                letrec {
                                                                                  go8 :: [(Data.Sequence.Internal.Seq
                                                                                             PerturbationTree.Eta,
                                                                                           PerturbationTree.Var)]
                                                                                         -> Data.Tree.Forest
                                                                                              PerturbationTree.AnsatzNode
                                                                                    {- Arity: 1,
                                                                                       Strictness: <S,1*U> -}
                                                                                  = \ (ds2 :: [(Data.Sequence.Internal.Seq
                                                                                                  PerturbationTree.Eta,
                                                                                                PerturbationTree.Var)]) ->
                                                                                    case ds2 of wild1 {
                                                                                      [] -> z
                                                                                      : y ys
                                                                                      -> let {
                                                                                           forest :: Data.Tree.Forest
                                                                                                       PerturbationTree.AnsatzNode
                                                                                           = go8 ys
                                                                                         } in
                                                                                         {__scc {main:PerturbationTree.addForestEtaSeq} True True} case y of wild2 { (,) seq var ->
                                                                                                                                                   case PerturbationTree.searchForestEtaSeq
                                                                                                                                                          seq
                                                                                                                                                          forest of wild3 {
                                                                                                                                                     GHC.Types.False
                                                                                                                                                     -> let {
                                                                                                                                                          f2 :: Data.Tree.Forest
                                                                                                                                                                  PerturbationTree.AnsatzNode
                                                                                                                                                          = {__scc {main:PerturbationTree.addForestEtaSeq.symForest} True True} case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                                                                                                                                                                                                                                PerturbationTree.$wsymAnsatzForest
                                                                                                                                                                                                                                  ww1
                                                                                                                                                                                                                                  ww2
                                                                                                                                                                                                                                  ww3
                                                                                                                                                                                                                                  ww4
                                                                                                                                                                                                                                  ww5
                                                                                                                                                                                                                                  (GHC.Types.:
                                                                                                                                                                                                                                     @ (Data.Tree.Tree
                                                                                                                                                                                                                                          PerturbationTree.AnsatzNode)
                                                                                                                                                                                                                                     (PerturbationTree.mkTreeEta
                                                                                                                                                                                                                                        var
                                                                                                                                                                                                                                        seq)
                                                                                                                                                                                                                                     (GHC.Types.[]
                                                                                                                                                                                                                                        @ (Data.Tree.Tree
                                                                                                                                                                                                                                             PerturbationTree.AnsatzNode))) }
                                                                                                                                                        } in
                                                                                                                                                        {__scc {main:PerturbationTree.addForests} True True} letrec {
                                                                                                                                                                                                               go9 :: [Data.Tree.Tree
                                                                                                                                                                                                                         PerturbationTree.AnsatzNode]
                                                                                                                                                                                                                      -> Data.Tree.Forest
                                                                                                                                                                                                                           PerturbationTree.AnsatzNode
                                                                                                                                                                                                                 {- Arity: 1,
                                                                                                                                                                                                                    Strictness: <S,1*U> -}
                                                                                                                                                                                                               = \ (ds3 :: [Data.Tree.Tree
                                                                                                                                                                                                                              PerturbationTree.AnsatzNode]) ->
                                                                                                                                                                                                                 case ds3 of wild4 {
                                                                                                                                                                                                                   []
                                                                                                                                                                                                                   -> forest
                                                                                                                                                                                                                   : y1 ys1
                                                                                                                                                                                                                   -> case y1 of ww { Data.Tree.Node ww1 ww2 ->
                                                                                                                                                                                                                      PerturbationTree.$waddTree2Forest
                                                                                                                                                                                                                        ww1
                                                                                                                                                                                                                        ww2
                                                                                                                                                                                                                        (go9
                                                                                                                                                                                                                           ys1) } }
                                                                                                                                                                                                             } in
                                                                                                                                                                                                             go9
                                                                                                                                                                                                               f2
                                                                                                                                                     GHC.Types.True
                                                                                                                                                     -> forest } } }
                                                                                } in
                                                                                go8 wild }) -}
fe55d28eb67d7e6c92a20c8e98d325c5
  searchForestEpsilonSeq ::
    (PerturbationTree.Epsilon,
     Data.Sequence.Internal.Seq PerturbationTree.Eta)
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U(U(U(U),U(U),U(U),U(U)),U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (PerturbationTree.Epsilon,
                          Data.Sequence.Internal.Seq PerturbationTree.Eta))
                   (w1 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 case w of ww { (,) ww1 ww2 ->
                 PerturbationTree.$wsearchForestEpsilonSeq ww1 ww2 w1 }) -}
82f1df2ebab90ec3653b167f7b62f982
  searchForestEpsilonSeq1 :: PerturbationTree.Epsilon
  {- Strictness: x -}
5bfd2ec0c77d78dc7f3c2be8a08bbce9
  searchForestEtaSeq ::
    Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U> -}
d4f77286f1841c50c0440517966cae36
  sortForest ::
    Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ans :: Data.Tree.Forest
                             PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.sortForest} True True} PerturbationTree.groupForests
                                                                        (GHC.Base.map
                                                                           @ (PerturbationTree.AnsatzNode,
                                                                              Data.Tree.Tree
                                                                                PerturbationTree.AnsatzNode)
                                                                           @ (Data.Tree.Tree
                                                                                PerturbationTree.AnsatzNode)
                                                                           (Data.Tuple.snd
                                                                              @ PerturbationTree.AnsatzNode
                                                                              @ (Data.Tree.Tree
                                                                                   PerturbationTree.AnsatzNode))
                                                                           (Data.OldList.sortBy
                                                                              @ (PerturbationTree.AnsatzNode,
                                                                                 Data.Tree.Tree
                                                                                   PerturbationTree.AnsatzNode)
                                                                              PerturbationTree.sortForest2
                                                                              (GHC.Base.map
                                                                                 @ (Data.Tree.Tree
                                                                                      PerturbationTree.AnsatzNode)
                                                                                 @ (PerturbationTree.AnsatzNode,
                                                                                    Data.Tree.Tree
                                                                                      PerturbationTree.AnsatzNode)
                                                                                 PerturbationTree.sortForest1
                                                                                 ans)))) -}
a2b4500df65430ce89eda19de29c5836
  sortForest1 ::
    Data.Tree.Tree PerturbationTree.AnsatzNode
    -> (PerturbationTree.AnsatzNode,
        Data.Tree.Tree PerturbationTree.AnsatzNode)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 {__scc {main:PerturbationTree.getTopNode} True False} case x of wild { Data.Tree.Node x1 subTree ->
                                                                       case x1 of y { DEFAULT ->
                                                                       (y, wild) } }) -}
055c5cfe98c83e8069bb388f8319c15e
  sortForest2 ::
    (PerturbationTree.AnsatzNode,
     Data.Tree.Tree PerturbationTree.AnsatzNode)
    -> (PerturbationTree.AnsatzNode,
        Data.Tree.Tree PerturbationTree.AnsatzNode)
    -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: (PerturbationTree.AnsatzNode,
                          Data.Tree.Tree PerturbationTree.AnsatzNode))
                   (y :: (PerturbationTree.AnsatzNode,
                          Data.Tree.Tree PerturbationTree.AnsatzNode))[OneShot] ->
                 case x of wild { (,) x1 ds1 ->
                 case y of wild1 { (,) x2 ds2 ->
                 PerturbationTree.$fOrdAnsatzNode_$ccompare x1 x2 } }) -}
bb7e77092d96ad28ec9b4f327ec20df4
  sortIndexEtas ::
    Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w of ww { Data.Tree.Node ww1 ww2 ->
                 PerturbationTree.$wsortIndexEtas ww1 ww2 }) -}
ff260e90f4eba90344b900042cc87475
  swapBlockLabelForest ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: (\ (inds :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (ds :: [Data.Tree.Tree PerturbationTree.AnsatzNode]) ->
                 {__scc {main:PerturbationTree.swapBlockLabelForest} True True} case ds of wild {
                                                                                  []
                                                                                  -> GHC.Types.[]
                                                                                       @ (Data.Tree.Tree
                                                                                            PerturbationTree.AnsatzNode)
                                                                                  : ipv ipv1
                                                                                  -> case {__scc {main:PerturbationTree.swapBlockLabelForest.isEpsilon} True True} let {
                                                                                                                                                                     ds1 :: PerturbationTree.AnsatzNode
                                                                                                                                                                     = {__scc {main:PerturbationTree.getTopNode} True True} case ipv of wild1 { Data.Tree.Node x subTree ->
                                                                                                                                                                                                                            x }
                                                                                                                                                                   } in
                                                                                                                                                                   {__scc {main:PerturbationTree.isEpsilonNode} True True} case ds1 of wild1 {
                                                                                                                                                                                                                             DEFAULT
                                                                                                                                                                                                                             -> GHC.Types.False
                                                                                                                                                                                                                             PerturbationTree.EpsilonNode x
                                                                                                                                                                                                                             -> GHC.Types.True
                                                                                                                                                                                                                             PerturbationTree.EpsilonLeaf x y
                                                                                                                                                                                                                             -> GHC.Types.True } of wild1 {
                                                                                       GHC.Types.False
                                                                                       -> {__scc {main:PerturbationTree.swapBlockLabelForestEta} True True} letrec {
                                                                                                                                                              go8 :: [Data.Tree.Tree
                                                                                                                                                                        PerturbationTree.AnsatzNode]
                                                                                                                                                                     -> [Data.Tree.Tree
                                                                                                                                                                           PerturbationTree.AnsatzNode]
                                                                                                                                                                {- Arity: 1,
                                                                                                                                                                   Strictness: <S,1*U> -}
                                                                                                                                                              = \ (ds1 :: [Data.Tree.Tree
                                                                                                                                                                             PerturbationTree.AnsatzNode]) ->
                                                                                                                                                                case ds1 of wild2 {
                                                                                                                                                                  []
                                                                                                                                                                  -> GHC.Types.[]
                                                                                                                                                                       @ (Data.Tree.Tree
                                                                                                                                                                            PerturbationTree.AnsatzNode)
                                                                                                                                                                  : y ys
                                                                                                                                                                  -> case y of ww { Data.Tree.Node ww1 ww2 ->
                                                                                                                                                                     case PerturbationTree.$wswapBlockLabelTree
                                                                                                                                                                            inds
                                                                                                                                                                            ww1
                                                                                                                                                                            ww2 of ww3 { (#,#) ww4 ww5 ->
                                                                                                                                                                     GHC.Base.++
                                                                                                                                                                       @ (Data.Tree.Tree
                                                                                                                                                                            PerturbationTree.AnsatzNode)
                                                                                                                                                                       (PerturbationTree.$wsortIndexEtas
                                                                                                                                                                          ww4
                                                                                                                                                                          ww5)
                                                                                                                                                                       (go8
                                                                                                                                                                          ys) } } }
                                                                                                                                                            } in
                                                                                                                                                            PerturbationTree.sortForest
                                                                                                                                                              (go8
                                                                                                                                                                 wild)
                                                                                       GHC.Types.True
                                                                                       -> {__scc {main:PerturbationTree.swapBlockLabelForestEpsilon} True True} PerturbationTree.sortForest
                                                                                                                                                                  (GHC.Base.map
                                                                                                                                                                     @ (Data.Tree.Tree
                                                                                                                                                                          PerturbationTree.AnsatzNode)
                                                                                                                                                                     @ (Data.Tree.Tree
                                                                                                                                                                          PerturbationTree.AnsatzNode)
                                                                                                                                                                     (\ (x :: Data.Tree.Tree
                                                                                                                                                                                PerturbationTree.AnsatzNode) ->
                                                                                                                                                                      case x of ww { Data.Tree.Node ww1 ww2 ->
                                                                                                                                                                      case PerturbationTree.$wswapBlockLabelTree
                                                                                                                                                                             inds
                                                                                                                                                                             ww1
                                                                                                                                                                             ww2 of ww3 { (#,#) ww4 ww5 ->
                                                                                                                                                                      {__scc {main:PerturbationTree.sortSubForestEta} True False} Data.Tree.Node
                                                                                                                                                                                                                                    @ PerturbationTree.AnsatzNode
                                                                                                                                                                                                                                    ww4
                                                                                                                                                                                                                                    ({__scc {main:PerturbationTree.sortSubForestEta} False True} PerturbationTree.sortForest
                                                                                                                                                                                                                                                                                                   (PerturbationTree.swapBlockLabelForest_go
                                                                                                                                                                                                                                                                                                      ww5)) } })
                                                                                                                                                                     wild) } }) -}
1383c455f12d0a582616555e11518f80
  swapBlockLabelForest_go ::
    [Data.Tree.Tree PerturbationTree.AnsatzNode]
    -> [Data.Tree.Tree PerturbationTree.AnsatzNode]
  {- Arity: 1, Strictness: <S,1*U> -}
453346bd374e1ddfff83dddec8149d31
  swapBlockLabelTree ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U,U)><S(SL),1*U(U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (w1 :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w1 of ww { Data.Tree.Node ww1 ww2 ->
                 case PerturbationTree.$wswapBlockLabelTree
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww4 ww5 } }) -}
58bab7605785fb3d3f5b615638c77162
  swapLabelForest ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U(U),U(U))><S,1*U>,
     Unfolding: (\ (inds :: (GHC.Types.Int, GHC.Types.Int))
                   (ds :: [Data.Tree.Tree PerturbationTree.AnsatzNode]) ->
                 {__scc {main:PerturbationTree.swapLabelForest} True True} case ds of wild {
                                                                             []
                                                                             -> GHC.Types.[]
                                                                                  @ (Data.Tree.Tree
                                                                                       PerturbationTree.AnsatzNode)
                                                                             : ipv ipv1
                                                                             -> case {__scc {main:PerturbationTree.swapLabelForest.isEpsilon} True True} let {
                                                                                                                                                           ds1 :: PerturbationTree.AnsatzNode
                                                                                                                                                           = {__scc {main:PerturbationTree.getTopNode} True True} case ipv of wild1 { Data.Tree.Node x subTree ->
                                                                                                                                                                                                                  x }
                                                                                                                                                         } in
                                                                                                                                                         {__scc {main:PerturbationTree.isEpsilonNode} True True} case ds1 of wild1 {
                                                                                                                                                                                                                   DEFAULT
                                                                                                                                                                                                                   -> GHC.Types.False
                                                                                                                                                                                                                   PerturbationTree.EpsilonNode x
                                                                                                                                                                                                                   -> GHC.Types.True
                                                                                                                                                                                                                   PerturbationTree.EpsilonLeaf x y
                                                                                                                                                                                                                   -> GHC.Types.True } of wild1 {
                                                                                  GHC.Types.False
                                                                                  -> {__scc {main:PerturbationTree.swapLabelForestEta} True True} letrec {
                                                                                                                                                    go8 :: [Data.Tree.Tree
                                                                                                                                                              PerturbationTree.AnsatzNode]
                                                                                                                                                           -> [Data.Tree.Tree
                                                                                                                                                                 PerturbationTree.AnsatzNode]
                                                                                                                                                      {- Arity: 1,
                                                                                                                                                         Strictness: <S,1*U> -}
                                                                                                                                                    = \ (ds1 :: [Data.Tree.Tree
                                                                                                                                                                   PerturbationTree.AnsatzNode]) ->
                                                                                                                                                      case ds1 of wild2 {
                                                                                                                                                        []
                                                                                                                                                        -> GHC.Types.[]
                                                                                                                                                             @ (Data.Tree.Tree
                                                                                                                                                                  PerturbationTree.AnsatzNode)
                                                                                                                                                        : y ys
                                                                                                                                                        -> case y of ww { Data.Tree.Node ww1 ww2 ->
                                                                                                                                                           case PerturbationTree.$wswapLabelTree
                                                                                                                                                                  inds
                                                                                                                                                                  ww1
                                                                                                                                                                  ww2 of ww3 { (#,#) ww4 ww5 ->
                                                                                                                                                           GHC.Base.++
                                                                                                                                                             @ (Data.Tree.Tree
                                                                                                                                                                  PerturbationTree.AnsatzNode)
                                                                                                                                                             (PerturbationTree.$wsortIndexEtas
                                                                                                                                                                ww4
                                                                                                                                                                ww5)
                                                                                                                                                             (go8
                                                                                                                                                                ys) } } }
                                                                                                                                                  } in
                                                                                                                                                  PerturbationTree.sortForest
                                                                                                                                                    (go8
                                                                                                                                                       wild)
                                                                                  GHC.Types.True
                                                                                  -> {__scc {main:PerturbationTree.swapLabelForestEpsilon} True True} PerturbationTree.sortForest
                                                                                                                                                        (GHC.Base.map
                                                                                                                                                           @ (Data.Tree.Tree
                                                                                                                                                                PerturbationTree.AnsatzNode)
                                                                                                                                                           @ (Data.Tree.Tree
                                                                                                                                                                PerturbationTree.AnsatzNode)
                                                                                                                                                           (\ (x :: Data.Tree.Tree
                                                                                                                                                                      PerturbationTree.AnsatzNode) ->
                                                                                                                                                            case x of ww { Data.Tree.Node ww1 ww2 ->
                                                                                                                                                            case PerturbationTree.$wswapLabelTree
                                                                                                                                                                   inds
                                                                                                                                                                   ww1
                                                                                                                                                                   ww2 of ww3 { (#,#) ww4 ww5 ->
                                                                                                                                                            {__scc {main:PerturbationTree.sortSubForestEta} True False} Data.Tree.Node
                                                                                                                                                                                                                          @ PerturbationTree.AnsatzNode
                                                                                                                                                                                                                          ww4
                                                                                                                                                                                                                          ({__scc {main:PerturbationTree.sortSubForestEta} False True} PerturbationTree.sortForest
                                                                                                                                                                                                                                                                                         (PerturbationTree.swapBlockLabelForest_go
                                                                                                                                                                                                                                                                                            ww5)) } })
                                                                                                                                                           wild) } }) -}
b8972d17049ded2b5ce2a1ddd3779bd4
  swapLabelTree ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U(U),U(U))><S(SL),1*U(U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w1 of ww { Data.Tree.Node ww1 ww2 ->
                 case PerturbationTree.$wswapLabelTree
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww4 ww5 } }) -}
98156aea6a6f67d360c9ae42e4496aea
  symAnsatzForest ::
    PerturbationTree.Symmetry
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S(SSSSS),1*U(1*U,1*U,1*U,1*U,1*U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PerturbationTree.Symmetry)
                   (w1 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 case w of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 PerturbationTree.$wsymAnsatzForest ww1 ww2 ww3 ww4 ww5 w1 }) -}
instance [safe] GHC.Classes.Eq [PerturbationTree.AnsatzNode]
  = PerturbationTree.$fEqAnsatzNode
instance [safe] GHC.Classes.Ord [PerturbationTree.AnsatzNode]
  = PerturbationTree.$fOrdAnsatzNode
instance [safe] GHC.Show.Show [PerturbationTree.AnsatzNode]
  = PerturbationTree.$fShowAnsatzNode
"SPEC/PerturbationTree $fEq(,) @ Int @ (Ratio Integer)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                 (GHC.Real.Ratio
                                                                                    GHC.Integer.Type.Integer))
                                                                        (v :: GHC.Classes.Eq
                                                                                GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int
                      @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      v
                      v1
  = PerturbationTree.$s$fEq(,)1
"SPEC/PerturbationTree $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                     GHC.Types.Int)
                                                            (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = PerturbationTree.$s$fEq(,)
"SPEC/PerturbationTree $fEq(,)_$c/= @ Int @ (Ratio Integer)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                         (GHC.Real.Ratio
                                                                                            GHC.Integer.Type.Integer))
                                                                             ($dEq :: GHC.Classes.Eq
                                                                                        GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int
                           @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                           $dEq
                           $dEq1
  = PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/=1
"SPEC/PerturbationTree $fEq(,)_$c/= @ Int @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                             GHC.Types.Int)
                                                                 ($dEq :: GHC.Classes.Eq
                                                                            GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/PerturbationTree $fEqTree @ AnsatzNode" forall (v :: GHC.Classes.Eq
                                                             PerturbationTree.AnsatzNode)
  Data.Tree.$fEqTree @ PerturbationTree.AnsatzNode v
  = PerturbationTree.$s$fEqTree
"SPEC/PerturbationTree $fEqTree_$c/= @ AnsatzNode" forall ($dEq :: GHC.Classes.Eq
                                                                     PerturbationTree.AnsatzNode)
  Data.Tree.$fEqTree_$c/= @ PerturbationTree.AnsatzNode $dEq
  = PerturbationTree.$s$fEqTree_$s$fEqTree_$c/=
"SPEC/PerturbationTree $fOrd(,) @ Int @ (Ratio Integer)" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                  (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer))
                                                                         (v :: GHC.Classes.Ord
                                                                                 GHC.Types.Int)
  GHC.Classes.$fOrd(,) @ GHC.Types.Int
                       @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                       v
                       v1
  = PerturbationTree.$s$fOrd(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

