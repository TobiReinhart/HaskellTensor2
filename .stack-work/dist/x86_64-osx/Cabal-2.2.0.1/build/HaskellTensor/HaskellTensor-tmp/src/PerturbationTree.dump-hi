
==================== FINAL INTERFACE ====================
2019-01-23 16:47:29.739479 UTC

interface main:PerturbationTree 8043
  interface hash: ab8438de09c5ea125114ec092d365492
  ABI hash: 9b921458f177ee31d6e4fc678b3bdd38
  export-list hash: 95ea0105078fba4fd2827412c567f1d9
  orphan hash: c514c2bcf542795640571bdbe2bda124
  flag hash: 707c86cfbee6a9c65f08462953a21ad8
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  PerturbationTree.addForests
  PerturbationTree.getVarsForest
  PerturbationTree.getVarsTree
  PerturbationTree.mkAllVarsfrom2
  PerturbationTree.mkEpsilonSeq
  PerturbationTree.mkEtaSeq
  PerturbationTree.mkTreeEpsilon
  PerturbationTree.mkTreeEta
  PerturbationTree.printForest
  PerturbationTree.printTree
  PerturbationTree.reduceAnsatzEpsilon
  PerturbationTree.reduceAnsatzEta
  PerturbationTree.searchForestEpsilonSeq
  PerturbationTree.searchForestEtaSeq
  PerturbationTree.sortForest
  PerturbationTree.sortIndexEtas
  PerturbationTree.swapBlockLabelForest
  PerturbationTree.swapBlockLabelTree
  PerturbationTree.swapLabelForest
  PerturbationTree.swapLabelTree
  PerturbationTree.symAnsatzForest
  PerturbationTree.AnsatzNode
  PerturbationTree.Epsilon
  PerturbationTree.Eta
  PerturbationTree.Symmetry
  PerturbationTree.Var
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0* deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Tree 334e5590b70599cff00c9af57a2f6140
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
8416bb09e55e0912a51ec7d2d3e9de3e
  $fEqAnsatzNode :: GHC.Classes.Eq PerturbationTree.AnsatzNode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ PerturbationTree.AnsatzNode
                  PerturbationTree.$fEqAnsatzNode_$c==
                  PerturbationTree.$fEqAnsatzNode_$c/= -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fEqAnsatzNode_$c/= ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fEqAnsatzNode_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fEqAnsatzNode_$c== ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PerturbationTree.AnsatzNode)
                   (ds1 :: PerturbationTree.AnsatzNode) ->
                 case ds of wild {
                   PerturbationTree.EpsilonNode a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PerturbationTree.EpsilonNode b1
                        -> case a1 of wild2 { (,,,) a2 a3 a4 a5 ->
                           case b1 of wild3 { (,,,) b2 b3 b4 b5 ->
                           case a2 of wild4 { GHC.Types.I# x ->
                           case b2 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a3 of wild6 { GHC.Types.I# x1 ->
                                case b3 of wild7 { GHC.Types.I# y1 ->
                                case GHC.Prim.==# x1 y1 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case a4 of wild8 { GHC.Types.I# x2 ->
                                     case b4 of wild9 { GHC.Types.I# y2 ->
                                     case GHC.Prim.==# x2 y2 of lwild2 {
                                       DEFAULT -> GHC.Types.False
                                       1# -> GHC.Classes.eqInt a5 b5 } } } } } } } } } } } }
                   PerturbationTree.EtaNode a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PerturbationTree.EtaNode b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x ->
                           case ww4 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1# -> GHC.Classes.eqInt ww2 ww5 } } } } } }
                   PerturbationTree.EpsilonLeaf a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PerturbationTree.EpsilonLeaf b1 b2
                        -> case a1 of wild2 { (,,,) a4 a5 a3 a6 ->
                           case b1 of wild3 { (,,,) b4 b5 b3 b6 ->
                           case a4 of wild4 { GHC.Types.I# x ->
                           case b4 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case a5 of wild6 { GHC.Types.I# x1 ->
                                case b5 of wild7 { GHC.Types.I# y1 ->
                                case GHC.Prim.==# x1 y1 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case a3 of wild8 { GHC.Types.I# x2 ->
                                     case b3 of wild9 { GHC.Types.I# y2 ->
                                     case GHC.Prim.==# x2 y2 of lwild2 {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case a6 of wild10 { GHC.Types.I# x3 ->
                                          case b6 of wild11 { GHC.Types.I# y3 ->
                                          case GHC.Prim.==# x3 y3 of lwild3 {
                                            DEFAULT -> GHC.Types.False
                                            1#
                                            -> Data.IntMap.Internal.equal
                                                 @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                                                 GHC.Real.$fOrdRatio_$s$fEqRatio
                                                 a2
                                                 b2 } } } } } } } } } } } } } } }
                   PerturbationTree.EtaLeaf a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        PerturbationTree.EtaLeaf b1 b2
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x ->
                           case ww4 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case ww2 of wild4 { GHC.Types.I# x1 ->
                                case ww5 of wild5 { GHC.Types.I# y1 ->
                                case GHC.Prim.==# x1 y1 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> Data.IntMap.Internal.equal
                                       @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                                       GHC.Real.$fOrdRatio_$s$fEqRatio
                                       a2
                                       b2 } } } } } } } } } }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode :: GHC.Classes.Ord PerturbationTree.AnsatzNode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ PerturbationTree.AnsatzNode
                  PerturbationTree.$fEqAnsatzNode
                  PerturbationTree.$fOrdAnsatzNode_$ccompare
                  PerturbationTree.$fOrdAnsatzNode_$c<
                  PerturbationTree.$fOrdAnsatzNode_$c<=
                  PerturbationTree.$fOrdAnsatzNode_$c>
                  PerturbationTree.$fOrdAnsatzNode_$c>=
                  PerturbationTree.$fOrdAnsatzNode_$cmax
                  PerturbationTree.$fOrdAnsatzNode_$cmin -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$c< ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$c<= ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$c> ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$c>= ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$ccompare ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$cmax ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fOrdAnsatzNode_$cmin ::
    PerturbationTree.AnsatzNode
    -> PerturbationTree.AnsatzNode -> PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree.AnsatzNode)
                   (y :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$fOrdAnsatzNode_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fShowAnsatzNode :: GHC.Show.Show PerturbationTree.AnsatzNode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ PerturbationTree.AnsatzNode
                  PerturbationTree.$fShowAnsatzNode_$cshowsPrec
                  PerturbationTree.$fShowAnsatzNode_$cshow
                  PerturbationTree.$fShowAnsatzNode_$cshowList -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fShowAnsatzNode1 :: PerturbationTree.AnsatzNode -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: PerturbationTree.AnsatzNode) ->
                 PerturbationTree.$w$cshowsPrec 0# w) -}
15c2cd3a55ab3be9ae4d4deefc023d33
  $fShowAnsatzNode2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fShowAnsatzNode_$cshow ::
    PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: PerturbationTree.AnsatzNode) ->
                 PerturbationTree.$fShowAnsatzNode_$cshowsPrec
                   PerturbationTree.$fShowAnsatzNode2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fShowAnsatzNode_$cshowList ::
    [PerturbationTree.AnsatzNode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [PerturbationTree.AnsatzNode]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ PerturbationTree.AnsatzNode
                   PerturbationTree.$fShowAnsatzNode1
                   ls
                   s) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $fShowAnsatzNode_$cshowsPrec ::
    GHC.Types.Int -> PerturbationTree.AnsatzNode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: PerturbationTree.AnsatzNode) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 PerturbationTree.$w$cshowsPrec ww1 w1 }) -}
d36dedd13a6c13da205320948d3f7a01
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/= -}
5214d7f39d6f35e7496496517eb0add5
  $s$fEq(,)1 ::
    GHC.Classes.Eq
      (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fEqInt
                     GHC.Real.$fOrdRatio_$s$fEqRatio)
                  PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/=1 -}
e52332305fe5c0fb656e68f72a76539d
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
c2064ed0f8b2f2c9d2ecc308ed9cd01a
  $s$fEq(,)_$s$fEq(,)_$c/=1 ::
    (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
    -> (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U,U))><S(S(S)L),1*U(1*U(U),1*U(U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer))
                   (y :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case a2 of wild4 { GHC.Real.:% a4 a5 ->
                      case b2 of wild5 { GHC.Real.:% b4 b5 ->
                      case GHC.Integer.Type.eqInteger# a4 b4 of wild6 {
                        DEFAULT -> GHC.Types.True
                        1#
                        -> case GHC.Integer.Type.eqInteger# a5 b5 of wild3 {
                             DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } } } } }) -}
329c9b4d30035918955c42ca5ebff158
  $s$fEqTree ::
    GHC.Classes.Eq (Data.Tree.Tree PerturbationTree.AnsatzNode)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                  (Data.Tree.$fEqTree_$c==
                     @ PerturbationTree.AnsatzNode
                     PerturbationTree.$fEqAnsatzNode)
                  PerturbationTree.$s$fEqTree_$s$fEqTree_$c/= -}
b221567f8299a5160ff54386037e0d8d
  $s$fEqTree_$s$fEqTree_$c/= ::
    Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Tree PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x4 :: Data.Tree.Tree PerturbationTree.AnsatzNode)
                   (y :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case Data.Tree.$fEqTree_$c==
                        @ PerturbationTree.AnsatzNode
                        PerturbationTree.$fEqAnsatzNode
                        x4
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ebde50f947ab2ccec752a3ef528069e3
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)
                  PerturbationTree.$s$fEq(,)1
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (\ (a1 :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer))
                     (b1 :: (GHC.Types.Int, GHC.Real.Ratio GHC.Integer.Type.Integer)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ GHC.Types.Int
                     @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                     GHC.Classes.$fOrdInt
                     GHC.Real.$fOrdRatio_$s$fOrdRatio) -}
67d0c214df918ec292ddd9af41e6b101
  $tc'EpsilonLeaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4753938420670548784##
                   350947589073638828##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EpsilonLeaf2
                   0#
                   PerturbationTree.$tc'EpsilonLeaf1) -}
59dd582a69412aa37477d63905b4ce99
  $tc'EpsilonLeaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
85646bd89d6f288ea12db7eda59f54df
  $tc'EpsilonLeaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EpsilonLeaf3) -}
9da6fa034bcf15969fc60294efac08b3
  $tc'EpsilonLeaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EpsilonLeaf"#) -}
6033d93121ff4fb17c5e363ac761e7f6
  $tc'EpsilonNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17996255556894589955##
                   7675804717742088882##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EpsilonNode2
                   0#
                   PerturbationTree.$tc'EpsilonNode1) -}
8fc14ecfd5c57bd6c54ee89ab8e218f3
  $tc'EpsilonNode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e58f1a1e1c9c7a4f455c8a99fd59ae02
  $tc'EpsilonNode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EpsilonNode3) -}
3f1699b5af7a385297953df617b9016b
  $tc'EpsilonNode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EpsilonNode"#) -}
fa37e2445ecfd98bc8128a0d82c4be7d
  $tc'EtaLeaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15899163492397549099##
                   10324652338567301460##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EtaLeaf2
                   0#
                   PerturbationTree.$tc'EtaLeaf1) -}
d77ca704109227139db6b21a6af10294
  $tc'EtaLeaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
90e4095c91bf63c88a7900f10b912f25
  $tc'EtaLeaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EtaLeaf3) -}
1456a2a84fd18fd219bb9dce4e9ff51d
  $tc'EtaLeaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EtaLeaf"#) -}
37583794049d841ce2ea989965c453dc
  $tc'EtaNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   680726839784378728##
                   16495365673758478913##
                   PerturbationTree.$trModule
                   PerturbationTree.$tc'EtaNode2
                   0#
                   PerturbationTree.$tc'EtaNode1) -}
6e6a7b1da4d221fb9420a603d3acf8c0
  $tc'EtaNode1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3390eaefd8ba3d054e31e21102ec0351
  $tc'EtaNode2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tc'EtaNode3) -}
a9949d47a8fc3093cba7ffa0f3e9baed
  $tc'EtaNode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EtaNode"#) -}
edca90e8232cb1734e0848f578ec309b
  $tcAnsatzNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2968987490096776203##
                   9839280410892179781##
                   PerturbationTree.$trModule
                   PerturbationTree.$tcAnsatzNode1
                   0#
                   GHC.Types.krep$*) -}
c44fb9f7909e573a0a2d6d0fa16538e6
  $tcAnsatzNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$tcAnsatzNode2) -}
ffa27dfeb21ce4b6650c709fe7595329
  $tcAnsatzNode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AnsatzNode"#) -}
250df17ffcab15d76bd72d00b7a4e701
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PerturbationTree.$trModule3
                   PerturbationTree.$trModule1) -}
4ba9adb716551aa4e266b65e69bca712
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$trModule2) -}
39ae9ca5ec81375fd2c9cd56333ac24d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PerturbationTree"#) -}
098d7d2d97cf2b0d439c8ed41e26edcb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree.$trModule4) -}
98bb877ac1db45aae886950a40e340d1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
8416bb09e55e0912a51ec7d2d3e9de3e
  $w$cshowsPrec ::
    GHC.Prim.Int# -> PerturbationTree.AnsatzNode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
e52edf113954f7913eba11e6900c1172
  $waddTree2Forest ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 3, Strictness: <S,U><L,U><S,1*U>, Inline: [0] -}
a74e966cd272a4af60fdc70b51bfa089
  $wmkAllVarsfrom2 ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [PerturbationTree.Var]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Prim.># ww ww1 of lwild {
                   DEFAULT
                   -> letrec {
                        go8 :: GHC.Prim.Int#
                               -> [Data.IntMap.Internal.IntMap GHC.Real.Rational]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          GHC.Types.:
                            @ (Data.IntMap.Internal.IntMap GHC.Real.Rational)
                            (Data.IntMap.Strict.fromList1
                               @ GHC.Real.Rational
                               (Data.IntMap.Internal.Nil @ GHC.Real.Rational)
                               (GHC.Types.:
                                  @ (Data.IntSet.Internal.Key, GHC.Real.Rational)
                                  (GHC.Types.I# x, PerturbationTree.mkAllVarsfrom1)
                                  (GHC.Types.[] @ (Data.IntSet.Internal.Key, GHC.Real.Rational))))
                            (case GHC.Prim.==# x ww1 of lwild1 {
                               DEFAULT -> go8 (GHC.Prim.+# x 1#)
                               1#
                               -> GHC.Types.[]
                                    @ (Data.IntMap.Internal.IntMap GHC.Real.Rational) })
                      } in
                      go8 ww
                   1#
                   -> GHC.Types.[]
                        @ (Data.IntMap.Internal.IntMap GHC.Real.Rational) }) -}
db4bcd49a29b8ee1de14340334cd661c
  $wmkEpsilonSeq ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> (# PerturbationTree.Epsilon,
          Data.Sequence.Internal.Seq PerturbationTree.Eta #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 (# (Data.Sequence.Internal.$windex @ GHC.Types.Int w 0#,
                     Data.Sequence.Internal.$windex @ GHC.Types.Int w 1#,
                     Data.Sequence.Internal.$windex @ GHC.Types.Int w 2#,
                     Data.Sequence.Internal.$windex @ GHC.Types.Int w 3#),
                    (Data.Sequence.Internal.$fFunctorSeq_$cfmap
                       @ (Data.Sequence.Internal.Elem
                            (Data.Sequence.Internal.Seq GHC.Types.Int))
                       @ (Data.Sequence.Internal.Elem (GHC.Types.Int, GHC.Types.Int))
                       PerturbationTree.mkEpsilonSeq1
                         `cast`
                       (Sym (Data.Sequence.Internal.N:Elem[0]
                                 <Data.Sequence.Internal.Seq GHC.Types.Int>_R)
                        ->_R Sym (Data.Sequence.Internal.N:Elem[0]
                                      <(GHC.Types.Int, GHC.Types.Int)>_R))
                       (Data.Sequence.Internal.$wchunksOf
                          @ GHC.Types.Int
                          2#
                          (Data.Sequence.Internal.$wdrop @ GHC.Types.Int 4# w))
                         `cast`
                       (Data.Sequence.Internal.N:Seq[0]
                            <Data.Sequence.Internal.Seq GHC.Types.Int>_R))
                      `cast`
                    (Sym (Data.Sequence.Internal.N:Seq[0]
                              <(GHC.Types.Int, GHC.Types.Int)>_R)) #)) -}
427857a897739fd1e90e288435050f47
  $wmkTreeEta ::
    PerturbationTree.Var
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> (# PerturbationTree.AnsatzNode,
          Data.Tree.Forest PerturbationTree.AnsatzNode #)
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
6e5f199f30c1f0b71c45cb794a5bb1b7
  $wprintAnsatzNode ::
    PerturbationTree.AnsatzNode
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
9917b22319132d83d295a9d5dcb57ef3
  $wprintTree ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: PerturbationTree.AnsatzNode)
                   (ww1 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 case Data.Tree.$wfmapTree
                        @ PerturbationTree.AnsatzNode
                        @ GHC.Base.String
                        PerturbationTree.printAnsatzNode
                        ww
                        ww1 of ww3 { (#,#) ww4 ww5 ->
                 Data.Tree.$wdrawTree ww4 ww5 }) -}
22c2c19b81c4f68dc75eb5c1b52d607c
  $wsortIndexEtas ::
    PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
8628b1192cb8ea4351fa177afccb9057
  $wswapBlockLabelTree ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> (# PerturbationTree.AnsatzNode,
          Data.Tree.Forest PerturbationTree.AnsatzNode #)
  {- Arity: 3, Strictness: <L,U(U,U)><S,U><L,1*U>, Inline: [0] -}
27437897f67126e0b429b5ed54961d33
  $wswapLabelTree ::
    (GHC.Types.Int, GHC.Types.Int)
    -> PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> (# PerturbationTree.AnsatzNode,
          Data.Tree.Forest PerturbationTree.AnsatzNode #)
  {- Arity: 3, Strictness: <L,U(U(U),U(U))><S,U><L,1*U>,
     Inline: [0] -}
74209ec0d7cb1e85e7669bd885db9176
  $wsymAnsatzForest ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [([GHC.Types.Int], [GHC.Types.Int])]
    -> [[GHC.Types.Int]]
    -> [[[GHC.Types.Int]]]
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 6, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0] -}
8416bb09e55e0912a51ec7d2d3e9de3e
  data AnsatzNode
    = EpsilonNode PerturbationTree.Epsilon
    | EtaNode PerturbationTree.Eta
    | EpsilonLeaf PerturbationTree.Epsilon PerturbationTree.Var
    | EtaLeaf PerturbationTree.Eta PerturbationTree.Var
7e6d950c230b572472046612daee7e30
  type Epsilon =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
cb9bea3061fa2f7af7cecc2fe06cdf95
  type Eta = (GHC.Types.Int, GHC.Types.Int)
2b1836ec131461c798347995ace972a7
  type Symmetry =
    ([(GHC.Types.Int, GHC.Types.Int)],
     [(GHC.Types.Int, GHC.Types.Int)],
     [([GHC.Types.Int], [GHC.Types.Int])], [[GHC.Types.Int]],
     [[[GHC.Types.Int]]])
b5e2275ff0ec23297d708d83166317f2
  type Var = Data.IntMap.Internal.IntMap GHC.Real.Rational
5cf3848c5c74fb22a9fef7a720b3f6d1
  addForests ::
    Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (f4 :: Data.Tree.Forest PerturbationTree.AnsatzNode)
                   (f5 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 letrec {
                   go8 :: [Data.Tree.Tree PerturbationTree.AnsatzNode]
                          -> Data.Tree.Forest PerturbationTree.AnsatzNode
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Tree.Tree PerturbationTree.AnsatzNode]) ->
                     case ds of wild {
                       [] -> f5
                       : y ys
                       -> case y of ww { Data.Tree.Node ww1 ww2 ->
                          PerturbationTree.$waddTree2Forest ww1 ww2 (go8 ys) } }
                 } in
                 go8 f4) -}
de856a2a0b6e050737dc5a1c505e3ebd
  getVarsForest ::
    Data.Tree.Forest PerturbationTree.AnsatzNode -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (forest :: Data.Tree.Forest
                                PerturbationTree.AnsatzNode) ->
                 Data.OldList.nubBy
                   @ [GHC.Types.Int]
                   GHC.Classes.$fEq[]_$s$c==
                   (PerturbationTree.getVarsForest_go forest)) -}
e0aaf85f56ceab30bd0b6b4747b5ffad
  getVarsForest_go ::
    [Data.Tree.Tree PerturbationTree.AnsatzNode] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U> -}
d4661910d127d6a019b4ed2610502f30
  getVarsTree ::
    Data.Tree.Tree PerturbationTree.AnsatzNode -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (tree :: Data.Tree.Tree
                              PerturbationTree.AnsatzNode) ->
                 PerturbationTree.getVarsTree_go
                   (Data.Tree.levels_$spoly_go2
                      @ PerturbationTree.AnsatzNode
                      tree
                      (GHC.Types.[] @ (Data.Tree.Tree PerturbationTree.AnsatzNode)))
                   (GHC.List.lastError @ [PerturbationTree.AnsatzNode])) -}
395abd48023568ae4492ed4ca7a9f557
  getVarsTree_go ::
    [[PerturbationTree.AnsatzNode]]
    -> [PerturbationTree.AnsatzNode] -> [[Data.IntSet.Internal.Key]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
de659a702053193c670a54a0b26297ec
  mkAllVarsfrom1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   PerturbationTree.mkAllVarsfrom3
                   GHC.Real.$fEnumRatio1) -}
c560272379e8fe7058699ff6545cc83e
  mkAllVarsfrom2 ::
    (GHC.Types.Int, GHC.Types.Int) -> [PerturbationTree.Var]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 PerturbationTree.$wmkAllVarsfrom2 ww4 ww6 } } }) -}
83255672a74039aa59d49c6dc95ed849
  mkAllVarsfrom3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
e1773a9100c139e0b634428ec6012dfb
  mkEpsilonSeq ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> (PerturbationTree.Epsilon,
        Data.Sequence.Internal.Seq PerturbationTree.Eta)
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 case PerturbationTree.$wmkEpsilonSeq w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f6e90c7bf56f6faf445af35811d031ac
  mkEpsilonSeq1 ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 (Data.Sequence.Internal.$windex @ GHC.Types.Int s 0#,
                  Data.Sequence.Internal.$windex @ GHC.Types.Int s 1#)) -}
cd6871dd3b8b76b8dbb6016f266c3035
  mkEtaSeq ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                PerturbationTree.mkEtaSeq1
                  `cast`
                (<Data.Sequence.Internal.Seq GHC.Types.Int>_R
                 ->_R Sym (Data.Sequence.Internal.N:Seq[0]
                               <(GHC.Types.Int, GHC.Types.Int)>_R)) -}
46d67d09ad56b2e9d61e9d39c821bcbe
  mkEtaSeq1 ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.FingerTree
         (Data.Sequence.Internal.Elem (GHC.Types.Int, GHC.Types.Int))
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (seq :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 Data.Sequence.Internal.$fFunctorSeq_$cfmap
                   @ (Data.Sequence.Internal.Elem
                        (Data.Sequence.Internal.Seq GHC.Types.Int))
                   @ (Data.Sequence.Internal.Elem (GHC.Types.Int, GHC.Types.Int))
                   PerturbationTree.mkEpsilonSeq1
                     `cast`
                   (Sym (Data.Sequence.Internal.N:Elem[0]
                             <Data.Sequence.Internal.Seq GHC.Types.Int>_R)
                    ->_R Sym (Data.Sequence.Internal.N:Elem[0]
                                  <(GHC.Types.Int, GHC.Types.Int)>_R))
                   (Data.Sequence.Internal.$wchunksOf @ GHC.Types.Int 2# seq)
                     `cast`
                   (Data.Sequence.Internal.N:Seq[0]
                        <Data.Sequence.Internal.Seq GHC.Types.Int>_R)) -}
4ae3fb503f1f3ac2d51e1664030a2c87
  mkTreeEpsilon ::
    PerturbationTree.Var
    -> (PerturbationTree.Epsilon,
        Data.Sequence.Internal.Seq PerturbationTree.Eta)
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U><S(LS),1*U(U,1*U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PerturbationTree.Var)
                   (w1 :: (PerturbationTree.Epsilon,
                           Data.Sequence.Internal.Seq PerturbationTree.Eta)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case ww2
                        `cast`
                      (Data.Sequence.Internal.N:Seq[0]
                           <PerturbationTree.Eta>_R) of wild {
                   Data.Sequence.Internal.EmptyT
                   -> Data.Tree.Node
                        @ PerturbationTree.AnsatzNode
                        (PerturbationTree.EpsilonLeaf ww1 w)
                        (GHC.Types.[] @ (Data.Tree.Tree PerturbationTree.AnsatzNode))
                   Data.Sequence.Internal.Single x
                   -> Data.Tree.Node
                        @ PerturbationTree.AnsatzNode
                        (PerturbationTree.EpsilonNode ww1)
                        (GHC.Types.:
                           @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                           (case PerturbationTree.$wmkTreeEta
                                   w
                                   wild
                                     `cast`
                                   (Sym (Data.Sequence.Internal.N:Seq[0]
                                             <PerturbationTree.Eta>_R)) of ww3 { (#,#) ww4 ww5 ->
                            Data.Tree.Node @ PerturbationTree.AnsatzNode ww4 ww5 })
                           (GHC.Types.[] @ (Data.Tree.Tree PerturbationTree.AnsatzNode)))
                   Data.Sequence.Internal.Deep dt ds1 ds2 ds3
                   -> case dt of wild1 {
                        DEFAULT
                        -> Data.Tree.Node
                             @ PerturbationTree.AnsatzNode
                             (PerturbationTree.EpsilonNode ww1)
                             (GHC.Types.:
                                @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                                (case PerturbationTree.$wmkTreeEta
                                        w
                                        wild
                                          `cast`
                                        (Sym (Data.Sequence.Internal.N:Seq[0]
                                                  <PerturbationTree.Eta>_R)) of ww3 { (#,#) ww4 ww5 ->
                                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww4 ww5 })
                                (GHC.Types.[] @ (Data.Tree.Tree PerturbationTree.AnsatzNode)))
                        0#
                        -> Data.Tree.Node
                             @ PerturbationTree.AnsatzNode
                             (PerturbationTree.EpsilonLeaf ww1 w)
                             (GHC.Types.[]
                                @ (Data.Tree.Tree PerturbationTree.AnsatzNode)) } } }) -}
b61d71b7d6faeea6560496fa0c75d308
  mkTreeEta ::
    PerturbationTree.Var
    -> Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U><S,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PerturbationTree.Var)
                   (w1 :: Data.Sequence.Internal.Seq PerturbationTree.Eta) ->
                 case PerturbationTree.$wmkTreeEta w w1 of ww { (#,#) ww1 ww2 ->
                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww1 ww2 }) -}
6ba1e51900e3d5fbb30490c7b091487a
  printAnsatzNode :: PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: PerturbationTree.AnsatzNode) ->
                 case PerturbationTree.$wprintAnsatzNode w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
8853b1db1a9ca3e6bf80a6039bfa565d
  printForest ::
    Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (forest :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 Data.OldList.unlines
                   (GHC.Base.build
                      @ [GHC.Types.Char]
                      (\ @ b1
                         (c :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                         (n1 :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                         @ b1
                         (GHC.Base.mapFB
                            @ [GHC.Types.Char]
                            @ b1
                            @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                            c
                            PerturbationTree.printTree)
                         n1
                         forest))) -}
6bd1639cf80907d8244d869dbafdd235
  printTree ::
    Data.Tree.Tree PerturbationTree.AnsatzNode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w of ww { Data.Tree.Node ww1 ww2 ->
                 PerturbationTree.$wprintTree ww1 ww2 }) -}
e55afab8a7f4fde76569109c9ab21207
  reduceAnsatzEpsilon ::
    PerturbationTree.Symmetry
    -> [((PerturbationTree.Epsilon,
          Data.Sequence.Internal.Seq PerturbationTree.Eta),
         PerturbationTree.Var)]
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,1*U(U,U,U,U,U)><S,1*U> -}
d59c8003dcb461d56cbd8879fd097fd7
  reduceAnsatzEta ::
    PerturbationTree.Symmetry
    -> [(Data.Sequence.Internal.Seq PerturbationTree.Eta,
         PerturbationTree.Var)]
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,1*U(U,U,U,U,U)><S,1*U>,
     Unfolding: (\ (sym :: PerturbationTree.Symmetry)
                   (ds :: [(Data.Sequence.Internal.Seq PerturbationTree.Eta,
                            PerturbationTree.Var)]) ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                   : ipv ipv1
                   -> case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                      let {
                        z :: Data.Tree.Forest PerturbationTree.AnsatzNode
                        = PerturbationTree.$wsymAnsatzForest
                            ww1
                            ww2
                            ww3
                            ww4
                            ww5
                            (GHC.Types.:
                               @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                               (case ipv of wild1 { (,) seq1 var1 ->
                                case PerturbationTree.$wmkTreeEta
                                       var1
                                       seq1 of ww6 { (#,#) ww7 ww8 ->
                                Data.Tree.Node @ PerturbationTree.AnsatzNode ww7 ww8 } })
                               (GHC.Types.[] @ (Data.Tree.Tree PerturbationTree.AnsatzNode)))
                      } in
                      letrec {
                        go8 :: [(Data.Sequence.Internal.Seq PerturbationTree.Eta,
                                 PerturbationTree.Var)]
                               -> Data.Tree.Forest PerturbationTree.AnsatzNode
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds1 :: [(Data.Sequence.Internal.Seq PerturbationTree.Eta,
                                      PerturbationTree.Var)]) ->
                          case ds1 of wild1 {
                            [] -> z
                            : y ys
                            -> case y of wild2 { (,) seq var ->
                               let {
                                 forest :: Data.Tree.Forest PerturbationTree.AnsatzNode = go8 ys
                               } in
                               case PerturbationTree.searchForestEtaSeq seq forest of wild3 {
                                 GHC.Types.False
                                 -> letrec {
                                      go9 :: [Data.Tree.Tree PerturbationTree.AnsatzNode]
                                             -> Data.Tree.Forest PerturbationTree.AnsatzNode
                                        {- Arity: 1, Strictness: <S,1*U> -}
                                      = \ (ds2 :: [Data.Tree.Tree PerturbationTree.AnsatzNode]) ->
                                        case ds2 of wild4 {
                                          [] -> forest
                                          : y1 ys1
                                          -> case y1 of ww6 { Data.Tree.Node ww7 ww8 ->
                                             PerturbationTree.$waddTree2Forest ww7 ww8 (go9 ys1) } }
                                    } in
                                    go9
                                      (PerturbationTree.$wsymAnsatzForest
                                         ww1
                                         ww2
                                         ww3
                                         ww4
                                         ww5
                                         (GHC.Types.:
                                            @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                                            (PerturbationTree.mkTreeEta var seq)
                                            (GHC.Types.[]
                                               @ (Data.Tree.Tree PerturbationTree.AnsatzNode))))
                                 GHC.Types.True -> forest } } }
                      } in
                      go8 wild } }) -}
f35e60745f869eb3b7f3e50c759c8375
  searchForestEpsilonSeq ::
    (PerturbationTree.Epsilon,
     Data.Sequence.Internal.Seq PerturbationTree.Eta)
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <L,1*U(U(U(U),U(U),U(U),U(U)),U)><S,1*U> -}
cea0129f50d416ece31f93f0fc2828af
  searchForestEtaSeq ::
    Data.Sequence.Internal.Seq PerturbationTree.Eta
    -> Data.Tree.Forest PerturbationTree.AnsatzNode -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
37bdbc5586df10565191977d33c685f3
  sortForest ::
    Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (forest :: Data.Tree.Forest
                                PerturbationTree.AnsatzNode) ->
                 PerturbationTree.sortForest_go1
                   (Data.OldList.sortBy
                      @ (PerturbationTree.AnsatzNode,
                         Data.Tree.Tree PerturbationTree.AnsatzNode)
                      PerturbationTree.sortForest1
                      (PerturbationTree.sortForest_go forest))) -}
929d5d02079326495eb7a4187ab76321
  sortForest1 ::
    (PerturbationTree.AnsatzNode,
     Data.Tree.Tree PerturbationTree.AnsatzNode)
    -> (PerturbationTree.AnsatzNode,
        Data.Tree.Tree PerturbationTree.AnsatzNode)
    -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: (PerturbationTree.AnsatzNode,
                          Data.Tree.Tree PerturbationTree.AnsatzNode))
                   (y :: (PerturbationTree.AnsatzNode,
                          Data.Tree.Tree PerturbationTree.AnsatzNode))[OneShot] ->
                 case x of wild { (,) x1 ds1 ->
                 case y of wild1 { (,) x2 ds2 ->
                 PerturbationTree.$fOrdAnsatzNode_$ccompare x1 x2 } }) -}
232d731927161cbb4b25827b5c6e9dd4
  sortForest_go ::
    [Data.Tree.Tree PerturbationTree.AnsatzNode]
    -> [(PerturbationTree.AnsatzNode,
         Data.Tree.Tree PerturbationTree.AnsatzNode)]
  {- Arity: 1, Strictness: <S,1*U> -}
06e4841803759ab852aae876d18e1733
  sortForest_go1 ::
    [(PerturbationTree.AnsatzNode,
      Data.Tree.Tree PerturbationTree.AnsatzNode)]
    -> [Data.Tree.Tree PerturbationTree.AnsatzNode]
  {- Arity: 1, Strictness: <S,1*U> -}
04021fd7257d30e3c44364ec416f7963
  sortIndexEtas ::
    Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w of ww { Data.Tree.Node ww1 ww2 ->
                 PerturbationTree.$wsortIndexEtas ww1 ww2 }) -}
5bface4dacc36e3f4c9e8653007a9572
  swapBlockLabelForest ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (inds :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (ans :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 PerturbationTree.sortForest_go1
                   (Data.OldList.sortBy
                      @ (PerturbationTree.AnsatzNode,
                         Data.Tree.Tree PerturbationTree.AnsatzNode)
                      PerturbationTree.sortForest1
                      (PerturbationTree.sortForest_go
                         (GHC.Base.build
                            @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                            (\ @ b1
                               (c :: Data.Tree.Tree PerturbationTree.AnsatzNode
                                     -> b1 -> b1)[OneShot]
                               (n1 :: b1)[OneShot] ->
                             GHC.Base.foldr
                               @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                               @ b1
                               (GHC.Base.mapFB
                                  @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                                  @ b1
                                  @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                                  c
                                  (PerturbationTree.swapBlockLabelTree inds))
                               n1
                               ans))))) -}
26700b6c01ee103b5055571ad5dc390f
  swapBlockLabelTree ::
    ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U,U)><S(SL),1*U(U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (w1 :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w1 of ww { Data.Tree.Node ww1 ww2 ->
                 case PerturbationTree.$wswapBlockLabelTree
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww4 ww5 } }) -}
ec2e55dfbb4111a763c10e33c04b6e98
  swapLabelForest ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U(U),U(U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (inds :: (GHC.Types.Int, GHC.Types.Int))
                   (ans :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 PerturbationTree.sortForest_go1
                   (Data.OldList.sortBy
                      @ (PerturbationTree.AnsatzNode,
                         Data.Tree.Tree PerturbationTree.AnsatzNode)
                      PerturbationTree.sortForest1
                      (PerturbationTree.sortForest_go
                         (GHC.Base.build
                            @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                            (\ @ b1
                               (c :: Data.Tree.Tree PerturbationTree.AnsatzNode
                                     -> b1 -> b1)[OneShot]
                               (n1 :: b1)[OneShot] ->
                             GHC.Base.foldr
                               @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                               @ b1
                               (GHC.Base.mapFB
                                  @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                                  @ b1
                                  @ (Data.Tree.Tree PerturbationTree.AnsatzNode)
                                  c
                                  (PerturbationTree.swapLabelTree inds))
                               n1
                               ans))))) -}
38b018586e4501b7f4ae05662bde6068
  swapLabelTree ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
    -> Data.Tree.Tree PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <L,U(U(U),U(U))><S(SL),1*U(U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: Data.Tree.Tree PerturbationTree.AnsatzNode) ->
                 case w1 of ww { Data.Tree.Node ww1 ww2 ->
                 case PerturbationTree.$wswapLabelTree
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Data.Tree.Node @ PerturbationTree.AnsatzNode ww4 ww5 } }) -}
aee2ab5f9dc4f70952a740b2fe4636d7
  symAnsatzForest ::
    PerturbationTree.Symmetry
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
    -> Data.Tree.Forest PerturbationTree.AnsatzNode
  {- Arity: 2, Strictness: <S(SSSSS),1*U(1*U,1*U,1*U,1*U,1*U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PerturbationTree.Symmetry)
                   (w1 :: Data.Tree.Forest PerturbationTree.AnsatzNode) ->
                 case w of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 PerturbationTree.$wsymAnsatzForest ww1 ww2 ww3 ww4 ww5 w1 }) -}
instance [safe] GHC.Classes.Eq [PerturbationTree.AnsatzNode]
  = PerturbationTree.$fEqAnsatzNode
instance [safe] GHC.Classes.Ord [PerturbationTree.AnsatzNode]
  = PerturbationTree.$fOrdAnsatzNode
instance [safe] GHC.Show.Show [PerturbationTree.AnsatzNode]
  = PerturbationTree.$fShowAnsatzNode
"SPEC/PerturbationTree $fEq(,) @ Int @ (Ratio Integer)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                 (GHC.Real.Ratio
                                                                                    GHC.Integer.Type.Integer))
                                                                        (v :: GHC.Classes.Eq
                                                                                GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int
                      @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                      v
                      v1
  = PerturbationTree.$s$fEq(,)1
"SPEC/PerturbationTree $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                     GHC.Types.Int)
                                                            (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = PerturbationTree.$s$fEq(,)
"SPEC/PerturbationTree $fEq(,)_$c/= @ Int @ (Ratio Integer)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                         (GHC.Real.Ratio
                                                                                            GHC.Integer.Type.Integer))
                                                                             ($dEq :: GHC.Classes.Eq
                                                                                        GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int
                           @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                           $dEq
                           $dEq1
  = PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/=1
"SPEC/PerturbationTree $fEq(,)_$c/= @ Int @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                             GHC.Types.Int)
                                                                 ($dEq :: GHC.Classes.Eq
                                                                            GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = PerturbationTree.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/PerturbationTree $fEqTree @ AnsatzNode" forall (v :: GHC.Classes.Eq
                                                             PerturbationTree.AnsatzNode)
  Data.Tree.$fEqTree @ PerturbationTree.AnsatzNode v
  = PerturbationTree.$s$fEqTree
"SPEC/PerturbationTree $fEqTree_$c/= @ AnsatzNode" forall ($dEq :: GHC.Classes.Eq
                                                                     PerturbationTree.AnsatzNode)
  Data.Tree.$fEqTree_$c/= @ PerturbationTree.AnsatzNode $dEq
  = PerturbationTree.$s$fEqTree_$s$fEqTree_$c/=
"SPEC/PerturbationTree $fOrd(,) @ Int @ (Ratio Integer)" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                  (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer))
                                                                         (v :: GHC.Classes.Ord
                                                                                 GHC.Types.Int)
  GHC.Classes.$fOrd(,) @ GHC.Types.Int
                       @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                       v
                       v1
  = PerturbationTree.$s$fOrd(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

