
==================== FINAL INTERFACE ====================
2019-01-14 15:48:12.333776 UTC

interface main:BasicTensors [hpc] 8043
  interface hash: 23fc3c737015592028f3cd3581504896
  ABI hash: 0df78451cdb64d61e6036444805588ff
  export-list hash: e3eb46cbf5e0ff0a91078b17412e1317
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  BasicTensors.aSymI_2
  BasicTensors.areaDofList
  BasicTensors.canonicalizeArea
  BasicTensors.delta_19
  BasicTensors.delta_20
  BasicTensors.delta_3
  BasicTensors.delta_9
  BasicTensors.epsilon
  BasicTensors.eta
  BasicTensors.etaAbs
  BasicTensors.flatArea
  BasicTensors.flatAreaMap
  BasicTensors.flatAreaST
  BasicTensors.interArea
  BasicTensors.interAreanoFactor
  BasicTensors.interEqn1_2
  BasicTensors.interEqn1_3
  BasicTensors.interF_IArea
  BasicTensors.interI_2
  BasicTensors.interI_3
  BasicTensors.interI_Area
  BasicTensors.interJ_2
  BasicTensors.interJ_2noFactor
  BasicTensors.interJ_3
  BasicTensors.interJ_Area
  BasicTensors.interJ_AreanoFactor
  BasicTensors.interMetric
  BasicTensors.interMetricnoFactor
  BasicTensors.invEta
  BasicTensors.invEtaAbs
  BasicTensors.isZeroArea
  BasicTensors.ivar1
  BasicTensors.ivar1FM
  BasicTensors.ivar1M
  BasicTensors.ivar2
  BasicTensors.ivar2FM
  BasicTensors.ivar2M
  BasicTensors.ivar3
  BasicTensors.ivar3FM
  BasicTensors.ivar3M
  BasicTensors.symI_2
  BasicTensors.symI_3
  BasicTensors.symI_Area
  BasicTensors.triangleMap2
  BasicTensors.triangleMap3
  BasicTensors.triangleMapArea
module dependencies: Index Ivar Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Proxy a80a60a2fdceabfeb4d110d23b808844
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Index e389b597f52dbfefe3745bcba1949c62
  exports: 02acfc58131cc32506762c89c9bc64b7
  Ind f38899f72c51d508346da2376d547a95
  Index a01a9190ec51cc115d3358a99c063fe2
  Lind_19 676377839313459497d3fe7bc879444e
  Lind_20 9976c80afe3129a8da6eeef509cd939d
  Lind_9 199ec47d455794929a9c39c4489984a9
  Linds_3 b7f25c6c6ec24e0defe93a5bf531b4b2
  Uind_19 d671ee312bb9cf797ac44fea3cd70c8f
  Uind_20 b5e99ed389304ee9c82083925596c8cb
  Uind_9 8fce60bf392f1d712124e42ff35dcfc1
  Uinds_3 311b0a992b6841d7d23b3d8756aed0ef
  getValInd b1c032a982e0f73608bad6b7953c3ea2
  indSign2 b8119acfb0db616a560084acea86654f
  indexList f58814df1da320a236f4d53251534264
  mkInd 5e4f36c0df3f4b8edd769168b4da8340
  sortInd 9c76714ae7567cb8a5ab525e2a3324b4
import  -/  Ivar 52a8dc212ab2f8456a526e9d381a1784
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar ab6885cb499b09a96006f6f783229377
  number2Ivar f1b8a1fca14cf15f56d04d728666e427
import  -/  Tensor 70d6952dea62d47ab6f2d598c8b571ec
  exports: cc1f578937ee3122bbbb4f8cf3eb8582
  Tensor 6b5aa7fabc304949e9aed286ed95183b
  getVal 298d31713ba8d9e384a4cf7e11b8c688
  mkTensorfromF f42fd45324de0a3ca5ece7330e35f855
  mkTensorfromFZeros adebbb015a725c1380b66c8b331e60dc
  tensorAdd 3f2d80707436db7c861987a2763b8ae6
  tensorContractWith_3 d4730f4187bd6ebe8b3dd0280edaf514
  tensorProductWith 1110039333b95adaab3b9466e9a23aae
  tensorSMult 87ac1fc931fedd0d8cbb4f13a3cf68b2
  tensorSub 631c1c57b5264eed0ff22494ec87ff89
  tensorTranspose 317a8f2f993e8cc2a39a39388f3629fe
a2f410c3f26bedd951034c865efe7b56
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
f5c5986cec5199f8e7b569023a2da711
  $stensorContractWith_11 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$stensorContractWith_12 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
c41f8db10598475859eb6a7ef4c58600
  $stensorContractWith_12 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
b71326f785ffb48f9118564d720d01c0
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
6a794e9256cb06edb77d8487f118be62
  $stensorContractWith_5 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$stensorContractWith_6 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
3ca7c0ee170ce8ff0a6d48ace5e93ee0
  $stensorContractWith_6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
725828203a66eef33be8d024e2acdb0a
  $stensorContractWith_8 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$stensorContractWith_9 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
f6c38f97f303779fc369e7e955f64170
  $stensorContractWith_9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
fc1b1052118f7bb3e6226755fa151007
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BasicTensors.$trModule3
                   BasicTensors.$trModule1) -}
76dbabc2a45f390f265aca8e93266473
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BasicTensors.$trModule2) -}
fe7d9b9371d4e605f03b0585940269ca
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BasicTensors"#) -}
57f14e02853941999a6fc6716128c4e9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BasicTensors.$trModule4) -}
a91eefb16a75959bce665cd2eb357f29
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
198884aec0ee771c9bf9e6cebf2b0335
  $w$scanonicalizeArea ::
    Index.Ind 4 Index.Uind_3
    -> (# Index.Ind 4 Index.Uind_3, GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U(U)>, Inline: [0] -}
10e936fc3452800c2ca035948cd09c25
  $w$scanonicalizeArea1 ::
    Index.Ind 4 Index.Lind_3
    -> (# Index.Ind 4 Index.Lind_3, GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U(U)>, Inline: [0] -}
ee205f6b1cc635b88c2f0fa4de92a26d
  $w$sisZeroArea ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 let {
                   eta4 :: Index.Ind 4 Index.Lind_3
                   = Index.UnsafemkInd @ 4 @ Index.Lind_3 ww
                 } in
                 {__scc {main:BasicTensors.isZeroArea} True True} {__scc {main:Index.==} True False} case {__scc {main:BasicTensors.isZeroArea.a} True True} {__scc {main:Index.getValInd} True False} eta4 of wild { Index.UnsafemkInd s ->
                                                                                                     case {__scc {main:BasicTensors.isZeroArea.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                          @ Index.Lind_3
                                                                                                                                                                                                          0#
                                                                                                                                                                                                          s of wild1 {
                                                                                                       GHC.Base.Nothing
                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                          ret_ty GHC.Types.Bool
                                                                                                          of {}
                                                                                                       GHC.Base.Just x
                                                                                                       -> let {
                                                                                                            $j :: GHC.Types.Bool
                                                                                                              <join 0>
                                                                                                            = let {
                                                                                                                ds :: Index.Lind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.c} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                     2#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              let {
                                                                                                                ds1 :: Index.Lind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.d} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                     3#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              {__scc {main:Index.==} True True} case ds of wild2 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L0_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L1_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L2_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L3_3
                                                                                                                                                       -> GHC.Types.True } }
                                                                                                          } in
                                                                                                          case x of wild2 {
                                                                                                            Index.L0_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L0_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.L1_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L1_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.L2_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L2_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.L3_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L3_3
                                                                                                                      -> GHC.Types.True } } } } } }) -}
7157ac22c4da63e8038f253158954b05
  $w$sisZeroArea1 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 let {
                   eta4 :: Index.Ind 4 Index.Uind_3
                   = Index.UnsafemkInd @ 4 @ Index.Uind_3 ww
                 } in
                 {__scc {main:BasicTensors.isZeroArea} True True} {__scc {main:Index.==} True False} case {__scc {main:BasicTensors.isZeroArea.a} True True} {__scc {main:Index.getValInd} True False} eta4 of wild { Index.UnsafemkInd s ->
                                                                                                     case {__scc {main:BasicTensors.isZeroArea.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                          @ Index.Uind_3
                                                                                                                                                                                                          0#
                                                                                                                                                                                                          s of wild1 {
                                                                                                       GHC.Base.Nothing
                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                          ret_ty GHC.Types.Bool
                                                                                                          of {}
                                                                                                       GHC.Base.Just x
                                                                                                       -> let {
                                                                                                            $j :: GHC.Types.Bool
                                                                                                              <join 0>
                                                                                                            = let {
                                                                                                                ds :: Index.Uind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.c} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                     2#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              let {
                                                                                                                ds1 :: Index.Uind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.d} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                     3#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              {__scc {main:Index.==} True True} case ds of wild2 {
                                                                                                                                                  Index.U0_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U0_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.U1_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U1_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.U2_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U2_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.U3_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U3_3
                                                                                                                                                       -> GHC.Types.True } }
                                                                                                          } in
                                                                                                          case x of wild2 {
                                                                                                            Index.U0_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U0_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.U1_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U1_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.U2_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U2_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.U3_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U3_3
                                                                                                                      -> GHC.Types.True } } } } } }) -}
e57e51e6ade35e6fdf0969af835a2310
  $w$spermSignN :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
d07f1cab55e8ade118ac1e653c4692c2
  $wareaDofList ::
    (GHC.Enum.Enum a, GHC.Classes.Ord a) =>
    [Data.Sequence.Internal.Seq a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,U(1*U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A)>,
     Inline: [0] -}
046ddaeaec4aadbb7152e2019de9cd9b
  $wcanonicalizeArea ::
    GHC.Classes.Ord a =>
    Index.Ind 4 a -> (# Index.Ind 4 a, GHC.Real.Rational #)
  {- Arity: 2,
     Strictness: <L,U(1*U(1*C1(C1(U)),A),A,C(C1(U)),1*C1(C1(U)),C(C1(U)),A,A,A)><L,U(U)>,
     Inline: [0] -}
019359b0174f00fa6781c7ee010c5072
  $wepsilon_F ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 {__scc {main:BasicTensors.epsilon_F} True False} case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.a} True True} let {
                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                              ww of wild1 {
                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                         GHC.Base.Just x
                                                                                                                                                                                                                         -> x }
                                                                                                                                                                          } in
                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                    -> BasicTensors.delta_4
                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                    -> BasicTensors.delta_2
                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon2
                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon1 } of wild { GHC.Types.I# x ->
                                                                  case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.b} True True} let {
                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                              ww of wild1 {
                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                                                                                         -> x1 }
                                                                                                                                                                          } in
                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                    -> BasicTensors.delta_4
                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                    -> BasicTensors.delta_2
                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon2
                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon1 } of wild1 { GHC.Types.I# y ->
                                                                  case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                          x
                                                                                                                          y of lwild {
                                                                    DEFAULT
                                                                    -> case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.c} True True} let {
                                                                                                                                                                                 a :: Index.Lind_3
                                                                                                                                                                                 = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                   @ Index.Lind_3
                                                                                                                                                                                                                                   2#
                                                                                                                                                                                                                                   ww of wild2 {
                                                                                                                                                                                                                              GHC.Base.Nothing
                                                                                                                                                                                                                              -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                   @ Index.Lind_3
                                                                                                                                                                                                                              GHC.Base.Just x1
                                                                                                                                                                                                                              -> x1 }
                                                                                                                                                                               } in
                                                                                                                                                                               {__scc {main:Index.fromEnum} True True} case a of wild2 {
                                                                                                                                                                                                                         Index.L0_3
                                                                                                                                                                                                                         -> BasicTensors.delta_4
                                                                                                                                                                                                                         Index.L1_3
                                                                                                                                                                                                                         -> BasicTensors.delta_2
                                                                                                                                                                                                                         Index.L2_3
                                                                                                                                                                                                                         -> BasicTensors.epsilon2
                                                                                                                                                                                                                         Index.L3_3
                                                                                                                                                                                                                         -> BasicTensors.epsilon1 } of wild2 { GHC.Types.I# y1 ->
                                                                       case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                               x
                                                                                                                               y1 of lwild1 {
                                                                         DEFAULT
                                                                         -> case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.d} True True} let {
                                                                                                                                                                                      a :: Index.Lind_3
                                                                                                                                                                                      = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                        @ Index.Lind_3
                                                                                                                                                                                                                                        3#
                                                                                                                                                                                                                                        ww of wild3 {
                                                                                                                                                                                                                                   GHC.Base.Nothing
                                                                                                                                                                                                                                   -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                        @ Index.Lind_3
                                                                                                                                                                                                                                   GHC.Base.Just x1
                                                                                                                                                                                                                                   -> x1 }
                                                                                                                                                                                    } in
                                                                                                                                                                                    {__scc {main:Index.fromEnum} True True} case a of wild3 {
                                                                                                                                                                                                                              Index.L0_3
                                                                                                                                                                                                                              -> BasicTensors.delta_4
                                                                                                                                                                                                                              Index.L1_3
                                                                                                                                                                                                                              -> BasicTensors.delta_2
                                                                                                                                                                                                                              Index.L2_3
                                                                                                                                                                                                                              -> BasicTensors.epsilon2
                                                                                                                                                                                                                              Index.L3_3
                                                                                                                                                                                                                              -> BasicTensors.epsilon1 } of wild3 { GHC.Types.I# y2 ->
                                                                            case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                    x
                                                                                                                                    y2 of lwild2 {
                                                                              DEFAULT
                                                                              -> case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                         y
                                                                                                                                         y1 of lwild3 {
                                                                                   DEFAULT
                                                                                   -> case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                              y
                                                                                                                                              y2 of lwild4 {
                                                                                        DEFAULT
                                                                                        -> case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                                   y1
                                                                                                                                                   y2 of lwild5 {
                                                                                             DEFAULT
                                                                                             -> case {__scc {main:BasicTensors.epsilon_F} False True} let {
                                                                                                                                                        l :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild3
                                                                                                                                                            (GHC.Types.[]
                                                                                                                                                               @ GHC.Types.Int)
                                                                                                                                                      } in
                                                                                                                                                      let {
                                                                                                                                                        l1 :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild2
                                                                                                                                                            l
                                                                                                                                                      } in
                                                                                                                                                      let {
                                                                                                                                                        l2 :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild1
                                                                                                                                                            l1
                                                                                                                                                      } in
                                                                                                                                                      let {
                                                                                                                                                        l3 :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild
                                                                                                                                                            l2
                                                                                                                                                      } in
                                                                                                                                                      {__scc {main:BasicTensors.permSign} True True} BasicTensors.$w$spermSignN
                                                                                                                                                                                                       l3 of ww1 { DEFAULT ->
                                                                                                case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.permSign} False True} GHC.Prim.<#
                                                                                                                                                                                                        ww1
                                                                                                                                                                                                        0# of lwild6 {
                                                                                                  DEFAULT
                                                                                                  -> case ww1 of wild4 {
                                                                                                       DEFAULT
                                                                                                       -> case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.permSign} False True} GHC.Real.$wf1
                                                                                                                                                                                                                  -1#
                                                                                                                                                                                                                  wild4 of ww4 { DEFAULT ->
                                                                                                          case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Integer.Type.smallInteger
                                                                                                                                                                  ww4 of dt2 { DEFAULT ->
                                                                                                          (# dt2,
                                                                                                             GHC.Real.$fEnumRatio1 #) } }
                                                                                                       0#
                                                                                                       -> (# BasicTensors.$stensorContractWith_9,
                                                                                                             GHC.Real.$fEnumRatio1 #) }
                                                                                                  1#
                                                                                                  -> case GHC.Real.^2
                                                                                                     ret_ty (# GHC.Integer.Type.Integer,
                                                                                                               GHC.Integer.Type.Integer #)
                                                                                                     of {} } }
                                                                                             1#
                                                                                             -> (# BasicTensors.$stensorContractWith_2,
                                                                                                   GHC.Real.$fEnumRatio1 #) }
                                                                                        1#
                                                                                        -> (# BasicTensors.$stensorContractWith_2,
                                                                                              GHC.Real.$fEnumRatio1 #) }
                                                                                   1#
                                                                                   -> (# BasicTensors.$stensorContractWith_2,
                                                                                         GHC.Real.$fEnumRatio1 #) }
                                                                              1#
                                                                              -> (# BasicTensors.$stensorContractWith_2,
                                                                                    GHC.Real.$fEnumRatio1 #) } }
                                                                         1#
                                                                         -> (# BasicTensors.$stensorContractWith_2,
                                                                               GHC.Real.$fEnumRatio1 #) } }
                                                                    1#
                                                                    -> (# BasicTensors.$stensorContractWith_2,
                                                                          GHC.Real.$fEnumRatio1 #) } } }) -}
31a60817a83cdf84a4ed6519e2fa867a
  $wetaAbs ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 0 1 0 0) GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.etaAbs} True True} {__scc {main:BasicTensors.etaAbs.t1} True False} BasicTensors.eta of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.etaAbs} False True} {__scc {main:BasicTensors.etaAbs.t1} False True} BasicTensors.interJ_2
                                                                                                                       w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.etaAbs} False True} {__scc {main:BasicTensors.etaAbs.t1} False True} Tensor.$wtensorProductWith
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 2
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 1
                                                                                                                       @ 2
                                                                                                                       @ 0
                                                                                                                       GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                       ww1
                                                                                                                       ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.etaAbs} False True} Tensor.$wtensorContractWith_3
                                                                      @ 1
                                                                      @ 1
                                                                      @ GHC.Real.Rational
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 1
                                                                      BasicTensors.$stensorContractWith_8
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      BasicTensors.$stensorContractWith_8
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      BasicTensors.etaAbs2
                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                      ww5
                                                                        `cast`
                                                                      (Data.Map.Internal.Map
                                                                         ((,,,,,,,)
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Uind_20>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Lind_20>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Uind_19>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Lind_19>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Uind_9>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<1>_N))
                                                                               <Index.Lind_9>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                             <1>_N)))
                                                                               <Index.Uind_3>_N)_N
                                                                            (Index.Ind
                                                                               (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                             <1>_N)))
                                                                               <Index.Lind_3>_N)_N)_N
                                                                         <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 {__scc {main:BasicTensors.etaAbs} False True} Tensor.$wtensorContractWith_3
                                                                 @ 0
                                                                 @ 0
                                                                 @ GHC.Real.Rational
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 1
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.etaAbs1
                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                 ww8
                                                                   `cast`
                                                                 (Data.Map.Internal.Map
                                                                    ((,,,,,,,)
                                                                       <Index.Ind 0 Index.Uind_20>_N
                                                                       <Index.Ind 0 Index.Lind_20>_N
                                                                       <Index.Ind 0 Index.Uind_19>_N
                                                                       <Index.Ind 0 Index.Lind_19>_N
                                                                       <Index.Ind 0 Index.Uind_9>_N
                                                                       <Index.Ind 1 Index.Lind_9>_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Uind_3>_N)_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Lind_3>_N)_N)_N
                                                                    <GHC.Real.Rational>_R)_R } } } }) -}
d74984facfd292e9f11bc8760f4f1c83
  $wflatArea ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 0 0) GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.flatArea} True True} {__scc {main:BasicTensors.flatArea.prod} True False} BasicTensors.flatAreaST of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.flatArea} False True} {__scc {main:BasicTensors.flatArea.prod} False True} BasicTensors.interJ_Area
                                                                                                                             w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.flatArea} False True} {__scc {main:BasicTensors.flatArea.prod} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 4
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 4
                                                                                                                             @ 0
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww1
                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                        @ 3
                                                                        @ 3
                                                                        @ GHC.Real.Rational
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        BasicTensors.$stensorContractWith_11
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                        BasicTensors.$stensorContractWith_11
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                        BasicTensors.flatArea2
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww5
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<1>_N))
                                                                                 <Index.Lind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_9>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_9>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                               <1>_N)))
                                                                                 <Index.Uind_3>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                               <1>_N)))
                                                                                 <Index.Lind_3>_N)_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                        @ 2
                                                                        @ 2
                                                                        @ GHC.Real.Rational
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        BasicTensors.$stensorContractWith_5
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                        BasicTensors.$stensorContractWith_5
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                        BasicTensors.flatArea1
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww8
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              <Index.Ind
                                                                                 0 Index.Uind_20>_N
                                                                              <Index.Ind
                                                                                 1 Index.Lind_20>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_9>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_9>_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<2>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Uind_3>_N)_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<2>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Lind_3>_N)_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                        @ 1
                                                                        @ 1
                                                                        @ GHC.Real.Rational
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        BasicTensors.$stensorContractWith_8
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                        BasicTensors.$stensorContractWith_8
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                        BasicTensors.etaAbs2
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww10
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              <Index.Ind
                                                                                 0 Index.Uind_20>_N
                                                                              <Index.Ind
                                                                                 1 Index.Lind_20>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_9>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_9>_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<1>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Uind_3>_N)_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<1>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Lind_3>_N)_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   @ 0
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.etaAbs1
                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                   ww12
                                                                     `cast`
                                                                   (Data.Map.Internal.Map
                                                                      ((,,,,,,,)
                                                                         <Index.Ind
                                                                            0 Index.Uind_20>_N
                                                                         <Index.Ind
                                                                            1 Index.Lind_20>_N
                                                                         <Index.Ind
                                                                            0 Index.Uind_19>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_19>_N
                                                                         <Index.Ind
                                                                            0 Index.Uind_9>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_9>_N
                                                                         (Index.Ind
                                                                            (Sym (Add0L (<1>_N)))
                                                                            <Index.Uind_3>_N)_N
                                                                         (Index.Ind
                                                                            (Sym (Add0L (<1>_N)))
                                                                            <Index.Lind_3>_N)_N)_N
                                                                      <GHC.Real.Rational>_R)_R } } } } } }) -}
41d4a4a1c44b61931e7967333a7d9a9d
  $winterArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.interArea} True True} {__scc {main:BasicTensors.interArea.prod} True False} {__scc {main:BasicTensors.interArea.i} True True} BasicTensors.interI_Area
                                                                                                                                                                                w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interArea} False True} {__scc {main:BasicTensors.interArea.j} True True} BasicTensors.interJ_Area
                                                                                                                           w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interArea} False True} {__scc {main:BasicTensors.interArea.prod} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 4
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 4
                                                                                                                               @ 0
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww1
                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interArea} False True} Tensor.$wtensorContractWith_3
                                                                         @ 3
                                                                         @ 3
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         BasicTensors.$stensorContractWith_11
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                         BasicTensors.$stensorContractWith_11
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                         BasicTensors.flatArea2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww5
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Uind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<1>_N))
                                                                                  <Index.Lind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interArea} False True} Tensor.$wtensorContractWith_3
                                                                         @ 2
                                                                         @ 2
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         BasicTensors.$stensorContractWith_5
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                         BasicTensors.$stensorContractWith_5
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                         BasicTensors.flatArea1
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww8
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               <Index.Ind
                                                                                  1 Index.Uind_20>_N
                                                                               <Index.Ind
                                                                                  1 Index.Lind_20>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_9>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_9>_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<2>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<2>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:BasicTensors.interArea} False True} Tensor.$wtensorContractWith_3
                                                                         @ 1
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         BasicTensors.$stensorContractWith_8
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.$stensorContractWith_8
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.etaAbs2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww10
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               <Index.Ind
                                                                                  1 Index.Uind_20>_N
                                                                               <Index.Ind
                                                                                  1 Index.Lind_20>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_9>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_9>_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<1>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<1>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:BasicTensors.interArea} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.interArea_go8
                                                                                                                                                                                                        ww12 of dt2 { DEFAULT ->
                 (# dt2 #) } } } } } } }) -}
7e62ee10a066202df1a1c7ef8928ecf3
  $winterAreanoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.interAreanoFactor} True True} {__scc {main:BasicTensors.interAreanoFactor.prod} True False} {__scc {main:BasicTensors.interAreanoFactor.i} True True} BasicTensors.interI_Area
                                                                                                                                                                                                        w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} {__scc {main:BasicTensors.interAreanoFactor.j} True True} BasicTensors.interJ_AreanoFactor
                                                                                                                                           w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} {__scc {main:BasicTensors.interAreanoFactor.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 4
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 4
                                                                                                                                               @ 0
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww1
                                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                 @ 3
                                                                                 @ 3
                                                                                 @ GHC.Real.Rational
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 BasicTensors.$stensorContractWith_11
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                 BasicTensors.$stensorContractWith_11
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                 BasicTensors.flatArea2
                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                 ww5
                                                                                   `cast`
                                                                                 (Data.Map.Internal.Map
                                                                                    ((,,,,,,,)
                                                                                       (Index.Ind
                                                                                          (Add0R (<1>_N))
                                                                                          <Index.Uind_20>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<1>_N))
                                                                                          <Index.Lind_20>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Uind_19>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Lind_19>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Uind_9>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Lind_9>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                        <1>_N)))
                                                                                          <Index.Uind_3>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                        <1>_N)))
                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                    <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                 @ 2
                                                                                 @ 2
                                                                                 @ GHC.Real.Rational
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 BasicTensors.$stensorContractWith_5
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                 BasicTensors.$stensorContractWith_5
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                 BasicTensors.flatArea1
                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                 ww8
                                                                                   `cast`
                                                                                 (Data.Map.Internal.Map
                                                                                    ((,,,,,,,)
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Uind_20>_N
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Lind_20>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_9>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_9>_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<2>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Uind_3>_N)_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<2>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                    <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ GHC.Real.Rational
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 BasicTensors.$stensorContractWith_8
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                 BasicTensors.$stensorContractWith_8
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                 BasicTensors.etaAbs2
                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                 ww10
                                                                                   `cast`
                                                                                 (Data.Map.Internal.Map
                                                                                    ((,,,,,,,)
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Uind_20>_N
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Lind_20>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_9>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_9>_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<1>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Uind_3>_N)_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<1>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                    <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.interArea_go8
                                                                                                                                                                                                                ww12 of dt2 { DEFAULT ->
                 (# dt2 #) } } } } } } }) -}
8a0c1601064b3f43ff173ba827ee2a3a
  $winterEqn1_2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.interEqn1_2} True True} {__scc {main:BasicTensors.interEqn1_2.int1} True True} BasicTensors.interArea
                                                                                                                                 w
                                                                                                                                 w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case ({__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.intTotal} True False} BasicTensors.interEqn1_1)
                        `cast`
                      (Tensor.Tensor
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0R (<2>_N))
                         (Add0R (<2>_N))
                         <GHC.Real.Rational>_R)_R of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.intTotal} False True} {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.interEqn1_2_go8
                                                                                                                                                                                                                                                                                                                ww8 of dt2 { DEFAULT ->
                 case {__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.intTotal} False True} {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                        @ (Index.Index
                                                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                                                             2
                                                                                                                                                                                                                                                                             2)
                                                                                                                                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                                                                                                                                        (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                                                           @ 2
                                                                                                                                                                                                                                                                           @ 2)
                                                                                                                                                                                                                                                                        BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                                                                        ww5
                                                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                                                        (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                           ((,,,,,,,)
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                 <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                 <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                 <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                 <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                 <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                 <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                          <1>_N))
                                                                                                                                                                                                                                                                                 <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                              (Index.Ind
                                                                                                                                                                                                                                                                                 (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                          <1>_N))
                                                                                                                                                                                                                                                                                 <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                           <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                        dt2 of dt3 { DEFAULT ->
                 (# dt3 #) } } } } } }) -}
ba7867dae57226047129d2a9622fe6c1
  $winterEqn1_3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.interEqn1_3} True True} {__scc {main:BasicTensors.interEqn1_3.int1} True True} BasicTensors.interArea
                                                                                                                                 w
                                                                                                                                 w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.int2} True True} BasicTensors.interMetric
                                                                                                                                  w2
                                                                                                                                  w3 of ww7 { Tensor.Tensor ww8 ->
                 case BasicTensors.delta_20 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.int2} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww8
                                                                                                                                   ww10 of ww11 { Unit# ww12 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.intTotal} True True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 0
                                                                                                                                                                                                                                 0
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 1
                                                                                                                                                                                                                                 1)
                                                                                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                               @ 1)
                                                                                                                                                                                                                            BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                            ww5
                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                                                     <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                                                     <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                                                     <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                                                     <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                               <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                            ww12
                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                                                     <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                                                     <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                                                     <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                                                     <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                               <GHC.Real.Rational>_R)_R of dt2 { DEFAULT ->
                 (# dt2 #) } } } } } } }) -}
36b89b57e8ef1a7b6955bfa1cb50d85d
  $winterF_IArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Index.Uinds_20 1
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> GHC.Real.Rational
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (ww :: Index.Uinds_20 1)
                   (ww1 :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 let {
                   ds :: Index.Ind 4 Index.Lind_3
                   = Index.UnsafemkInd @ 4 @ Index.Lind_3 ww1
                 } in
                 {__scc {main:BasicTensors.interF_IArea} True True} case BasicTensors.$w$sisZeroArea
                                                                           ww1 of wild {
                                                                      GHC.Types.False
                                                                      -> case {__scc {main:BasicTensors.interF_IArea.sortY} True True} BasicTensors.$w$scanonicalizeArea1
                                                                                                                                         ds of ww2 { (#,#) ww3 ww4 ->
                                                                         {__scc {main:Index.==} True False} {__scc {main:BasicTensors.interF_IArea.indI} True False} case ww3 of ww5 { Index.UnsafemkInd ww6 ->
                                                                                                                                                                     case {__scc {main:BasicTensors.interF_IArea.indI} False True} BasicTensors.$wpoly_go13
                                                                                                                                                                                                                                     @ Index.Uind_20
                                                                                                                                                                                                                                     ww6
                                                                                                                                                                                                                                     w of x1 { DEFAULT ->
                                                                                                                                                                     case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                                                                               x1 of a# { DEFAULT ->
                                                                                                                                                                     case {__scc {main:BasicTensors.interF_IArea.xVal} True True} {__scc {main:Index.getValInd} True False} ww of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                     case {__scc {main:BasicTensors.interF_IArea.xVal} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                                                                               s of wild2 {
                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                          ret_ty GHC.Real.Rational
                                                                                                                                                                          of {}
                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                       -> case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                    @ Index.Uind_20
                                                                                                                                                                                                                    x of b# { DEFAULT ->
                                                                                                                                                                          case {__scc {main:Index.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                                    @ GHC.Types.Bool
                                                                                                                                                                                                                    (GHC.Prim.==#
                                                                                                                                                                                                                       a#
                                                                                                                                                                                                                       b#) of wild3 {
                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                            -> BasicTensors.interF_IArea1
                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                            -> ww4 } } } } } } } }
                                                                      GHC.Types.True
                                                                      -> BasicTensors.interF_IArea1 }) -}
d9dc89a5cbbd34a87a478191c0f9e5c6
  $winterMetric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.interMetric} True True} {__scc {main:BasicTensors.interMetric.prod} True False} {__scc {main:BasicTensors.interMetric.i} True True} BasicTensors.interI_2
                                                                                                                                                                                      w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interMetric} False True} {__scc {main:BasicTensors.interMetric.j} True True} BasicTensors.interJ_2
                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interMetric} False True} {__scc {main:BasicTensors.interMetric.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interMetric} False True} Tensor.$wtensorContractWith_3
                                                                           @ 1
                                                                           @ 1
                                                                           @ GHC.Real.Rational
                                                                           @ 0
                                                                           @ 0
                                                                           @ 0
                                                                           @ 0
                                                                           @ 1
                                                                           @ 1
                                                                           BasicTensors.$stensorContractWith_8
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           BasicTensors.$stensorContractWith_8
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           BasicTensors.etaAbs1
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           ww5
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Uind_20>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Lind_20>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Uind_19>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Lind_19>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0R (<1>_N))
                                                                                    <Index.Uind_9>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<1>_N))
                                                                                    <Index.Lind_9>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                  <1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                  <1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interMetric} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.interMetric_go8
                                                                                                                                                                                                          ww8 of dt2 { DEFAULT ->
                 (# dt2 #) } } } } }) -}
61833e237f852d4d77d5aca199117ada
  $winterMetricnoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} True True} {__scc {main:BasicTensors.interMetricnoFactor.prod} True False} {__scc {main:BasicTensors.interMetricnoFactor.i} True True} BasicTensors.interI_2
                                                                                                                                                                                                              w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} {__scc {main:BasicTensors.interMetricnoFactor.j} True True} BasicTensors.interJ_2noFactor
                                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} {__scc {main:BasicTensors.interMetricnoFactor.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 2
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 2
                                                                                                                                                   @ 0
                                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                   ww1
                                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                   @ 1
                                                                                   @ 1
                                                                                   @ GHC.Real.Rational
                                                                                   @ 0
                                                                                   @ 0
                                                                                   @ 0
                                                                                   @ 0
                                                                                   @ 1
                                                                                   @ 1
                                                                                   BasicTensors.$stensorContractWith_8
                                                                                     `cast`
                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                   BasicTensors.$stensorContractWith_8
                                                                                     `cast`
                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                   BasicTensors.etaAbs1
                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                   ww5
                                                                                     `cast`
                                                                                   (Data.Map.Internal.Map
                                                                                      ((,,,,,,,)
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Uind_20>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Lind_20>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Uind_19>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Lind_19>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0R (<1>_N))
                                                                                            <Index.Uind_9>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<1>_N))
                                                                                            <Index.Lind_9>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                          <1>_N)))
                                                                                            <Index.Uind_3>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                          <1>_N)))
                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                      <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.interMetric_go8
                                                                                                                                                                                                                  ww8 of dt2 { DEFAULT ->
                 (# dt2 #) } } } } }) -}
85a105e4a6957af58ca33590afbea170
  $winvEtaAbs ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:BasicTensors.invEtaAbs} True True} {__scc {main:BasicTensors.invEtaAbs.t1} True False} BasicTensors.invEta of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.invEtaAbs} False True} {__scc {main:BasicTensors.invEtaAbs.t1} False True} BasicTensors.interI_2
                                                                                                                             w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.invEtaAbs} False True} {__scc {main:BasicTensors.invEtaAbs.t1} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 2
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 2
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww1
                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.invEtaAbs} False True} Tensor.$wtensorContractWith_3
                                                                         @ 1
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 1
                                                                         @ 0
                                                                         BasicTensors.$stensorContractWith_8
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.$stensorContractWith_8
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.etaAbs2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww5
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<1>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 {__scc {main:BasicTensors.invEtaAbs} False True} Tensor.$wtensorContractWith_3
                                                                    @ 0
                                                                    @ 0
                                                                    @ GHC.Real.Rational
                                                                    @ 0
                                                                    @ 0
                                                                    @ 0
                                                                    @ 0
                                                                    @ 1
                                                                    @ 0
                                                                    BasicTensors.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                    BasicTensors.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                    BasicTensors.etaAbs1
                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                    ww8
                                                                      `cast`
                                                                    (Data.Map.Internal.Map
                                                                       ((,,,,,,,)
                                                                          <Index.Ind
                                                                             0 Index.Uind_20>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_20>_N
                                                                          <Index.Ind
                                                                             0 Index.Uind_19>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_19>_N
                                                                          <Index.Ind
                                                                             1 Index.Uind_9>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_9>_N
                                                                          (Index.Ind
                                                                             (Sym (Add0L (<1>_N)))
                                                                             <Index.Uind_3>_N)_N
                                                                          (Index.Ind
                                                                             (Sym (Add0L (<1>_N)))
                                                                             <Index.Lind_3>_N)_N)_N
                                                                       <GHC.Real.Rational>_R)_R } } } }) -}
2d11b07e372a2b7c5cbab76845d6f499
  $wisZeroArea ::
    GHC.Classes.Ord a => Index.Ind 4 a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(C(C(S))L)LLLLLLL),1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ @ a (w :: GHC.Classes.Ord a) (w1 :: Index.Ind 4 a) ->
                 let {
                   $dEq :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a w
                 } in
                 {__scc {main:BasicTensors.isZeroArea} True True} case GHC.Classes.==
                                                                         @ a
                                                                         $dEq
                                                                         ({__scc {main:BasicTensors.isZeroArea.a} True True} {__scc {main:Index.getValInd} True True} case w1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             0#
                                                                                                                                                                             s of wild1 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } })
                                                                         ({__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True True} case w1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             1#
                                                                                                                                                                             s of wild1 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } }) of wild {
                                                                    GHC.Types.False
                                                                    -> GHC.Classes.==
                                                                         @ a
                                                                         $dEq
                                                                         ({__scc {main:BasicTensors.isZeroArea.c} True True} {__scc {main:Index.getValInd} True True} case w1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             2#
                                                                                                                                                                             s of wild2 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } })
                                                                         ({__scc {main:BasicTensors.isZeroArea.d} True True} {__scc {main:Index.getValInd} True True} case w1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             3#
                                                                                                                                                                             s of wild2 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } })
                                                                    GHC.Types.True
                                                                    -> GHC.Types.True }) -}
4c5507b8928facc94ab712197b95a0af
  $wivar2F ::
    Index.Linds_20 1
    -> Index.Linds_3 1
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1) (ww1 :: Index.Linds_3 1) ->
                 {__scc {main:BasicTensors.ivar2F} True False} case {__scc {main:BasicTensors.ivar2F} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                               BasicTensors.ivar6
                                                                                                                                                               ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                   case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                                                                                                                     GHC.Base.Nothing
                                                                                                                                                                                                                                                     -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                        ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                  GHC.Real.Rational)
                                                                                                                                                                                                                                                        of {}
                                                                                                                                                                                                                                                     GHC.Base.Just x
                                                                                                                                                                                                                                                     -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                           @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                           case ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                                                                                                                                                                                           case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                                                                                                                                            s1 of wild3 {
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                          GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                of {}
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                                                                                                                                                                                                                  Index.L0_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          22#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                             a#
                                                                                                                                                                                                                                                                                                                                                             4#))
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar5
                                                                                                                                                                                                                                                                                                                                                  Index.L1_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                             22#
                                                                                                                                                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                a#
                                                                                                                                                                                                                                                                                                                                                                4#))
                                                                                                                                                                                                                                                                                                                                                          1#)
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar5
                                                                                                                                                                                                                                                                                                                                                  Index.L2_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                             22#
                                                                                                                                                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                a#
                                                                                                                                                                                                                                                                                                                                                                4#))
                                                                                                                                                                                                                                                                                                                                                          2#)
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar5
                                                                                                                                                                                                                                                                                                                                                  Index.L3_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                             22#
                                                                                                                                                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                a#
                                                                                                                                                                                                                                                                                                                                                                4#))
                                                                                                                                                                                                                                                                                                                                                          3#)
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar5 } } } } } }) of ww2 { Ivar.Ivar ww3 ww4 ->
                                                               (# ww3, ww4 #) }) -}
c1dc889b79dddd234d1459bfde504a23
  $wivar2FM ::
    Index.Linds_9 1
    -> Index.Linds_3 1
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_9 1) (ww1 :: Index.Linds_3 1) ->
                 {__scc {main:BasicTensors.ivar2FM} True False} case {__scc {main:BasicTensors.ivar2FM} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 BasicTensors.ivar6
                                                                                                                                                                 ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                      @ Index.Lind_9
                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                          ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                    GHC.Real.Rational)
                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                       -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                             x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                             case ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                                                                                                                                                                                             case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                                                                                                                                                                                              s1 of wild3 {
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                  ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                            GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                  of {}
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                               -> case x1 of wild4 {
                                                                                                                                                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            11#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                                               4#))
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar5
                                                                                                                                                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                               11#
                                                                                                                                                                                                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                                                                                                                  4#))
                                                                                                                                                                                                                                                                                                                                                            1#)
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar5
                                                                                                                                                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                               11#
                                                                                                                                                                                                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                                                                                                                  4#))
                                                                                                                                                                                                                                                                                                                                                            2#)
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar5
                                                                                                                                                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                               11#
                                                                                                                                                                                                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                                                                                                                  4#))
                                                                                                                                                                                                                                                                                                                                                            3#)
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar5 } } } } } }) of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                (# ww3, ww4 #) }) -}
86b71fd0b1f689938c660b9b5e71b318
  $wivar3F ::
    Index.Linds_20 1
    -> Index.Linds_9 1
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1) (ww1 :: Index.Linds_9 1) ->
                 {__scc {main:BasicTensors.ivar3F} True False} case {__scc {main:BasicTensors.ivar3F} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                               BasicTensors.ivar6
                                                                                                                                                               ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                   case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                                                                                                                     GHC.Base.Nothing
                                                                                                                                                                                                                                                     -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                        ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                  GHC.Real.Rational)
                                                                                                                                                                                                                                                        of {}
                                                                                                                                                                                                                                                     GHC.Base.Just x
                                                                                                                                                                                                                                                     -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                           @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                           case ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                                                                                                                                                                                           case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                                                                                                                                            s1 of wild3 {
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                          GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                of {}
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                             -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                                @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                                x1 of a#1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                                Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                        106#
                                                                                                                                                                                                                                                                                                                                                        (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                           a#
                                                                                                                                                                                                                                                                                                                                                           10#))
                                                                                                                                                                                                                                                                                                                                                     a#1)
                                                                                                                                                                                                                                                                                                                                                  BasicTensors.ivar5 } } } } } }) of ww2 { Ivar.Ivar ww3 ww4 ->
                                                               (# ww3, ww4 #) }) -}
6266686d7fe197a153d03148961cd762
  $wivar3FM ::
    Index.Linds_9 2
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_9 2) ->
                 {__scc {main:BasicTensors.ivar3FM} True False} case {__scc {main:BasicTensors.ivar3FM} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 BasicTensors.ivar6
                                                                                                                                                                 ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                      @ Index.Lind_9
                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                          ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                    GHC.Real.Rational)
                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                       -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                             x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                             case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                              @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                                                                                                                                                                              s of wild2 {
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                  ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                            GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                  of {}
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                               -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                                  @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                                  x1 of a#1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                                  Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          51#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                             a#
                                                                                                                                                                                                                                                                                                                                                             10#))
                                                                                                                                                                                                                                                                                                                                                       a#1)
                                                                                                                                                                                                                                                                                                                                                    BasicTensors.ivar5 } } } } }) of ww1 { Ivar.Ivar ww2 ww3 ->
                                                                (# ww2, ww3 #) }) -}
b51082f61c3ba1eb4371f2c9c8b566aa
  $wpoly_go1 ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Map.Internal.Map (Index.Uinds_3 4) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
27b7180d9c16c156e716e67410cab38d
  $wpoly_go13 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Map.Internal.Map (Index.Linds_3 4) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
593f54d2873b0412911460b87331a03b
  $wpoly_go2 ::
    Data.Sequence.Internal.Seq Index.Uind_20
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 0
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a
    -> a
  {- Arity: 9,
     Strictness: <S,U><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,1*U>,
     Inline: [0] -}
dd3b06291e353e95a038d73eefc4bb47
  $wpoly_go3 ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Map.Internal.Map (Index.Uinds_3 3) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
aa0824065cb08ae29e735668c65f7720
  $wpoly_go4 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Map.Internal.Map (Index.Linds_3 3) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
fcedd86de1c3f4baa1fa10f1bfae7201
  $wpoly_go5 ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Map.Internal.Map (Index.Uinds_3 2) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
edf94e4f88c6416f9d75d8d12c5b8514
  $wpoly_go6 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Map.Internal.Map (Index.Linds_3 2) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
5f2d94bae4a5b0f31c18db09727c6e2b
  $wpoly_go7 ::
    Index.Uinds_20 0
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 0
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a
    -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,1*U>,
     Inline: [0] -}
d11031f7d9555261acf244015f5d526b
  $wsymIndList ::
    GHC.Enum.Enum a =>
    GHC.Prim.Int# -> GHC.Types.Int -> [Data.Sequence.Internal.Seq a]
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><S,U><L,U>,
     Inline: [0] -}
81372182b9e998230d0d2faab3b7e62a
  aSymI_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
1ec2cba96b65767e3ebe59fc9715f5a0
  areaDofList ::
    (GHC.Enum.Enum a, GHC.Classes.Eq a, GHC.Classes.Ord a) =>
    [Data.Sequence.Internal.Seq a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,A><L,U(U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Enum.Enum a)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: GHC.Classes.Ord a) ->
                 BasicTensors.$wareaDofList @ a w w2) -}
c1a0375d1470bfad07d1b7fe2b67bd1a
  canonicalizeArea ::
    (GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Enum.Enum a) =>
    Index.Ind 4 a -> (Index.Ind 4 a, GHC.Real.Rational)
  {- Arity: 4,
     Strictness: <L,A><L,U(U(C(C1(U)),A),A,C(C1(U)),C(C1(U)),C(C1(U)),A,A,A)><L,A><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: GHC.Enum.Enum a)
                   (w3 :: Index.Ind 4 a) ->
                 case BasicTensors.$wcanonicalizeArea
                        @ a
                        w1
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
a72c70f7e7b2adbebb49b91c6b5f2d54
  delta_1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
ecbf18b700e6c2746d6cb2c9ed41246c
  delta_10 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 1 1 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_3} False True} Tensor.mkTensorfromF
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 1
                                                                  @ 1
                                                                  @ GHC.Real.Rational
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_8
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  BasicTensors.$stensorContractWith_8
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
8f9c2ea305772fbe354b58709646da5f
  delta_11 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
61f57e94f09175be6b26cbcf6a3198f0
  delta_12 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 1 1 0 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 1 1 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_9} False True} Tensor.mkTensorfromF
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 1
                                                                  @ 1
                                                                  @ 0
                                                                  @ 0
                                                                  @ GHC.Real.Rational
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_8
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  BasicTensors.$stensorContractWith_8
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
1f250a535910459b6780701f8851b8f7
  delta_19 :: Tensor.Tensor 0 0 1 1 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_19} True True} BasicTensors.delta_5
                                                                  BasicTensors.delta_1
                                                                  BasicTensors.delta_19F) -}
8b2f4d14d2c70c53eb5e0addd87d27fd
  delta_19F :: Index.Index 0 0 1 1 0 0 0 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLS(S)S(S)LLLL),1*U(A,A,1*U(U),1*U(U),A,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 1 1 0 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww3 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww4 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_19
                   = Index.UnsafemkInd @ 1 @ Index.Uind_19 ww10
                 } in
                 {__scc {main:BasicTensors.delta_19F} True False} case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                  case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                    @ Index.Uind_19
                                                                                                                                                                    0#
                                                                                                                                                                    s of wild1 {
                                                                    GHC.Base.Nothing
                                                                    -> case Data.Maybe.fromJust1
                                                                       ret_ty (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                       of {}
                                                                    GHC.Base.Just x
                                                                    -> case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Uind_19
                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                       case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                         @ Index.Lind_19
                                                                                                                                                                         0#
                                                                                                                                                                         ww12 of wild2 {
                                                                         GHC.Base.Nothing
                                                                         -> case Data.Maybe.fromJust1
                                                                            ret_ty (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                            of {}
                                                                         GHC.Base.Just x1
                                                                         -> case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                             @ Index.Lind_19
                                                                                                                                                                             x1 of a#1 { DEFAULT ->
                                                                            case {__scc {main:BasicTensors.delta_19F} False True} GHC.Prim.==#
                                                                                                                                    a#
                                                                                                                                    a#1 of lwild {
                                                                              DEFAULT
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$stensorContractWith_2
                                                                                   GHC.Real.$fEnumRatio1
                                                                              1#
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$stensorContractWith_9
                                                                                   GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
8183a81137418c47200d4fce949f2310
  delta_2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
b77804eb482505214a8985e4180aefe4
  delta_20 :: Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_20} True True} BasicTensors.delta_7
                                                                  BasicTensors.delta_6
                                                                  BasicTensors.delta_20F) -}
5a973223ab4c2c71f1e3607f766a2399
  delta_20F :: Index.Index 1 1 0 0 0 0 0 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(S(S)S(S)LLLLLL),1*U(1*U(U),1*U(U),A,A,A,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 0 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww1 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww2 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_20
                   = Index.UnsafemkInd @ 1 @ Index.Uind_20 ww10
                 } in
                 {__scc {main:BasicTensors.delta_20F} True False} case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                  case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                    @ Index.Uind_20
                                                                                                                                                                    0#
                                                                                                                                                                    s of wild1 {
                                                                    GHC.Base.Nothing
                                                                    -> case Data.Maybe.fromJust1
                                                                       ret_ty (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                       of {}
                                                                    GHC.Base.Just x
                                                                    -> case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Uind_20
                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                       case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                         @ Index.Lind_20
                                                                                                                                                                         0#
                                                                                                                                                                         ww12 of wild2 {
                                                                         GHC.Base.Nothing
                                                                         -> case Data.Maybe.fromJust1
                                                                            ret_ty (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                            of {}
                                                                         GHC.Base.Just x1
                                                                         -> case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                             @ Index.Lind_20
                                                                                                                                                                             x1 of a#1 { DEFAULT ->
                                                                            case {__scc {main:BasicTensors.delta_20F} False True} GHC.Prim.==#
                                                                                                                                    a#
                                                                                                                                    a#1 of lwild {
                                                                              DEFAULT
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$stensorContractWith_2
                                                                                   GHC.Real.$fEnumRatio1
                                                                              1#
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$stensorContractWith_9
                                                                                   GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
746fafc3bda1c359b0397abeed82111a
  delta_3 :: Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_3} True True} BasicTensors.delta_10
                                                                 BasicTensors.delta_8
                                                                 BasicTensors.delta_3F) -}
def2396079cd729e1bb03c129c1c7b94
  delta_3F :: Index.Index 0 0 0 0 0 0 1 1 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLS(S)S(S)),1*U(A,A,A,A,A,A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww7 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww8 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_3
                   = Index.UnsafemkInd @ 1 @ Index.Uind_3 ww10
                 } in
                 let {
                   ds1 :: Index.Ind 1 Index.Lind_3
                   = Index.UnsafemkInd @ 1 @ Index.Lind_3 ww12
                 } in
                 {__scc {main:BasicTensors.delta_3F} True False} case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                 case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                  0#
                                                                                                                                                                  s of wild1 {
                                                                   GHC.Base.Nothing
                                                                   -> case Data.Maybe.fromJust1
                                                                      ret_ty (GHC.Real.Ratio
                                                                                GHC.Integer.Type.Integer)
                                                                      of {}
                                                                   GHC.Base.Just x
                                                                   -> case x of wild2 {
                                                                        Index.U0_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  Index.L0_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_9
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L1_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_2
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L2_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_2
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L3_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_2
                                                                                       GHC.Real.$fEnumRatio1 } } }
                                                                        Index.U1_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  DEFAULT
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_2
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L1_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_9
                                                                                       GHC.Real.$fEnumRatio1 } } }
                                                                        Index.U2_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  DEFAULT
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_2
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L2_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_9
                                                                                       GHC.Real.$fEnumRatio1 } } }
                                                                        Index.U3_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  DEFAULT
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_2
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L3_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$stensorContractWith_9
                                                                                       GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
4f6ab7c9ded95491ca8026869fc243ca
  delta_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0e90675252132a26d3222f6f42dc0f62
  delta_5 ::
    Tensor.Rank
    -> (Index.Index 0 0 1 1 0 0 0 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 1 1 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_19} False True} Tensor.mkTensorfromF
                                                                   @ 0
                                                                   @ 0
                                                                   @ 1
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_8
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$stensorContractWith_8
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                   GHC.Real.$fOrdRatio_$s$fEqRatio) -}
45e46b5da914ea725881a87cfa4781ee
  delta_6 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
13283a26e00a45748f9983779684b587
  delta_7 ::
    Tensor.Rank
    -> (Index.Index 1 1 0 0 0 0 0 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_20} False True} Tensor.mkTensorfromF
                                                                   @ 1
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   BasicTensors.$stensorContractWith_8
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$stensorContractWith_8
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                   GHC.Real.$fOrdRatio_$s$fEqRatio) -}
ab54f8f11197e319cdf7a6576b948dd2
  delta_8 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_2)) -}
d22b99ceb5d7fccaba80523aeb233ebd
  delta_9 :: Tensor.Tensor 0 0 0 0 1 1 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_9} True True} BasicTensors.delta_12
                                                                 BasicTensors.delta_11
                                                                 BasicTensors.delta_9F) -}
57cb0aec649631396f9e389c6762d7ba
  delta_9F :: Index.Index 0 0 0 0 1 1 0 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLS(S)S(S)LL),1*U(A,A,A,A,1*U(U),1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 1 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww5 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww6 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_9
                   = Index.UnsafemkInd @ 1 @ Index.Uind_9 ww10
                 } in
                 {__scc {main:BasicTensors.delta_9F} True False} case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                 case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                  @ Index.Uind_9
                                                                                                                                                                  0#
                                                                                                                                                                  s of wild1 {
                                                                   GHC.Base.Nothing
                                                                   -> case Data.Maybe.fromJust1
                                                                      ret_ty (GHC.Real.Ratio
                                                                                GHC.Integer.Type.Integer)
                                                                      of {}
                                                                   GHC.Base.Just x
                                                                   -> case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                         @ Index.Uind_9
                                                                                                                                                                                                                                                         x of a# { DEFAULT ->
                                                                      case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                       0#
                                                                                                                                                                       ww12 of wild2 {
                                                                        GHC.Base.Nothing
                                                                        -> case Data.Maybe.fromJust1
                                                                           ret_ty (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                           of {}
                                                                        GHC.Base.Just x1
                                                                        -> case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                           case {__scc {main:BasicTensors.delta_9F} False True} GHC.Prim.==#
                                                                                                                                  a#
                                                                                                                                  a#1 of lwild {
                                                                             DEFAULT
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.$stensorContractWith_2
                                                                                  GHC.Real.$fEnumRatio1
                                                                             1#
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.$stensorContractWith_9
                                                                                  GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
e2f6ce96f2357e6ca459192c9add3a56
  epsilon :: Tensor.Tensor 0 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.epsilon} True True} BasicTensors.epsilon5
                                                                 BasicTensors.epsilon3
                                                                 BasicTensors.epsilon_F) -}
979195a7b51d44e9437d2b722ff5ab66
  epsilon1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
b5cd223eaf14eda782dcfe7b99e434f4
  epsilon2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
6970a8e424ed69e312f37da10df9b129
  epsilon3 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon4)) -}
1c955adb261d92a52e2567f1b14aefc9
  epsilon4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
4b5894c48339a20189a2edf0da968696
  epsilon5 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 0 4 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.epsilon} False True} Tensor.mkTensorfromF
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 4
                                                                  @ GHC.Real.Rational
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$stensorContractWith_1
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.epsilon6
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
6d2a53dca3e0d849af73bb39f18c6633
  epsilon6 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.epsilon7 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
3797a79bc53bdc24e26345d40431a31f
  epsilon7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
6a53090eaca99de781878e2c88f7b068
  epsilon_F :: Index.Index 0 0 0 0 0 0 0 4 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLLS(S)),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 0 4) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Index.UnsafemkInd ww10 ->
                 case BasicTensors.$wepsilon_F ww10 of ww11 { (#,#) ww12 ww13 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww12 ww13 } } }) -}
47019b0f65a60cc81c88751d3c37cc0a
  eta :: Tensor.Tensor 0 0 0 0 0 0 0 2 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.eta} True True} BasicTensors.eta3
                                                             BasicTensors.eta2
                                                             BasicTensors.eta_F) -}
c3ee5904e5fa9b6849e8ec2c65ea06b3
  eta1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
8264f70ee26138f24fc05324cc4e368f
  eta2 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon2)) -}
bab1252ef7983c5b47dd7a621a4860b6
  eta3 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 0 2 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 0 2 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.eta} False True} Tensor.mkTensorfromF
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 2
                                                              @ GHC.Real.Rational
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$stensorContractWith_5
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
0a066a9679d3f23867cc6fda61db6a14
  etaAbs ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 0 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$wetaAbs w of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
ad39064cb0686fdfe0fd3eb88b87b093
  etaAbs1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4)) -}
d0a273998e4a20033762a4350465c31b
  etaAbs2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.delta_2)) -}
afb64b55cfa8c3548ec1e1b2721b7228
  eta_F :: Index.Index 0 0 0 0 0 0 0 2 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLLS(S)),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 0 2) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Index.UnsafemkInd ww10 ->
                 {__scc {main:BasicTensors.eta_F} True False} case {__scc {main:BasicTensors.eta_F} False True} {__scc {main:BasicTensors.eta_F.x} True True} let {
                                                                                                                                                                a :: Index.Lind_3
                                                                                                                                                                = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                  ww10 of wild1 {
                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                             -> Data.Maybe.fromJust1
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                             GHC.Base.Just x
                                                                                                                                                                                                             -> x }
                                                                                                                                                              } in
                                                                                                                                                              {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                        Index.L0_3
                                                                                                                                                                                                        -> BasicTensors.delta_4
                                                                                                                                                                                                        Index.L1_3
                                                                                                                                                                                                        -> BasicTensors.delta_2
                                                                                                                                                                                                        Index.L2_3
                                                                                                                                                                                                        -> BasicTensors.epsilon2
                                                                                                                                                                                                        Index.L3_3
                                                                                                                                                                                                        -> BasicTensors.epsilon1 } of wild { GHC.Types.I# x ->
                                                              case {__scc {main:BasicTensors.eta_F} False True} {__scc {main:BasicTensors.eta_F.y} True True} let {
                                                                                                                                                                a :: Index.Lind_3
                                                                                                                                                                = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                  ww10 of wild1 {
                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                             -> Data.Maybe.fromJust1
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                                                             -> x1 }
                                                                                                                                                              } in
                                                                                                                                                              {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                        Index.L0_3
                                                                                                                                                                                                        -> BasicTensors.delta_4
                                                                                                                                                                                                        Index.L1_3
                                                                                                                                                                                                        -> BasicTensors.delta_2
                                                                                                                                                                                                        Index.L2_3
                                                                                                                                                                                                        -> BasicTensors.epsilon2
                                                                                                                                                                                                        Index.L3_3
                                                                                                                                                                                                        -> BasicTensors.epsilon1 } of wild1 { GHC.Types.I# y ->
                                                              case {__scc {main:BasicTensors.eta_F} False True} GHC.Prim.==#
                                                                                                                  x
                                                                                                                  y of lwild {
                                                                DEFAULT
                                                                -> case {__scc {main:BasicTensors.eta_F} False True} GHC.Prim.==#
                                                                                                                       x
                                                                                                                       y of lwild1 {
                                                                     DEFAULT
                                                                     -> GHC.Real.:%
                                                                          @ GHC.Integer.Type.Integer
                                                                          BasicTensors.$stensorContractWith_2
                                                                          GHC.Real.$fEnumRatio1
                                                                     1#
                                                                     -> GHC.Real.:%
                                                                          @ GHC.Integer.Type.Integer
                                                                          BasicTensors.eta1
                                                                          GHC.Real.$fEnumRatio1 }
                                                                1#
                                                                -> case x of wild2 {
                                                                     DEFAULT
                                                                     -> case {__scc {main:BasicTensors.eta_F} False True} GHC.Prim.==#
                                                                                                                            wild2
                                                                                                                            y of lwild1 {
                                                                          DEFAULT
                                                                          -> GHC.Real.:%
                                                                               @ GHC.Integer.Type.Integer
                                                                               BasicTensors.$stensorContractWith_2
                                                                               GHC.Real.$fEnumRatio1
                                                                          1#
                                                                          -> GHC.Real.:%
                                                                               @ GHC.Integer.Type.Integer
                                                                               BasicTensors.eta1
                                                                               GHC.Real.$fEnumRatio1 }
                                                                     0#
                                                                     -> GHC.Real.:%
                                                                          @ GHC.Integer.Type.Integer
                                                                          BasicTensors.$stensorContractWith_9
                                                                          GHC.Real.$fEnumRatio1 } } } } } }) -}
dafe102fa9e82f4531fea855a20ac749
  flatArea ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$wflatArea w of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
4635acf4c43ae0988e938ae9a09db7bf
  flatArea1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.epsilon2, BasicTensors.epsilon2)) -}
36f2afde67eddba5f59b7d2bdc80678f
  flatArea2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.epsilon1, BasicTensors.epsilon1)) -}
00fe57af877f05f840d815fd9479db08
  flatAreaMap ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.IntMap.Internal.IntMap GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Uinds_3 4) Index.Lind_20) ->
                 {__scc {main:BasicTensors.flatAreaMap} True True} let {
                                                                     flatAreaT :: Tensor.Tensor
                                                                                    0
                                                                                    1
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    GHC.Real.Rational
                                                                     = {__scc {main:BasicTensors.flatAreaMap.flatAreaT} True True} BasicTensors.flatArea
                                                                                                                                     map1
                                                                   } in
                                                                   Data.IntMap.Strict.fromList1
                                                                     @ GHC.Types.Int
                                                                     (Data.IntMap.Internal.Nil
                                                                        @ GHC.Types.Int)
                                                                     (BasicTensors.flatAreaMap_go1
                                                                        1#
                                                                        ({__scc {main:BasicTensors.flatAreaMap.valList} True True} GHC.Base.map
                                                                                                                                     @ (Index.Uinds_20
                                                                                                                                          0,
                                                                                                                                        Index.Linds_20
                                                                                                                                          1,
                                                                                                                                        Index.Uinds_19
                                                                                                                                          0,
                                                                                                                                        Index.Linds_19
                                                                                                                                          0,
                                                                                                                                        Index.Uinds_9
                                                                                                                                          0,
                                                                                                                                        Index.Linds_9
                                                                                                                                          0,
                                                                                                                                        Index.Uinds_3
                                                                                                                                          0,
                                                                                                                                        Index.Linds_3
                                                                                                                                          0)
                                                                                                                                     @ GHC.Types.Int
                                                                                                                                     (\ (x :: (Index.Uinds_20
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_20
                                                                                                                                                 1,
                                                                                                                                               Index.Uinds_19
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_19
                                                                                                                                                 0,
                                                                                                                                               Index.Uinds_9
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_9
                                                                                                                                                 0,
                                                                                                                                               Index.Uinds_3
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_3
                                                                                                                                                 0)) ->
                                                                                                                                      {__scc {main:Tensor.getVal} True False} case flatAreaT of wild { Tensor.Tensor map2 ->
                                                                                                                                                                              case x of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                                                                                                                                                                              case {__scc {main:Tensor.getVal} False True} BasicTensors.$wpoly_go7
                                                                                                                                                                                                                             @ (GHC.Real.Ratio
                                                                                                                                                                                                                                  GHC.Integer.Type.Integer)
                                                                                                                                                                                                                             ww1
                                                                                                                                                                                                                             ww2
                                                                                                                                                                                                                             ww3
                                                                                                                                                                                                                             ww4
                                                                                                                                                                                                                             ww5
                                                                                                                                                                                                                             ww6
                                                                                                                                                                                                                             ww7
                                                                                                                                                                                                                             ww8
                                                                                                                                                                                                                             map2 of wild1 {
                                                                                                                                                                                GHC.Types.False
                                                                                                                                                                                -> BasicTensors.flatAreaMap1
                                                                                                                                                                                     Tensor.cyclicSymTensor1
                                                                                                                                                                                     GHC.Real.$fEnumRatio1
                                                                                                                                                                                GHC.Types.True
                                                                                                                                                                                -> case ww1 of ww9 { Index.UnsafemkInd ww10 ->
                                                                                                                                                                                   case {__scc {main:Tensor.getVal} False True} BasicTensors.$wpoly_go2
                                                                                                                                                                                                                                  @ (GHC.Real.Ratio
                                                                                                                                                                                                                                       GHC.Integer.Type.Integer)
                                                                                                                                                                                                                                  ww10
                                                                                                                                                                                                                                  ww2
                                                                                                                                                                                                                                  ww3
                                                                                                                                                                                                                                  ww4
                                                                                                                                                                                                                                  ww5
                                                                                                                                                                                                                                  ww6
                                                                                                                                                                                                                                  ww7
                                                                                                                                                                                                                                  ww8
                                                                                                                                                                                                                                  map2 of wild2 { GHC.Real.:% x1 y ->
                                                                                                                                                                                   BasicTensors.flatAreaMap1
                                                                                                                                                                                     x1
                                                                                                                                                                                     y } } } } })
                                                                                                                                     BasicTensors.flatAreaMap_inds))) -}
89414ca84b4ad52c2cb89b48484cbcb2
  flatAreaMap1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><S,U>m,
     Unfolding: (\ (x1 :: GHC.Integer.Type.Integer)[OneShot]
                   (y :: GHC.Integer.Type.Integer)[OneShot] ->
                 case GHC.Integer.Type.eqInteger#
                        y
                        BasicTensors.$stensorContractWith_2 of wild1 {
                   DEFAULT
                   -> case GHC.Integer.Type.quotRemInteger
                             x1
                             y of ds { (#,#) ipv ipv1 ->
                      case GHC.Integer.Type.integerToInt ipv of wild { DEFAULT ->
                      GHC.Types.I# wild } }
                   1# -> case GHC.Real.divZeroError ret_ty GHC.Types.Int of {} }) -}
901453235ac883447a85f23b031ab6d0
  flatAreaMap_go ::
    GHC.Prim.Int#
    -> [(Index.Uinds_20 0, Index.Linds_20 1, Index.Uinds_19 0,
         Index.Linds_19 0, Index.Uinds_9 0, Index.Linds_9 0,
         Index.Uinds_3 0, Index.Linds_3 0)]
  {- Arity: 1, Strictness: <L,U>m2 -}
cb809338bde5ffd2fffffab78113da45
  flatAreaMap_go1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int] -> [(Data.IntSet.Internal.Key, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
36d3d057bea3bdfb46f628032639f469
  flatAreaMap_inds :: [Index.Index 0 1 0 0 0 0 0 0]
  {- Unfolding: ({__scc {main:BasicTensors.flatAreaMap} False True} {__scc {main:BasicTensors.flatAreaMap.inds} True True} BasicTensors.flatAreaMap_go
                                                                                                                             0#) -}
8d04d96791f16fc29bf0336afba645a9
  flatAreaST :: Tensor.Tensor 0 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.flatAreaST} True True} {__scc {main:BasicTensors.flatAreaST.etaProd1} True False} case BasicTensors.flatAreaST5
                                                                                                                                    `cast`
                                                                                                                                  (Tensor.Tensor
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (AddDef (<2>_N,
                                                                                                                                              <2>_N))
                                                                                                                                     <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                             case {__scc {main:BasicTensors.flatAreaST.etaProd1} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 4
                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                               BasicTensors.flatAreaST4
                                                                                                                                                                                               BasicTensors.flatAreaST3
                                                                                                                                                                                               ww1 of ww2 { Unit# ww3 ->
                                                                                                                             {__scc {main:BasicTensors.flatAreaST.etaProd2} True False} case {__scc {main:BasicTensors.flatAreaST.etaProd2} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 4
                                                                                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST4
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST2
                                                                                                                                                                                                                                                          ww1 of ww4 { Unit# ww5 ->
                                                                                                                                                                                        case {__scc {main:BasicTensors.flatAreaST.etaProd2} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 4
                                                                                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST4
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST1
                                                                                                                                                                                                                                                          ww5 of ww6 { Unit# ww7 ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.flatAreaST_go8
                                                                                                                                                                                                                                                                                                                                                                        ww7 of dt2 { DEFAULT ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                                                @ (Index.Index
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     4)
                                                                                                                                                                                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 4)
                                                                                                                                                                                                                                                                                                                                BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                                                                                                                                ww3
                                                                                                                                                                                                                                                                                                                                dt2 of dt3 { DEFAULT ->
                                                                                                                                                                                        case BasicTensors.epsilon of ww8 { Tensor.Tensor ww9 ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True True} BasicTensors.flatAreaST_go8
                                                                                                                                                                                                                                                                                                                                                                        ww9 of dt4 { DEFAULT ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                                                @ (Index.Index
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     0
                                                                                                                                                                                                                                                                                                                                     4)
                                                                                                                                                                                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                                                                                                                                   @ 4)
                                                                                                                                                                                                                                                                                                                                BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                                                                                                                                dt3
                                                                                                                                                                                                                                                                                                                                dt4 of dt5 { DEFAULT ->
                                                                                                                                                                                        Tensor.Tensor
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 4
                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                          dt5 } } } } } } } } }) -}
a7842ec4cccb7209ee9cb1214402cada
  flatAreaST1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.epsilon1)) -}
683f6a71c026c1a20ad59af772193a5e
  flatAreaST2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.epsilon2, BasicTensors.epsilon1)) -}
fee6ec278c59437ea8d5c63e2dc561ef
  flatAreaST3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.epsilon2)) -}
9a63c419bef3e9a3c662842bb67dc66d
  flatAreaST4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
7822fa9fe684fae25a23c788188501bd
  flatAreaST5 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 2)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.flatAreaST} False True} {__scc {main:BasicTensors.flatAreaST.etaProd} True True} case BasicTensors.eta of ww { Tensor.Tensor ww1 ->
                                                                                                                            case Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww1 of ww4 { Unit# ww5 ->
                                                                                                                            Tensor.Tensor
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (2
                                                                                                                                 GHC.TypeNats.+ 2)
                                                                                                                              @ GHC.Real.Rational
                                                                                                                              ww5 } }) -}
dd9b60332e6ec3921e0363b0fc9f08bd
  flatAreaST_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 0 0 0 4) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 0 0 0 4) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
5e0b3c011a2e0cbc7a89aaf0790a2923
  flatAreaST_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
1e922b70f8b8767391aca79280ddd758
  interArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$winterArea w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
bf58619147b50c9379f9ec318591616d
  interArea_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
ec35242246ef5d4ce281c9fae9a43d52
  interAreanoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$winterAreanoFactor w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
d69e48aa443201806fd8c050ab4c5afd
  interEqn1_1 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.int2} True True} case BasicTensors.delta_3 of ww { Tensor.Tensor ww1 ->
                                                                                                                           case Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww1
                                                                                                                                  ww1 of ww4 { Unit# ww5 ->
                                                                                                                           case Tensor.$wtensorTranspose
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 2
                                                                                                                                  @ 2
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  BasicTensors.flatAreaST4
                                                                                                                                  BasicTensors.interEqn1_5
                                                                                                                                  ww5
                                                                                                                                    `cast`
                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                     ((,,,,,,,)
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (AddDef (<1>_N,
                                                                                                                                                    <1>_N))
                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (AddDef (<1>_N,
                                                                                                                                                    <1>_N))
                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                     <GHC.Real.Rational>_R)_R of ww2 { Unit# ww3 ->
                                                                                                                           case BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                                                                                                                           case Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 2
                                                                                                                                  @ 2
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww3
                                                                                                                                  ww8 of ww9 { Unit# ww10 ->
                                                                                                                           Tensor.Tensor
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 1)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 1)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (2
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (2
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             ww10 } } } } }) -}
8fa706813a6351d2c1ec951e136fd4a0
  interEqn1_2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 2 2 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$winterEqn1_2 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
0b5118e62b945e23b4d430b2f8efe907
  interEqn1_2_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
232aed46d0b03c3f8506b4c8d8b26a53
  interEqn1_3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$winterEqn1_3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
c418c5da8c3d23ae87facb7b1c9a0fc1
  interEqn1_5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2)) -}
5e010f10f2c8cbcbb0a1391ecacb21b9
  interF_IArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Index.Index 1 0 0 0 0 0 0 4 -> GHC.Real.Rational
  {- Arity: 2,
     Strictness: <L,1*U><S(LLLLLLLS(S)),1*U(1*U(U),A,A,A,A,A,A,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Index.Index 1 0 0 0 0 0 0 4) ->
                 case w1 of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Index.UnsafemkInd ww10 ->
                 BasicTensors.$winterF_IArea w ww1 ww10 } }) -}
b92a027de060fd179b754e02a6171f55
  interF_IArea1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   BasicTensors.$stensorContractWith_2
                   GHC.Real.$fEnumRatio1) -}
121e4f3096cc1b7abc7810699fa16f63
  interI_1 ::
    Data.Sequence.Internal.Sorting.IndexedQueue Index.Lind_3
    -> (Data.Sequence.Internal.Sorting.IndexedQueue Index.Lind_3,
        Data.Sequence.Internal.Elem Index.Lind_3)
  {- Arity: 1, Strictness: <S(LSL),1*U(A,U,1*U)>m,
     Unfolding: (\ (eta4 :: Data.Sequence.Internal.Sorting.IndexedQueue
                              Index.Lind_3) ->
                 case eta4 of ww2 { Data.Sequence.Internal.Sorting.IQ ww3 ww4 ww5 ->
                 case Data.Sequence.Internal.Sorting.$wpopMinIQ
                        @ Index.Lind_3
                        Index.$fOrdLind_3_$ccompare
                        ww4
                        ww5 of ww6 { (#,#) ww7 ww8 ->
                 (ww7,
                  ww8
                    `cast`
                  (Sym (Data.Sequence.Internal.N:Elem[0] <Index.Lind_3>_R))) } }) -}
c8752b46a2fc2f04c0a3069d6d1c6ce8
  interI_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
c1f77ae09fc7268af2bcc60cec1b5e02
  interI_3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Tensor.Tensor 0 0 1 0 0 0 0 3 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Linds_3 3) Index.Uind_19) ->
                 let {
                   lvl52 :: Index.Uind_19
                   = {__scc {main:BasicTensors.interI_3} False True} {__scc {main:BasicTensors.interF_I3} False True} {__scc {main:BasicTensors.interF_I3.indI} False True} BasicTensors.$wpoly_go4
                                                                                                                                                                              @ Index.Uind_19
                                                                                                                                                                              (Data.Sequence.Internal.EmptyT
                                                                                                                                                                                 @ (Data.Sequence.Internal.Elem
                                                                                                                                                                                      Index.Lind_3))
                                                                                                                                                                                `cast`
                                                                                                                                                                              (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                        <Index.Lind_3>_R))
                                                                                                                                                                              map1
                 } in
                 {__scc {main:BasicTensors.interI_3} True True} BasicTensors.interI_7
                                                                  BasicTensors.interI_6
                                                                  (\ (ds :: (Index.Uinds_20 0,
                                                                             Index.Linds_20 0,
                                                                             Index.Uinds_19 1,
                                                                             Index.Linds_19 0,
                                                                             Index.Uinds_9 0,
                                                                             Index.Linds_9 0,
                                                                             Index.Uinds_3 0,
                                                                             Index.Linds_3 3)) ->
                                                                   {__scc {main:BasicTensors.interF_I3} True True} case ds of wild { (,,,,,,,) ds1 ds2 x ds3 ds4 ds5 ds6 y ->
                                                                                                                   {__scc {main:Index.==} True False} {__scc {main:BasicTensors.interF_I3.indI} True False} case y of ww { Index.UnsafemkInd ww1 ->
                                                                                                                                                                                                            let {
                                                                                                                                                                                                              $j :: Index.Uind_19
                                                                                                                                                                                                                    -> GHC.Real.Rational
                                                                                                                                                                                                                <join 1> {- Arity: 1,
                                                                                                                                                                                                                            Strictness: <S,U>m -}
                                                                                                                                                                                                              = \ (x1 :: Index.Uind_19)[OneShot] ->
                                                                                                                                                                                                                case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                          @ Index.Uind_19
                                                                                                                                                                                                                                                          x1 of a# { DEFAULT ->
                                                                                                                                                                                                                case {__scc {main:BasicTensors.interF_I3.xVal} True True} {__scc {main:Index.getValInd} True False} x of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                case {__scc {main:BasicTensors.interF_I3.xVal} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                       @ Index.Uind_19
                                                                                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                                                                                       s of wild2 {
                                                                                                                                                                                                                  GHC.Base.Nothing
                                                                                                                                                                                                                  -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                     ret_ty GHC.Real.Rational
                                                                                                                                                                                                                     of {}
                                                                                                                                                                                                                  GHC.Base.Just x2
                                                                                                                                                                                                                  -> case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                               @ Index.Uind_19
                                                                                                                                                                                                                                                               x2 of b# { DEFAULT ->
                                                                                                                                                                                                                     case {__scc {main:Index.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                               @ GHC.Types.Bool
                                                                                                                                                                                                                                                               (GHC.Prim.==#
                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                  b#) of wild3 {
                                                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                                                       -> BasicTensors.interF_IArea1
                                                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                                                       -> BasicTensors.interI_5 } } } } }
                                                                                                                                                                                                            } in
                                                                                                                                                                                                            case {__scc {main:BasicTensors.interF_I3.indI} False True} {__scc {main:Index.sortInd} True False} {__scc {main:Index.sortInd} False True} Data.Sequence.Internal.Sorting.$wbuildIQ
                                                                                                                                                                                                                                                                                                                                                         @ Index.Lind_3
                                                                                                                                                                                                                                                                                                                                                         @ Index.Lind_3
                                                                                                                                                                                                                                                                                                                                                         Index.$fOrdLind_3_$ccompare
                                                                                                                                                                                                                                                                                                                                                         (Data.Sequence.Internal.Sorting.sortBy1
                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_3)
                                                                                                                                                                                                                                                                                                                                                         0#
                                                                                                                                                                                                                                                                                                                                                         ww1
                                                                                                                                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                                                                                                                                         (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                                                                                                                                                                              <Index.Lind_3>_R) of wild1 {
                                                                                                                                                                                                              GHC.Base.Nothing
                                                                                                                                                                                                              -> $j
                                                                                                                                                                                                                   lvl52
                                                                                                                                                                                                              GHC.Base.Just x1
                                                                                                                                                                                                              -> case ww1
                                                                                                                                                                                                                        `cast`
                                                                                                                                                                                                                      (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                                           <Index.Lind_3>_R) of wild2 {
                                                                                                                                                                                                                   Data.Sequence.Internal.EmptyT
                                                                                                                                                                                                                   -> case {__scc {main:BasicTensors.interF_I3.indI} False True} {__scc {main:Index.sortInd} False True} (Data.Sequence.Internal.$w$sapplicativeTree1
                                                                                                                                                                                                                                                                                                                            @ (Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                 Index.Lind_3)
                                                                                                                                                                                                                                                                                                                            @ (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                 Index.Lind_3)
                                                                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                            BasicTensors.interI_1
                                                                                                                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                                                                                                                            (Sym (Utils.Containers.Internal.State.N:State[0]
                                                                                                                                                                                                                                                                                                                                      <Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                         Index.Lind_3>_R
                                                                                                                                                                                                                                                                                                                                      <Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                         Index.Lind_3>_R)))
                                                                                                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                                                                                                         (Utils.Containers.Internal.State.N:State[0]
                                                                                                                                                                                                                                                                                                                              <Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                 Index.Lind_3>_R
                                                                                                                                                                                                                                                                                                                              <Data.Sequence.Internal.FingerTree
                                                                                                                                                                                                                                                                                                                                 (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                    Index.Lind_3)>_R)
                                                                                                                                                                                                                                                                                                                           x1 of wild3 { (,) s' x2 ->
                                                                                                                                                                                                                      case {__scc {main:BasicTensors.interF_I3.indI} False True} BasicTensors.$wpoly_go4
                                                                                                                                                                                                                                                                                   @ Index.Uind_19
                                                                                                                                                                                                                                                                                   x2
                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                   (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                                                                                                             <Index.Lind_3>_R))
                                                                                                                                                                                                                                                                                   map1 of x3 { DEFAULT ->
                                                                                                                                                                                                                      $j
                                                                                                                                                                                                                        x3 } }
                                                                                                                                                                                                                   Data.Sequence.Internal.Single x2
                                                                                                                                                                                                                   -> case {__scc {main:BasicTensors.interF_I3.indI} False True} {__scc {main:Index.sortInd} False True} (Data.Sequence.Internal.$w$sapplicativeTree1
                                                                                                                                                                                                                                                                                                                            @ (Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                 Index.Lind_3)
                                                                                                                                                                                                                                                                                                                            @ (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                 Index.Lind_3)
                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                            BasicTensors.interI_1
                                                                                                                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                                                                                                                            (Sym (Utils.Containers.Internal.State.N:State[0]
                                                                                                                                                                                                                                                                                                                                      <Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                         Index.Lind_3>_R
                                                                                                                                                                                                                                                                                                                                      <Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                         Index.Lind_3>_R)))
                                                                                                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                                                                                                         (Utils.Containers.Internal.State.N:State[0]
                                                                                                                                                                                                                                                                                                                              <Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                 Index.Lind_3>_R
                                                                                                                                                                                                                                                                                                                              <Data.Sequence.Internal.FingerTree
                                                                                                                                                                                                                                                                                                                                 (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                    Index.Lind_3)>_R)
                                                                                                                                                                                                                                                                                                                           x1 of wild3 { (,) s' x3 ->
                                                                                                                                                                                                                      case {__scc {main:BasicTensors.interF_I3.indI} False True} BasicTensors.$wpoly_go4
                                                                                                                                                                                                                                                                                   @ Index.Uind_19
                                                                                                                                                                                                                                                                                   x3
                                                                                                                                                                                                                                                                                     `cast`
                                                                                                                                                                                                                                                                                   (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                                                                                                             <Index.Lind_3>_R))
                                                                                                                                                                                                                                                                                   map1 of x4 { DEFAULT ->
                                                                                                                                                                                                                      $j
                                                                                                                                                                                                                        x4 } }
                                                                                                                                                                                                                   Data.Sequence.Internal.Deep dt2 ds7 ds8 ds9
                                                                                                                                                                                                                   -> case {__scc {main:BasicTensors.interF_I3.indI} False True} {__scc {main:Index.sortInd} False True} GHC.Prim.>=#
                                                                                                                                                                                                                                                                                                                           dt2
                                                                                                                                                                                                                                                                                                                           0# of lwild {
                                                                                                                                                                                                                        DEFAULT
                                                                                                                                                                                                                        -> case Data.Sequence.Internal.$fIsListSeq3
                                                                                                                                                                                                                           ret_ty GHC.Real.Rational
                                                                                                                                                                                                                           of {}
                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                        -> case {__scc {main:BasicTensors.interF_I3.indI} False True} {__scc {main:Index.sortInd} False True} (Data.Sequence.Internal.$w$sapplicativeTree1
                                                                                                                                                                                                                                                                                                                                 @ (Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                      Index.Lind_3)
                                                                                                                                                                                                                                                                                                                                 @ (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                      Index.Lind_3)
                                                                                                                                                                                                                                                                                                                                 dt2
                                                                                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                                                                                 BasicTensors.interI_1
                                                                                                                                                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                                                                                                                                                 (Sym (Utils.Containers.Internal.State.N:State[0]
                                                                                                                                                                                                                                                                                                                                           <Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                              Index.Lind_3>_R
                                                                                                                                                                                                                                                                                                                                           <Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                              Index.Lind_3>_R)))
                                                                                                                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                                                                                                                              (Utils.Containers.Internal.State.N:State[0]
                                                                                                                                                                                                                                                                                                                                   <Data.Sequence.Internal.Sorting.IndexedQueue
                                                                                                                                                                                                                                                                                                                                      Index.Lind_3>_R
                                                                                                                                                                                                                                                                                                                                   <Data.Sequence.Internal.FingerTree
                                                                                                                                                                                                                                                                                                                                      (Data.Sequence.Internal.Elem
                                                                                                                                                                                                                                                                                                                                         Index.Lind_3)>_R)
                                                                                                                                                                                                                                                                                                                                x1 of wild3 { (,) s' x2 ->
                                                                                                                                                                                                                           case {__scc {main:BasicTensors.interF_I3.indI} False True} BasicTensors.$wpoly_go4
                                                                                                                                                                                                                                                                                        @ Index.Uind_19
                                                                                                                                                                                                                                                                                        x2
                                                                                                                                                                                                                                                                                          `cast`
                                                                                                                                                                                                                                                                                        (Sym (Data.Sequence.Internal.N:Seq[0]
                                                                                                                                                                                                                                                                                                  <Index.Lind_3>_R))
                                                                                                                                                                                                                                                                                        map1 of x3 { DEFAULT ->
                                                                                                                                                                                                                           $j
                                                                                                                                                                                                                             x3 } } } } } } })) -}
cdef70c7b6bb5f7c46312770449330a5
  interI_5 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   BasicTensors.$stensorContractWith_9
                   GHC.Real.$fEnumRatio1) -}
fc8a481a9d5a65c3e328bba9592307c7
  interI_6 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon1)) -}
10f621b28dcd968fba3776b8855f332e
  interI_7 ::
    Tensor.Rank
    -> (Index.Index 0 0 1 0 0 0 0 3 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 1 0 0 0 0 3 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interI_3} False True} Tensor.mkTensorfromF
                                                                   @ 0
                                                                   @ 0
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 3
                                                                   @ GHC.Real.Rational
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_8
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_11
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                   GHC.Real.$fOrdRatio_$s$fEqRatio) -}
f3734ba43d063782b93cd2f91232057c
  interI_Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Linds_3 4) Index.Uind_20) ->
                 {__scc {main:BasicTensors.interI_Area} True True} BasicTensors.interI_Area2
                                                                     BasicTensors.interI_Area1
                                                                     (BasicTensors.interF_IArea
                                                                        map1)) -}
b5724ccf9bf4c84212ea55daee1e1d80
  interI_Area1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon4)) -}
70003f6ccc89946d68910a264619a651
  interI_Area2 ::
    Tensor.Rank
    -> (Index.Index 1 0 0 0 0 0 0 4 -> GHC.Real.Rational)
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interI_Area} False True} Tensor.mkTensorfromF
                                                                      @ 1
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 4
                                                                      @ GHC.Real.Rational
                                                                      BasicTensors.$stensorContractWith_8
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      BasicTensors.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.epsilon6
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                                                                      GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                      GHC.Real.$fOrdRatio_$s$fEqRatio) -}
362b1aa162de63a16d8e4ffc4dc03f56
  interJ_2 ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 2 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
ad2f22fd4323faab5df5cd909cee0ac5
  interJ_2noFactor ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 2 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
68416ac9fef39c12cde6cf8032d8cd28
  interJ_3 ::
    Data.Map.Internal.Map (Index.Uinds_3 3) Index.Lind_19
    -> Tensor.Tensor 0 0 0 1 0 0 3 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
987c62b3368a5d0eb9619727446b86ff
  interJ_Area ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 4 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
9fd313c4de7553efb064709404632be2
  interJ_AreanoFactor ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 4 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Uinds_3 4) Index.Lind_20) ->
                 {__scc {main:BasicTensors.interJ_AreanoFactor} True True} BasicTensors.interJ_AreanoFactor2
                                                                             BasicTensors.interJ_AreanoFactor1
                                                                             (\ (ds :: (Index.Uinds_20
                                                                                          0,
                                                                                        Index.Linds_20
                                                                                          1,
                                                                                        Index.Uinds_19
                                                                                          0,
                                                                                        Index.Linds_19
                                                                                          0,
                                                                                        Index.Uinds_9
                                                                                          0,
                                                                                        Index.Linds_9
                                                                                          0,
                                                                                        Index.Uinds_3
                                                                                          4,
                                                                                        Index.Linds_3
                                                                                          0)) ->
                                                                              {__scc {main:BasicTensors.interF_JAreanoFactor} True True} case ds of wild { (,,,,,,,) ds1 x ds2 ds3 ds4 ds5 y ds6 ->
                                                                                                                                         case y of ww { Index.UnsafemkInd ww1 ->
                                                                                                                                         case BasicTensors.$w$sisZeroArea1
                                                                                                                                                ww1 of wild1 {
                                                                                                                                           GHC.Types.False
                                                                                                                                           -> case {__scc {main:BasicTensors.interF_JAreanoFactor.sortY} True True} BasicTensors.$w$scanonicalizeArea
                                                                                                                                                                                                                      ww of ww2 { (#,#) ww3 ww4 ->
                                                                                                                                              {__scc {main:Index.==} True False} {__scc {main:BasicTensors.interF_JAreanoFactor.indI} True False} case ww3 of ww5 { Index.UnsafemkInd ww6 ->
                                                                                                                                                                                                                                                  case {__scc {main:BasicTensors.interF_JAreanoFactor.indI} False True} BasicTensors.$wpoly_go1
                                                                                                                                                                                                                                                                                                                          @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                          ww6
                                                                                                                                                                                                                                                                                                                          map1 of x1 { DEFAULT ->
                                                                                                                                                                                                                                                  case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                                            x1 of a# { DEFAULT ->
                                                                                                                                                                                                                                                  case {__scc {main:BasicTensors.interF_JAreanoFactor.xVal} True True} {__scc {main:Index.getValInd} True False} x of wild2 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                  case {__scc {main:BasicTensors.interF_JAreanoFactor.xVal} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                                                                                                                    s of wild3 {
                                                                                                                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                       ret_ty GHC.Real.Rational
                                                                                                                                                                                                                                                       of {}
                                                                                                                                                                                                                                                    GHC.Base.Just x2
                                                                                                                                                                                                                                                    -> case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                 @ Index.Lind_20
                                                                                                                                                                                                                                                                                                 x2 of b# { DEFAULT ->
                                                                                                                                                                                                                                                       case {__scc {main:Index.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                                                                 @ GHC.Types.Bool
                                                                                                                                                                                                                                                                                                 (GHC.Prim.==#
                                                                                                                                                                                                                                                                                                    a#
                                                                                                                                                                                                                                                                                                    b#) of wild4 {
                                                                                                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                                                                                                         -> BasicTensors.interF_IArea1
                                                                                                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                                                                                                         -> ww4 } } } } } } } }
                                                                                                                                           GHC.Types.True
                                                                                                                                           -> BasicTensors.interF_IArea1 } } })) -}
ab867abfacb653d04b9b743c148d3c51
  interJ_AreanoFactor1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.epsilon4,
                  BasicTensors.delta_4)) -}
f3eefd4b1e13e7b6e1a745b12c8bc38c
  interJ_AreanoFactor2 ::
    Tensor.Rank
    -> (Index.Index 0 1 0 0 0 0 4 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 1 0 0 0 0 4 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interJ_AreanoFactor} False True} Tensor.mkTensorfromF
                                                                              @ 0
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 4
                                                                              @ 0
                                                                              @ GHC.Real.Rational
                                                                              BasicTensors.$stensorContractWith_1
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$stensorContractWith_8
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                              BasicTensors.$stensorContractWith_1
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$stensorContractWith_1
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$stensorContractWith_1
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$stensorContractWith_1
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.epsilon6
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                                                                              BasicTensors.$stensorContractWith_1
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
b140de30bf770a3116b03bc7af40f1a6
  interMetric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$winterMetric w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
20e779f8169e894fad19c9266c0946ec
  interMetric_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
5f819ac47c3635b9bd4f79798740c0f7
  interMetricnoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$winterMetricnoFactor w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
29cbd6497485ab1e1bb9ae455a681bd3
  invEta :: Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.invEta} True True} BasicTensors.invEta2
                                                                BasicTensors.invEta1
                                                                BasicTensors.invEta_F) -}
0357f9865e3de660f49a15e42a5d8324
  invEta1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.epsilon2,
                  BasicTensors.delta_4)) -}
f351b28dc4b8b716861713e740ac3a5c
  invEta2 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 2 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.invEta} False True} Tensor.mkTensorfromF
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 2
                                                                 @ 0
                                                                 @ GHC.Real.Rational
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$stensorContractWith_5
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                 BasicTensors.$stensorContractWith_1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                 GHC.Real.$fOrdRatio_$s$fEqRatio) -}
425618e36b01c94361c70812b1a872a4
  invEtaAbs ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case BasicTensors.$winvEtaAbs w of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
1531e75b1067ced46fab00c21d111777
  invEta_F :: Index.Index 0 0 0 0 0 0 2 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLS(S)L),1*U(A,A,A,A,A,A,1*U(U),A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 2 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww7 of ww9 { Index.UnsafemkInd ww10 ->
                 {__scc {main:BasicTensors.invEta_F} True False} case {__scc {main:BasicTensors.invEta_F} False True} {__scc {main:BasicTensors.invEta_F.x} True True} let {
                                                                                                                                                                         a :: Index.Uind_3
                                                                                                                                                                         = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                           ww10 of wild1 {
                                                                                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                                                                                      -> Data.Maybe.fromJust1
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                      GHC.Base.Just x
                                                                                                                                                                                                                      -> x }
                                                                                                                                                                       } in
                                                                                                                                                                       {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                                 Index.U0_3
                                                                                                                                                                                                                 -> BasicTensors.delta_4
                                                                                                                                                                                                                 Index.U1_3
                                                                                                                                                                                                                 -> BasicTensors.delta_2
                                                                                                                                                                                                                 Index.U2_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon2
                                                                                                                                                                                                                 Index.U3_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon1 } of wild { GHC.Types.I# x ->
                                                                 case {__scc {main:BasicTensors.invEta_F} False True} {__scc {main:BasicTensors.invEta_F.y} True True} let {
                                                                                                                                                                         a :: Index.Uind_3
                                                                                                                                                                         = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                           1#
                                                                                                                                                                                                                           ww10 of wild1 {
                                                                                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                                                                                      -> Data.Maybe.fromJust1
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                      GHC.Base.Just x1
                                                                                                                                                                                                                      -> x1 }
                                                                                                                                                                       } in
                                                                                                                                                                       {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                                 Index.U0_3
                                                                                                                                                                                                                 -> BasicTensors.delta_4
                                                                                                                                                                                                                 Index.U1_3
                                                                                                                                                                                                                 -> BasicTensors.delta_2
                                                                                                                                                                                                                 Index.U2_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon2
                                                                                                                                                                                                                 Index.U3_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon1 } of wild1 { GHC.Types.I# y ->
                                                                 case {__scc {main:BasicTensors.invEta_F} False True} GHC.Prim.==#
                                                                                                                        x
                                                                                                                        y of lwild {
                                                                   DEFAULT
                                                                   -> case {__scc {main:BasicTensors.invEta_F} False True} GHC.Prim.==#
                                                                                                                             x
                                                                                                                             y of lwild1 {
                                                                        DEFAULT
                                                                        -> GHC.Real.:%
                                                                             @ GHC.Integer.Type.Integer
                                                                             BasicTensors.$stensorContractWith_2
                                                                             GHC.Real.$fEnumRatio1
                                                                        1#
                                                                        -> GHC.Real.:%
                                                                             @ GHC.Integer.Type.Integer
                                                                             BasicTensors.eta1
                                                                             GHC.Real.$fEnumRatio1 }
                                                                   1#
                                                                   -> case x of wild2 {
                                                                        DEFAULT
                                                                        -> case {__scc {main:BasicTensors.invEta_F} False True} GHC.Prim.==#
                                                                                                                                  wild2
                                                                                                                                  y of lwild1 {
                                                                             DEFAULT
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.$stensorContractWith_2
                                                                                  GHC.Real.$fEnumRatio1
                                                                             1#
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.eta1
                                                                                  GHC.Real.$fEnumRatio1 }
                                                                        0#
                                                                        -> GHC.Real.:%
                                                                             @ GHC.Integer.Type.Integer
                                                                             BasicTensors.$stensorContractWith_9
                                                                             GHC.Real.$fEnumRatio1 } } } } } }) -}
fcd18fe3cac151b8a247c99cd4d59b7c
  isZeroArea ::
    (GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Enum.Enum a) =>
    Index.Ind 4 a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,A><S(S(C(C(S))L)LLLLLLL),1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,A><L,U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: GHC.Enum.Enum a)
                   (w3 :: Index.Ind 4 a) ->
                 BasicTensors.$wisZeroArea @ a w1 w3) -}
8b471a502ffac0852153477c861d9c1f
  ivar1 ::
    Tensor.Tensor 0 1 0 0 0 0 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar1} True True} Tensor.mkTensorfromFZeros
                                                               @ 0
                                                               @ 1
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ (Ivar.Ivar GHC.Real.Rational)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_8
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.ivar4
                                                               BasicTensors.ivar1F) -}
bb8c5da60e5b926459a506eca72bb8d1
  ivar1F ::
    Index.Index 0 1 0 0 0 0 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 {__scc {main:BasicTensors.ivar1F} True False} {__scc {main:BasicTensors.ivar1F} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                          (GHC.Real.:%
                                                                                                                                                             @ GHC.Integer.Type.Integer
                                                                                                                                                             Ivar.addIvar1
                                                                                                                                                             GHC.Real.$fEnumRatio1)
                                                                                                                                                          ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww2 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                              case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                                                                                               s of wild1 {
                                                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                   ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                             GHC.Real.Rational)
                                                                                                                                                                                                                                                   of {}
                                                                                                                                                                                                                                                GHC.Base.Just x
                                                                                                                                                                                                                                                -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                   @ Index.Lind_20
                                                                                                                                                                                                                                                                                                   x of a# { DEFAULT ->
                                                                                                                                                                                                                                                   Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#)
                                                                                                                                                                                                                                                     (GHC.Real.:%
                                                                                                                                                                                                                                                        @ GHC.Integer.Type.Integer
                                                                                                                                                                                                                                                        Ivar.constrAllIvars1
                                                                                                                                                                                                                                                        GHC.Real.$fEnumRatio1) } } }) }) -}
fa7cb4929f9f94c7208068045d17890b
  ivar1FM ::
    Index.Index 0 0 0 0 0 1 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 {__scc {main:BasicTensors.ivar1FM} True False} {__scc {main:BasicTensors.ivar1FM} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            (GHC.Real.:%
                                                                                                                                                               @ GHC.Integer.Type.Integer
                                                                                                                                                               Ivar.addIvar1
                                                                                                                                                               GHC.Real.$fEnumRatio1)
                                                                                                                                                            ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww6 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                 @ Index.Lind_9
                                                                                                                                                                                                                                                                                                 0#
                                                                                                                                                                                                                                                                                                 s of wild1 {
                                                                                                                                                                                                                                                  GHC.Base.Nothing
                                                                                                                                                                                                                                                  -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                     ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                               GHC.Real.Rational)
                                                                                                                                                                                                                                                     of {}
                                                                                                                                                                                                                                                  GHC.Base.Just x
                                                                                                                                                                                                                                                  -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                     @ Index.Lind_9
                                                                                                                                                                                                                                                                                                     x of a# { DEFAULT ->
                                                                                                                                                                                                                                                     Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                          a#)
                                                                                                                                                                                                                                                       (GHC.Real.:%
                                                                                                                                                                                                                                                          @ GHC.Integer.Type.Integer
                                                                                                                                                                                                                                                          Ivar.constrAllIvars1
                                                                                                                                                                                                                                                          GHC.Real.$fEnumRatio1) } } }) }) -}
0cfe69f4a2e2d15bf0d0e736a02b0122
  ivar1M ::
    Tensor.Tensor 0 0 0 0 0 1 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar1M} True True} Tensor.mkTensorfromFZeros
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 1
                                                                @ 0
                                                                @ 0
                                                                @ (Ivar.Ivar GHC.Real.Rational)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_8
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.ivar1M1
                                                                BasicTensors.ivar1FM) -}
0a7483f6f98e8f1d8b6d70604c240d63
  ivar1M1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
aea9be9d36fe75d738a156f5e656bb7a
  ivar2 ::
    Tensor.Tensor 0 1 0 0 0 0 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar2} True True} Tensor.mkTensorfromFZeros
                                                               @ 0
                                                               @ 1
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 1
                                                               @ (Ivar.Ivar GHC.Real.Rational)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_8
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_8
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                               BasicTensors.ivar7
                                                               BasicTensors.ivar2F) -}
47f11f3c9caaf66efd0704925f0cb38c
  ivar2F ::
    Index.Index 0 1 0 0 0 0 0 1 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 0 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar2F ww2 ww8 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
5919be844ab9ce7943747b54f982c0c6
  ivar2FM ::
    Index.Index 0 0 0 0 0 1 0 1 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U(U),A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 1 0 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar2FM ww6 ww8 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
68fea389c110039b5ffc04f25b69e2ce
  ivar2M ::
    Tensor.Tensor 0 0 0 0 0 1 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar2M} True True} Tensor.mkTensorfromFZeros
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 1
                                                                @ 0
                                                                @ 1
                                                                @ (Ivar.Ivar GHC.Real.Rational)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_8
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_8
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                BasicTensors.ivar2M1
                                                                BasicTensors.ivar2FM) -}
84acee205d4254b22bbe81037cdcaccf
  ivar2M1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_2)) -}
8bcbbf6641dbd4732fdfc4c1fe79b2d4
  ivar3 ::
    Tensor.Tensor 0 1 0 0 0 1 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar3} True True} Tensor.mkTensorfromFZeros
                                                               @ 0
                                                               @ 1
                                                               @ 0
                                                               @ 0
                                                               @ 0
                                                               @ 1
                                                               @ 0
                                                               @ 0
                                                               @ (Ivar.Ivar GHC.Real.Rational)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_8
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_8
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.$stensorContractWith_1
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               BasicTensors.ivar8
                                                               BasicTensors.ivar3F) -}
736dd880c128edb92f44380bc810f382
  ivar3F ::
    Index.Index 0 1 0 0 0 1 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar3F ww2 ww6 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
3ab67483e04465a1f9526ae39e06a742
  ivar3FM ::
    Index.Index 0 0 0 0 0 2 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 2 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar3FM ww6 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
848ae5997711deddd1e8874e3c02e89e
  ivar3M ::
    Tensor.Tensor 0 0 0 0 0 2 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar3M} True True} Tensor.mkTensorfromFZeros
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 0
                                                                @ 2
                                                                @ 0
                                                                @ 0
                                                                @ (Ivar.Ivar GHC.Real.Rational)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_5
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                BasicTensors.ivar3M1
                                                                BasicTensors.ivar3FM) -}
9ee8b49044035b2e9efe3dbbbc4a1c02
  ivar3M1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
2c10e4c22843ab67f558df5ddcd0aee1
  ivar4 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
34cf8766cc1e0cd5cf1e8b113f4a3565
  ivar5 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Ivar.constrAllIvars1
                   GHC.Real.$fEnumRatio1) -}
52c73b98c2cbee9c1c3d01fa91624282
  ivar6 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Ivar.addIvar1
                   GHC.Real.$fEnumRatio1) -}
be3309da1ddd00b83e4fdf473a1a0ab1
  ivar7 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2)) -}
8f0f153173868bb1e37e45f8a51abd4b
  ivar8 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
22ba522dbeba8c1baac905e21ee90713
  symI_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
96fa801d4b2653688453df4b808ba717
  symI_3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Tensor.Tensor 0 0 1 0 0 0 0 3 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
436685bcd53c745c1cfbb33a7c9398ea
  symI_Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
56aa8ecfa987217033efaa00715c566c
  triangleMap2 ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Data.Sequence.Internal.Seq a)
                   = Data.Sequence.Internal.$fOrdSeq @ a $dOrd
                 } in
                 {__scc {main:BasicTensors.triangleMap2} True True} Data.Map.Strict.Internal.fromList
                                                                      @ (Data.Sequence.Internal.Seq
                                                                           a)
                                                                      @ b
                                                                      $dOrd1
                                                                      (GHC.List.zip
                                                                         @ (Data.Sequence.Internal.Seq
                                                                              a)
                                                                         @ b
                                                                         (BasicTensors.$wsymIndList
                                                                            @ a
                                                                            $dEnum
                                                                            2#
                                                                            BasicTensors.epsilon1)
                                                                         (GHC.Enum.enumFrom
                                                                            @ b
                                                                            $dEnum1
                                                                            (GHC.Enum.toEnum
                                                                               @ b
                                                                               $dEnum1
                                                                               BasicTensors.delta_4)))) -}
e91bf82386c7e77635cce33de25b8746
  triangleMap3 ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Data.Sequence.Internal.Seq a)
                   = Data.Sequence.Internal.$fOrdSeq @ a $dOrd
                 } in
                 {__scc {main:BasicTensors.triangleMap3} True True} Data.Map.Strict.Internal.fromList
                                                                      @ (Data.Sequence.Internal.Seq
                                                                           a)
                                                                      @ b
                                                                      $dOrd1
                                                                      (GHC.List.zip
                                                                         @ (Data.Sequence.Internal.Seq
                                                                              a)
                                                                         @ b
                                                                         (BasicTensors.$wsymIndList
                                                                            @ a
                                                                            $dEnum
                                                                            3#
                                                                            BasicTensors.epsilon1)
                                                                         (GHC.Enum.enumFrom
                                                                            @ b
                                                                            $dEnum1
                                                                            (GHC.Enum.toEnum
                                                                               @ b
                                                                               $dEnum1
                                                                               BasicTensors.delta_4)))) -}
fa08e0ee195d1e7a634865e41bebf3c1
  triangleMapArea ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,C(C1(U)),A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Data.Sequence.Internal.Seq a)
                   = Data.Sequence.Internal.$fOrdSeq @ a $dOrd
                 } in
                 {__scc {main:BasicTensors.triangleMapArea} True True} Data.Map.Strict.Internal.fromList
                                                                         @ (Data.Sequence.Internal.Seq
                                                                              a)
                                                                         @ b
                                                                         $dOrd1
                                                                         (GHC.List.zip
                                                                            @ (Data.Sequence.Internal.Seq
                                                                                 a)
                                                                            @ b
                                                                            (BasicTensors.$wareaDofList
                                                                               @ a
                                                                               $dEnum
                                                                               $dOrd)
                                                                            (GHC.Enum.enumFrom
                                                                               @ b
                                                                               $dEnum1
                                                                               (GHC.Enum.toEnum
                                                                                  @ b
                                                                                  $dEnum1
                                                                                  BasicTensors.delta_4)))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

