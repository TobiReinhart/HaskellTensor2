
==================== FINAL INTERFACE ====================
2019-01-22 14:46:11.090706 UTC

interface main:BasicTensors [hpc] 8043
  interface hash: 6f0dcfb9de012201fd695119da3e2032
  ABI hash: eb5b51414d2c3c3fc45fe3497d3f932c
  export-list hash: 7bd1d97902a82e67c502cc891749fa89
  orphan hash: 3f1bf1e9032c686cc6dd2562b9a51c05
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  BasicTensors.aSymI_2
  BasicTensors.areaDofList
  BasicTensors.canonicalizeArea
  BasicTensors.delta_19
  BasicTensors.delta_20
  BasicTensors.delta_3
  BasicTensors.delta_9
  BasicTensors.epsilon
  BasicTensors.eta
  BasicTensors.etaAbs
  BasicTensors.flatArea
  BasicTensors.flatAreaMap
  BasicTensors.flatAreaST
  BasicTensors.interArea
  BasicTensors.interAreanoFactor
  BasicTensors.interEqn1_2
  BasicTensors.interEqn1_3
  BasicTensors.interF_IArea
  BasicTensors.interI_2
  BasicTensors.interI_3
  BasicTensors.interI_Area
  BasicTensors.interJ_2
  BasicTensors.interJ_2noFactor
  BasicTensors.interJ_3
  BasicTensors.interJ_Area
  BasicTensors.interJ_AreanoFactor
  BasicTensors.interMetric
  BasicTensors.interMetricnoFactor
  BasicTensors.invEta
  BasicTensors.invEtaAbs
  BasicTensors.isZeroArea
  BasicTensors.ivar1
  BasicTensors.ivar1FM
  BasicTensors.ivar1M
  BasicTensors.ivar2
  BasicTensors.ivar2FM
  BasicTensors.ivar2M
  BasicTensors.ivar3
  BasicTensors.ivar3FM
  BasicTensors.ivar3M
  BasicTensors.symI_2
  BasicTensors.symI_3
  BasicTensors.symI_Area
  BasicTensors.triangleMap2
  BasicTensors.triangleMap3
  BasicTensors.triangleMapArea
module dependencies: Index Ivar Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Proxy a80a60a2fdceabfeb4d110d23b808844
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Index 08e2a14604a823b6ff2a9dd0412736b8
  exports: 02acfc58131cc32506762c89c9bc64b7
  Ind 280c9942381323a3703c383c16ffb126
  Index fef7dd75ac4341fe9ac6422ae53896cb
  Lind_19 f45cf4b55189c0e3ff56e6912aedd1e4
  Lind_20 bc4b9092451ad6bbfee40a37af5a3be5
  Lind_9 e56724c95d48d5af2b671320de0a16e6
  Linds_3 c88a9b9457367a41a7b841cbc4cd99c9
  Uind_19 c117d82f496c8f2d4ae0cb284a14e6f0
  Uind_20 bfe4746a22221d53bc0caf3ab68bb75f
  Uind_9 60e6e8f96660ac8be150b9dcf7a9bf57
  Uinds_3 78c689db53b46c5dad666c484780219c
  getValInd 9fdbb30c9f0128d475e5de016ad1bc53
  indSign2 ab856a4dde160a0c22299a4d80189378
  indexList 25d6ed4b3178586c1cfc81e2a892f69c
  mkInd 66013a58cfa4055b010994942b18ef10
  sortInd e81a8279f29ada5c2af00422d74e6284
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar d9681c195fa242e7d5d49d12895d614f
  number2Ivar 48bcb8c465b2f3335be5f6e5ae3a3885
import  -/  Tensor 506762f61e5eb09856fcdcf668e157fa
  exports: 1e07b17b3ec8892664f89099181669ba
  Tensor c676ef3822419832be89c54f66299684
  getVal 62d20755a647be12dec218a39471e648
  mkTensorfromF 304b84806af96ab89e8ebf245ede12ab
  mkTensorfromFZeros ff042ca333e2a59fa53a2ac49bc0b4c0
  tensorAdd c17d8b47f4737f18a61e8d192d389e87
  tensorContractWith_3 c385296e26e3bb0dcfa2f644b248f67b
  tensorProductWith 5c503f4acd0761ea31e37bf6d35223c2
  tensorSMult ba0fb195e1462201d1ee36b98733b19a
  tensorSub fbca68c0210815bd3e38973881a34ada
  tensorTranspose 44e01331e8dca2b21922eeae8693de1e
f93e119c2503a50f12aeca069d05dd37
  $sfind9 ::
    Index.Index 0 1 0 0 0 0 0 0
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a -> a
  {- Arity: 2,
     Strictness: <S(S(S)S(S)S(S)S(S)S(S)S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Index.Index 0 1 0 0 0 0 0 0)
                   (w1 :: Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww1 of ww9 { Index.UnsafemkInd ww10 ->
                 BasicTensors.$wpoly_go4
                   @ a
                   ww10
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   w1 } }) -}
eed867c2fe0de86465cdea9e850490fd
  $sfromList ::
    [(Index.Index 0 1 0 0 0 0 0 0, a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a
  {- Arity: 1, Strictness: <S,1*U> -}
0da57036fe4853b8d09f3f59b2c82721
  $sfromList1 ::
    [(Index.Index 0 1 0 0 0 0 0 1, a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 1) a
  {- Arity: 1, Strictness: <S,1*U> -}
f935dcc363311a3c57b8f8aece97400b
  $sfromList2 ::
    [(Index.Index 0 1 0 0 0 1 0 0, a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 1 0 0) a
  {- Arity: 1, Strictness: <S,1*U> -}
513e89d1eba8fcf65c3c063cdb733848
  $sfromList3 ::
    [(Index.Index 0 0 0 0 0 1 0 0, a)]
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 1 0 0) a
  {- Arity: 1, Strictness: <S,1*U> -}
d51780058561881e688299c9ce5435d6
  $sfromList4 ::
    [(Index.Index 0 0 0 0 0 1 0 1, a)]
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 1 0 1) a
  {- Arity: 1, Strictness: <S,1*U> -}
c113a08f9131e200315eac3ed7a0ab48
  $sfromList5 ::
    [(Index.Index 0 0 0 0 0 2 0 0, a)]
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 2 0 0) a
  {- Arity: 1, Strictness: <S,1*U> -}
9d6142c9ef38ff4b405a1c74a7e89c46
  $smember1 ::
    Index.Index 0 1 0 0 0 0 0 0
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Index.Index 0 1 0 0 0 0 0 0)
                   (w1 :: Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 BasicTensors.$wpoly_go7
                   @ a
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   w1 }) -}
4a3fe75429d92b3463866252b7ec8db4
  $smkTensorfromFZeros1 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$smkTensorfromFZeros2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
5c1fc09dd7c868fe7e75af3cd531929b
  $smkTensorfromFZeros2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
f2f6caec1ad96c81916071fa252a926d
  $smkTensorfromFZeros3 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$smkTensorfromFZeros4 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
3bd64f2e3c32562133b5f9d1347b3913
  $smkTensorfromFZeros4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
edc5c19b3849d310043c8202c014fed0
  $smkTensorfromFZeros6 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$smkTensorfromFZeros7 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
9369f30c9ffe0000aaae068014bc005d
  $smkTensorfromFZeros7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
d1b739caee53c9bd979cbdce84a012bf
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
dc26bd17b0e6bb7a04ad060b022d83fd
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
fc1b1052118f7bb3e6226755fa151007
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   BasicTensors.$trModule3
                   BasicTensors.$trModule1) -}
76dbabc2a45f390f265aca8e93266473
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BasicTensors.$trModule2) -}
fe7d9b9371d4e605f03b0585940269ca
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BasicTensors"#) -}
57f14e02853941999a6fc6716128c4e9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS BasicTensors.$trModule4) -}
a91eefb16a75959bce665cd2eb357f29
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
1d73bf1b68aa37f36fb00cefe47bf38e
  $w$scanonicalizeArea ::
    Index.Ind 4 Index.Uind_3
    -> (# Index.Ind 4 Index.Uind_3, GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U(U)>, Inline: [0] -}
02c24d9ea3b3007e2fd246de6c0f33ff
  $w$scanonicalizeArea1 ::
    Index.Ind 4 Index.Lind_3
    -> (# Index.Ind 4 Index.Lind_3, GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U(U)>, Inline: [0] -}
942d80c174ec3babc6d3702d8e81bed1
  $w$sgo1 ::
    Index.Uinds_20 0
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 0
    -> Index.Uinds_3 0
    -> Index.Linds_3 1
    -> a1
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 1) a1
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 1) a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
891bc2d1ea0c9d5dacbb98142c921296
  $w$sgo2 ::
    Index.Uinds_20 0
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 1
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> a1
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 1 0 0) a1
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 1 0 0) a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
52a66563c790b770d3943a53e731e844
  $w$sgo3 ::
    Index.Uinds_20 0
    -> Index.Linds_20 0
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 1
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> a1
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 1 0 0) a1
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 1 0 0) a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
0bad35b6d497be52c7546607d2fadc0b
  $w$sgo4 ::
    Index.Uinds_20 0
    -> Index.Linds_20 0
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 1
    -> Index.Uinds_3 0
    -> Index.Linds_3 1
    -> a1
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 1 0 1) a1
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 1 0 1) a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
b775130e76c28a966a82d95afc6a8520
  $w$sgo5 ::
    Index.Uinds_20 0
    -> Index.Linds_20 0
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 2
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> a1
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 2 0 0) a1
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 2 0 0) a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
c667fe419a9256c32a9c34224bf8d0a8
  $w$sgo8 ::
    Index.Uinds_20 0
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 0
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> a1
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a1
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a1
  {- Arity: 10,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
5035e356f8a5f0eb83d66c4706e486ea
  $w$sisZeroArea ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 let {
                   eta3 :: Index.Ind 4 Index.Lind_3
                   = Index.UnsafemkInd @ 4 @ Index.Lind_3 ww
                 } in
                 {__scc {main:BasicTensors.isZeroArea} True True} {__scc {main:Index.==} True False} case {__scc {main:BasicTensors.isZeroArea.a} True True} {__scc {main:Index.getValInd} True False} eta3 of wild { Index.UnsafemkInd s ->
                                                                                                     case {__scc {main:BasicTensors.isZeroArea.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                          @ Index.Lind_3
                                                                                                                                                                                                          0#
                                                                                                                                                                                                          s of wild1 {
                                                                                                       GHC.Base.Nothing
                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                          ret_ty GHC.Types.Bool
                                                                                                          of {}
                                                                                                       GHC.Base.Just x
                                                                                                       -> let {
                                                                                                            $j :: GHC.Types.Bool
                                                                                                              <join 0>
                                                                                                            = let {
                                                                                                                ds :: Index.Lind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.c} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                     2#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              let {
                                                                                                                ds1 :: Index.Lind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.d} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                     3#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Lind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              {__scc {main:Index.==} True True} case ds of wild2 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L0_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L1_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L2_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.L3_3
                                                                                                                                                       -> GHC.Types.True } }
                                                                                                          } in
                                                                                                          case x of wild2 {
                                                                                                            Index.L0_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L0_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.L1_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L1_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.L2_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L2_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.L3_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Lind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.L3_3
                                                                                                                      -> GHC.Types.True } } } } } }) -}
aa8c2396d0d988ce0af6a2f4f61d450a
  $w$sisZeroArea1 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 let {
                   eta3 :: Index.Ind 4 Index.Uind_3
                   = Index.UnsafemkInd @ 4 @ Index.Uind_3 ww
                 } in
                 {__scc {main:BasicTensors.isZeroArea} True True} {__scc {main:Index.==} True False} case {__scc {main:BasicTensors.isZeroArea.a} True True} {__scc {main:Index.getValInd} True False} eta3 of wild { Index.UnsafemkInd s ->
                                                                                                     case {__scc {main:BasicTensors.isZeroArea.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                          @ Index.Uind_3
                                                                                                                                                                                                          0#
                                                                                                                                                                                                          s of wild1 {
                                                                                                       GHC.Base.Nothing
                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                          ret_ty GHC.Types.Bool
                                                                                                          of {}
                                                                                                       GHC.Base.Just x
                                                                                                       -> let {
                                                                                                            $j :: GHC.Types.Bool
                                                                                                              <join 0>
                                                                                                            = let {
                                                                                                                ds :: Index.Uind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.c} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                     2#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              let {
                                                                                                                ds1 :: Index.Uind_3
                                                                                                                = {__scc {main:BasicTensors.isZeroArea.d} True True} {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                     3#
                                                                                                                                                                                                                     s of wild2 {
                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                -> Data.Maybe.fromJust1
                                                                                                                                                                                                                     @ Index.Uind_3
                                                                                                                                                                                                                GHC.Base.Just x1
                                                                                                                                                                                                                -> x1 }
                                                                                                              } in
                                                                                                              {__scc {main:Index.==} True True} case ds of wild2 {
                                                                                                                                                  Index.U0_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U0_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.U1_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U1_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.U2_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U2_3
                                                                                                                                                       -> GHC.Types.True }
                                                                                                                                                  Index.U3_3
                                                                                                                                                  -> case ds1 of wild3 {
                                                                                                                                                       DEFAULT
                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                       Index.U3_3
                                                                                                                                                       -> GHC.Types.True } }
                                                                                                          } in
                                                                                                          case x of wild2 {
                                                                                                            Index.U0_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U0_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.U1_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U1_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.U2_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U2_3
                                                                                                                      -> GHC.Types.True } } }
                                                                                                            Index.U3_3
                                                                                                            -> case {__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True False} wild of wild3 { Index.UnsafemkInd s1 ->
                                                                                                               case {__scc {main:BasicTensors.isZeroArea.b} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                    @ Index.Uind_3
                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                    s1 of wild4 {
                                                                                                                 GHC.Base.Nothing
                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                    ret_ty GHC.Types.Bool
                                                                                                                    of {}
                                                                                                                 GHC.Base.Just x1
                                                                                                                 -> case x1 of wild5 {
                                                                                                                      DEFAULT
                                                                                                                      -> $j
                                                                                                                      Index.U3_3
                                                                                                                      -> GHC.Types.True } } } } } }) -}
e57e51e6ade35e6fdf0969af835a2310
  $w$spermSignN :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
d07f1cab55e8ade118ac1e653c4692c2
  $wareaDofList ::
    (GHC.Enum.Enum a, GHC.Classes.Ord a) =>
    [Data.Sequence.Internal.Seq a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,U(1*U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A)>,
     Inline: [0] -}
6b4c6969fb2d1efaad055ab4ac7b8eec
  $wcanonicalizeArea ::
    GHC.Classes.Ord a =>
    Index.Ind 4 a -> (# Index.Ind 4 a, GHC.Real.Rational #)
  {- Arity: 2,
     Strictness: <L,U(1*U(1*C1(C1(U)),A),A,C(C1(U)),1*C1(C1(U)),C(C1(U)),A,A,A)><L,U(U)>,
     Inline: [0] -}
9ea6b0400069b62affba9d7d881bbfa8
  $wepsilon_F ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 {__scc {main:BasicTensors.epsilon_F} True False} case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.a} True True} let {
                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                              ww of wild1 {
                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                         GHC.Base.Just x
                                                                                                                                                                                                                         -> x }
                                                                                                                                                                          } in
                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                    -> BasicTensors.delta_4
                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                    -> BasicTensors.delta_2
                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon2
                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon1 } of wild { GHC.Types.I# x ->
                                                                  case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.b} True True} let {
                                                                                                                                                                            a :: Index.Lind_3
                                                                                                                                                                            = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                              ww of wild1 {
                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                         -> Data.Maybe.fromJust1
                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                                                                                         -> x1 }
                                                                                                                                                                          } in
                                                                                                                                                                          {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                    -> BasicTensors.delta_4
                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                    -> BasicTensors.delta_2
                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon2
                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                    -> BasicTensors.epsilon1 } of wild1 { GHC.Types.I# y ->
                                                                  case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                          x
                                                                                                                          y of lwild {
                                                                    DEFAULT
                                                                    -> case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.c} True True} let {
                                                                                                                                                                                 a :: Index.Lind_3
                                                                                                                                                                                 = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                   @ Index.Lind_3
                                                                                                                                                                                                                                   2#
                                                                                                                                                                                                                                   ww of wild2 {
                                                                                                                                                                                                                              GHC.Base.Nothing
                                                                                                                                                                                                                              -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                   @ Index.Lind_3
                                                                                                                                                                                                                              GHC.Base.Just x1
                                                                                                                                                                                                                              -> x1 }
                                                                                                                                                                               } in
                                                                                                                                                                               {__scc {main:Index.fromEnum} True True} case a of wild2 {
                                                                                                                                                                                                                         Index.L0_3
                                                                                                                                                                                                                         -> BasicTensors.delta_4
                                                                                                                                                                                                                         Index.L1_3
                                                                                                                                                                                                                         -> BasicTensors.delta_2
                                                                                                                                                                                                                         Index.L2_3
                                                                                                                                                                                                                         -> BasicTensors.epsilon2
                                                                                                                                                                                                                         Index.L3_3
                                                                                                                                                                                                                         -> BasicTensors.epsilon1 } of wild2 { GHC.Types.I# y1 ->
                                                                       case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                               x
                                                                                                                               y1 of lwild1 {
                                                                         DEFAULT
                                                                         -> case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.epsilon_F.d} True True} let {
                                                                                                                                                                                      a :: Index.Lind_3
                                                                                                                                                                                      = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                        @ Index.Lind_3
                                                                                                                                                                                                                                        3#
                                                                                                                                                                                                                                        ww of wild3 {
                                                                                                                                                                                                                                   GHC.Base.Nothing
                                                                                                                                                                                                                                   -> Data.Maybe.fromJust1
                                                                                                                                                                                                                                        @ Index.Lind_3
                                                                                                                                                                                                                                   GHC.Base.Just x1
                                                                                                                                                                                                                                   -> x1 }
                                                                                                                                                                                    } in
                                                                                                                                                                                    {__scc {main:Index.fromEnum} True True} case a of wild3 {
                                                                                                                                                                                                                              Index.L0_3
                                                                                                                                                                                                                              -> BasicTensors.delta_4
                                                                                                                                                                                                                              Index.L1_3
                                                                                                                                                                                                                              -> BasicTensors.delta_2
                                                                                                                                                                                                                              Index.L2_3
                                                                                                                                                                                                                              -> BasicTensors.epsilon2
                                                                                                                                                                                                                              Index.L3_3
                                                                                                                                                                                                                              -> BasicTensors.epsilon1 } of wild3 { GHC.Types.I# y2 ->
                                                                            case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                    x
                                                                                                                                    y2 of lwild2 {
                                                                              DEFAULT
                                                                              -> case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                         y
                                                                                                                                         y1 of lwild3 {
                                                                                   DEFAULT
                                                                                   -> case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                              y
                                                                                                                                              y2 of lwild4 {
                                                                                        DEFAULT
                                                                                        -> case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Prim.==#
                                                                                                                                                   y1
                                                                                                                                                   y2 of lwild5 {
                                                                                             DEFAULT
                                                                                             -> case {__scc {main:BasicTensors.epsilon_F} False True} let {
                                                                                                                                                        l :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild3
                                                                                                                                                            (GHC.Types.[]
                                                                                                                                                               @ GHC.Types.Int)
                                                                                                                                                      } in
                                                                                                                                                      let {
                                                                                                                                                        l1 :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild2
                                                                                                                                                            l
                                                                                                                                                      } in
                                                                                                                                                      let {
                                                                                                                                                        l2 :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild1
                                                                                                                                                            l1
                                                                                                                                                      } in
                                                                                                                                                      let {
                                                                                                                                                        l3 :: [GHC.Types.Int]
                                                                                                                                                        = GHC.Types.:
                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                            wild
                                                                                                                                                            l2
                                                                                                                                                      } in
                                                                                                                                                      {__scc {main:BasicTensors.permSign} True True} BasicTensors.$w$spermSignN
                                                                                                                                                                                                       l3 of ww1 { DEFAULT ->
                                                                                                case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.permSign} False True} GHC.Prim.<#
                                                                                                                                                                                                        ww1
                                                                                                                                                                                                        0# of lwild6 {
                                                                                                  DEFAULT
                                                                                                  -> case ww1 of wild4 {
                                                                                                       DEFAULT
                                                                                                       -> case {__scc {main:BasicTensors.epsilon_F} False True} {__scc {main:BasicTensors.permSign} False True} GHC.Real.$wf1
                                                                                                                                                                                                                  -1#
                                                                                                                                                                                                                  wild4 of ww4 { DEFAULT ->
                                                                                                          case {__scc {main:BasicTensors.epsilon_F} False True} GHC.Integer.Type.smallInteger
                                                                                                                                                                  ww4 of dt2 { DEFAULT ->
                                                                                                          (# dt2,
                                                                                                             GHC.Real.$fEnumRatio1 #) } }
                                                                                                       0#
                                                                                                       -> (# BasicTensors.$smkTensorfromFZeros7,
                                                                                                             GHC.Real.$fEnumRatio1 #) }
                                                                                                  1#
                                                                                                  -> case GHC.Real.^2
                                                                                                     ret_ty (# GHC.Integer.Type.Integer,
                                                                                                               GHC.Integer.Type.Integer #)
                                                                                                     of {} } }
                                                                                             1#
                                                                                             -> (# BasicTensors.$smkTensorfromFZeros4,
                                                                                                   GHC.Real.$fEnumRatio1 #) }
                                                                                        1#
                                                                                        -> (# BasicTensors.$smkTensorfromFZeros4,
                                                                                              GHC.Real.$fEnumRatio1 #) }
                                                                                   1#
                                                                                   -> (# BasicTensors.$smkTensorfromFZeros4,
                                                                                         GHC.Real.$fEnumRatio1 #) }
                                                                              1#
                                                                              -> (# BasicTensors.$smkTensorfromFZeros4,
                                                                                    GHC.Real.$fEnumRatio1 #) } }
                                                                         1#
                                                                         -> (# BasicTensors.$smkTensorfromFZeros4,
                                                                               GHC.Real.$fEnumRatio1 #) } }
                                                                    1#
                                                                    -> (# BasicTensors.$smkTensorfromFZeros4,
                                                                          GHC.Real.$fEnumRatio1 #) } } }) -}
f06db27e534e970e449393b8d0ee3ea5
  $wetaAbs ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 0 1 0 0) GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.etaAbs} True True} {__scc {main:BasicTensors.etaAbs.t1} True False} BasicTensors.eta of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.etaAbs} False True} {__scc {main:BasicTensors.etaAbs.t1} False True} BasicTensors.interJ_2
                                                                                                                       w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.etaAbs} False True} {__scc {main:BasicTensors.etaAbs.t1} False True} Tensor.$wtensorProductWith
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 2
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 1
                                                                                                                       @ 2
                                                                                                                       @ 0
                                                                                                                       GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                       ww1
                                                                                                                       ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.etaAbs} False True} Tensor.$wtensorContractWith_3
                                                                      @ 1
                                                                      @ 1
                                                                      @ GHC.Real.Rational
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 1
                                                                      BasicTensors.$smkTensorfromFZeros6
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      BasicTensors.$smkTensorfromFZeros6
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      BasicTensors.etaAbs2
                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                      ww5
                                                                        `cast`
                                                                      (Data.Map.Internal.Map
                                                                         ((,,,,,,,)
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Uind_20>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Lind_20>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Uind_19>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Lind_19>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<0>_N))
                                                                               <Index.Uind_9>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<1>_N))
                                                                               <Index.Lind_9>_N)_N
                                                                            (Index.Ind
                                                                               (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                             <1>_N)))
                                                                               <Index.Uind_3>_N)_N
                                                                            (Index.Ind
                                                                               (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                             <1>_N)))
                                                                               <Index.Lind_3>_N)_N)_N
                                                                         <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 {__scc {main:BasicTensors.etaAbs} False True} Tensor.$wtensorContractWith_3
                                                                 @ 0
                                                                 @ 0
                                                                 @ GHC.Real.Rational
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 1
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.etaAbs1
                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                 ww8
                                                                   `cast`
                                                                 (Data.Map.Internal.Map
                                                                    ((,,,,,,,)
                                                                       <Index.Ind 0 Index.Uind_20>_N
                                                                       <Index.Ind 0 Index.Lind_20>_N
                                                                       <Index.Ind 0 Index.Uind_19>_N
                                                                       <Index.Ind 0 Index.Lind_19>_N
                                                                       <Index.Ind 0 Index.Uind_9>_N
                                                                       <Index.Ind 1 Index.Lind_9>_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Uind_3>_N)_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Lind_3>_N)_N)_N
                                                                    <GHC.Real.Rational>_R)_R } } } }) -}
84664666f9da2facc9f6a243f37d7913
  $wflatArea ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 0 0) GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.flatArea} True True} {__scc {main:BasicTensors.flatArea.prod} True False} BasicTensors.flatAreaST of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.flatArea} False True} {__scc {main:BasicTensors.flatArea.prod} False True} BasicTensors.interJ_Area
                                                                                                                             w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.flatArea} False True} {__scc {main:BasicTensors.flatArea.prod} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 4
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 4
                                                                                                                             @ 0
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww1
                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                        @ 3
                                                                        @ 3
                                                                        @ GHC.Real.Rational
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        BasicTensors.$stensorContractWith_1
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                        BasicTensors.$stensorContractWith_1
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                        BasicTensors.flatArea2
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww5
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<1>_N))
                                                                                 <Index.Lind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_9>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_9>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                               <1>_N)))
                                                                                 <Index.Uind_3>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                               <1>_N)))
                                                                                 <Index.Lind_3>_N)_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                        @ 2
                                                                        @ 2
                                                                        @ GHC.Real.Rational
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        BasicTensors.$smkTensorfromFZeros1
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                        BasicTensors.$smkTensorfromFZeros1
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                        BasicTensors.flatArea1
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww8
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              <Index.Ind
                                                                                 0 Index.Uind_20>_N
                                                                              <Index.Ind
                                                                                 1 Index.Lind_20>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_9>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_9>_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<2>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Uind_3>_N)_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<2>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Lind_3>_N)_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                        @ 1
                                                                        @ 1
                                                                        @ GHC.Real.Rational
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        @ 0
                                                                        BasicTensors.$smkTensorfromFZeros6
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                        BasicTensors.$smkTensorfromFZeros6
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                        BasicTensors.etaAbs2
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww10
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              <Index.Ind
                                                                                 0 Index.Uind_20>_N
                                                                              <Index.Ind
                                                                                 1 Index.Lind_20>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_19>_N
                                                                              <Index.Ind
                                                                                 0 Index.Uind_9>_N
                                                                              <Index.Ind
                                                                                 0 Index.Lind_9>_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<1>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Uind_3>_N)_N
                                                                              (Index.Ind
                                                                                 (Sym (AddDef (<1>_N,
                                                                                               <1>_N)))
                                                                                 <Index.Lind_3>_N)_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 {__scc {main:BasicTensors.flatArea} False True} Tensor.$wtensorContractWith_3
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   @ 0
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.etaAbs1
                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                   ww12
                                                                     `cast`
                                                                   (Data.Map.Internal.Map
                                                                      ((,,,,,,,)
                                                                         <Index.Ind
                                                                            0 Index.Uind_20>_N
                                                                         <Index.Ind
                                                                            1 Index.Lind_20>_N
                                                                         <Index.Ind
                                                                            0 Index.Uind_19>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_19>_N
                                                                         <Index.Ind
                                                                            0 Index.Uind_9>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_9>_N
                                                                         (Index.Ind
                                                                            (Sym (Add0L (<1>_N)))
                                                                            <Index.Uind_3>_N)_N
                                                                         (Index.Ind
                                                                            (Sym (Add0L (<1>_N)))
                                                                            <Index.Lind_3>_N)_N)_N
                                                                      <GHC.Real.Rational>_R)_R } } } } } }) -}
c94fe5565f6e1e72c748fc5a610b5d7b
  $winterArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.interArea} True True} {__scc {main:BasicTensors.interArea.prod} True False} {__scc {main:BasicTensors.interArea.i} True True} BasicTensors.interI_Area
                                                                                                                                                                                w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interArea} False True} {__scc {main:BasicTensors.interArea.j} True True} BasicTensors.interJ_Area
                                                                                                                           w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interArea} False True} {__scc {main:BasicTensors.interArea.prod} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 4
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 4
                                                                                                                               @ 0
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww1
                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interArea} False True} Tensor.$wtensorContractWith_3
                                                                         @ 3
                                                                         @ 3
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         BasicTensors.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                         BasicTensors.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                         BasicTensors.flatArea2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww5
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Uind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<1>_N))
                                                                                  <Index.Lind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interArea} False True} Tensor.$wtensorContractWith_3
                                                                         @ 2
                                                                         @ 2
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         BasicTensors.$smkTensorfromFZeros1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                         BasicTensors.$smkTensorfromFZeros1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                         BasicTensors.flatArea1
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww8
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               <Index.Ind
                                                                                  1 Index.Uind_20>_N
                                                                               <Index.Ind
                                                                                  1 Index.Lind_20>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_9>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_9>_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<2>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<2>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:BasicTensors.interArea} False True} Tensor.$wtensorContractWith_3
                                                                         @ 1
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         BasicTensors.$smkTensorfromFZeros6
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.$smkTensorfromFZeros6
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.etaAbs2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww10
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               <Index.Ind
                                                                                  1 Index.Uind_20>_N
                                                                               <Index.Ind
                                                                                  1 Index.Lind_20>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_19>_N
                                                                               <Index.Ind
                                                                                  0 Index.Uind_9>_N
                                                                               <Index.Ind
                                                                                  0 Index.Lind_9>_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<1>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Sym (AddDef (<1>_N,
                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:BasicTensors.interArea} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                         @ 1
                                                                                                                                                                                                         @ 1
                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                         @ 1
                                                                                                                                                                                                         @ 1
                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                         ({__scc {main:Tensor.fmap} False True} BasicTensors.interArea_go8
                                                                                                                                                                                                                                                  ww12) of ww13 { Tensor.Tensor ww14 ->
                 (# ww14 #) } } } } } } }) -}
a108eebe32ba4cb20873272aef615758
  $winterAreanoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.interAreanoFactor} True True} {__scc {main:BasicTensors.interAreanoFactor.prod} True False} {__scc {main:BasicTensors.interAreanoFactor.i} True True} BasicTensors.interI_Area
                                                                                                                                                                                                        w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} {__scc {main:BasicTensors.interAreanoFactor.j} True True} BasicTensors.interJ_AreanoFactor
                                                                                                                                           w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} {__scc {main:BasicTensors.interAreanoFactor.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 4
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 4
                                                                                                                                               @ 0
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww1
                                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                 @ 3
                                                                                 @ 3
                                                                                 @ GHC.Real.Rational
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 BasicTensors.$stensorContractWith_1
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                 BasicTensors.$stensorContractWith_1
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                 BasicTensors.flatArea2
                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                 ww5
                                                                                   `cast`
                                                                                 (Data.Map.Internal.Map
                                                                                    ((,,,,,,,)
                                                                                       (Index.Ind
                                                                                          (Add0R (<1>_N))
                                                                                          <Index.Uind_20>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<1>_N))
                                                                                          <Index.Lind_20>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Uind_19>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Lind_19>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Uind_9>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<0>_N))
                                                                                          <Index.Lind_9>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0L (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                        <1>_N)))
                                                                                          <Index.Uind_3>_N)_N
                                                                                       (Index.Ind
                                                                                          (Add0R (<4>_N) ; Sym (AddDef (<3>_N,
                                                                                                                        <1>_N)))
                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                    <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                 @ 2
                                                                                 @ 2
                                                                                 @ GHC.Real.Rational
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 BasicTensors.$smkTensorfromFZeros1
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                 BasicTensors.$smkTensorfromFZeros1
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                 BasicTensors.flatArea1
                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                 ww8
                                                                                   `cast`
                                                                                 (Data.Map.Internal.Map
                                                                                    ((,,,,,,,)
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Uind_20>_N
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Lind_20>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_9>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_9>_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<2>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Uind_3>_N)_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<2>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                    <GHC.Real.Rational>_R)_R of ww9 { Unit# ww10 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ GHC.Real.Rational
                                                                                 @ 1
                                                                                 @ 1
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 @ 0
                                                                                 BasicTensors.$smkTensorfromFZeros6
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                 BasicTensors.$smkTensorfromFZeros6
                                                                                   `cast`
                                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                                           <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                 BasicTensors.etaAbs2
                                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                                 ww10
                                                                                   `cast`
                                                                                 (Data.Map.Internal.Map
                                                                                    ((,,,,,,,)
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Uind_20>_N
                                                                                       <Index.Ind
                                                                                          1
                                                                                          Index.Lind_20>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_19>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Uind_9>_N
                                                                                       <Index.Ind
                                                                                          0
                                                                                          Index.Lind_9>_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<1>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Uind_3>_N)_N
                                                                                       (Index.Ind
                                                                                          (Sym (AddDef (<1>_N,
                                                                                                        <1>_N)))
                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                    <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:BasicTensors.interAreanoFactor} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                                                 ({__scc {main:Tensor.fmap} False True} BasicTensors.interArea_go8
                                                                                                                                                                                                                                                          ww12) of ww13 { Tensor.Tensor ww14 ->
                 (# ww14 #) } } } } } } }) -}
870788f0fa89541a140b65aa0927bb65
  $winterEqn1_2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:BasicTensors.interEqn1_2} True True} {__scc {main:BasicTensors.interEqn1_2.int1} True True} BasicTensors.interArea
                                                                                                                                 w
                                                                                                                                 w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case ({__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.intTotal} True False} BasicTensors.interEqn1_1)
                        `cast`
                      (Tensor.Tensor
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0R (<2>_N))
                         (Add0R (<2>_N))
                         <GHC.Real.Rational>_R)_R of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.intTotal} False True} {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                 @ 2
                                                                                                                                                                                                                                                                                                                 @ 2
                                                                                                                                                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                 ({__scc {main:Tensor.fmap} False True} BasicTensors.interEqn1_2_go8
                                                                                                                                                                                                                                                                                                                                                          ww8) of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.intTotal} False True} {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                             @ 2
                                                                                                                                                                                                                             @ 2
                                                                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                                                                             ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                                                                2
                                                                                                                                                                                                                                                                                2)
                                                                                                                                                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                                                                                                                                                           (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                                                                              @ 2
                                                                                                                                                                                                                                                                              @ 2)
                                                                                                                                                                                                                                                                           BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                                                                           ww5
                                                                                                                                                                                                                                                                             `cast`
                                                                                                                                                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                              ((,,,,,,,)
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                    <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                    <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                    <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                    <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                    <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                    <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                             <1>_N))
                                                                                                                                                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                                                                    (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                             <1>_N))
                                                                                                                                                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                              <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                           ww10) of ww11 { Tensor.Tensor ww12 ->
                 (# ww12 #) } } } } } }) -}
cc6a4e256049f73b80ce733fe09765c3
  $winterEqn1_3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.interEqn1_3} True True} {__scc {main:BasicTensors.interEqn1_3.int1} True True} BasicTensors.interArea
                                                                                                                                 w
                                                                                                                                 w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.int2} True True} BasicTensors.interMetric
                                                                                                                                  w2
                                                                                                                                  w3 of ww7 { Tensor.Tensor ww8 ->
                 case BasicTensors.delta_20 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.int2} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww8
                                                                                                                                   ww10 of ww11 { Unit# ww12 ->
                 case {__scc {main:BasicTensors.interEqn1_3} False True} {__scc {main:BasicTensors.interEqn1_3.intTotal} True True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                 ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    0
                                                                                                                                                                                                                                    0
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    1)
                                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                                               (Tensor.aSymTensor3
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 0
                                                                                                                                                                                                                                  @ 0
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 1)
                                                                                                                                                                                                                               BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                               ww5
                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                  <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                               ww12
                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                  <GHC.Real.Rational>_R)_R) of ww13 { Tensor.Tensor ww14 ->
                 (# ww14 #) } } } } } } }) -}
2d34ceba112f275ded3686daff4b1407
  $winterF_IArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Index.Uinds_20 1
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> GHC.Real.Rational
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (ww :: Index.Uinds_20 1)
                   (ww1 :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 let {
                   ds :: Index.Ind 4 Index.Lind_3
                   = Index.UnsafemkInd @ 4 @ Index.Lind_3 ww1
                 } in
                 {__scc {main:BasicTensors.interF_IArea} True True} case BasicTensors.$w$sisZeroArea
                                                                           ww1 of wild {
                                                                      GHC.Types.False
                                                                      -> case {__scc {main:BasicTensors.interF_IArea.sortY} True True} BasicTensors.$w$scanonicalizeArea1
                                                                                                                                         ds of ww2 { (#,#) ww3 ww4 ->
                                                                         {__scc {main:Index.==} True False} {__scc {main:BasicTensors.interF_IArea.indI} True False} case ww3 of ww5 { Index.UnsafemkInd ww6 ->
                                                                                                                                                                     case {__scc {main:BasicTensors.interF_IArea.indI} False True} BasicTensors.$wpoly_go6
                                                                                                                                                                                                                                     @ Index.Uind_20
                                                                                                                                                                                                                                     ww6
                                                                                                                                                                                                                                     w of x1 { DEFAULT ->
                                                                                                                                                                     case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                                                                               x1 of a# { DEFAULT ->
                                                                                                                                                                     case {__scc {main:BasicTensors.interF_IArea.xVal} True True} {__scc {main:Index.getValInd} True False} ww of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                     case {__scc {main:BasicTensors.interF_IArea.xVal} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                                                                               s of wild2 {
                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                          ret_ty GHC.Real.Rational
                                                                                                                                                                          of {}
                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                       -> case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                    @ Index.Uind_20
                                                                                                                                                                                                                    x of b# { DEFAULT ->
                                                                                                                                                                          case {__scc {main:Index.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                                    @ GHC.Types.Bool
                                                                                                                                                                                                                    (GHC.Prim.==#
                                                                                                                                                                                                                       a#
                                                                                                                                                                                                                       b#) of wild3 {
                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                            -> BasicTensors.interF_IArea1
                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                            -> ww4 } } } } } } } }
                                                                      GHC.Types.True
                                                                      -> BasicTensors.interF_IArea1 }) -}
9914415578b9bdaa99a8d81871fdcca6
  $winterMetric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.interMetric} True True} {__scc {main:BasicTensors.interMetric.prod} True False} {__scc {main:BasicTensors.interMetric.i} True True} BasicTensors.interI_2
                                                                                                                                                                                      w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interMetric} False True} {__scc {main:BasicTensors.interMetric.j} True True} BasicTensors.interJ_2
                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interMetric} False True} {__scc {main:BasicTensors.interMetric.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interMetric} False True} Tensor.$wtensorContractWith_3
                                                                           @ 1
                                                                           @ 1
                                                                           @ GHC.Real.Rational
                                                                           @ 0
                                                                           @ 0
                                                                           @ 0
                                                                           @ 0
                                                                           @ 1
                                                                           @ 1
                                                                           BasicTensors.$smkTensorfromFZeros6
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           BasicTensors.$smkTensorfromFZeros6
                                                                             `cast`
                                                                           (Sym (GHC.TypeNats.N:SNat[0]
                                                                                     <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                           BasicTensors.etaAbs1
                                                                           GHC.Real.$fEnumRatio_$s$c+
                                                                           ww5
                                                                             `cast`
                                                                           (Data.Map.Internal.Map
                                                                              ((,,,,,,,)
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Uind_20>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Lind_20>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Uind_19>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<0>_N))
                                                                                    <Index.Lind_19>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0R (<1>_N))
                                                                                    <Index.Uind_9>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<1>_N))
                                                                                    <Index.Lind_9>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                  <1>_N)))
                                                                                    <Index.Uind_3>_N)_N
                                                                                 (Index.Ind
                                                                                    (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                  <1>_N)))
                                                                                    <Index.Lind_3>_N)_N)_N
                                                                              <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interMetric} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                                                                                           ({__scc {main:Tensor.fmap} False True} BasicTensors.interMetric_go8
                                                                                                                                                                                                                                                    ww8) of ww9 { Tensor.Tensor ww10 ->
                 (# ww10 #) } } } } }) -}
c5bf14838f26823aa7f7a351211c9414
  $winterMetricnoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} True True} {__scc {main:BasicTensors.interMetricnoFactor.prod} True False} {__scc {main:BasicTensors.interMetricnoFactor.i} True True} BasicTensors.interI_2
                                                                                                                                                                                                              w of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} {__scc {main:BasicTensors.interMetricnoFactor.j} True True} BasicTensors.interJ_2noFactor
                                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} {__scc {main:BasicTensors.interMetricnoFactor.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 2
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 2
                                                                                                                                                   @ 0
                                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                                   ww1
                                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} Tensor.$wtensorContractWith_3
                                                                                   @ 1
                                                                                   @ 1
                                                                                   @ GHC.Real.Rational
                                                                                   @ 0
                                                                                   @ 0
                                                                                   @ 0
                                                                                   @ 0
                                                                                   @ 1
                                                                                   @ 1
                                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                                     `cast`
                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                                     `cast`
                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                   BasicTensors.etaAbs1
                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                   ww5
                                                                                     `cast`
                                                                                   (Data.Map.Internal.Map
                                                                                      ((,,,,,,,)
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Uind_20>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Lind_20>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Uind_19>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<0>_N))
                                                                                            <Index.Lind_19>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0R (<1>_N))
                                                                                            <Index.Uind_9>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<1>_N))
                                                                                            <Index.Lind_9>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                          <1>_N)))
                                                                                            <Index.Uind_3>_N)_N
                                                                                         (Index.Ind
                                                                                            (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                          <1>_N)))
                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                      <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:BasicTensors.interMetricnoFactor} False True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                   @ 0
                                                                                                                                                                                                                   @ 1
                                                                                                                                                                                                                   @ 1
                                                                                                                                                                                                                   @ 1
                                                                                                                                                                                                                   @ 1
                                                                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                                                                   ({__scc {main:Tensor.fmap} False True} BasicTensors.interMetric_go8
                                                                                                                                                                                                                                                            ww8) of ww9 { Tensor.Tensor ww10 ->
                 (# ww10 #) } } } } }) -}
7a5a90b6227213eb00eab5ac36e38e97
  $winvEtaAbs ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 0 0 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:BasicTensors.invEtaAbs} True True} {__scc {main:BasicTensors.invEtaAbs.t1} True False} BasicTensors.invEta of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:BasicTensors.invEtaAbs} False True} {__scc {main:BasicTensors.invEtaAbs.t1} False True} BasicTensors.interI_2
                                                                                                                             w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:BasicTensors.invEtaAbs} False True} {__scc {main:BasicTensors.invEtaAbs.t1} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 2
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 2
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww1
                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:BasicTensors.invEtaAbs} False True} Tensor.$wtensorContractWith_3
                                                                         @ 1
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 1
                                                                         @ 0
                                                                         BasicTensors.$smkTensorfromFZeros6
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.$smkTensorfromFZeros6
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         BasicTensors.etaAbs2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww5
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<1>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                <1>_N)))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 {__scc {main:BasicTensors.invEtaAbs} False True} Tensor.$wtensorContractWith_3
                                                                    @ 0
                                                                    @ 0
                                                                    @ GHC.Real.Rational
                                                                    @ 0
                                                                    @ 0
                                                                    @ 0
                                                                    @ 0
                                                                    @ 1
                                                                    @ 0
                                                                    BasicTensors.$smkTensorfromFZeros3
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                    BasicTensors.$smkTensorfromFZeros3
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                    BasicTensors.etaAbs1
                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                    ww8
                                                                      `cast`
                                                                    (Data.Map.Internal.Map
                                                                       ((,,,,,,,)
                                                                          <Index.Ind
                                                                             0 Index.Uind_20>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_20>_N
                                                                          <Index.Ind
                                                                             0 Index.Uind_19>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_19>_N
                                                                          <Index.Ind
                                                                             1 Index.Uind_9>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_9>_N
                                                                          (Index.Ind
                                                                             (Sym (Add0L (<1>_N)))
                                                                             <Index.Uind_3>_N)_N
                                                                          (Index.Ind
                                                                             (Sym (Add0L (<1>_N)))
                                                                             <Index.Lind_3>_N)_N)_N
                                                                       <GHC.Real.Rational>_R)_R } } } }) -}
e98dcb59ecee34e1c589e65cbface008
  $wisZeroArea ::
    GHC.Classes.Ord a => Index.Ind 4 a -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(C(C(S))L)LLLLLLL),1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ @ a (w :: GHC.Classes.Ord a) (w1 :: Index.Ind 4 a) ->
                 let {
                   $dEq :: GHC.Classes.Eq a = GHC.Classes.$p1Ord @ a w
                 } in
                 {__scc {main:BasicTensors.isZeroArea} True True} case GHC.Classes.==
                                                                         @ a
                                                                         $dEq
                                                                         ({__scc {main:BasicTensors.isZeroArea.a} True True} {__scc {main:Index.getValInd} True True} case w1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             0#
                                                                                                                                                                             s of wild1 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } })
                                                                         ({__scc {main:BasicTensors.isZeroArea.b} True True} {__scc {main:Index.getValInd} True True} case w1 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             1#
                                                                                                                                                                             s of wild1 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } }) of wild {
                                                                    GHC.Types.False
                                                                    -> GHC.Classes.==
                                                                         @ a
                                                                         $dEq
                                                                         ({__scc {main:BasicTensors.isZeroArea.c} True True} {__scc {main:Index.getValInd} True True} case w1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             2#
                                                                                                                                                                             s of wild2 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } })
                                                                         ({__scc {main:BasicTensors.isZeroArea.d} True True} {__scc {main:Index.getValInd} True True} case w1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                      case Data.Sequence.Internal.$wlookup
                                                                                                                                                                             @ a
                                                                                                                                                                             3#
                                                                                                                                                                             s of wild2 {
                                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                                        -> Data.Maybe.fromJust1
                                                                                                                                                                             @ a
                                                                                                                                                                        GHC.Base.Just x
                                                                                                                                                                        -> x } })
                                                                    GHC.Types.True
                                                                    -> GHC.Types.True }) -}
b18c828579527e1a8aa38f7985d86597
  $wivar2F ::
    Index.Linds_20 1
    -> Index.Linds_3 1
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1) (ww1 :: Index.Linds_3 1) ->
                 {__scc {main:BasicTensors.ivar2F} True False} case {__scc {main:BasicTensors.ivar2F} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                               BasicTensors.ivar11
                                                                                                                                                               ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                   case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                                                                                                                     GHC.Base.Nothing
                                                                                                                                                                                                                                                     -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                        ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                  GHC.Real.Rational)
                                                                                                                                                                                                                                                        of {}
                                                                                                                                                                                                                                                     GHC.Base.Just x
                                                                                                                                                                                                                                                     -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                           @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                           case ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                                                                                                                                                                                           case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                                                                                                                                            s1 of wild3 {
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                          GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                of {}
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                                                                                                                                                                                                                  Index.L0_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          22#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                             a#
                                                                                                                                                                                                                                                                                                                                                             4#))
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar10
                                                                                                                                                                                                                                                                                                                                                  Index.L1_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                             22#
                                                                                                                                                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                a#
                                                                                                                                                                                                                                                                                                                                                                4#))
                                                                                                                                                                                                                                                                                                                                                          1#)
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar10
                                                                                                                                                                                                                                                                                                                                                  Index.L2_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                             22#
                                                                                                                                                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                a#
                                                                                                                                                                                                                                                                                                                                                                4#))
                                                                                                                                                                                                                                                                                                                                                          2#)
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar10
                                                                                                                                                                                                                                                                                                                                                  Index.L3_3
                                                                                                                                                                                                                                                                                                                                                  -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                             22#
                                                                                                                                                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                a#
                                                                                                                                                                                                                                                                                                                                                                4#))
                                                                                                                                                                                                                                                                                                                                                          3#)
                                                                                                                                                                                                                                                                                                                                                       BasicTensors.ivar10 } } } } } }) of ww2 { Ivar.Ivar ww3 ww4 ->
                                                               (# ww3, ww4 #) }) -}
a2b0b34e694285a930f3413afeb7dfd1
  $wivar2FM ::
    Index.Linds_9 1
    -> Index.Linds_3 1
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_9 1) (ww1 :: Index.Linds_3 1) ->
                 {__scc {main:BasicTensors.ivar2FM} True False} case {__scc {main:BasicTensors.ivar2FM} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 BasicTensors.ivar11
                                                                                                                                                                 ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                      @ Index.Lind_9
                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                          ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                    GHC.Real.Rational)
                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                       -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                             x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                             case ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                                                                                                                                                                                             case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                                                                                                                                                                                              s1 of wild3 {
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                  ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                            GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                  of {}
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                               -> case x1 of wild4 {
                                                                                                                                                                                                                                                                                                                                                    Index.L0_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            11#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                                               4#))
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar10
                                                                                                                                                                                                                                                                                                                                                    Index.L1_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                               11#
                                                                                                                                                                                                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                                                                                                                  4#))
                                                                                                                                                                                                                                                                                                                                                            1#)
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar10
                                                                                                                                                                                                                                                                                                                                                    Index.L2_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                               11#
                                                                                                                                                                                                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                                                                                                                  4#))
                                                                                                                                                                                                                                                                                                                                                            2#)
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar10
                                                                                                                                                                                                                                                                                                                                                    Index.L3_3
                                                                                                                                                                                                                                                                                                                                                    -> Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                               11#
                                                                                                                                                                                                                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                                  a#
                                                                                                                                                                                                                                                                                                                                                                  4#))
                                                                                                                                                                                                                                                                                                                                                            3#)
                                                                                                                                                                                                                                                                                                                                                         BasicTensors.ivar10 } } } } } }) of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                (# ww3, ww4 #) }) -}
3939c2576544b545bf2801f5aa7a2018
  $wivar3F ::
    Index.Linds_20 1
    -> Index.Linds_9 1
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1) (ww1 :: Index.Linds_9 1) ->
                 {__scc {main:BasicTensors.ivar3F} True False} case {__scc {main:BasicTensors.ivar3F} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                               BasicTensors.ivar11
                                                                                                                                                               ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                   case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                                                    s of wild1 {
                                                                                                                                                                                                                                                     GHC.Base.Nothing
                                                                                                                                                                                                                                                     -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                        ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                  GHC.Real.Rational)
                                                                                                                                                                                                                                                        of {}
                                                                                                                                                                                                                                                     GHC.Base.Just x
                                                                                                                                                                                                                                                     -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                           @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                           case ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                                                                                                                                                                                                           case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                                                                                                                                            s1 of wild3 {
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                          GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                of {}
                                                                                                                                                                                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                             -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                                @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                                x1 of a#1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                                Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                        106#
                                                                                                                                                                                                                                                                                                                                                        (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                           a#
                                                                                                                                                                                                                                                                                                                                                           10#))
                                                                                                                                                                                                                                                                                                                                                     a#1)
                                                                                                                                                                                                                                                                                                                                                  BasicTensors.ivar10 } } } } } }) of ww2 { Ivar.Ivar ww3 ww4 ->
                                                               (# ww3, ww4 #) }) -}
ee01353993b1120a9a782b4a5a0720ce
  $wivar3FM ::
    Index.Linds_9 2
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_9 2) ->
                 {__scc {main:BasicTensors.ivar3FM} True False} case {__scc {main:BasicTensors.ivar3FM} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                 BasicTensors.ivar11
                                                                                                                                                                 ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                     case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                      @ Index.Lind_9
                                                                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                                                                      s of wild1 {
                                                                                                                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                          ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                    GHC.Real.Rational)
                                                                                                                                                                                                                                                          of {}
                                                                                                                                                                                                                                                       GHC.Base.Just x
                                                                                                                                                                                                                                                       -> {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                             @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                             x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                             case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                                              @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                                                                                                                                                                              s of wild2 {
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                                                                  ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                                                                                                                            GHC.Real.Rational)
                                                                                                                                                                                                                                                                                                                                                  of {}
                                                                                                                                                                                                                                                                                                                                               GHC.Base.Just x1
                                                                                                                                                                                                                                                                                                                                               -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                                                                  @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                                                                  x1 of a#1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                                  Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                                                          51#
                                                                                                                                                                                                                                                                                                                                                          (GHC.Prim.*#
                                                                                                                                                                                                                                                                                                                                                             a#
                                                                                                                                                                                                                                                                                                                                                             10#))
                                                                                                                                                                                                                                                                                                                                                       a#1)
                                                                                                                                                                                                                                                                                                                                                    BasicTensors.ivar10 } } } } }) of ww1 { Ivar.Ivar ww2 ww3 ->
                                                                (# ww2, ww3 #) }) -}
74487aafbf75550101151c8cdc5ef62b
  $wpoly_go1 ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Map.Internal.Map (Index.Uinds_3 2) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
45fa2ab1ab3c2a4a17b8bf983874cd2a
  $wpoly_go13 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Map.Internal.Map (Index.Linds_3 2) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
2dd1164ec1c8e5b9dc1cff9340c70f4c
  $wpoly_go2 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Map.Internal.Map (Index.Linds_3 3) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
6c5100f51434d5a12db16dc413ed85c3
  $wpoly_go3 ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Map.Internal.Map (Index.Uinds_3 3) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
bda889c365e9ea5df34b30cd4bdacd9e
  $wpoly_go4 ::
    Data.Sequence.Internal.Seq Index.Uind_20
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 0
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a
    -> a
  {- Arity: 9,
     Strictness: <S,U><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,1*U>,
     Inline: [0] -}
6d221d16ded43c32f1db6bda475614dc
  $wpoly_go5 ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Map.Internal.Map (Index.Uinds_3 4) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
0e123a3304909e7b50d48adac504ba8d
  $wpoly_go6 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Map.Internal.Map (Index.Linds_3 4) a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
d975b25862ba0ca0c69383c025ca600f
  $wpoly_go7 ::
    Index.Uinds_20 0
    -> Index.Linds_20 1
    -> Index.Uinds_19 0
    -> Index.Linds_19 0
    -> Index.Uinds_9 0
    -> Index.Linds_9 0
    -> Index.Uinds_3 0
    -> Index.Linds_3 0
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 0 0) a
    -> GHC.Types.Bool
  {- Arity: 9, HasNoCafRefs,
     Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,1*U>,
     Inline: [0] -}
d11031f7d9555261acf244015f5d526b
  $wsymIndList ::
    GHC.Enum.Enum a =>
    GHC.Prim.Int# -> GHC.Types.Int -> [Data.Sequence.Internal.Seq a]
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><S,U><L,U>,
     Inline: [0] -}
85b96c1b469ca0318ab6d34ecbdffdf1
  aSymI_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
1ec2cba96b65767e3ebe59fc9715f5a0
  areaDofList ::
    (GHC.Enum.Enum a, GHC.Classes.Eq a, GHC.Classes.Ord a) =>
    [Data.Sequence.Internal.Seq a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,A><L,U(U(C(C1(U)),A),A,A,A,C(C1(U)),A,A,A)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Enum.Enum a)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: GHC.Classes.Ord a) ->
                 BasicTensors.$wareaDofList @ a w w2) -}
64e6406d5686c769739854126058ae72
  canonicalizeArea ::
    (GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Enum.Enum a) =>
    Index.Ind 4 a -> (Index.Ind 4 a, GHC.Real.Rational)
  {- Arity: 4,
     Strictness: <L,A><L,U(U(C(C1(U)),A),A,C(C1(U)),C(C1(U)),C(C1(U)),A,A,A)><L,A><L,U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: GHC.Enum.Enum a)
                   (w3 :: Index.Ind 4 a) ->
                 case BasicTensors.$wcanonicalizeArea
                        @ a
                        w1
                        w3 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
a72c70f7e7b2adbebb49b91c6b5f2d54
  delta_1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
4a7b39c7897f7ff77892dcbb0c497443
  delta_10 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 1 1 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_3} False True} Tensor.mkTensorfromF
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 1
                                                                  @ 1
                                                                  @ GHC.Real.Rational
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros6
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  BasicTensors.$smkTensorfromFZeros6
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
8f9c2ea305772fbe354b58709646da5f
  delta_11 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
8eae612a17c1e6ed5a00c42d9df44797
  delta_12 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 1 1 0 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 1 1 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_9} False True} Tensor.mkTensorfromF
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 1
                                                                  @ 1
                                                                  @ 0
                                                                  @ 0
                                                                  @ GHC.Real.Rational
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros6
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  BasicTensors.$smkTensorfromFZeros6
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
b3df036ceecf8cc461e79cbd05b38d1e
  delta_19 :: Tensor.Tensor 0 0 1 1 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_19} True True} BasicTensors.delta_5
                                                                  BasicTensors.delta_1
                                                                  BasicTensors.delta_19F) -}
547655f8d6ee1065b4902a4bc8312aa8
  delta_19F :: Index.Index 0 0 1 1 0 0 0 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLS(S)S(S)LLLL),1*U(A,A,1*U(U),1*U(U),A,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 1 1 0 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww3 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww4 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_19
                   = Index.UnsafemkInd @ 1 @ Index.Uind_19 ww10
                 } in
                 {__scc {main:BasicTensors.delta_19F} True False} case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                  case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                    @ Index.Uind_19
                                                                                                                                                                    0#
                                                                                                                                                                    s of wild1 {
                                                                    GHC.Base.Nothing
                                                                    -> case Data.Maybe.fromJust1
                                                                       ret_ty (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                       of {}
                                                                    GHC.Base.Just x
                                                                    -> case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Uind_19
                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                       case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                         @ Index.Lind_19
                                                                                                                                                                         0#
                                                                                                                                                                         ww12 of wild2 {
                                                                         GHC.Base.Nothing
                                                                         -> case Data.Maybe.fromJust1
                                                                            ret_ty (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                            of {}
                                                                         GHC.Base.Just x1
                                                                         -> case {__scc {main:BasicTensors.delta_19F} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                             @ Index.Lind_19
                                                                                                                                                                             x1 of a#1 { DEFAULT ->
                                                                            case {__scc {main:BasicTensors.delta_19F} False True} GHC.Prim.==#
                                                                                                                                    a#
                                                                                                                                    a#1 of lwild {
                                                                              DEFAULT
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$smkTensorfromFZeros4
                                                                                   GHC.Real.$fEnumRatio1
                                                                              1#
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$smkTensorfromFZeros7
                                                                                   GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
8183a81137418c47200d4fce949f2310
  delta_2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
162a995d96c74a333b7936c74f9c8654
  delta_20 :: Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_20} True True} BasicTensors.delta_7
                                                                  BasicTensors.delta_6
                                                                  BasicTensors.delta_20F) -}
301f8af5a78b2d30b1c5d9dc4d0dc083
  delta_20F :: Index.Index 1 1 0 0 0 0 0 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(S(S)S(S)LLLLLL),1*U(1*U(U),1*U(U),A,A,A,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 1 1 0 0 0 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww1 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww2 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_20
                   = Index.UnsafemkInd @ 1 @ Index.Uind_20 ww10
                 } in
                 {__scc {main:BasicTensors.delta_20F} True False} case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                  case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                    @ Index.Uind_20
                                                                                                                                                                    0#
                                                                                                                                                                    s of wild1 {
                                                                    GHC.Base.Nothing
                                                                    -> case Data.Maybe.fromJust1
                                                                       ret_ty (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                       of {}
                                                                    GHC.Base.Just x
                                                                    -> case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Uind_20
                                                                                                                                                                                                                                                           x of a# { DEFAULT ->
                                                                       case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                         @ Index.Lind_20
                                                                                                                                                                         0#
                                                                                                                                                                         ww12 of wild2 {
                                                                         GHC.Base.Nothing
                                                                         -> case Data.Maybe.fromJust1
                                                                            ret_ty (GHC.Real.Ratio
                                                                                      GHC.Integer.Type.Integer)
                                                                            of {}
                                                                         GHC.Base.Just x1
                                                                         -> case {__scc {main:BasicTensors.delta_20F} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                             @ Index.Lind_20
                                                                                                                                                                             x1 of a#1 { DEFAULT ->
                                                                            case {__scc {main:BasicTensors.delta_20F} False True} GHC.Prim.==#
                                                                                                                                    a#
                                                                                                                                    a#1 of lwild {
                                                                              DEFAULT
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$smkTensorfromFZeros4
                                                                                   GHC.Real.$fEnumRatio1
                                                                              1#
                                                                              -> GHC.Real.:%
                                                                                   @ GHC.Integer.Type.Integer
                                                                                   BasicTensors.$smkTensorfromFZeros7
                                                                                   GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
1b779d8bf6d3a2de4e2c39cbf2952342
  delta_3 :: Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_3} True True} BasicTensors.delta_10
                                                                 BasicTensors.delta_8
                                                                 BasicTensors.delta_3F) -}
8519ee55b6a96aff0b8e3604d64bab23
  delta_3F :: Index.Index 0 0 0 0 0 0 1 1 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLS(S)S(S)),1*U(A,A,A,A,A,A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww7 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww8 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_3
                   = Index.UnsafemkInd @ 1 @ Index.Uind_3 ww10
                 } in
                 let {
                   ds1 :: Index.Ind 1 Index.Lind_3
                   = Index.UnsafemkInd @ 1 @ Index.Lind_3 ww12
                 } in
                 {__scc {main:BasicTensors.delta_3F} True False} case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                 case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                  0#
                                                                                                                                                                  s of wild1 {
                                                                   GHC.Base.Nothing
                                                                   -> case Data.Maybe.fromJust1
                                                                      ret_ty (GHC.Real.Ratio
                                                                                GHC.Integer.Type.Integer)
                                                                      of {}
                                                                   GHC.Base.Just x
                                                                   -> case x of wild2 {
                                                                        Index.U0_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  Index.L0_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros7
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L1_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros4
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L2_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros4
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L3_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros4
                                                                                       GHC.Real.$fEnumRatio1 } } }
                                                                        Index.U1_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  DEFAULT
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros4
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L1_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros7
                                                                                       GHC.Real.$fEnumRatio1 } } }
                                                                        Index.U2_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  DEFAULT
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros4
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L2_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros7
                                                                                       GHC.Real.$fEnumRatio1 } } }
                                                                        Index.U3_3
                                                                        -> case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds1 of wild3 { Index.UnsafemkInd s1 ->
                                                                           case {__scc {main:BasicTensors.delta_3F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                            @ Index.Lind_3
                                                                                                                                                                            0#
                                                                                                                                                                            s1 of wild4 {
                                                                             GHC.Base.Nothing
                                                                             -> case Data.Maybe.fromJust1
                                                                                ret_ty (GHC.Real.Ratio
                                                                                          GHC.Integer.Type.Integer)
                                                                                of {}
                                                                             GHC.Base.Just x1
                                                                             -> case x1 of wild5 {
                                                                                  DEFAULT
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros4
                                                                                       GHC.Real.$fEnumRatio1
                                                                                  Index.L3_3
                                                                                  -> GHC.Real.:%
                                                                                       @ GHC.Integer.Type.Integer
                                                                                       BasicTensors.$smkTensorfromFZeros7
                                                                                       GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
4f6ab7c9ded95491ca8026869fc243ca
  delta_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
a836224c564af119642583f7b20dd443
  delta_5 ::
    Tensor.Rank
    -> (Index.Index 0 0 1 1 0 0 0 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 1 1 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_19} False True} Tensor.mkTensorfromF
                                                                   @ 0
                                                                   @ 0
                                                                   @ 1
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                   GHC.Real.$fOrdRatio_$s$fEqRatio) -}
45e46b5da914ea725881a87cfa4781ee
  delta_6 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
e58af093639b44f66be8a83225794860
  delta_7 ::
    Tensor.Rank
    -> (Index.Index 1 1 0 0 0 0 0 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 1 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_20} False True} Tensor.mkTensorfromF
                                                                   @ 1
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                   GHC.Real.$fOrdRatio_$s$fEqRatio) -}
ab54f8f11197e319cdf7a6576b948dd2
  delta_8 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_2)) -}
71b32e9191ec29699321bcbae6e0b83a
  delta_9 :: Tensor.Tensor 0 0 0 0 1 1 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.delta_9} True True} BasicTensors.delta_12
                                                                 BasicTensors.delta_11
                                                                 BasicTensors.delta_9F) -}
dde9a1796c991b60bc1dc20ed49f382b
  delta_9F :: Index.Index 0 0 0 0 1 1 0 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLS(S)S(S)LL),1*U(A,A,A,A,1*U(U),1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 1 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww5 of ww9 { Index.UnsafemkInd ww10 ->
                 case ww6 of ww11 { Index.UnsafemkInd ww12 ->
                 let {
                   ds :: Index.Ind 1 Index.Uind_9
                   = Index.UnsafemkInd @ 1 @ Index.Uind_9 ww10
                 } in
                 {__scc {main:BasicTensors.delta_9F} True False} case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ds of wild { Index.UnsafemkInd s ->
                                                                 case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                  @ Index.Uind_9
                                                                                                                                                                  0#
                                                                                                                                                                  s of wild1 {
                                                                   GHC.Base.Nothing
                                                                   -> case Data.Maybe.fromJust1
                                                                      ret_ty (GHC.Real.Ratio
                                                                                GHC.Integer.Type.Integer)
                                                                      of {}
                                                                   GHC.Base.Just x
                                                                   -> case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                         @ Index.Uind_9
                                                                                                                                                                                                                                                         x of a# { DEFAULT ->
                                                                      case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                       0#
                                                                                                                                                                       ww12 of wild2 {
                                                                        GHC.Base.Nothing
                                                                        -> case Data.Maybe.fromJust1
                                                                           ret_ty (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                           of {}
                                                                        GHC.Base.Just x1
                                                                        -> case {__scc {main:BasicTensors.delta_9F} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                           case {__scc {main:BasicTensors.delta_9F} False True} GHC.Prim.==#
                                                                                                                                  a#
                                                                                                                                  a#1 of lwild {
                                                                             DEFAULT
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.$smkTensorfromFZeros4
                                                                                  GHC.Real.$fEnumRatio1
                                                                             1#
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.$smkTensorfromFZeros7
                                                                                  GHC.Real.$fEnumRatio1 } } } } } } } } }) -}
fd64c1f9629fb9403c96c3a17f0fba61
  epsilon :: Tensor.Tensor 0 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.epsilon} True True} BasicTensors.epsilon5
                                                                 BasicTensors.epsilon3
                                                                 BasicTensors.epsilon_F) -}
979195a7b51d44e9437d2b722ff5ab66
  epsilon1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
b5cd223eaf14eda782dcfe7b99e434f4
  epsilon2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
6970a8e424ed69e312f37da10df9b129
  epsilon3 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon4)) -}
1c955adb261d92a52e2567f1b14aefc9
  epsilon4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
47277e8a57ceceee141f19c1c3104b43
  epsilon5 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 0 4 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.epsilon} False True} Tensor.mkTensorfromF
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 0
                                                                  @ 4
                                                                  @ GHC.Real.Rational
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.$smkTensorfromFZeros3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  BasicTensors.epsilon6
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
6d2a53dca3e0d849af73bb39f18c6633
  epsilon6 :: GHC.Natural.Natural
  {- Unfolding: (case BasicTensors.epsilon7 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt2
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt2)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt2 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt2
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt2 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
3797a79bc53bdc24e26345d40431a31f
  epsilon7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
84019932d07d39a7669bfc4efb3db790
  epsilon_F :: Index.Index 0 0 0 0 0 0 0 4 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLLS(S)),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 0 4) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Index.UnsafemkInd ww10 ->
                 case BasicTensors.$wepsilon_F ww10 of ww11 { (#,#) ww12 ww13 ->
                 GHC.Real.:% @ GHC.Integer.Type.Integer ww12 ww13 } } }) -}
f2ace2f4551b3fed93a5720ce3ca47ff
  eta :: Tensor.Tensor 0 0 0 0 0 0 0 2 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.eta} True True} BasicTensors.eta2
                                                             BasicTensors.eta1
                                                             BasicTensors.eta_F) -}
798e9e908c433acb8fbfd1a56d3b4f8c
  eta1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon2)) -}
41f98023acd6ba8653248c2999bb386c
  eta2 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 0 2 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 0 2 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.eta} False True} Tensor.mkTensorfromF
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 0
                                                              @ 2
                                                              @ GHC.Real.Rational
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros3
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                              BasicTensors.$smkTensorfromFZeros1
                                                                `cast`
                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                        <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
4f5a16ad1cef86319230c5f43722beec
  etaAbs ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 0 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$wetaAbs w of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
ad39064cb0686fdfe0fd3eb88b87b093
  etaAbs1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4)) -}
d0a273998e4a20033762a4350465c31b
  etaAbs2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.delta_2)) -}
8aea9b5a43763ddaa3d22dcdef7d2148
  eta_F :: Index.Index 0 0 0 0 0 0 0 2 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLLS(S)),1*U(A,A,A,A,A,A,A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 0 2) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Index.UnsafemkInd ww10 ->
                 {__scc {main:BasicTensors.eta_F} True False} case {__scc {main:BasicTensors.eta_F} False True} {__scc {main:BasicTensors.eta_F.x} True True} let {
                                                                                                                                                                a :: Index.Lind_3
                                                                                                                                                                = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                  ww10 of wild1 {
                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                             -> Data.Maybe.fromJust1
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                             GHC.Base.Just x
                                                                                                                                                                                                             -> x }
                                                                                                                                                              } in
                                                                                                                                                              {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                        Index.L0_3
                                                                                                                                                                                                        -> BasicTensors.delta_4
                                                                                                                                                                                                        Index.L1_3
                                                                                                                                                                                                        -> BasicTensors.delta_2
                                                                                                                                                                                                        Index.L2_3
                                                                                                                                                                                                        -> BasicTensors.epsilon2
                                                                                                                                                                                                        Index.L3_3
                                                                                                                                                                                                        -> BasicTensors.epsilon1 } of wild { GHC.Types.I# x ->
                                                              case {__scc {main:BasicTensors.eta_F} False True} {__scc {main:BasicTensors.eta_F.y} True True} let {
                                                                                                                                                                a :: Index.Lind_3
                                                                                                                                                                = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                  ww10 of wild1 {
                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                             -> Data.Maybe.fromJust1
                                                                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                                                             GHC.Base.Just x1
                                                                                                                                                                                                             -> x1 }
                                                                                                                                                              } in
                                                                                                                                                              {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                        Index.L0_3
                                                                                                                                                                                                        -> BasicTensors.delta_4
                                                                                                                                                                                                        Index.L1_3
                                                                                                                                                                                                        -> BasicTensors.delta_2
                                                                                                                                                                                                        Index.L2_3
                                                                                                                                                                                                        -> BasicTensors.epsilon2
                                                                                                                                                                                                        Index.L3_3
                                                                                                                                                                                                        -> BasicTensors.epsilon1 } of wild1 { GHC.Types.I# y ->
                                                              case {__scc {main:BasicTensors.eta_F} False True} GHC.Prim.==#
                                                                                                                  x
                                                                                                                  y of lwild {
                                                                DEFAULT
                                                                -> case {__scc {main:BasicTensors.eta_F} False True} GHC.Prim.==#
                                                                                                                       x
                                                                                                                       y of lwild1 {
                                                                     DEFAULT
                                                                     -> GHC.Real.:%
                                                                          @ GHC.Integer.Type.Integer
                                                                          BasicTensors.$smkTensorfromFZeros4
                                                                          GHC.Real.$fEnumRatio1
                                                                     1#
                                                                     -> GHC.Real.:%
                                                                          @ GHC.Integer.Type.Integer
                                                                          BasicTensors.eta_dt
                                                                          GHC.Real.$fEnumRatio1 }
                                                                1#
                                                                -> case x of wild2 {
                                                                     DEFAULT
                                                                     -> case {__scc {main:BasicTensors.eta_F} False True} GHC.Prim.==#
                                                                                                                            wild2
                                                                                                                            y of lwild1 {
                                                                          DEFAULT
                                                                          -> GHC.Real.:%
                                                                               @ GHC.Integer.Type.Integer
                                                                               BasicTensors.$smkTensorfromFZeros4
                                                                               GHC.Real.$fEnumRatio1
                                                                          1#
                                                                          -> GHC.Real.:%
                                                                               @ GHC.Integer.Type.Integer
                                                                               BasicTensors.eta_dt
                                                                               GHC.Real.$fEnumRatio1 }
                                                                     0#
                                                                     -> GHC.Real.:%
                                                                          @ GHC.Integer.Type.Integer
                                                                          BasicTensors.$smkTensorfromFZeros7
                                                                          GHC.Real.$fEnumRatio1 } } } } } }) -}
f679a364d95cce64ffefdacaa8b7d01d
  eta_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
88f143656f05841ce5f6bc5818ab7cee
  flatArea ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 0 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$wflatArea w of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
4635acf4c43ae0988e938ae9a09db7bf
  flatArea1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.epsilon2, BasicTensors.epsilon2)) -}
36f2afde67eddba5f59b7d2bdc80678f
  flatArea2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.epsilon1, BasicTensors.epsilon1)) -}
05a5c55452e90eb335548bd25533a2e6
  flatAreaMap ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.IntMap.Internal.IntMap GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Uinds_3 4) Index.Lind_20) ->
                 {__scc {main:BasicTensors.flatAreaMap} True True} let {
                                                                     flatAreaT :: Tensor.Tensor
                                                                                    0
                                                                                    1
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    GHC.Real.Rational
                                                                     = {__scc {main:BasicTensors.flatAreaMap.flatAreaT} True True} BasicTensors.flatArea
                                                                                                                                     map1
                                                                   } in
                                                                   Data.IntMap.Strict.fromList1
                                                                     @ GHC.Types.Int
                                                                     (Data.IntMap.Internal.Nil
                                                                        @ GHC.Types.Int)
                                                                     (BasicTensors.flatAreaMap_go1
                                                                        1#
                                                                        ({__scc {main:BasicTensors.flatAreaMap.valList} True True} GHC.Base.map
                                                                                                                                     @ (Index.Uinds_20
                                                                                                                                          0,
                                                                                                                                        Index.Linds_20
                                                                                                                                          1,
                                                                                                                                        Index.Uinds_19
                                                                                                                                          0,
                                                                                                                                        Index.Linds_19
                                                                                                                                          0,
                                                                                                                                        Index.Uinds_9
                                                                                                                                          0,
                                                                                                                                        Index.Linds_9
                                                                                                                                          0,
                                                                                                                                        Index.Uinds_3
                                                                                                                                          0,
                                                                                                                                        Index.Linds_3
                                                                                                                                          0)
                                                                                                                                     @ GHC.Types.Int
                                                                                                                                     (\ (x :: (Index.Uinds_20
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_20
                                                                                                                                                 1,
                                                                                                                                               Index.Uinds_19
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_19
                                                                                                                                                 0,
                                                                                                                                               Index.Uinds_9
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_9
                                                                                                                                                 0,
                                                                                                                                               Index.Uinds_3
                                                                                                                                                 0,
                                                                                                                                               Index.Linds_3
                                                                                                                                                 0)) ->
                                                                                                                                      {__scc {main:Tensor.getVal} True False} case flatAreaT of wild { Tensor.Tensor map2 ->
                                                                                                                                                                              case {__scc {main:Tensor.getVal} False True} BasicTensors.$smember1
                                                                                                                                                                                                                             @ (GHC.Real.Ratio
                                                                                                                                                                                                                                  GHC.Integer.Type.Integer)
                                                                                                                                                                                                                             x
                                                                                                                                                                                                                             map2 of wild1 {
                                                                                                                                                                                GHC.Types.False
                                                                                                                                                                                -> BasicTensors.flatAreaMap1
                                                                                                                                                                                     Tensor.cyclicSymTensor1
                                                                                                                                                                                     GHC.Real.$fEnumRatio1
                                                                                                                                                                                GHC.Types.True
                                                                                                                                                                                -> case {__scc {main:Tensor.getVal} False True} BasicTensors.$sfind9
                                                                                                                                                                                                                                  @ (GHC.Real.Ratio
                                                                                                                                                                                                                                       GHC.Integer.Type.Integer)
                                                                                                                                                                                                                                  x
                                                                                                                                                                                                                                  map2 of wild2 { GHC.Real.:% x1 y ->
                                                                                                                                                                                   BasicTensors.flatAreaMap1
                                                                                                                                                                                     x1
                                                                                                                                                                                     y } } })
                                                                                                                                     BasicTensors.flatAreaMap_inds))) -}
11bdd885c2e1e5bf06dd669e08df4fc4
  flatAreaMap1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><S,U>m,
     Unfolding: (\ (x1 :: GHC.Integer.Type.Integer)[OneShot]
                   (y :: GHC.Integer.Type.Integer)[OneShot] ->
                 case GHC.Integer.Type.eqInteger#
                        y
                        BasicTensors.$smkTensorfromFZeros4 of wild1 {
                   DEFAULT
                   -> case GHC.Integer.Type.quotRemInteger
                             x1
                             y of ds { (#,#) ipv ipv1 ->
                      case GHC.Integer.Type.integerToInt ipv of wild { DEFAULT ->
                      GHC.Types.I# wild } }
                   1# -> case GHC.Real.divZeroError ret_ty GHC.Types.Int of {} }) -}
98f1bcfbea8092dae7e12d663374373e
  flatAreaMap_go ::
    GHC.Prim.Int#
    -> [(Index.Uinds_20 0, Index.Linds_20 1, Index.Uinds_19 0,
         Index.Linds_19 0, Index.Uinds_9 0, Index.Linds_9 0,
         Index.Uinds_3 0, Index.Linds_3 0)]
  {- Arity: 1, Strictness: <L,U>m2 -}
cb809338bde5ffd2fffffab78113da45
  flatAreaMap_go1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int] -> [(Data.IntSet.Internal.Key, GHC.Types.Int)]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
b4974920396e1f114125b6d56bb25839
  flatAreaMap_inds :: [Index.Index 0 1 0 0 0 0 0 0]
  {- Unfolding: ({__scc {main:BasicTensors.flatAreaMap} False True} {__scc {main:BasicTensors.flatAreaMap.inds} True True} BasicTensors.flatAreaMap_go
                                                                                                                             0#) -}
4685098ed31e2f71418f70532bb1e3e7
  flatAreaST :: Tensor.Tensor 0 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.flatAreaST} True True} {__scc {main:BasicTensors.flatAreaST.etaProd1} True False} case BasicTensors.flatAreaST5
                                                                                                                                    `cast`
                                                                                                                                  (Tensor.Tensor
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                     (AddDef (<2>_N,
                                                                                                                                              <2>_N))
                                                                                                                                     <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                             case {__scc {main:BasicTensors.flatAreaST.etaProd1} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 0
                                                                                                                                                                                               @ 4
                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                               BasicTensors.flatAreaST4
                                                                                                                                                                                               BasicTensors.flatAreaST3
                                                                                                                                                                                               ww1 of ww2 { Unit# ww3 ->
                                                                                                                             {__scc {main:BasicTensors.flatAreaST.etaProd2} True False} case {__scc {main:BasicTensors.flatAreaST.etaProd2} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 4
                                                                                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST4
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST2
                                                                                                                                                                                                                                                          ww1 of ww4 { Unit# ww5 ->
                                                                                                                                                                                        case {__scc {main:BasicTensors.flatAreaST.etaProd2} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 4
                                                                                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST4
                                                                                                                                                                                                                                                          BasicTensors.flatAreaST1
                                                                                                                                                                                                                                                          ww5 of ww6 { Unit# ww7 ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 4
                                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                                         ({__scc {main:Tensor.fmap} False True} BasicTensors.flatAreaST_go8
                                                                                                                                                                                                                                                                                                                                                                                                                  ww7) of ww8 { Tensor.Tensor ww9 ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                                                                                                     @ 4
                                                                                                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                     ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        0
                                                                                                                                                                                                                                                                                                                                        4)
                                                                                                                                                                                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                   (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                                                                                                                                                      @ 4)
                                                                                                                                                                                                                                                                                                                                   BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                                                                                                                                   ww3
                                                                                                                                                                                                                                                                                                                                   ww9) of ww10 { Tensor.Tensor ww11 ->
                                                                                                                                                                                        case BasicTensors.epsilon of ww12 { Tensor.Tensor ww13 ->
                                                                                                                                                                                        case {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 0
                                                                                                                                                                                                                                                                                                                                                                         @ 4
                                                                                                                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                                                                         ({__scc {main:Tensor.fmap} False True} BasicTensors.flatAreaST_go8
                                                                                                                                                                                                                                                                                                                                                                                                                  ww13) of ww14 { Tensor.Tensor ww15 ->
                                                                                                                                                                                        {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                                @ 4
                                                                                                                                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                                                                                                                   4)
                                                                                                                                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                                 @ 4)
                                                                                                                                                                                                                                                                                                                              BasicTensors.flatAreaST_lvl19
                                                                                                                                                                                                                                                                                                                              ww11
                                                                                                                                                                                                                                                                                                                              ww15) } } } } } } } }) -}
a7842ec4cccb7209ee9cb1214402cada
  flatAreaST1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.epsilon1)) -}
683f6a71c026c1a20ad59af772193a5e
  flatAreaST2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.epsilon2, BasicTensors.epsilon1)) -}
fee6ec278c59437ea8d5c63e2dc561ef
  flatAreaST3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.epsilon2)) -}
9a63c419bef3e9a3c662842bb67dc66d
  flatAreaST4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
2da96f6e707f93434e844f2158eb22fc
  flatAreaST5 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 2)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.flatAreaST} False True} {__scc {main:BasicTensors.flatAreaST.etaProd} True True} case BasicTensors.eta of ww { Tensor.Tensor ww1 ->
                                                                                                                            case Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww1 of ww4 { Unit# ww5 ->
                                                                                                                            Tensor.Tensor
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (0
                                                                                                                                 GHC.TypeNats.+ 0)
                                                                                                                              @ (2
                                                                                                                                 GHC.TypeNats.+ 2)
                                                                                                                              @ GHC.Real.Rational
                                                                                                                              ww5 } }) -}
5c4fcbb55c40fb57428a98f0a529941f
  flatAreaST_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 0 0 0 4) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 0 0 0 4) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
5fc5b557d63fd7de20c4b5a41262a95a
  flatAreaST_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
068502db5feb6a9b80dde94e3ee55a07
  interArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$winterArea w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
fc731e4b66564fbc84b4de01fac6f7e7
  interArea_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
bf814bb1ddc2927febc9b455788da211
  interAreanoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$winterAreanoFactor w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
3f0a495ff09fa334b814d16d9d4b72c7
  interEqn1_1 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interEqn1_2} False True} {__scc {main:BasicTensors.interEqn1_2.int2} True True} case BasicTensors.delta_3 of ww { Tensor.Tensor ww1 ->
                                                                                                                           case Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww1
                                                                                                                                  ww1 of ww4 { Unit# ww5 ->
                                                                                                                           case Tensor.$wtensorTranspose
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 2
                                                                                                                                  @ 2
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  BasicTensors.flatAreaST4
                                                                                                                                  BasicTensors.interEqn1_5
                                                                                                                                  ww5
                                                                                                                                    `cast`
                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                     ((,,,,,,,)
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (AddDef (<1>_N,
                                                                                                                                                    <1>_N))
                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (AddDef (<1>_N,
                                                                                                                                                    <1>_N))
                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                     <GHC.Real.Rational>_R)_R of ww2 { Unit# ww3 ->
                                                                                                                           case BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                                                                                                                           case Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 2
                                                                                                                                  @ 2
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww3
                                                                                                                                  ww8 of ww9 { Unit# ww10 ->
                                                                                                                           Tensor.Tensor
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 1)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 1)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (0
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (2
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ (2
                                                                                                                                GHC.TypeNats.+ 0)
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             ww10 } } } } }) -}
c92cf830c592d74911b3103d773bcb06
  interEqn1_2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 1 1 0 0 0 0 2 2 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case BasicTensors.$winterEqn1_2 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
786e8b115802e9cb46a6952ccc4772fc
  interEqn1_2_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
5671d20c260b1f499f7d26c836568368
  interEqn1_3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$winterEqn1_3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
c418c5da8c3d23ae87facb7b1c9a0fc1
  interEqn1_5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2)) -}
7100f000ae48c4584b0350212dbfd247
  interF_IArea ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Index.Index 1 0 0 0 0 0 0 4 -> GHC.Real.Rational
  {- Arity: 2,
     Strictness: <L,1*U><S(LLLLLLLS(S)),1*U(1*U(U),A,A,A,A,A,A,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Index.Index 1 0 0 0 0 0 0 4) ->
                 case w1 of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Index.UnsafemkInd ww10 ->
                 BasicTensors.$winterF_IArea w ww1 ww10 } }) -}
ea9ef4358c3456c8596fd78d86894169
  interF_IArea1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   BasicTensors.$smkTensorfromFZeros4
                   GHC.Real.$fEnumRatio1) -}
fa988cafd8c5a2261b75c58395a4407a
  interI_1 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   BasicTensors.$smkTensorfromFZeros7
                   GHC.Real.$fEnumRatio1) -}
1cc4e11cb2f489f60da1e2a046efdfb6
  interI_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
115c2006d3bc301071bc7887a27d1fb1
  interI_3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Tensor.Tensor 0 0 1 0 0 0 0 3 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Linds_3 3) Index.Uind_19) ->
                 {__scc {main:BasicTensors.interI_3} True True} BasicTensors.interI_6
                                                                  BasicTensors.interI_5
                                                                  (\ (ds :: (Index.Uinds_20 0,
                                                                             Index.Linds_20 0,
                                                                             Index.Uinds_19 1,
                                                                             Index.Linds_19 0,
                                                                             Index.Uinds_9 0,
                                                                             Index.Linds_9 0,
                                                                             Index.Uinds_3 0,
                                                                             Index.Linds_3 3)) ->
                                                                   {__scc {main:BasicTensors.interF_I3} True True} case ds of wild { (,,,,,,,) ds1 ds2 x ds3 ds4 ds5 ds6 y ->
                                                                                                                   {__scc {main:Index.==} True False} case {__scc {main:BasicTensors.interF_I3.indI} True True} {__scc {main:Index.sortInd} True False} y of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                      case {__scc {main:BasicTensors.interF_I3.indI} False True} BasicTensors.$wpoly_go2
                                                                                                                                                                                                                   @ Index.Uind_19
                                                                                                                                                                                                                   ({__scc {main:Index.sortInd} False True} Data.Sequence.Internal.Sorting.sortBy
                                                                                                                                                                                                                                                              @ Index.Lind_3
                                                                                                                                                                                                                                                              Index.$fOrdLind_3_$ccompare
                                                                                                                                                                                                                                                              s)
                                                                                                                                                                                                                   map1 of x1 { DEFAULT ->
                                                                                                                                                      case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                @ Index.Uind_19
                                                                                                                                                                                                x1 of a# { DEFAULT ->
                                                                                                                                                      case {__scc {main:BasicTensors.interF_I3.xVal} True True} {__scc {main:Index.getValInd} True False} x of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                      case {__scc {main:BasicTensors.interF_I3.xVal} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                             @ Index.Uind_19
                                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                                             s1 of wild3 {
                                                                                                                                                        GHC.Base.Nothing
                                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                                           ret_ty GHC.Real.Rational
                                                                                                                                                           of {}
                                                                                                                                                        GHC.Base.Just x2
                                                                                                                                                        -> case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                     @ Index.Uind_19
                                                                                                                                                                                                     x2 of b# { DEFAULT ->
                                                                                                                                                           case {__scc {main:Index.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                     @ GHC.Types.Bool
                                                                                                                                                                                                     (GHC.Prim.==#
                                                                                                                                                                                                        a#
                                                                                                                                                                                                        b#) of wild4 {
                                                                                                                                                             GHC.Types.False
                                                                                                                                                             -> BasicTensors.interF_IArea1
                                                                                                                                                             GHC.Types.True
                                                                                                                                                             -> BasicTensors.interI_1 } } } } } } } })) -}
5da08ce4b4adeeb141bd7a84b0f98a30
  interI_5 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon1)) -}
f6e39cf2f843f2e86a968f1d94f966db
  interI_6 ::
    Tensor.Rank
    -> (Index.Index 0 0 1 0 0 0 0 3 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 1 0 0 0 0 3 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interI_3} False True} Tensor.mkTensorfromF
                                                                   @ 0
                                                                   @ 0
                                                                   @ 1
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 0
                                                                   @ 3
                                                                   @ GHC.Real.Rational
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros6
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$smkTensorfromFZeros3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   BasicTensors.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                   GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                   GHC.Real.$fOrdRatio_$s$fEqRatio) -}
52c33ccf81564a656f96a6d5c2f1224a
  interI_Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Linds_3 4) Index.Uind_20) ->
                 {__scc {main:BasicTensors.interI_Area} True True} BasicTensors.interI_Area2
                                                                     BasicTensors.interI_Area1
                                                                     (BasicTensors.interF_IArea
                                                                        map1)) -}
b5724ccf9bf4c84212ea55daee1e1d80
  interI_Area1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon4)) -}
fb9e59157a50ec664eb72a94435bf04c
  interI_Area2 ::
    Tensor.Rank
    -> (Index.Index 1 0 0 0 0 0 0 4 -> GHC.Real.Rational)
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interI_Area} False True} Tensor.mkTensorfromF
                                                                      @ 1
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 0
                                                                      @ 4
                                                                      @ GHC.Real.Rational
                                                                      BasicTensors.$smkTensorfromFZeros6
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      BasicTensors.$smkTensorfromFZeros3
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$smkTensorfromFZeros3
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$smkTensorfromFZeros3
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$smkTensorfromFZeros3
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$smkTensorfromFZeros3
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.$smkTensorfromFZeros3
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                      BasicTensors.epsilon6
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                                                                      GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                      GHC.Real.$fOrdRatio_$s$fEqRatio) -}
8db0b844b970f4e31b4fc75bf68aeb0f
  interJ_2 ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 2 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
1a8a3d575996f7887c26c652334778f7
  interJ_2noFactor ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 0 1 2 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
7dedd2a503fcde801be6d525db016f16
  interJ_3 ::
    Data.Map.Internal.Map (Index.Uinds_3 3) Index.Lind_19
    -> Tensor.Tensor 0 0 0 1 0 0 3 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
fbadc3c9a32179c7d75c11f3e75c3e1d
  interJ_Area ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 4 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
f361114dbf0dffaec807e38dd88b7cfe
  interJ_AreanoFactor ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 4 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (Index.Uinds_3 4) Index.Lind_20) ->
                 {__scc {main:BasicTensors.interJ_AreanoFactor} True True} BasicTensors.interJ_AreanoFactor2
                                                                             BasicTensors.interJ_AreanoFactor1
                                                                             (\ (ds :: (Index.Uinds_20
                                                                                          0,
                                                                                        Index.Linds_20
                                                                                          1,
                                                                                        Index.Uinds_19
                                                                                          0,
                                                                                        Index.Linds_19
                                                                                          0,
                                                                                        Index.Uinds_9
                                                                                          0,
                                                                                        Index.Linds_9
                                                                                          0,
                                                                                        Index.Uinds_3
                                                                                          4,
                                                                                        Index.Linds_3
                                                                                          0)) ->
                                                                              {__scc {main:BasicTensors.interF_JAreanoFactor} True True} case ds of wild { (,,,,,,,) ds1 x ds2 ds3 ds4 ds5 y ds6 ->
                                                                                                                                         case y of ww { Index.UnsafemkInd ww1 ->
                                                                                                                                         case BasicTensors.$w$sisZeroArea1
                                                                                                                                                ww1 of wild1 {
                                                                                                                                           GHC.Types.False
                                                                                                                                           -> case {__scc {main:BasicTensors.interF_JAreanoFactor.sortY} True True} BasicTensors.$w$scanonicalizeArea
                                                                                                                                                                                                                      ww of ww2 { (#,#) ww3 ww4 ->
                                                                                                                                              {__scc {main:Index.==} True False} {__scc {main:BasicTensors.interF_JAreanoFactor.indI} True False} case ww3 of ww5 { Index.UnsafemkInd ww6 ->
                                                                                                                                                                                                                                                  case {__scc {main:BasicTensors.interF_JAreanoFactor.indI} False True} BasicTensors.$wpoly_go5
                                                                                                                                                                                                                                                                                                                          @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                          ww6
                                                                                                                                                                                                                                                                                                                          map1 of x1 { DEFAULT ->
                                                                                                                                                                                                                                                  case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                                            x1 of a# { DEFAULT ->
                                                                                                                                                                                                                                                  case {__scc {main:BasicTensors.interF_JAreanoFactor.xVal} True True} {__scc {main:Index.getValInd} True False} x of wild2 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                  case {__scc {main:BasicTensors.interF_JAreanoFactor.xVal} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                                    @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                                    0#
                                                                                                                                                                                                                                                                                                                                                                    s of wild3 {
                                                                                                                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                       ret_ty GHC.Real.Rational
                                                                                                                                                                                                                                                       of {}
                                                                                                                                                                                                                                                    GHC.Base.Just x2
                                                                                                                                                                                                                                                    -> case {__scc {main:Index.==} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                 @ Index.Lind_20
                                                                                                                                                                                                                                                                                                 x2 of b# { DEFAULT ->
                                                                                                                                                                                                                                                       case {__scc {main:Index.==} False True} GHC.Prim.tagToEnum#
                                                                                                                                                                                                                                                                                                 @ GHC.Types.Bool
                                                                                                                                                                                                                                                                                                 (GHC.Prim.==#
                                                                                                                                                                                                                                                                                                    a#
                                                                                                                                                                                                                                                                                                    b#) of wild4 {
                                                                                                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                                                                                                         -> BasicTensors.interF_IArea1
                                                                                                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                                                                                                         -> ww4 } } } } } } } }
                                                                                                                                           GHC.Types.True
                                                                                                                                           -> BasicTensors.interF_IArea1 } } })) -}
ab867abfacb653d04b9b743c148d3c51
  interJ_AreanoFactor1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.epsilon4,
                  BasicTensors.delta_4)) -}
147fada282f5703404b4543e2198aa94
  interJ_AreanoFactor2 ::
    Tensor.Rank
    -> (Index.Index 0 1 0 0 0 0 4 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 1 0 0 0 0 4 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.interJ_AreanoFactor} False True} Tensor.mkTensorfromF
                                                                              @ 0
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 0
                                                                              @ 4
                                                                              @ 0
                                                                              @ GHC.Real.Rational
                                                                              BasicTensors.$smkTensorfromFZeros3
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$smkTensorfromFZeros6
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                              BasicTensors.$smkTensorfromFZeros3
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$smkTensorfromFZeros3
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$smkTensorfromFZeros3
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.$smkTensorfromFZeros3
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              BasicTensors.epsilon6
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                                                                              BasicTensors.$smkTensorfromFZeros3
                                                                                `cast`
                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
53b357e50bf8477d50d697f15bb13184
  interMetric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$winterMetric w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
30716508c33abeae92d42c44039a98eb
  interMetric_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 0 0 0 1 1 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
dbffc5c0e0dc39af7a1f24e9614d4bfd
  interMetricnoFactor ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 0 0 0 1 1 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case BasicTensors.$winterMetricnoFactor w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
a329957d4f2e507cf294c76791a875aa
  invEta :: Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.invEta} True True} BasicTensors.invEta2
                                                                BasicTensors.invEta1
                                                                BasicTensors.invEta_F) -}
0357f9865e3de660f49a15e42a5d8324
  invEta1 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.epsilon2,
                  BasicTensors.delta_4)) -}
d0a23b9b5284a57c1ab3efcd13d82eea
  invEta2 ::
    Tensor.Rank
    -> (Index.Index 0 0 0 0 0 0 2 0 -> GHC.Real.Rational)
    -> Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:BasicTensors.invEta} False True} Tensor.mkTensorfromF
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 0
                                                                 @ 2
                                                                 @ 0
                                                                 @ GHC.Real.Rational
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 BasicTensors.$smkTensorfromFZeros1
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                 BasicTensors.$smkTensorfromFZeros3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                 GHC.Real.$fOrdRatio_$s$fEqRatio) -}
1af0a9ea2036f4aeb9b52c2c4537caec
  invEtaAbs ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case BasicTensors.$winvEtaAbs w of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
742aa98c669531c6950b06c635e7002e
  invEta_F :: Index.Index 0 0 0 0 0 0 2 0 -> GHC.Real.Rational
  {- Arity: 1,
     Strictness: <S(LLLLLLS(S)L),1*U(A,A,A,A,A,A,1*U(U),A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 2 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww7 of ww9 { Index.UnsafemkInd ww10 ->
                 {__scc {main:BasicTensors.invEta_F} True False} case {__scc {main:BasicTensors.invEta_F} False True} {__scc {main:BasicTensors.invEta_F.x} True True} let {
                                                                                                                                                                         a :: Index.Uind_3
                                                                                                                                                                         = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                           ww10 of wild1 {
                                                                                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                                                                                      -> Data.Maybe.fromJust1
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                      GHC.Base.Just x
                                                                                                                                                                                                                      -> x }
                                                                                                                                                                       } in
                                                                                                                                                                       {__scc {main:Index.fromEnum} True True} case a of wild {
                                                                                                                                                                                                                 Index.U0_3
                                                                                                                                                                                                                 -> BasicTensors.delta_4
                                                                                                                                                                                                                 Index.U1_3
                                                                                                                                                                                                                 -> BasicTensors.delta_2
                                                                                                                                                                                                                 Index.U2_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon2
                                                                                                                                                                                                                 Index.U3_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon1 } of wild { GHC.Types.I# x ->
                                                                 case {__scc {main:BasicTensors.invEta_F} False True} {__scc {main:BasicTensors.invEta_F.y} True True} let {
                                                                                                                                                                         a :: Index.Uind_3
                                                                                                                                                                         = {__scc {main:Index.getValInd} True True} case Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                           1#
                                                                                                                                                                                                                           ww10 of wild1 {
                                                                                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                                                                                      -> Data.Maybe.fromJust1
                                                                                                                                                                                                                           @ Index.Uind_3
                                                                                                                                                                                                                      GHC.Base.Just x1
                                                                                                                                                                                                                      -> x1 }
                                                                                                                                                                       } in
                                                                                                                                                                       {__scc {main:Index.fromEnum} True True} case a of wild1 {
                                                                                                                                                                                                                 Index.U0_3
                                                                                                                                                                                                                 -> BasicTensors.delta_4
                                                                                                                                                                                                                 Index.U1_3
                                                                                                                                                                                                                 -> BasicTensors.delta_2
                                                                                                                                                                                                                 Index.U2_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon2
                                                                                                                                                                                                                 Index.U3_3
                                                                                                                                                                                                                 -> BasicTensors.epsilon1 } of wild1 { GHC.Types.I# y ->
                                                                 case {__scc {main:BasicTensors.invEta_F} False True} GHC.Prim.==#
                                                                                                                        x
                                                                                                                        y of lwild {
                                                                   DEFAULT
                                                                   -> case {__scc {main:BasicTensors.invEta_F} False True} GHC.Prim.==#
                                                                                                                             x
                                                                                                                             y of lwild1 {
                                                                        DEFAULT
                                                                        -> GHC.Real.:%
                                                                             @ GHC.Integer.Type.Integer
                                                                             BasicTensors.$smkTensorfromFZeros4
                                                                             GHC.Real.$fEnumRatio1
                                                                        1#
                                                                        -> GHC.Real.:%
                                                                             @ GHC.Integer.Type.Integer
                                                                             BasicTensors.eta_dt
                                                                             GHC.Real.$fEnumRatio1 }
                                                                   1#
                                                                   -> case x of wild2 {
                                                                        DEFAULT
                                                                        -> case {__scc {main:BasicTensors.invEta_F} False True} GHC.Prim.==#
                                                                                                                                  wild2
                                                                                                                                  y of lwild1 {
                                                                             DEFAULT
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.$smkTensorfromFZeros4
                                                                                  GHC.Real.$fEnumRatio1
                                                                             1#
                                                                             -> GHC.Real.:%
                                                                                  @ GHC.Integer.Type.Integer
                                                                                  BasicTensors.eta_dt
                                                                                  GHC.Real.$fEnumRatio1 }
                                                                        0#
                                                                        -> GHC.Real.:%
                                                                             @ GHC.Integer.Type.Integer
                                                                             BasicTensors.$smkTensorfromFZeros7
                                                                             GHC.Real.$fEnumRatio1 } } } } } }) -}
6b0452eacc34f798fed95aded22005bf
  isZeroArea ::
    (GHC.Classes.Eq a, GHC.Classes.Ord a, GHC.Enum.Enum a) =>
    Index.Ind 4 a -> GHC.Types.Bool
  {- Arity: 4,
     Strictness: <L,A><S(S(C(C(S))L)LLLLLLL),1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)><L,A><L,U(U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: GHC.Classes.Ord a)
                   (w2 :: GHC.Enum.Enum a)
                   (w3 :: Index.Ind 4 a) ->
                 BasicTensors.$wisZeroArea @ a w1 w3) -}
308422e5d9a6daa51a41317431080dcf
  ivar1 ::
    Tensor.Tensor 0 1 0 0 0 0 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar1} True True} {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                                                                   @ 0
                                                                                                                   @ 1
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ (Ivar.Ivar
                                                                                                                        GHC.Real.Rational)
                                                                                                                   BasicTensors.ivar4) -}
f78b5a617ee868081e85d26e011e101a
  ivar10 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Ivar.constrAllIvars1
                   GHC.Real.$fEnumRatio1) -}
3e526ca57e2c79e01085e2e7bf59260f
  ivar11 :: GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Ivar.addIvar1
                   GHC.Real.$fEnumRatio1) -}
c728838b928afc9e3886c067dbf1a3d0
  ivar12 ::
    Data.Map.Internal.Map
      (Index.Index 0 1 0 0 0 1 0 0) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar3} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} BasicTensors.$sfromList2
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    (GHC.List.zip
                                                                                                                       @ (Index.Uinds_20
                                                                                                                            0,
                                                                                                                          Index.Linds_20
                                                                                                                            1,
                                                                                                                          Index.Uinds_19
                                                                                                                            0,
                                                                                                                          Index.Linds_19
                                                                                                                            0,
                                                                                                                          Index.Uinds_9
                                                                                                                            0,
                                                                                                                          Index.Linds_9
                                                                                                                            1,
                                                                                                                          Index.Uinds_3
                                                                                                                            0,
                                                                                                                          Index.Linds_3
                                                                                                                            0)
                                                                                                                       @ (Ivar.Ivar
                                                                                                                            GHC.Real.Rational)
                                                                                                                       BasicTensors.ivar3_indList
                                                                                                                       ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True False} BasicTensors.ivar13))) -}
2033f8a79b368626d9a23e6bd02fef48
  ivar13 :: [Ivar.Ivar GHC.Real.Rational]
  {- Unfolding: ({__scc {main:BasicTensors.ivar3} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.valueList} False True} GHC.Base.map
                                                                                                                                                                                  @ (Index.Uinds_20
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_20
                                                                                                                                                                                       1,
                                                                                                                                                                                     Index.Uinds_19
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_19
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Uinds_9
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_9
                                                                                                                                                                                       1,
                                                                                                                                                                                     Index.Uinds_3
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_3
                                                                                                                                                                                       0)
                                                                                                                                                                                  @ (Ivar.Ivar
                                                                                                                                                                                       GHC.Real.Rational)
                                                                                                                                                                                  BasicTensors.ivar3F
                                                                                                                                                                                  BasicTensors.ivar3_indList) -}
62dc5ddbb35ae60e1768de8045cd6d40
  ivar14 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
8496784cb404c013d87b7b7cfb07c672
  ivar1F ::
    Index.Index 0 1 0 0 0 0 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 {__scc {main:BasicTensors.ivar1F} True False} {__scc {main:BasicTensors.ivar1F} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                          (GHC.Real.:%
                                                                                                                                                             @ GHC.Integer.Type.Integer
                                                                                                                                                             Ivar.addIvar1
                                                                                                                                                             GHC.Real.$fEnumRatio1)
                                                                                                                                                          ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww2 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                              case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                                                                                               s of wild1 {
                                                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                   ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                             GHC.Real.Rational)
                                                                                                                                                                                                                                                   of {}
                                                                                                                                                                                                                                                GHC.Base.Just x
                                                                                                                                                                                                                                                -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                   @ Index.Lind_20
                                                                                                                                                                                                                                                                                                   x of a# { DEFAULT ->
                                                                                                                                                                                                                                                   Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                        a#)
                                                                                                                                                                                                                                                     (GHC.Real.:%
                                                                                                                                                                                                                                                        @ GHC.Integer.Type.Integer
                                                                                                                                                                                                                                                        Ivar.constrAllIvars1
                                                                                                                                                                                                                                                        GHC.Real.$fEnumRatio1) } } }) }) -}
82311f54baa0ec439207d9ddf9277df6
  ivar1FM ::
    Index.Index 0 0 0 0 0 1 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 {__scc {main:BasicTensors.ivar1FM} True False} {__scc {main:BasicTensors.ivar1FM} False True} {__scc {main:Ivar.number2Ivar} True False} Ivar.Ivar
                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                            (GHC.Real.:%
                                                                                                                                                               @ GHC.Integer.Type.Integer
                                                                                                                                                               Ivar.addIvar1
                                                                                                                                                               GHC.Real.$fEnumRatio1)
                                                                                                                                                            ({__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case ww6 of wild { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                 @ Index.Lind_9
                                                                                                                                                                                                                                                                                                 0#
                                                                                                                                                                                                                                                                                                 s of wild1 {
                                                                                                                                                                                                                                                  GHC.Base.Nothing
                                                                                                                                                                                                                                                  -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                     ret_ty (Data.IntMap.Internal.IntMap
                                                                                                                                                                                                                                                               GHC.Real.Rational)
                                                                                                                                                                                                                                                     of {}
                                                                                                                                                                                                                                                  GHC.Base.Just x
                                                                                                                                                                                                                                                  -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                     @ Index.Lind_9
                                                                                                                                                                                                                                                                                                     x of a# { DEFAULT ->
                                                                                                                                                                                                                                                     Data.IntMap.Internal.Tip
                                                                                                                                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                          a#)
                                                                                                                                                                                                                                                       (GHC.Real.:%
                                                                                                                                                                                                                                                          @ GHC.Integer.Type.Integer
                                                                                                                                                                                                                                                          Ivar.constrAllIvars1
                                                                                                                                                                                                                                                          GHC.Real.$fEnumRatio1) } } }) }) -}
387bd0343551bb07c64365b31794c789
  ivar1M ::
    Tensor.Tensor 0 0 0 0 0 1 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar1M} True True} {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    BasicTensors.ivar1M1) -}
035e78d24a427799ee50fdd32ad6d0be
  ivar1M1 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 0 1 0 0) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar1M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} BasicTensors.$sfromList3
                                                                                                                     @ (Ivar.Ivar
                                                                                                                          GHC.Real.Rational)
                                                                                                                     (GHC.List.zip
                                                                                                                        @ (Index.Uinds_20
                                                                                                                             0,
                                                                                                                           Index.Linds_20
                                                                                                                             0,
                                                                                                                           Index.Uinds_19
                                                                                                                             0,
                                                                                                                           Index.Linds_19
                                                                                                                             0,
                                                                                                                           Index.Uinds_9
                                                                                                                             0,
                                                                                                                           Index.Linds_9
                                                                                                                             1,
                                                                                                                           Index.Uinds_3
                                                                                                                             0,
                                                                                                                           Index.Linds_3
                                                                                                                             0)
                                                                                                                        @ (Ivar.Ivar
                                                                                                                             GHC.Real.Rational)
                                                                                                                        BasicTensors.ivar1M_indList
                                                                                                                        ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True False} BasicTensors.ivar1M2))) -}
f5da310fb4fb2a7ee45ab0f96b479198
  ivar1M2 :: [Ivar.Ivar GHC.Real.Rational]
  {- Unfolding: ({__scc {main:BasicTensors.ivar1M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.valueList} False True} GHC.Base.map
                                                                                                                                                                                   @ (Index.Uinds_20
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_20
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Uinds_19
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_19
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Uinds_9
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_9
                                                                                                                                                                                        1,
                                                                                                                                                                                      Index.Uinds_3
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_3
                                                                                                                                                                                        0)
                                                                                                                                                                                   @ (Ivar.Ivar
                                                                                                                                                                                        GHC.Real.Rational)
                                                                                                                                                                                   BasicTensors.ivar1FM
                                                                                                                                                                                   BasicTensors.ivar1M_indList) -}
4b3c5d58a4d5106ed994798c6175e4c9
  ivar1M3 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
ad165ea93929204f42cfc4d56bb6b6e8
  ivar1M_indList :: [Index.Index 0 0 0 0 0 1 0 0]
  {- Unfolding: ({__scc {main:BasicTensors.ivar1M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.ivar1M3) -}
9e9cee8e357ec6f25ba7e28fb733d921
  ivar1_indList :: [Index.Index 0 1 0 0 0 0 0 0]
  {- Unfolding: ({__scc {main:BasicTensors.ivar1} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.ivar6) -}
e74f99c464782612ab47db53e24ea2d7
  ivar2 ::
    Tensor.Tensor 0 1 0 0 0 0 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar2} True True} {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                                                                   @ 0
                                                                                                                   @ 1
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 1
                                                                                                                   @ (Ivar.Ivar
                                                                                                                        GHC.Real.Rational)
                                                                                                                   BasicTensors.ivar7) -}
8aca5e1fcb286adb6a79d6eb89c5e8c5
  ivar2F ::
    Index.Index 0 1 0 0 0 0 0 1 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 0 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar2F ww2 ww8 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
d22e40cc5da605772eca8e2b385ee61d
  ivar2FM ::
    Index.Index 0 0 0 0 0 1 0 1 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U(U),A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 1 0 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar2FM ww6 ww8 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
e6d631791f46f2d61b4163d258a71f91
  ivar2M ::
    Tensor.Tensor 0 0 0 0 0 1 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar2M} True True} {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    BasicTensors.ivar2M1) -}
ffeb3acf1931c3a48dcf18546fcec80a
  ivar2M1 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 0 1 0 1) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar2M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} BasicTensors.$sfromList4
                                                                                                                     @ (Ivar.Ivar
                                                                                                                          GHC.Real.Rational)
                                                                                                                     (GHC.List.zip
                                                                                                                        @ (Index.Uinds_20
                                                                                                                             0,
                                                                                                                           Index.Linds_20
                                                                                                                             0,
                                                                                                                           Index.Uinds_19
                                                                                                                             0,
                                                                                                                           Index.Linds_19
                                                                                                                             0,
                                                                                                                           Index.Uinds_9
                                                                                                                             0,
                                                                                                                           Index.Linds_9
                                                                                                                             1,
                                                                                                                           Index.Uinds_3
                                                                                                                             0,
                                                                                                                           Index.Linds_3
                                                                                                                             1)
                                                                                                                        @ (Ivar.Ivar
                                                                                                                             GHC.Real.Rational)
                                                                                                                        BasicTensors.ivar2M_indList
                                                                                                                        ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True False} BasicTensors.ivar2M2))) -}
afbb4e7029b202535ac28720e740a389
  ivar2M2 :: [Ivar.Ivar GHC.Real.Rational]
  {- Unfolding: ({__scc {main:BasicTensors.ivar2M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.valueList} False True} GHC.Base.map
                                                                                                                                                                                   @ (Index.Uinds_20
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_20
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Uinds_19
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_19
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Uinds_9
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_9
                                                                                                                                                                                        1,
                                                                                                                                                                                      Index.Uinds_3
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_3
                                                                                                                                                                                        1)
                                                                                                                                                                                   @ (Ivar.Ivar
                                                                                                                                                                                        GHC.Real.Rational)
                                                                                                                                                                                   BasicTensors.ivar2FM
                                                                                                                                                                                   BasicTensors.ivar2M_indList) -}
2615e007168bffdc5c5f4d0847df01a3
  ivar2M3 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2, BasicTensors.delta_4,
                  BasicTensors.delta_2)) -}
15e1e1408af648c9b672d6c4267f2dc7
  ivar2M_indList :: [Index.Index 0 0 0 0 0 1 0 1]
  {- Unfolding: ({__scc {main:BasicTensors.ivar2M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 1
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                                BasicTensors.ivar2M3) -}
95eff52fc2349c52b45e0c8fbea82c2d
  ivar2_indList :: [Index.Index 0 1 0 0 0 0 0 1]
  {- Unfolding: ({__scc {main:BasicTensors.ivar2} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                               BasicTensors.ivar9) -}
4ebd0f5ee1227dca3383382149308493
  ivar3 ::
    Tensor.Tensor 0 1 0 0 0 1 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar3} True True} {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                                                                   @ 0
                                                                                                                   @ 1
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ 1
                                                                                                                   @ 0
                                                                                                                   @ 0
                                                                                                                   @ (Ivar.Ivar
                                                                                                                        GHC.Real.Rational)
                                                                                                                   BasicTensors.ivar12) -}
2384d63c9e18a67da5315031c7d04db5
  ivar3F ::
    Index.Index 0 1 0 0 0 1 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 1 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar3F ww2 ww6 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
d792a5988056372a753af506fd371d41
  ivar3FM ::
    Index.Index 0 0 0 0 0 2 0 0 -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,1*U(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 2 0 0) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case BasicTensors.$wivar3FM ww6 of ww9 { (#,#) ww10 ww11 ->
                 Ivar.Ivar @ GHC.Real.Rational ww10 ww11 } }) -}
4fd34c36537c0ced2ffe7ded3b8caae5
  ivar3M ::
    Tensor.Tensor 0 0 0 0 0 2 0 0 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar3M} True True} {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 2
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    BasicTensors.ivar3M1) -}
dc6634aefe6bdb156f6634de44d80cde
  ivar3M1 ::
    Data.Map.Internal.Map
      (Index.Index 0 0 0 0 0 2 0 0) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar3M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} BasicTensors.$sfromList5
                                                                                                                     @ (Ivar.Ivar
                                                                                                                          GHC.Real.Rational)
                                                                                                                     (GHC.List.zip
                                                                                                                        @ (Index.Uinds_20
                                                                                                                             0,
                                                                                                                           Index.Linds_20
                                                                                                                             0,
                                                                                                                           Index.Uinds_19
                                                                                                                             0,
                                                                                                                           Index.Linds_19
                                                                                                                             0,
                                                                                                                           Index.Uinds_9
                                                                                                                             0,
                                                                                                                           Index.Linds_9
                                                                                                                             2,
                                                                                                                           Index.Uinds_3
                                                                                                                             0,
                                                                                                                           Index.Linds_3
                                                                                                                             0)
                                                                                                                        @ (Ivar.Ivar
                                                                                                                             GHC.Real.Rational)
                                                                                                                        BasicTensors.ivar3M_indList
                                                                                                                        ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True False} BasicTensors.ivar3M2))) -}
3cb32372d0c287fdf91037ecc907d2ef
  ivar3M2 :: [Ivar.Ivar GHC.Real.Rational]
  {- Unfolding: ({__scc {main:BasicTensors.ivar3M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.valueList} False True} GHC.Base.map
                                                                                                                                                                                   @ (Index.Uinds_20
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_20
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Uinds_19
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_19
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Uinds_9
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_9
                                                                                                                                                                                        2,
                                                                                                                                                                                      Index.Uinds_3
                                                                                                                                                                                        0,
                                                                                                                                                                                      Index.Linds_3
                                                                                                                                                                                        0)
                                                                                                                                                                                   @ (Ivar.Ivar
                                                                                                                                                                                        GHC.Real.Rational)
                                                                                                                                                                                   BasicTensors.ivar3FM
                                                                                                                                                                                   BasicTensors.ivar3M_indList) -}
afc4fe68c95d6e3090755513b2bec6a8
  ivar3M3 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.epsilon2, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
89ecc2f7c6e3374905903fc6a7fe8ab8
  ivar3M_indList :: [Index.Index 0 0 0 0 0 2 0 0]
  {- Unfolding: ({__scc {main:BasicTensors.ivar3M} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 2
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros1
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                  `cast`
                                                                                                                                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                          <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                BasicTensors.ivar3M3) -}
dc484a4c4c25a0b011409eec4bfdff39
  ivar3_indList :: [Index.Index 0 1 0 0 0 1 0 0]
  {- Unfolding: ({__scc {main:BasicTensors.ivar3} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros6
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.$smkTensorfromFZeros3
                                                                                                                                                                                 `cast`
                                                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                               BasicTensors.ivar14) -}
195076ab6de7a39a22f276153ed6c954
  ivar4 ::
    Data.Map.Internal.Map
      (Index.Index 0 1 0 0 0 0 0 0) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar1} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} BasicTensors.$sfromList
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    (GHC.List.zip
                                                                                                                       @ (Index.Uinds_20
                                                                                                                            0,
                                                                                                                          Index.Linds_20
                                                                                                                            1,
                                                                                                                          Index.Uinds_19
                                                                                                                            0,
                                                                                                                          Index.Linds_19
                                                                                                                            0,
                                                                                                                          Index.Uinds_9
                                                                                                                            0,
                                                                                                                          Index.Linds_9
                                                                                                                            0,
                                                                                                                          Index.Uinds_3
                                                                                                                            0,
                                                                                                                          Index.Linds_3
                                                                                                                            0)
                                                                                                                       @ (Ivar.Ivar
                                                                                                                            GHC.Real.Rational)
                                                                                                                       BasicTensors.ivar1_indList
                                                                                                                       ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True False} BasicTensors.ivar5))) -}
226e8c5d3568371425df64ce90e4070a
  ivar5 :: [Ivar.Ivar GHC.Real.Rational]
  {- Unfolding: ({__scc {main:BasicTensors.ivar1} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.valueList} False True} GHC.Base.map
                                                                                                                                                                                  @ (Index.Uinds_20
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_20
                                                                                                                                                                                       1,
                                                                                                                                                                                     Index.Uinds_19
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_19
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Uinds_9
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_9
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Uinds_3
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_3
                                                                                                                                                                                       0)
                                                                                                                                                                                  @ (Ivar.Ivar
                                                                                                                                                                                       GHC.Real.Rational)
                                                                                                                                                                                  BasicTensors.ivar1F
                                                                                                                                                                                  BasicTensors.ivar1_indList) -}
ab89c66518dcf0a120420ae94bf6712f
  ivar6 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4)) -}
e206152713b0c9289549191f0ecf0104
  ivar7 ::
    Data.Map.Internal.Map
      (Index.Index 0 1 0 0 0 0 0 1) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:BasicTensors.ivar2} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} BasicTensors.$sfromList1
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    (GHC.List.zip
                                                                                                                       @ (Index.Uinds_20
                                                                                                                            0,
                                                                                                                          Index.Linds_20
                                                                                                                            1,
                                                                                                                          Index.Uinds_19
                                                                                                                            0,
                                                                                                                          Index.Linds_19
                                                                                                                            0,
                                                                                                                          Index.Uinds_9
                                                                                                                            0,
                                                                                                                          Index.Linds_9
                                                                                                                            0,
                                                                                                                          Index.Uinds_3
                                                                                                                            0,
                                                                                                                          Index.Linds_3
                                                                                                                            1)
                                                                                                                       @ (Ivar.Ivar
                                                                                                                            GHC.Real.Rational)
                                                                                                                       BasicTensors.ivar2_indList
                                                                                                                       ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True False} BasicTensors.ivar8))) -}
78dbe4c489b8885e7b7027db048fd317
  ivar8 :: [Ivar.Ivar GHC.Real.Rational]
  {- Unfolding: ({__scc {main:BasicTensors.ivar2} False True} {__scc {main:Tensor.mkTensorfromFZeros} False True} {__scc {main:Tensor.mkTensorfromFZeros.valueList} False True} GHC.Base.map
                                                                                                                                                                                  @ (Index.Uinds_20
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_20
                                                                                                                                                                                       1,
                                                                                                                                                                                     Index.Uinds_19
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_19
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Uinds_9
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_9
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Uinds_3
                                                                                                                                                                                       0,
                                                                                                                                                                                     Index.Linds_3
                                                                                                                                                                                       1)
                                                                                                                                                                                  @ (Ivar.Ivar
                                                                                                                                                                                       GHC.Real.Rational)
                                                                                                                                                                                  BasicTensors.ivar2F
                                                                                                                                                                                  BasicTensors.ivar2_indList) -}
228d08a5cdbf39ff92ce8b3e529a4ebd
  ivar9 ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((BasicTensors.delta_4, BasicTensors.delta_2,
                  BasicTensors.delta_4, BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_4, BasicTensors.delta_4,
                  BasicTensors.delta_2)) -}
c606af9a8bd025a465468256b50f9dfa
  symI_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
fca0acf96a6736067625495b5ed41e94
  symI_3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Tensor.Tensor 0 0 1 0 0 0 0 3 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
9713a8f5583dadaf4ad0ce141fa5a8af
  symI_Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Tensor.Tensor 1 0 0 0 0 0 0 4 GHC.Real.Rational
  {- Arity: 1, Strictness: <L,U> -}
6be00d4346ae65445a64f80dd475cbf0
  triangleMap2 ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Data.Sequence.Internal.Seq a)
                   = Data.Sequence.Internal.$fOrdSeq @ a $dOrd
                 } in
                 {__scc {main:BasicTensors.triangleMap2} True True} Data.Map.Strict.Internal.fromList
                                                                      @ (Data.Sequence.Internal.Seq
                                                                           a)
                                                                      @ b
                                                                      $dOrd1
                                                                      (GHC.List.zip
                                                                         @ (Data.Sequence.Internal.Seq
                                                                              a)
                                                                         @ b
                                                                         (BasicTensors.$wsymIndList
                                                                            @ a
                                                                            $dEnum
                                                                            2#
                                                                            BasicTensors.epsilon1)
                                                                         (GHC.Enum.enumFrom
                                                                            @ b
                                                                            $dEnum1
                                                                            (GHC.Enum.toEnum
                                                                               @ b
                                                                               $dEnum1
                                                                               BasicTensors.delta_4)))) -}
8ae39bfffea8adde58db4879eac8be5b
  triangleMap3 ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Data.Sequence.Internal.Seq a)
                   = Data.Sequence.Internal.$fOrdSeq @ a $dOrd
                 } in
                 {__scc {main:BasicTensors.triangleMap3} True True} Data.Map.Strict.Internal.fromList
                                                                      @ (Data.Sequence.Internal.Seq
                                                                           a)
                                                                      @ b
                                                                      $dOrd1
                                                                      (GHC.List.zip
                                                                         @ (Data.Sequence.Internal.Seq
                                                                              a)
                                                                         @ b
                                                                         (BasicTensors.$wsymIndList
                                                                            @ a
                                                                            $dEnum
                                                                            3#
                                                                            BasicTensors.epsilon1)
                                                                         (GHC.Enum.enumFrom
                                                                            @ b
                                                                            $dEnum1
                                                                            (GHC.Enum.toEnum
                                                                               @ b
                                                                               $dEnum1
                                                                               BasicTensors.delta_4)))) -}
704f7fee9cde16fba1df229212f86ba1
  triangleMapArea ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,C(C1(U)),A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (Data.Sequence.Internal.Seq a)
                   = Data.Sequence.Internal.$fOrdSeq @ a $dOrd
                 } in
                 {__scc {main:BasicTensors.triangleMapArea} True True} Data.Map.Strict.Internal.fromList
                                                                         @ (Data.Sequence.Internal.Seq
                                                                              a)
                                                                         @ b
                                                                         $dOrd1
                                                                         (GHC.List.zip
                                                                            @ (Data.Sequence.Internal.Seq
                                                                                 a)
                                                                            @ b
                                                                            (BasicTensors.$wareaDofList
                                                                               @ a
                                                                               $dEnum
                                                                               $dOrd)
                                                                            (GHC.Enum.enumFrom
                                                                               @ b
                                                                               $dEnum1
                                                                               (GHC.Enum.toEnum
                                                                                  @ b
                                                                                  $dEnum1
                                                                                  BasicTensors.delta_4)))) -}
"SPEC/BasicTensors fromList @ (Index 0 0 0 0 0 1 0 0) _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     (Index.Index
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        1
                                                                                        0
                                                                                        0))
  Data.Map.Strict.Internal.fromList @ (Index.Uinds_20 0,
                                       Index.Linds_20 0, Index.Uinds_19 0, Index.Linds_19 0,
                                       Index.Uinds_9 0, Index.Linds_9 1, Index.Uinds_3 0,
                                       Index.Linds_3 0)
                                    @ a
                                    $dOrd
  = BasicTensors.$sfromList3 @ a
"SPEC/BasicTensors fromList @ (Index 0 0 0 0 0 1 0 1) _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     (Index.Index
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        1
                                                                                        0
                                                                                        1))
  Data.Map.Strict.Internal.fromList @ (Index.Uinds_20 0,
                                       Index.Linds_20 0, Index.Uinds_19 0, Index.Linds_19 0,
                                       Index.Uinds_9 0, Index.Linds_9 1, Index.Uinds_3 0,
                                       Index.Linds_3 1)
                                    @ a
                                    $dOrd
  = BasicTensors.$sfromList4 @ a
"SPEC/BasicTensors fromList @ (Index 0 0 0 0 0 2 0 0) _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     (Index.Index
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        2
                                                                                        0
                                                                                        0))
  Data.Map.Strict.Internal.fromList @ (Index.Uinds_20 0,
                                       Index.Linds_20 0, Index.Uinds_19 0, Index.Linds_19 0,
                                       Index.Uinds_9 0, Index.Linds_9 2, Index.Uinds_3 0,
                                       Index.Linds_3 0)
                                    @ a
                                    $dOrd
  = BasicTensors.$sfromList5 @ a
"SPEC/BasicTensors fromList @ (Index 0 1 0 0 0 0 0 0) _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     (Index.Index
                                                                                        0
                                                                                        1
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0))
  Data.Map.Strict.Internal.fromList @ (Index.Uinds_20 0,
                                       Index.Linds_20 1, Index.Uinds_19 0, Index.Linds_19 0,
                                       Index.Uinds_9 0, Index.Linds_9 0, Index.Uinds_3 0,
                                       Index.Linds_3 0)
                                    @ a
                                    $dOrd
  = BasicTensors.$sfromList @ a
"SPEC/BasicTensors fromList @ (Index 0 1 0 0 0 0 0 1) _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     (Index.Index
                                                                                        0
                                                                                        1
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        1))
  Data.Map.Strict.Internal.fromList @ (Index.Uinds_20 0,
                                       Index.Linds_20 1, Index.Uinds_19 0, Index.Linds_19 0,
                                       Index.Uinds_9 0, Index.Linds_9 0, Index.Uinds_3 0,
                                       Index.Linds_3 1)
                                    @ a
                                    $dOrd
  = BasicTensors.$sfromList1 @ a
"SPEC/BasicTensors fromList @ (Index 0 1 0 0 0 1 0 0) _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     (Index.Index
                                                                                        0
                                                                                        1
                                                                                        0
                                                                                        0
                                                                                        0
                                                                                        1
                                                                                        0
                                                                                        0))
  Data.Map.Strict.Internal.fromList @ (Index.Uinds_20 0,
                                       Index.Linds_20 1, Index.Uinds_19 0, Index.Linds_19 0,
                                       Index.Uinds_9 0, Index.Linds_9 1, Index.Uinds_3 0,
                                       Index.Linds_3 0)
                                    @ a
                                    $dOrd
  = BasicTensors.$sfromList2 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

