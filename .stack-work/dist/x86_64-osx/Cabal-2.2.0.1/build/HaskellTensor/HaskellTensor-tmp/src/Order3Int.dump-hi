
==================== FINAL INTERFACE ====================
2019-01-22 14:46:17.294852 UTC

interface main:Order3Int [hpc] 8043
  interface hash: 9b79f9f51f2509f95c12f8153086c8fd
  ABI hash: f4cad950d24c090882261a9f0288afa8
  export-list hash: e41100516b3c4208fa4fffdbce701e58
  orphan hash: b397196ae13186cbd1ea609779cb4369
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Order3Int.ansatzABC
  Order3Int.ansatzABC2
  Order3Int.ansatzAIBC
  Order3Int.ansatzAIBbC
  Order3Int.ansatzAaBC
  Order3Int.ansatzAaBbC
  Order3Int.intABC
  Order3Int.intAIBC
  Order3Int.intAaBbC
  Order3Int.intAaBbC2
  Order3Int.mkEqnSparseAnsatzABC2
  Order3Int.mkEqnSparseAnsatzABCTrian
  Order3Int.mkEqnSparseAnsatzAIBC
  Order3Int.mkEqnSparseAnsatzAIBbC
  Order3Int.mkEqnSparseAnsatzAaBC
  Order3Int.mkEqnSparseAnsatzAaBbC
  Order3Int.mkEqnSparseAnsatzAaBbCTrian
  Order3Int.mkEqnSparseIntABC2
  Order3Int.mkEqnSparseIntABCTrian
  Order3Int.mkEqnSparseintAIBC
  Order3Int.mkEqnSparseintAaBbC
  Order3Int.mkEqnSparseintAaBbCTrian
module dependencies: BasicTensors EquivarianceEqns Index Ivar Pde
                     Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  BasicTensors eb5b51414d2c3c3fc45fe3497d3f932c
  exports: 7bd1d97902a82e67c502cc891749fa89
  aSymI_2 85b96c1b469ca0318ab6d34ecbdffdf1
  delta_20 162a995d96c74a333b7936c74f9c8654
  delta_3 1b779d8bf6d3a2de4e2c39cbf2952342
  delta_9 71b32e9191ec29699321bcbae6e0b83a
  flatArea 88f143656f05841ce5f6bc5818ab7cee
  interArea 068502db5feb6a9b80dde94e3ee55a07
  interEqn1_2 c92cf830c592d74911b3103d773bcb06
  interEqn1_3 5671d20c260b1f499f7d26c836568368
  interMetric 53b357e50bf8477d50d697f15bb13184
  invEta a329957d4f2e507cf294c76791a875aa
import  -/  EquivarianceEqns 91d578dc64c09630cc293b0e537bd69a
  exports: 753233c47284511068d96a6925317f46
import  -/  Index 08e2a14604a823b6ff2a9dd0412736b8
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index fef7dd75ac4341fe9ac6422ae53896cb
  Lind_20 bc4b9092451ad6bbfee40a37af5a3be5
  Lind_9 e56724c95d48d5af2b671320de0a16e6
  Linds_3 c88a9b9457367a41a7b841cbc4cd99c9
  Uind_20 bfe4746a22221d53bc0caf3ab68bb75f
  Uind_9 60e6e8f96660ac8be150b9dcf7a9bf57
  Uinds_3 78c689db53b46c5dad666c484780219c
  getValInd 9fdbb30c9f0128d475e5de016ad1bc53
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
import  -/  Pde ee46c0f08935aa69c73c37bcf3103bae
  exports: 5f26c9b1fc31234bc17b520659bce428
import  -/  Tensor 506762f61e5eb09856fcdcf668e157fa
  exports: 1e07b17b3ec8892664f89099181669ba
  Tensor 2f2ba18b2559fd3b006c3f606f3e15da
  Tensor c676ef3822419832be89c54f66299684
  tensorAdd c17d8b47f4737f18a61e8d192d389e87
  tensorContractWith_20 192b6213f73a7a7828516a5b8c5dbe89
  tensorContractWith_3 c385296e26e3bb0dcfa2f644b248f67b
  tensorProductNumeric 6bf62d328fd962ef9923c8cda98aba01
  tensorSub fbca68c0210815bd3e38973881a34ada
  tensorTranspose 44e01331e8dca2b21922eeae8693de1e
bf61f1d8cbf49a746a249c20a9812a6a
  $s^1 :: GHC.Types.Int
  {- Strictness: x -}
ffb5fd22cce05cf70976cd676a0c213a
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
920aacd856636c3fa7c91a10d9dd85b0
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
c7aec928c342bbe94cf3a158f1870a84
  $sfind1 ::
    [GHC.Types.Int] -> Data.Map.Internal.Map [GHC.Types.Int] a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
5d8326a4186576bff5e37039e72b7c53
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> Order3Int.$sfromList1
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> Order3Int.$sfromList1
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> Order3Int.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> Order3Int.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
df822f186b912d974f244c31c0f87004
  $sfromList1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
b7d87696765d4675163591dffbbcbe1a
  $smapKeysWith ::
    (a -> a -> a)
    -> (k1 -> (GHC.Types.Int, GHC.Types.Int))
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ k1
                   (c :: a -> a -> a)
                   (f :: k1 -> (GHC.Types.Int, GHC.Types.Int))
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 let {
                   f1 :: (GHC.Types.Int, GHC.Types.Int) -> a -> a -> a
                     {- Arity: 3, Strictness: <L,A><L,U><L,U>,
                        Unfolding: InlineRule (3, True, True)
                                   (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) (x1 :: a) (y :: a) ->
                                    c x1 y) -}
                   = \ (ds :: (GHC.Types.Int, GHC.Types.Int))
                       (x1 :: a)[OneShot]
                       (y :: a)[OneShot] ->
                     c x1 y
                 } in
                 letrec {
                   go13 :: [((GHC.Types.Int, GHC.Types.Int), a)]
                           -> Data.Map.Internal.Map k1 a
                           -> [((GHC.Types.Int, GHC.Types.Int), a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [((GHC.Types.Int, GHC.Types.Int), a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt1 kx x l r
                       -> go13
                            (GHC.Types.:
                               @ ((GHC.Types.Int, GHC.Types.Int), a)
                               (f kx, x)
                               (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 letrec {
                   go14 :: Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
                           -> [((GHC.Types.Int, GHC.Types.Int), a)]
                           -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (z :: Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a)
                       (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                     case ds of wild {
                       [] -> z
                       : x1 xs
                       -> case x1 of wild1 { (,) k x2 ->
                          case k of ww { (,) ww1 ww2 ->
                          case Order3Int.$w$sgo1 @ a f1 ww1 ww2 x2 z of z' { DEFAULT ->
                          go14 z' xs } } } }
                 } in
                 go14
                   (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                   (go13 (GHC.Types.[] @ ((GHC.Types.Int, GHC.Types.Int), a)) eta)) -}
1665b2920556d386a5e7599d3b3cf016
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case Order3Int.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
7ac4b59162e06a19abf2f6b354ba1a99
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
a49d58137e8fa4b06291ae645718799d
  $stensorContractWith_3 :: GHC.Natural.Natural
  {- Unfolding: (case Order3Int.$seven1 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
448ae60920f57a4f894b215d8d43f780
  $stensorContractWith_5 :: GHC.Natural.Natural
  {- Unfolding: (case Order3Int.$stensorContractWith_6 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
9baa58133699ab094f6dc45f53bd9cbc
  $stensorContractWith_6 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
f6f4fdaf272ee7687bc717d5645bde46
  $stensorContractWith_7 :: GHC.Natural.Natural
  {- Unfolding: (case Order3Int.$s^2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
2033b8212ef7cfaf8a753432945eba54
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Order3Int.$trModule3
                   Order3Int.$trModule1) -}
65715b53efc3aeade8ffc8a1caa7b111
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Order3Int.$trModule2) -}
64e313bd1081206e69918a15e9cdfae2
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Order3Int"#) -}
3d2343307ce0c62f757eaea5cf4fa8f2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Order3Int.$trModule4) -}
6966d8ba86e0966deb6ba4e1c1245492
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
55e3f024db9b700a14a805d2c11c76cb
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger# w1 Order3Int.$s^2 of wild {
                   DEFAULT
                   -> case GHC.Integer.Type.eqInteger# w1 Order3Int.$s^2 of wild1 {
                        DEFAULT
                        -> case w of ww { GHC.Types.I# ww1 -> Order3Int.$wf ww1 w1 }
                        1# -> 1# }
                   1# -> case Order3Int.$s^1 ret_ty GHC.Prim.Int# of {} }) -}
2d8a3f3510cd9871bdd049fb4566b252
  $w$sgo1 ::
    ((GHC.Types.Int, GHC.Types.Int) -> a1 -> a1 -> a1)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(U)))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
d41571fd51e4b90138f825bd6d4a49ba
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
c3e13c727ae87b74c9d0f64fddbe1f2f
  $wansatzABC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 3 3 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
763af19237870dc5fda8fee8024975ed
  $wansatzABC2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 3 3 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
f9b233849f5bb3527fd1e12607b25343
  $wansatzAIBC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 3 3 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
998da171b305c92708bc8731f3245174
  $wansatzAIBbC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 3 3 0 0 2 1 1 1) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
f4d1dc745828387703bc6190fe3fc4d1
  $wansatzAaBC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 3 3 0 0 1 0 1 1) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
521d4c3bab747af8fd05b92f883c356d
  $wansatzAaBbC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 3 3 0 0 1 0 2 2) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
b20668e78fddd21cfbcb0df195ea7a3c
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
ff36c378948f91786fe97ff05615d4d0
  $wintABC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 2 3 0 0 0 0 2 2) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
b2a2c6e846b68dfa56218eb4f2438bc3
  $wintAIBC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 3 0 0 1 1 2 2) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
650be51050da4e5991efec96ce179794
  $wintAaBbC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 2 3 0 0 0 0 4 4) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
ec3c350353e0f5da7f37d3bfead5bb81
  $wintAaBbC2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 2 3 0 0 0 0 4 4) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
b33aa073f9ce1af4f357ff2f78d41754
  $wmkEqnSparseAnsatzABCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 1 0 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
f13fd5e82a010e5868bc9f121843ce2f
  $wmkEqnSparseAnsatzAaBbCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 1 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
0fd4a847bf7831536afc8f82f68fefbb
  $wmkEqnSparseIntABCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
72464f74f7757214a7abc6996805756a
  $wmkEqnSparseintAaBbCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 0 0 4 4) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
b5959151e5618a6adfa19d31b7e1b6dd
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
989a94fcd48ebdc7798a13033ec9cf34
  ansatzABC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 3 3 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wansatzABC w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 3
                   @ 3
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
6b2bb4d7ae3159fac23f17af3d5edadd
  ansatzABC2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 3 3 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wansatzABC2 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 3
                   @ 3
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
c1c9468df7d2aa2cdfa91f195ac182ca
  ansatzAIBC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 3 3 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wansatzAIBC w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 3
                   @ 3
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
7765649d471c029ff79a1aafd54bac02
  ansatzAIBbC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 3 3 0 0 2 1 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wansatzAIBbC w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 3
                   @ 3
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
a85f5d5c8fd2ae24739a10a2bdba4bc3
  ansatzAaBC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 3 3 0 0 1 0 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wansatzAaBC w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 3
                   @ 3
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
51f7750fd2786eb366aab2876cc0b3e9
  ansatzAaBbC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 3 3 0 0 1 0 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wansatzAaBbC w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 3
                   @ 3
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
ee21dfb81b3dda22022d0e276a44cfe5
  intABC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 3 0 0 0 0 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wintABC w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 3
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
516dc552e4250227096a34b8a159f9dd
  intAIBC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 3 0 0 1 1 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wintAIBC w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 3
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
a0cd70ffee261630a8d36007a1d9ee90
  intAaBbC ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 3 0 0 0 0 4 4 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wintAaBbC w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 3
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 4
                   @ 4
                   @ GHC.Real.Rational
                   ww1 }) -}
f7f2ed833ae615a9f1ed9e5faf7f84ab
  intAaBbC2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 3 0 0 0 0 4 4 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order3Int.$wintAaBbC2 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 3
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 4
                   @ 4
                   @ GHC.Real.Rational
                   ww1 }) -}
a82c04b8545a5ffd53ceaafdf60051d7
  mkEqnSparseAnsatzABC2 ::
    Tensor.Tensor 3 3 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 3 3 0 0 1 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseAnsatzABC2} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Order3Int.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Order3Int.mkEqnSparseAnsatzABC2_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
b488342f12e807fcfb7dfabe9975c341
  mkEqnSparseAnsatzABC2_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 1 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
afdbda9455ece9f575e3a347a5e0eef8
  mkEqnSparseAnsatzABCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 3 3 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 3 3 0 0 1 0 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Order3Int.$wmkEqnSparseAnsatzABCTrian w ww1 }) -}
363a1339f29d02d55c8130a173225bd2
  mkEqnSparseAnsatzAIBC ::
    Tensor.Tensor 3 3 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 3 3 0 0 2 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseAnsatzAIBC} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Order3Int.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Order3Int.mkEqnSparseAnsatzAIBC_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
bc905034818f2b93455e49f3d74982e5
  mkEqnSparseAnsatzAIBC_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 2 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
f8efc5a2465e6ef6644603fd01d8c194
  mkEqnSparseAnsatzAIBbC ::
    Tensor.Tensor 3 3 0 0 2 1 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 3 3 0 0 2 1 1 1 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseAnsatzAIBbC} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                           Order3Int.$sfromList
                                                                             @ (GHC.Real.Ratio
                                                                                  GHC.Integer.Type.Integer)
                                                                             (Order3Int.mkEqnSparseAnsatzAIBbC_go13
                                                                                (GHC.Types.[]
                                                                                   @ ((GHC.Types.Int,
                                                                                       GHC.Types.Int),
                                                                                      GHC.Real.Rational))
                                                                                map1) }) -}
44a9ac145d9c68e090d9dd1f9654f366
  mkEqnSparseAnsatzAIBbC_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 2 1 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
1ef9ef55b3553ef567144b91f8f433ef
  mkEqnSparseAnsatzAaBC ::
    Tensor.Tensor 3 3 0 0 1 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 3 3 0 0 1 0 1 1 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseAnsatzAaBC} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                          Order3Int.$sfromList
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            (Order3Int.mkEqnSparseAnsatzAaBC_go13
                                                                               (GHC.Types.[]
                                                                                  @ ((GHC.Types.Int,
                                                                                      GHC.Types.Int),
                                                                                     GHC.Real.Rational))
                                                                               map1) }) -}
8a024fcaa75a9dc7d1a40f7dfbedc007
  mkEqnSparseAnsatzAaBC_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 1 0 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
2381aca7ff667582c84ed05b3375644e
  mkEqnSparseAnsatzAaBbC ::
    Tensor.Tensor 3 3 0 0 1 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 3 3 0 0 1 0 2 2 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseAnsatzAaBbC} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                           Order3Int.$sfromList
                                                                             @ (GHC.Real.Ratio
                                                                                  GHC.Integer.Type.Integer)
                                                                             (Order3Int.mkEqnSparseAnsatzAaBbC_go13
                                                                                (GHC.Types.[]
                                                                                   @ ((GHC.Types.Int,
                                                                                       GHC.Types.Int),
                                                                                      GHC.Real.Rational))
                                                                                map1) }) -}
4d90c5042e5c52a5c5f0c22759443483
  mkEqnSparseAnsatzAaBbCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 3 3 0 0 1 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 3 3 0 0 1 0 2 2 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Order3Int.$wmkEqnSparseAnsatzAaBbCTrian w ww1 }) -}
c7fd697f35026c3c4302017f3abf61e8
  mkEqnSparseAnsatzAaBbC_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 3 3 0 0 1 0 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
a96463fa42862e8509fc194d2ac284f1
  mkEqnSparseIntABC2 ::
    Tensor.Tensor 2 3 0 0 0 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 2 3 0 0 0 0 2 2 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseIntABC2} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                       Order3Int.$sfromList
                                                                         @ (GHC.Real.Ratio
                                                                              GHC.Integer.Type.Integer)
                                                                         (Order3Int.mkEqnSparseIntABC2_go13
                                                                            (GHC.Types.[]
                                                                               @ ((GHC.Types.Int,
                                                                                   GHC.Types.Int),
                                                                                  GHC.Real.Rational))
                                                                            map1) }) -}
38551d764ba619ffdb67bf5c27d49b44
  mkEqnSparseIntABC2_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 0 0 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
7f3a6795c8aaec5e50228edd92925fc5
  mkEqnSparseIntABCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 3 0 0 0 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 3 0 0 0 0 2 2 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Order3Int.$wmkEqnSparseIntABCTrian w ww1 }) -}
5295fa10134586df2748d0ce1b76fd0a
  mkEqnSparseintAIBC ::
    Tensor.Tensor 2 3 0 0 1 1 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 2 3 0 0 1 1 2 2 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseintAIBC} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                       Order3Int.$sfromList
                                                                         @ (GHC.Real.Ratio
                                                                              GHC.Integer.Type.Integer)
                                                                         (Order3Int.mkEqnSparseintAIBC_go13
                                                                            (GHC.Types.[]
                                                                               @ ((GHC.Types.Int,
                                                                                   GHC.Types.Int),
                                                                                  GHC.Real.Rational))
                                                                            map1) }) -}
5f33d943b024e38c960775b317ef15b5
  mkEqnSparseintAIBC_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 1 1 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
55ed5476e2f680f7cb2a043da84d1afc
  mkEqnSparseintAaBbC ::
    Tensor.Tensor 2 3 0 0 0 0 4 4 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 2 3 0 0 0 0 4 4 GHC.Real.Rational) ->
                 {__scc {main:Order3Int.mkEqnSparseintAaBbC} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        Order3Int.$sfromList
                                                                          @ (GHC.Real.Ratio
                                                                               GHC.Integer.Type.Integer)
                                                                          (Order3Int.mkEqnSparseintAaBbC_go13
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   GHC.Real.Rational))
                                                                             map1) }) -}
f4a7ab6635a02dfce74171bd4ed3a497
  mkEqnSparseintAaBbCTrian ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 3 0 0 0 0 4 4 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 3 0 0 0 0 4 4 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Order3Int.$wmkEqnSparseintAaBbCTrian w ww1 }) -}
d64bdf8865728df7d54ac2aa74491888
  mkEqnSparseintAaBbC_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 2 3 0 0 0 0 4 4) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
"SPEC/Order3Int fromList @ (Int, Int) _" [orphan] forall @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (GHC.Types.Int, GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = Order3Int.$sfromList @ a
"SPEC/Order3Int mapKeysWith @ (Int, Int) _ _" [orphan] forall @ a
                                                              @ k1
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          (GHC.Types.Int,
                                                                           GHC.Types.Int))
  Data.Map.Internal.mapKeysWith @ (GHC.Types.Int, GHC.Types.Int)
                                @ a
                                @ k1
                                $dOrd
  = Order3Int.$smapKeysWith @ a @ k1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

