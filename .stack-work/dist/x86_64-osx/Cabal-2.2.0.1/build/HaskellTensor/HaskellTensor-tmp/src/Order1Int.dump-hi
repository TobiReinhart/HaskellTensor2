
==================== FINAL INTERFACE ====================
2019-01-30 13:11:54.736519 UTC

interface main:Order1Int [hpc] 8043
  interface hash: f73a4dd20dc720c7a57a2525cfbb8dfc
  ABI hash: 96a55dc4bf5906051ebe39ac7ee65b3e
  export-list hash: 3156458f202b8180fa4d12d06df87b30
  orphan hash: e57ac501923ff142aace6542155aec7d
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Order1Int.ansatzA
  Order1Int.ansatzAI3
  Order1Int.ansatzAa
  Order1Int.int1A
  Order1Int.mkEqnSparseAnsatzA
  Order1Int.mkEqnSparseAnsatzAI
  Order1Int.mkEqnSparseAnsatzAa
  Order1Int.mkEqnSparseint1A
module dependencies: BasicTensors EquivarianceEqns Index Ivar Pde
                     Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  BasicTensors 10d18b2ce638ae10d6a88a26bebb82b9
  exports: 7c8d1234970990518faafb72d526964b
  aSymI_2 85ef27182fd5be5c32fb0eefff56334c
  delta_3 cc3f1185dcff4f25aea5e08989d6c16e
  flatArea 48543a7405251d520517921354f55ae2
  interArea 90f14268a72e96159f031ea9427cca4c
  interEqn1_2 abbb47cc9f47dba5309bcd162a9cc2fe
  interEqn1_3 4fd71460d3b8e42a3c0fcf0ab5e11aa3
  invEta 3bf1d6bd9509f7bed3ec3eb59c246f11
import  -/  EquivarianceEqns dd96df3600b28dc762b4aebca6600b59
  exports: 753233c47284511068d96a6925317f46
import  -/  Index 916735ab1c970e74aca1c88789549127
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index 22167b41613659637ef6194e34bf67d1
  Lind_20 5cac02519d44dca311f6e8704af0dab2
  Lind_9 73aca7325a4de01fdae5b6543362ad8f
  Linds_3 c9b2d4e9731309292bed9f6cde6d0fbe
  Uind_20 15d31188056502dc8c3e5921dd9b7dea
  Uind_9 f9351646ec069dfd583f698aca259967
  Uinds_3 fbf4f6c082947ccf71014b6f1ec9eea9
  getValInd 3f51e2c032700e0fcd321ef49dd3c1af
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
import  -/  Pde ee46c0f08935aa69c73c37bcf3103bae
  exports: 5f26c9b1fc31234bc17b520659bce428
import  -/  Tensor 649e40ce171c799ca6fc6d5773952aeb
  exports: d17f89ed15067c3352c7cc8d833615c2
  Tensor 120523ca9bc20437192d5f7ced440d49
  Tensor 6b073edeec5c0fb2159f4bff97d6ec2b
  tensorAdd f770dcf57b02f906c49e668881f8cb3e
  tensorContractWith_20 bedafdf0bbadff9f9680929a3ff0ec35
  tensorContractWith_3 553870f1abeb22fca19ee1dd0833949e
  tensorProductNumeric acac16e21b94dd390f703f4e8bcdf84d
  tensorSub c614a56cefded5d05cb9230ce87953a9
  tensorTranspose b0a00ee1f17a26733ecbcaa1f813dc61
ef87ba339c31a5fc28c22bb4f8d1c1a2
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> Order1Int.$sfromList1
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> Order1Int.$sfromList1
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> Order1Int.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> Order1Int.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
e06410ba082264b41617e87f2c0da4d9
  $sfromList1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
453dc8aae7af260afc6ae44b5224498e
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case Order1Int.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
714fc8a9497c67f11a456e9f0446ff2d
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c61706b98e708c1c0bd321ff78b1c0f7
  $stensorContractWith_3 :: GHC.Natural.Natural
  {- Unfolding: (case Order1Int.$stensorContractWith_4 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
10fcd506f23dad01b7c10bd43d98383e
  $stensorContractWith_4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
12a937d6799506d0c8b177df44fcc4e8
  $stensorContractWith_8 :: GHC.Natural.Natural
  {- Unfolding: (case Order1Int.$stensorContractWith_9 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
98851dded94438f512bdd628e38a904e
  $stensorContractWith_9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
8c7d8789ee389c482a04fc6c0949316f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Order1Int.$trModule3
                   Order1Int.$trModule1) -}
67eaa44c9bf5e5e8290eb846c9562adb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Order1Int.$trModule2) -}
909ca605bc6240032a88ab61c0ce43f9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Order1Int"#) -}
03fe540f840d400a4c5e04fe2e3bfc77
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Order1Int.$trModule4) -}
6102f578f37a7e028d9f50f57c3e6a44
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ac456c5462f1506939983c3e7f4fc065
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
992f7d8d449f085a8ff5c62c2dcab8d1
  $wansatzA ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Order1Int.ansatzA} True True} let {
                                                                   totalBlock2 :: Tensor.Tensor
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    1
                                                                                    0
                                                                                    1
                                                                                    1
                                                                                    GHC.Real.Rational
                                                                   = let {
                                                                       antiSym :: Tensor.Tensor
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    1
                                                                                    0
                                                                                    0
                                                                                    2
                                                                                    GHC.Real.Rational
                                                                       = {__scc {main:Order1Int.ansatzA.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                              w2
                                                                     } in
                                                                     {__scc {main:Order1Int.ansatzA.totalBlock2} True True} case (Order1Int.ansatzA7
                                                                                                                                    BasicTensors.invEta
                                                                                                                                    antiSym)
                                                                                                                                   `cast`
                                                                                                                                 (Tensor.Tensor
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                    (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                            case Tensor.$wtensorContractWith_3
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   Order1Int.$stensorContractWith_1
                                                                                                                                     `cast`
                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                   Order1Int.$stensorContractWith_1
                                                                                                                                     `cast`
                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                   Order1Int.ansatzA6
                                                                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                   ww1 of ww2 { Unit# ww3 ->
                                                                                                                            Tensor.Tensor
                                                                                                                              @ 0
                                                                                                                              @ 0
                                                                                                                              @ 0
                                                                                                                              @ 0
                                                                                                                              @ 1
                                                                                                                              @ 0
                                                                                                                              @ 1
                                                                                                                              @ 1
                                                                                                                              @ GHC.Real.Rational
                                                                                                                              ww3 } }
                                                                 } in
                                                                 let {
                                                                   intArea :: Tensor.Tensor
                                                                                1
                                                                                1
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                1
                                                                                1
                                                                                GHC.Real.Rational
                                                                   = {__scc {main:Order1Int.ansatzA.intArea} True True} BasicTensors.interArea
                                                                                                                          w
                                                                                                                          w1
                                                                 } in
                                                                 ({__scc {main:Order1Int.ansatzA.prod} True True} Order1Int.ansatzA5
                                                                                                                    intArea
                                                                                                                    totalBlock2)
                                                                   `cast`
                                                                 (Tensor.Tensor
                                                                    (Add0R (<1>_N))
                                                                    (Add0R (<1>_N))
                                                                    (Add0L (<0>_N))
                                                                    (Add0L (<0>_N))
                                                                    (Add0L (<1>_N))
                                                                    (Add0L (<0>_N))
                                                                    <1 GHC.TypeNats.+ 1>_N
                                                                    <1 GHC.TypeNats.+ 1>_N
                                                                    <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Order1Int.ansatzA} False True} Tensor.$wtensorContractWith_3
                                                                    @ 1
                                                                    @ 1
                                                                    @ GHC.Real.Rational
                                                                    @ 1
                                                                    @ 1
                                                                    @ 0
                                                                    @ 0
                                                                    @ 1
                                                                    @ 0
                                                                    Order1Int.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                    Order1Int.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                    Order1Int.ansatzA3
                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                    ww1 of ww2 { Unit# ww3 ->
                 {__scc {main:Order1Int.ansatzA} False True} Tensor.$wtensorContractWith_3
                                                               @ 0
                                                               @ 0
                                                               @ GHC.Real.Rational
                                                               @ 1
                                                               @ 1
                                                               @ 0
                                                               @ 0
                                                               @ 1
                                                               @ 0
                                                               Order1Int.$stensorContractWith_3
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               Order1Int.$stensorContractWith_3
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               Order1Int.ansatzA1
                                                               GHC.Real.$fEnumRatio_$s$c+
                                                               ww3
                                                                 `cast`
                                                               (Data.Map.Internal.Map
                                                                  ((,,,,,,,)
                                                                     <Index.Ind 1 Index.Uind_20>_N
                                                                     <Index.Ind 1 Index.Lind_20>_N
                                                                     <Index.Ind 0 Index.Uind_19>_N
                                                                     <Index.Ind 0 Index.Lind_19>_N
                                                                     <Index.Ind 1 Index.Uind_9>_N
                                                                     <Index.Ind 0 Index.Lind_9>_N
                                                                     (Index.Ind
                                                                        (Sym (Add0L (<1>_N)))
                                                                        <Index.Uind_3>_N)_N
                                                                     (Index.Ind
                                                                        (Sym (Add0L (<1>_N)))
                                                                        <Index.Lind_3>_N)_N)_N
                                                                  <GHC.Real.Rational>_R)_R } }) -}
71cc0a46228c651dfc0442165dcfe584
  $wansatzAI3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Order1Int.ansatzAI3} True True} let {
                                                                     totalBlock2 :: Tensor.Tensor
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      1
                                                                                      0
                                                                                      1
                                                                                      1
                                                                                      GHC.Real.Rational
                                                                     = let {
                                                                         antiSym :: Tensor.Tensor
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      1
                                                                                      0
                                                                                      0
                                                                                      2
                                                                                      GHC.Real.Rational
                                                                         = {__scc {main:Order1Int.ansatzAI3.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                  w2
                                                                       } in
                                                                       {__scc {main:Order1Int.ansatzAI3.totalBlock2} True True} case (Order1Int.ansatzAI2
                                                                                                                                        BasicTensors.invEta
                                                                                                                                        antiSym)
                                                                                                                                       `cast`
                                                                                                                                     (Tensor.Tensor
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                        (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                        <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                                case Tensor.$wtensorContractWith_3
                                                                                                                                       @ 1
                                                                                                                                       @ 1
                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 1
                                                                                                                                       @ 0
                                                                                                                                       Order1Int.$stensorContractWith_1
                                                                                                                                         `cast`
                                                                                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                 <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                       Order1Int.$stensorContractWith_1
                                                                                                                                         `cast`
                                                                                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                 <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                       Order1Int.ansatzA6
                                                                                                                                       GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                       ww1 of ww2 { Unit# ww3 ->
                                                                                                                                Tensor.Tensor
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  ww3 } }
                                                                   } in
                                                                   let {
                                                                     int3 :: Tensor.Tensor
                                                                               1
                                                                               1
                                                                               0
                                                                               0
                                                                               1
                                                                               1
                                                                               1
                                                                               1
                                                                               GHC.Real.Rational
                                                                     = {__scc {main:Order1Int.ansatzAI3.int3} True True} BasicTensors.interEqn1_3
                                                                                                                           w
                                                                                                                           w1
                                                                                                                           w2
                                                                                                                           w3
                                                                   } in
                                                                   ({__scc {main:Order1Int.ansatzAI3.prod} True True} Order1Int.ansatzAI1
                                                                                                                        int3
                                                                                                                        totalBlock2)
                                                                     `cast`
                                                                   (Tensor.Tensor
                                                                      (Add0R (<1>_N))
                                                                      (Add0R (<1>_N))
                                                                      (Add0L (<0>_N))
                                                                      (Add0L (<0>_N))
                                                                      (AddDef (<1>_N, <1>_N))
                                                                      (Add0R (<1>_N))
                                                                      <1 GHC.TypeNats.+ 1>_N
                                                                      <1 GHC.TypeNats.+ 1>_N
                                                                      <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Order1Int.ansatzAI3} False True} Tensor.$wtensorContractWith_3
                                                                      @ 1
                                                                      @ 1
                                                                      @ GHC.Real.Rational
                                                                      @ 1
                                                                      @ 1
                                                                      @ 0
                                                                      @ 0
                                                                      @ 2
                                                                      @ 1
                                                                      Order1Int.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      Order1Int.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      Order1Int.ansatzA3
                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                      ww1 of ww2 { Unit# ww3 ->
                 {__scc {main:Order1Int.ansatzAI3} False True} Tensor.$wtensorContractWith_3
                                                                 @ 0
                                                                 @ 0
                                                                 @ GHC.Real.Rational
                                                                 @ 1
                                                                 @ 1
                                                                 @ 0
                                                                 @ 0
                                                                 @ 2
                                                                 @ 1
                                                                 Order1Int.$stensorContractWith_3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 Order1Int.$stensorContractWith_3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 Order1Int.ansatzA1
                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                 ww3
                                                                   `cast`
                                                                 (Data.Map.Internal.Map
                                                                    ((,,,,,,,)
                                                                       <Index.Ind 1 Index.Uind_20>_N
                                                                       <Index.Ind 1 Index.Lind_20>_N
                                                                       <Index.Ind 0 Index.Uind_19>_N
                                                                       <Index.Ind 0 Index.Lind_19>_N
                                                                       <Index.Ind 2 Index.Uind_9>_N
                                                                       <Index.Ind 1 Index.Lind_9>_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Uind_3>_N)_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Lind_3>_N)_N)_N
                                                                    <GHC.Real.Rational>_R)_R } }) -}
c73403004d0721c361b9610e11fb9ae9
  $wansatzAa ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 0 1 1) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Order1Int.ansatzAa} True True} let {
                                                                    totalBlock2 :: Tensor.Tensor
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     1
                                                                                     0
                                                                                     1
                                                                                     1
                                                                                     GHC.Real.Rational
                                                                    = let {
                                                                        antiSym :: Tensor.Tensor
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     1
                                                                                     0
                                                                                     0
                                                                                     2
                                                                                     GHC.Real.Rational
                                                                        = {__scc {main:Order1Int.ansatzAa.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                w2
                                                                      } in
                                                                      {__scc {main:Order1Int.ansatzAa.totalBlock2} True True} case (Order1Int.ansatzAa5
                                                                                                                                      BasicTensors.invEta
                                                                                                                                      antiSym)
                                                                                                                                     `cast`
                                                                                                                                   (Tensor.Tensor
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                      (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                              case Tensor.$wtensorContractWith_3
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     Order1Int.$stensorContractWith_1
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                     Order1Int.$stensorContractWith_1
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                     Order1Int.ansatzA6
                                                                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                     ww1 of ww2 { Unit# ww3 ->
                                                                                                                              Tensor.Tensor
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                ww3 } }
                                                                  } in
                                                                  let {
                                                                    int2 :: Tensor.Tensor
                                                                              1
                                                                              1
                                                                              0
                                                                              0
                                                                              0
                                                                              0
                                                                              2
                                                                              2
                                                                              GHC.Real.Rational
                                                                    = {__scc {main:Order1Int.ansatzAa.int2} True True} BasicTensors.interEqn1_2
                                                                                                                         w
                                                                                                                         w1
                                                                  } in
                                                                  ({__scc {main:Order1Int.ansatzAa.prod} True True} Order1Int.ansatzAa4
                                                                                                                      int2
                                                                                                                      totalBlock2)
                                                                    `cast`
                                                                  (Tensor.Tensor
                                                                     (Add0R (<1>_N))
                                                                     (Add0R (<1>_N))
                                                                     (Add0L (<0>_N))
                                                                     (Add0L (<0>_N))
                                                                     (Add0L (<1>_N))
                                                                     (Add0L (<0>_N))
                                                                     <2 GHC.TypeNats.+ 1>_N
                                                                     <2 GHC.TypeNats.+ 1>_N
                                                                     <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Order1Int.ansatzAa} False True} Tensor.$wtensorContractWith_3
                                                                     @ 2
                                                                     @ 2
                                                                     @ GHC.Real.Rational
                                                                     @ 1
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     Order1Int.$stensorContractWith_8
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                     Order1Int.$stensorContractWith_8
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                     Order1Int.ansatzAa2
                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                     ww1 of ww2 { Unit# ww3 ->
                 {__scc {main:Order1Int.ansatzAa} False True} Tensor.$wtensorContractWith_3
                                                                @ 1
                                                                @ 1
                                                                @ GHC.Real.Rational
                                                                @ 1
                                                                @ 1
                                                                @ 0
                                                                @ 0
                                                                @ 1
                                                                @ 0
                                                                Order1Int.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                Order1Int.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                Order1Int.ansatzAa1
                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                ww3
                                                                  `cast`
                                                                (Data.Map.Internal.Map
                                                                   ((,,,,,,,)
                                                                      <Index.Ind 1 Index.Uind_20>_N
                                                                      <Index.Ind 1 Index.Lind_20>_N
                                                                      <Index.Ind 0 Index.Uind_19>_N
                                                                      <Index.Ind 0 Index.Lind_19>_N
                                                                      <Index.Ind 1 Index.Uind_9>_N
                                                                      <Index.Ind 0 Index.Lind_9>_N
                                                                      (Index.Ind
                                                                         (Sym (AddDef (<1>_N,
                                                                                       <1>_N)))
                                                                         <Index.Uind_3>_N)_N
                                                                      (Index.Ind
                                                                         (Sym (AddDef (<1>_N,
                                                                                       <1>_N)))
                                                                         <Index.Lind_3>_N)_N)_N
                                                                   <GHC.Real.Rational>_R)_R } }) -}
b65b1a7089e47548070b7dfa6b2a7129
  $wint1A ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:Order1Int.int1A} True True} let {
                                                                 intArea :: Tensor.Tensor
                                                                              1
                                                                              1
                                                                              0
                                                                              0
                                                                              0
                                                                              0
                                                                              1
                                                                              1
                                                                              GHC.Real.Rational
                                                                 = {__scc {main:Order1Int.int1A.intArea} True True} BasicTensors.interArea
                                                                                                                      w
                                                                                                                      w1
                                                               } in
                                                               let {
                                                                 flatInter :: Tensor.Tensor
                                                                                0
                                                                                1
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                1
                                                                                1
                                                                                GHC.Real.Rational
                                                                 = let {
                                                                     flatA :: Tensor.Tensor
                                                                                0
                                                                                1
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                GHC.Real.Rational
                                                                     = {__scc {main:Order1Int.int1A.flatA} True True} BasicTensors.flatArea
                                                                                                                        w1
                                                                   } in
                                                                   {__scc {main:Order1Int.int1A.flatInter} True True} case (Order1Int.int1A5
                                                                                                                              intArea
                                                                                                                              flatA)
                                                                                                                             `cast`
                                                                                                                           (Tensor.Tensor
                                                                                                                              (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                              <1
                                                                                                                               GHC.TypeNats.+ 1>_N
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0R (<1>_N))
                                                                                                                              (Add0R (<1>_N))
                                                                                                                              <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                      case Tensor.$wtensorContractWith_20
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             Order1Int.$stensorContractWith_3
                                                                                                                               `cast`
                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                       <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                             Order1Int.$stensorContractWith_1
                                                                                                                               `cast`
                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                       <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                             Order1Int.ansatzA3
                                                                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                                                                             ww1 of ww2 { Unit# ww3 ->
                                                                                                                      Tensor.Tensor
                                                                                                                        @ 0
                                                                                                                        @ 1
                                                                                                                        @ 0
                                                                                                                        @ 0
                                                                                                                        @ 0
                                                                                                                        @ 0
                                                                                                                        @ 1
                                                                                                                        @ 1
                                                                                                                        @ GHC.Real.Rational
                                                                                                                        ww3 } }
                                                               } in
                                                               {__scc {main:Order1Int.int1A.tens} True False} case ({__scc {main:Order1Int.int1A.block1} True True} Order1Int.int1A4
                                                                                                                                                                      BasicTensors.delta_3
                                                                                                                                                                      flatInter)
                                                                                                                     `cast`
                                                                                                                   (Tensor.Tensor
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<1>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                              case ({__scc {main:Order1Int.int1A.block2} True True} Order1Int.int1A3
                                                                                                                                                                      intArea
                                                                                                                                                                      flatInter)
                                                                                                                     `cast`
                                                                                                                   (Tensor.Tensor
                                                                                                                      (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                      <1
                                                                                                                       GHC.TypeNats.+ 1>_N
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                                                                                                              case {__scc {main:Order1Int.int1A.block2} False True} Tensor.$wtensorContractWith_20
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 2
                                                                                                                                                                      @ 2
                                                                                                                                                                      Order1Int.$stensorContractWith_3
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                      Order1Int.$stensorContractWith_1
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                      Order1Int.ansatzA3
                                                                                                                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                      ww3 of ww4 { Unit# ww5 ->
                                                                                                              case {__scc {main:Order1Int.int1A.tens} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                               ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                             @ (Index.Index
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                                                  2)
                                                                                                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                                                                                                             (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 1
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                                                @ 2)
                                                                                                                                                                                                                                                             Order1Int.int1A_lvl19
                                                                                                                                                                                                                                                             ww1
                                                                                                                                                                                                                                                             ww5) of ww6 { Tensor.Tensor ww7 ->
                                                                                                              case {__scc {main:Order1Int.int1A.tensTrans} True True} Tensor.$wtensorTranspose
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 1
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 2
                                                                                                                                                                        @ 2
                                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                                        Order1Int.int1A2
                                                                                                                                                                        Order1Int.ansatzA3
                                                                                                                                                                        ww7 of ww8 { Unit# ww9 ->
                                                                                                              case {__scc {main:Order1Int.int1A.tensTrans} False True} Tensor.$wtensorTranspose
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 1
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 2
                                                                                                                                                                         @ 2
                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                         Order1Int.int1A1
                                                                                                                                                                         Order1Int.ansatzA3
                                                                                                                                                                         ww9 of ww10 { Unit# ww11 ->
                                                                                                              case {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                               ({__scc {main:Tensor.fmap} False True} Order1Int.int1A_go8
                                                                                                                                                                                                                                                                                                                                        ww11) of ww12 { Tensor.Tensor ww13 ->
                                                                                                              {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 1
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 2
                                                                                                                                                                                                      @ 2
                                                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                                                      ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                    @ (Index.Index
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         2
                                                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                                                    (Tensor.aSymTensor3
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 2
                                                                                                                                                                                                                                                       @ 2)
                                                                                                                                                                                                                                                    Order1Int.int1A_lvl19
                                                                                                                                                                                                                                                    ww7
                                                                                                                                                                                                                                                    ww13) } } } } } } } of ww { Tensor.Tensor ww1 ->
                 (# ww1 #) }) -}
896518029b81d690724511426c1cb34a
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
74076cbe5ba3af3a731d1c2984689a9c
  ansatzA ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wansatzA w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
af115185b1612edce1fe5bd26de0080a
  ansatzA1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA2, Order1Int.ansatzA2)) -}
ce3708e9981d30d587c2b22c3ef431ae
  ansatzA2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8795c46eed56ca46f815918a2135d1f6
  ansatzA3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA2, Order1Int.ansatzA4)) -}
b1cf385b8ad70db01ed1df16382e2469
  ansatzA4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
c59963e3d51a556a3704148ee8609187
  ansatzA5 ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzA} False True} {__scc {main:Order1Int.ansatzA.prod} False True} Tensor.tensorProductNumeric
                                                                                                                @ GHC.Real.Rational
                                                                                                                @ 1
                                                                                                                @ 1
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 1
                                                                                                                @ 1
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 1
                                                                                                                @ 0
                                                                                                                @ 1
                                                                                                                @ 1
                                                                                                                GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                GHC.Real.$fOrdRatio_$s$fEqRatio) -}
8587cb509f10060ed8dab05fcba639e8
  ansatzA6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA4, Order1Int.ansatzA4)) -}
7d2e3a92d1dd9577976b474cd57e1689
  ansatzA7 ::
    Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzA} False True} {__scc {main:Order1Int.ansatzA.totalBlock2} False True} Tensor.tensorProductNumeric
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 2
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 1
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 2
                                                                                                                       GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                       GHC.Real.$fOrdRatio_$s$fEqRatio) -}
82a0ec314543535897e1b9c4c836d859
  ansatzAI1 ::
    Tensor.Tensor 1 1 0 0 1 1 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAI3} False True} {__scc {main:Order1Int.ansatzAI3.prod} False True} Tensor.tensorProductNumeric
                                                                                                                    @ GHC.Real.Rational
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                    GHC.Real.$fOrdRatio_$s$fEqRatio) -}
c84a0508213f4d9112b665cc57ca2b64
  ansatzAI2 ::
    Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAI3} False True} {__scc {main:Order1Int.ansatzAI3.totalBlock2} False True} Tensor.tensorProductNumeric
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 2
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 1
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 2
                                                                                                                           GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                           GHC.Real.$fOrdRatio_$s$fEqRatio) -}
6b2745f52550f1402046c7287d788962
  ansatzAI3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wansatzAI3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
030bceb994a16de3380836a43c274f8b
  ansatzAa ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wansatzAa w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
1c45b0a71252ba467c66e932a9127a9c
  ansatzAa1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA4, Order1Int.ansatzA2)) -}
2134cfc17acee47f682a0a07afea94b8
  ansatzAa2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA2, Order1Int.ansatzAa3)) -}
ceb1924fea66323d62bbd6a8647eae0c
  ansatzAa3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
ba25edc4abca0151fb531b9093c4cd92
  ansatzAa4 ::
    Tensor.Tensor 1 1 0 0 0 0 2 2 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 1)
         (2 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAa} False True} {__scc {main:Order1Int.ansatzAa.prod} False True} Tensor.tensorProductNumeric
                                                                                                                  @ GHC.Real.Rational
                                                                                                                  @ 1
                                                                                                                  @ 1
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 2
                                                                                                                  @ 2
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 1
                                                                                                                  @ 0
                                                                                                                  @ 1
                                                                                                                  @ 1
                                                                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
4e93fc250c01661301d58c0e20745cb9
  ansatzAa5 ::
    Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAa} False True} {__scc {main:Order1Int.ansatzAa.totalBlock2} False True} Tensor.tensorProductNumeric
                                                                                                                         @ GHC.Real.Rational
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 2
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 1
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 2
                                                                                                                         GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                         GHC.Real.$fOrdRatio_$s$fEqRatio) -}
34845a18df1e4d5a8b1c71e4d60a2b99
  int1A ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wint1A w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
37723d4c8cce2499283964f84de8bf4b
  int1A1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
804e8aba5d108aab21c3bfd457be17b1
  int1A2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
47d55146977dbeb62575842a3286000d
  int1A3 ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.int1A} False True} {__scc {main:Order1Int.int1A.block2} False True} Tensor.tensorProductNumeric
                                                                                                              @ GHC.Real.Rational
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
350787ced474ebf2b8c05fa3739c39ef
  int1A4 ::
    Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.int1A} False True} {__scc {main:Order1Int.int1A.block1} False True} Tensor.tensorProductNumeric
                                                                                                              @ GHC.Real.Rational
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
32a0bcb77211716f033b5707a4d1a7e1
  int1A5 ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 1 0 0 0 0 0 0 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.int1A} False True} {__scc {main:Order1Int.int1A.flatInter} False True} Tensor.tensorProductNumeric
                                                                                                                 @ GHC.Real.Rational
                                                                                                                 @ 1
                                                                                                                 @ 1
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 1
                                                                                                                 @ 1
                                                                                                                 @ 0
                                                                                                                 @ 1
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                 GHC.Real.$fOrdRatio_$s$fEqRatio) -}
ed60c4127e18453ed0bf31ce7c267369
  int1A_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
f47ecc96c33924e7b91ebb5163b70eaf
  int1A_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
479c4683f29834ec3403a47e64cd40c1
  mkEqnSparseAnsatzA ::
    Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseAnsatzA} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                       Order1Int.$sfromList
                                                                         @ (GHC.Real.Ratio
                                                                              GHC.Integer.Type.Integer)
                                                                         (Order1Int.mkEqnSparseAnsatzA_go13
                                                                            (GHC.Types.[]
                                                                               @ ((GHC.Types.Int,
                                                                                   GHC.Types.Int),
                                                                                  GHC.Real.Rational))
                                                                            map1) }) -}
c19a27430515cf9f7ad7d8ca968e54e4
  mkEqnSparseAnsatzAI ::
    Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseAnsatzAI} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        Order1Int.$sfromList
                                                                          @ (GHC.Real.Ratio
                                                                               GHC.Integer.Type.Integer)
                                                                          (Order1Int.mkEqnSparseAnsatzAI_go13
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   GHC.Real.Rational))
                                                                             map1) }) -}
40efdbfe17084a4ff37a4d3510f3c2db
  mkEqnSparseAnsatzAI_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
c52cea6f0501e4d57ce65a1ad811697d
  mkEqnSparseAnsatzA_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
818371a18d106a9b4aa4374bff846a82
  mkEqnSparseAnsatzAa ::
    Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseAnsatzAa} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        Order1Int.$sfromList
                                                                          @ (GHC.Real.Ratio
                                                                               GHC.Integer.Type.Integer)
                                                                          (Order1Int.mkEqnSparseAnsatzAa_go13
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   GHC.Real.Rational))
                                                                             map1) }) -}
43fda11a0d93938702f683d62a824dad
  mkEqnSparseAnsatzAa_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 0 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
95ce13febb2f65bf6a08756331cffe9c
  mkEqnSparseint1A ::
    Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseint1A} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                     Order1Int.$sfromList
                                                                       @ (GHC.Real.Ratio
                                                                            GHC.Integer.Type.Integer)
                                                                       (Order1Int.mkEqnSparseint1A_go13
                                                                          (GHC.Types.[]
                                                                             @ ((GHC.Types.Int,
                                                                                 GHC.Types.Int),
                                                                                GHC.Real.Rational))
                                                                          map1) }) -}
274d1c433a657c05d81a2beba23fa7ab
  mkEqnSparseint1A_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
"SPEC/Order1Int fromList @ (Int, Int) _" [orphan] forall @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (GHC.Types.Int, GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = Order1Int.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

