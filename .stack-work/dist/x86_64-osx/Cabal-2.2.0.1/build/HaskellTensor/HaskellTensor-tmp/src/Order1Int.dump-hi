
==================== FINAL INTERFACE ====================
2019-01-31 12:58:22.111714 UTC

interface main:Order1Int [hpc] 8043
  interface hash: a8012d33d7b19c054d0e5867f1d0a82e
  ABI hash: 88514d6b94abf8ac19c2858f31da8469
  export-list hash: 3156458f202b8180fa4d12d06df87b30
  orphan hash: e57ac501923ff142aace6542155aec7d
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Order1Int.ansatzA
  Order1Int.ansatzAI3
  Order1Int.ansatzAa
  Order1Int.int1A
  Order1Int.mkEqnSparseAnsatzA
  Order1Int.mkEqnSparseAnsatzAI
  Order1Int.mkEqnSparseAnsatzAa
  Order1Int.mkEqnSparseint1A
module dependencies: BasicTensors EquivarianceEqns Index Ivar Pde
                     Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  BasicTensors 37af3f9a8fd59a713f944ac004973e4c
  exports: a936cd94aa71589de0ffe8aa62c98d1e
  aSymI_2 eeff560e74087b636ad919718b07ce3c
  delta_3 8cc1e4b8317d66d7eca659c350329b06
  flatArea fbe15ed48c6fdb6adf67a8daa949019a
  interArea c20342d63b6344034b01aaa2ac26950f
  interEqn1_2 db36d6110c82f1d673fc4c0425276420
  interEqn1_3 57ab473d41cec6be447a5d9ae4521d74
  invEta 52347259ce29e9b051664d61ef567a63
import  -/  EquivarianceEqns 024c09c474101d82ccea2ae493ef0935
  exports: 753233c47284511068d96a6925317f46
import  -/  Index 71b3346044a1d0e00e59251850573a46
  exports: 91057ce0b804927200140466044aa77d
  Index 1f5ddc4679c562a7168aef180062eec5
  Lind_20 06537182db1996ed045a0cd1b89858a5
  Lind_9 7ecf2cdb519ad8d35de36386b0078158
  Linds_3 e889a76254b9568bcd306a682aa34a7e
  Uind_20 4bc2e2d710a65926fc1cbc6f81e36f73
  Uind_9 d3fbf44c59cbc2b93a3471d3308e9718
  Uinds_3 a3598cb2e3c7e8040d14aca7e8d357c5
  getValInd 5c90c661410f5cfc2f14176d2316e42c
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
import  -/  Pde ee46c0f08935aa69c73c37bcf3103bae
  exports: 5f26c9b1fc31234bc17b520659bce428
import  -/  Tensor a23a73880b2c27c94d4da0de54dee0ec
  exports: 652d5857d480c465fdf5ba71dcde1677
  Tensor 4b013267227da1ee7744d7e5a0036bd0
  Tensor ba59d8983dc93fba3a30d24b40148bfb
  tensorAdd ffa73e4d3d0d9f351f17926e90320c54
  tensorContractWith_20 a25204e5f61a8dd7bfafd0d945b634e9
  tensorContractWith_3 60512091e70a83c1aec3d9e0e69c4150
  tensorProductNumeric 3ceb169d18bc856c3b8ab815fcf92212
  tensorSub fa755c70900c56cb9228bd5f8e3cb8d5
  tensorTranspose 5419f653b93e8002279716673d331d33
ef87ba339c31a5fc28c22bb4f8d1c1a2
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> Order1Int.$sfromList1
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> Order1Int.$sfromList1
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> Order1Int.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> Order1Int.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
e06410ba082264b41617e87f2c0da4d9
  $sfromList1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
453dc8aae7af260afc6ae44b5224498e
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case Order1Int.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
714fc8a9497c67f11a456e9f0446ff2d
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c61706b98e708c1c0bd321ff78b1c0f7
  $stensorContractWith_3 :: GHC.Natural.Natural
  {- Unfolding: (case Order1Int.$stensorContractWith_4 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
10fcd506f23dad01b7c10bd43d98383e
  $stensorContractWith_4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
12a937d6799506d0c8b177df44fcc4e8
  $stensorContractWith_8 :: GHC.Natural.Natural
  {- Unfolding: (case Order1Int.$stensorContractWith_9 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
98851dded94438f512bdd628e38a904e
  $stensorContractWith_9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
8c7d8789ee389c482a04fc6c0949316f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Order1Int.$trModule3
                   Order1Int.$trModule1) -}
67eaa44c9bf5e5e8290eb846c9562adb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Order1Int.$trModule2) -}
909ca605bc6240032a88ab61c0ce43f9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Order1Int"#) -}
03fe540f840d400a4c5e04fe2e3bfc77
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Order1Int.$trModule4) -}
6102f578f37a7e028d9f50f57c3e6a44
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
ac456c5462f1506939983c3e7f4fc065
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
454b23411658135d9d3ab68e564a6e66
  $wansatzA ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Order1Int.ansatzA} True True} let {
                                                                   totalBlock2 :: Tensor.Tensor
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    1
                                                                                    0
                                                                                    1
                                                                                    1
                                                                                    GHC.Real.Rational
                                                                   = let {
                                                                       antiSym :: Tensor.Tensor
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    0
                                                                                    1
                                                                                    0
                                                                                    0
                                                                                    2
                                                                                    GHC.Real.Rational
                                                                       = {__scc {main:Order1Int.ansatzA.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                              w2
                                                                     } in
                                                                     {__scc {main:Order1Int.ansatzA.totalBlock2} True True} case (Order1Int.ansatzA7
                                                                                                                                    BasicTensors.invEta
                                                                                                                                    antiSym)
                                                                                                                                   `cast`
                                                                                                                                 (Tensor.Tensor
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0L (<1>_N))
                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                    (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                    (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                  <1>_N)))
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                            case Tensor.$wtensorContractWith_3
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   Order1Int.$stensorContractWith_1
                                                                                                                                     `cast`
                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                   Order1Int.$stensorContractWith_1
                                                                                                                                     `cast`
                                                                                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                   Order1Int.ansatzA6
                                                                                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                   ww1 of ww2 { Unit# ww3 ->
                                                                                                                            Tensor.Tensor
                                                                                                                              @ 0
                                                                                                                              @ 0
                                                                                                                              @ 0
                                                                                                                              @ 0
                                                                                                                              @ 1
                                                                                                                              @ 0
                                                                                                                              @ 1
                                                                                                                              @ 1
                                                                                                                              @ GHC.Real.Rational
                                                                                                                              ww3 } }
                                                                 } in
                                                                 let {
                                                                   intArea :: Tensor.Tensor
                                                                                1
                                                                                1
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                1
                                                                                1
                                                                                GHC.Real.Rational
                                                                   = {__scc {main:Order1Int.ansatzA.intArea} True True} BasicTensors.interArea
                                                                                                                          w
                                                                                                                          w1
                                                                 } in
                                                                 ({__scc {main:Order1Int.ansatzA.prod} True True} Order1Int.ansatzA5
                                                                                                                    intArea
                                                                                                                    totalBlock2)
                                                                   `cast`
                                                                 (Tensor.Tensor
                                                                    (Add0R (<1>_N))
                                                                    (Add0R (<1>_N))
                                                                    (Add0L (<0>_N))
                                                                    (Add0L (<0>_N))
                                                                    (Add0L (<1>_N))
                                                                    (Add0L (<0>_N))
                                                                    <1 GHC.TypeNats.+ 1>_N
                                                                    <1 GHC.TypeNats.+ 1>_N
                                                                    <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Order1Int.ansatzA} False True} Tensor.$wtensorContractWith_3
                                                                    @ 1
                                                                    @ 1
                                                                    @ GHC.Real.Rational
                                                                    @ 1
                                                                    @ 1
                                                                    @ 0
                                                                    @ 0
                                                                    @ 1
                                                                    @ 0
                                                                    Order1Int.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                    Order1Int.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                    Order1Int.ansatzA3
                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                    ww1 of ww2 { Unit# ww3 ->
                 {__scc {main:Order1Int.ansatzA} False True} Tensor.$wtensorContractWith_3
                                                               @ 0
                                                               @ 0
                                                               @ GHC.Real.Rational
                                                               @ 1
                                                               @ 1
                                                               @ 0
                                                               @ 0
                                                               @ 1
                                                               @ 0
                                                               Order1Int.$stensorContractWith_3
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               Order1Int.$stensorContractWith_3
                                                                 `cast`
                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                               Order1Int.ansatzA1
                                                               GHC.Real.$fEnumRatio_$s$c+
                                                               ww3
                                                                 `cast`
                                                               (Data.Map.Internal.Map
                                                                  ((,,,,,,,)
                                                                     <Index.Ind 1 Index.Uind_20>_N
                                                                     <Index.Ind 1 Index.Lind_20>_N
                                                                     <Index.Ind 0 Index.Uind_19>_N
                                                                     <Index.Ind 0 Index.Lind_19>_N
                                                                     <Index.Ind 1 Index.Uind_9>_N
                                                                     <Index.Ind 0 Index.Lind_9>_N
                                                                     (Index.Ind
                                                                        (Sym (Add0L (<1>_N)))
                                                                        <Index.Uind_3>_N)_N
                                                                     (Index.Ind
                                                                        (Sym (Add0L (<1>_N)))
                                                                        <Index.Lind_3>_N)_N)_N
                                                                  <GHC.Real.Rational>_R)_R } }) -}
89dfa5e23a99509d588bb876574cb7c5
  $wansatzAI3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:Order1Int.ansatzAI3} True True} let {
                                                                     totalBlock2 :: Tensor.Tensor
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      1
                                                                                      0
                                                                                      1
                                                                                      1
                                                                                      GHC.Real.Rational
                                                                     = let {
                                                                         antiSym :: Tensor.Tensor
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      0
                                                                                      1
                                                                                      0
                                                                                      0
                                                                                      2
                                                                                      GHC.Real.Rational
                                                                         = {__scc {main:Order1Int.ansatzAI3.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                  w2
                                                                       } in
                                                                       {__scc {main:Order1Int.ansatzAI3.totalBlock2} True True} case (Order1Int.ansatzAI2
                                                                                                                                        BasicTensors.invEta
                                                                                                                                        antiSym)
                                                                                                                                       `cast`
                                                                                                                                     (Tensor.Tensor
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                        (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                        (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                      <1>_N)))
                                                                                                                                        <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                                case Tensor.$wtensorContractWith_3
                                                                                                                                       @ 1
                                                                                                                                       @ 1
                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 1
                                                                                                                                       @ 0
                                                                                                                                       Order1Int.$stensorContractWith_1
                                                                                                                                         `cast`
                                                                                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                 <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                       Order1Int.$stensorContractWith_1
                                                                                                                                         `cast`
                                                                                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                 <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                       Order1Int.ansatzA6
                                                                                                                                       GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                       ww1 of ww2 { Unit# ww3 ->
                                                                                                                                Tensor.Tensor
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  ww3 } }
                                                                   } in
                                                                   let {
                                                                     int3 :: Tensor.Tensor
                                                                               1
                                                                               1
                                                                               0
                                                                               0
                                                                               1
                                                                               1
                                                                               1
                                                                               1
                                                                               GHC.Real.Rational
                                                                     = {__scc {main:Order1Int.ansatzAI3.int3} True True} BasicTensors.interEqn1_3
                                                                                                                           w
                                                                                                                           w1
                                                                                                                           w2
                                                                                                                           w3
                                                                   } in
                                                                   ({__scc {main:Order1Int.ansatzAI3.prod} True True} Order1Int.ansatzAI1
                                                                                                                        int3
                                                                                                                        totalBlock2)
                                                                     `cast`
                                                                   (Tensor.Tensor
                                                                      (Add0R (<1>_N))
                                                                      (Add0R (<1>_N))
                                                                      (Add0L (<0>_N))
                                                                      (Add0L (<0>_N))
                                                                      (AddDef (<1>_N, <1>_N))
                                                                      (Add0R (<1>_N))
                                                                      <1 GHC.TypeNats.+ 1>_N
                                                                      <1 GHC.TypeNats.+ 1>_N
                                                                      <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Order1Int.ansatzAI3} False True} Tensor.$wtensorContractWith_3
                                                                      @ 1
                                                                      @ 1
                                                                      @ GHC.Real.Rational
                                                                      @ 1
                                                                      @ 1
                                                                      @ 0
                                                                      @ 0
                                                                      @ 2
                                                                      @ 1
                                                                      Order1Int.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      Order1Int.$stensorContractWith_1
                                                                        `cast`
                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                      Order1Int.ansatzA3
                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                      ww1 of ww2 { Unit# ww3 ->
                 {__scc {main:Order1Int.ansatzAI3} False True} Tensor.$wtensorContractWith_3
                                                                 @ 0
                                                                 @ 0
                                                                 @ GHC.Real.Rational
                                                                 @ 1
                                                                 @ 1
                                                                 @ 0
                                                                 @ 0
                                                                 @ 2
                                                                 @ 1
                                                                 Order1Int.$stensorContractWith_3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 Order1Int.$stensorContractWith_3
                                                                   `cast`
                                                                 (Sym (GHC.TypeNats.N:SNat[0]
                                                                           <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                 Order1Int.ansatzA1
                                                                 GHC.Real.$fEnumRatio_$s$c+
                                                                 ww3
                                                                   `cast`
                                                                 (Data.Map.Internal.Map
                                                                    ((,,,,,,,)
                                                                       <Index.Ind 1 Index.Uind_20>_N
                                                                       <Index.Ind 1 Index.Lind_20>_N
                                                                       <Index.Ind 0 Index.Uind_19>_N
                                                                       <Index.Ind 0 Index.Lind_19>_N
                                                                       <Index.Ind 2 Index.Uind_9>_N
                                                                       <Index.Ind 1 Index.Lind_9>_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Uind_3>_N)_N
                                                                       (Index.Ind
                                                                          (Sym (Add0L (<1>_N)))
                                                                          <Index.Lind_3>_N)_N)_N
                                                                    <GHC.Real.Rational>_R)_R } }) -}
0a00de42e6c823734ca0dc94a5f91346
  $wansatzAa ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 1 0 0 1 0 1 1) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:Order1Int.ansatzAa} True True} let {
                                                                    totalBlock2 :: Tensor.Tensor
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     1
                                                                                     0
                                                                                     1
                                                                                     1
                                                                                     GHC.Real.Rational
                                                                    = let {
                                                                        antiSym :: Tensor.Tensor
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     0
                                                                                     1
                                                                                     0
                                                                                     0
                                                                                     2
                                                                                     GHC.Real.Rational
                                                                        = {__scc {main:Order1Int.ansatzAa.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                w2
                                                                      } in
                                                                      {__scc {main:Order1Int.ansatzAa.totalBlock2} True True} case (Order1Int.ansatzAa5
                                                                                                                                      BasicTensors.invEta
                                                                                                                                      antiSym)
                                                                                                                                     `cast`
                                                                                                                                   (Tensor.Tensor
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                      (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                      (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                      <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                              case Tensor.$wtensorContractWith_3
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     Order1Int.$stensorContractWith_1
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                     Order1Int.$stensorContractWith_1
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                     Order1Int.ansatzA6
                                                                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                     ww1 of ww2 { Unit# ww3 ->
                                                                                                                              Tensor.Tensor
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                ww3 } }
                                                                  } in
                                                                  let {
                                                                    int2 :: Tensor.Tensor
                                                                              1
                                                                              1
                                                                              0
                                                                              0
                                                                              0
                                                                              0
                                                                              2
                                                                              2
                                                                              GHC.Real.Rational
                                                                    = {__scc {main:Order1Int.ansatzAa.int2} True True} BasicTensors.interEqn1_2
                                                                                                                         w
                                                                                                                         w1
                                                                  } in
                                                                  ({__scc {main:Order1Int.ansatzAa.prod} True True} Order1Int.ansatzAa4
                                                                                                                      int2
                                                                                                                      totalBlock2)
                                                                    `cast`
                                                                  (Tensor.Tensor
                                                                     (Add0R (<1>_N))
                                                                     (Add0R (<1>_N))
                                                                     (Add0L (<0>_N))
                                                                     (Add0L (<0>_N))
                                                                     (Add0L (<1>_N))
                                                                     (Add0L (<0>_N))
                                                                     <2 GHC.TypeNats.+ 1>_N
                                                                     <2 GHC.TypeNats.+ 1>_N
                                                                     <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:Order1Int.ansatzAa} False True} Tensor.$wtensorContractWith_3
                                                                     @ 2
                                                                     @ 2
                                                                     @ GHC.Real.Rational
                                                                     @ 1
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     Order1Int.$stensorContractWith_8
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                     Order1Int.$stensorContractWith_8
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                     Order1Int.ansatzAa2
                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                     ww1 of ww2 { Unit# ww3 ->
                 {__scc {main:Order1Int.ansatzAa} False True} Tensor.$wtensorContractWith_3
                                                                @ 1
                                                                @ 1
                                                                @ GHC.Real.Rational
                                                                @ 1
                                                                @ 1
                                                                @ 0
                                                                @ 0
                                                                @ 1
                                                                @ 0
                                                                Order1Int.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                Order1Int.$stensorContractWith_1
                                                                  `cast`
                                                                (Sym (GHC.TypeNats.N:SNat[0]
                                                                          <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                Order1Int.ansatzAa1
                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                ww3
                                                                  `cast`
                                                                (Data.Map.Internal.Map
                                                                   ((,,,,,,,)
                                                                      <Index.Ind 1 Index.Uind_20>_N
                                                                      <Index.Ind 1 Index.Lind_20>_N
                                                                      <Index.Ind 0 Index.Uind_19>_N
                                                                      <Index.Ind 0 Index.Lind_19>_N
                                                                      <Index.Ind 1 Index.Uind_9>_N
                                                                      <Index.Ind 0 Index.Lind_9>_N
                                                                      (Index.Ind
                                                                         (Sym (AddDef (<1>_N,
                                                                                       <1>_N)))
                                                                         <Index.Uind_3>_N)_N
                                                                      (Index.Ind
                                                                         (Sym (AddDef (<1>_N,
                                                                                       <1>_N)))
                                                                         <Index.Lind_3>_N)_N)_N
                                                                   <GHC.Real.Rational>_R)_R } }) -}
8b902e7ecdee9af97d232a490f822ebf
  $wint1A ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:Order1Int.int1A} True True} let {
                                                                 intArea :: Tensor.Tensor
                                                                              1
                                                                              1
                                                                              0
                                                                              0
                                                                              0
                                                                              0
                                                                              1
                                                                              1
                                                                              GHC.Real.Rational
                                                                 = {__scc {main:Order1Int.int1A.intArea} True True} BasicTensors.interArea
                                                                                                                      w
                                                                                                                      w1
                                                               } in
                                                               let {
                                                                 flatInter :: Tensor.Tensor
                                                                                0
                                                                                1
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                1
                                                                                1
                                                                                GHC.Real.Rational
                                                                 = let {
                                                                     flatA :: Tensor.Tensor
                                                                                0
                                                                                1
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                0
                                                                                GHC.Real.Rational
                                                                     = {__scc {main:Order1Int.int1A.flatA} True True} BasicTensors.flatArea
                                                                                                                        w1
                                                                   } in
                                                                   {__scc {main:Order1Int.int1A.flatInter} True True} case (Order1Int.int1A5
                                                                                                                              intArea
                                                                                                                              flatA)
                                                                                                                             `cast`
                                                                                                                           (Tensor.Tensor
                                                                                                                              (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                              <1
                                                                                                                               GHC.TypeNats.+ 1>_N
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0L (<0>_N))
                                                                                                                              (Add0R (<1>_N))
                                                                                                                              (Add0R (<1>_N))
                                                                                                                              <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                                      case Tensor.$wtensorContractWith_20
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             Order1Int.$stensorContractWith_3
                                                                                                                               `cast`
                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                       <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                             Order1Int.$stensorContractWith_1
                                                                                                                               `cast`
                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                       <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                             Order1Int.ansatzA3
                                                                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                                                                             ww1 of ww2 { Unit# ww3 ->
                                                                                                                      Tensor.Tensor
                                                                                                                        @ 0
                                                                                                                        @ 1
                                                                                                                        @ 0
                                                                                                                        @ 0
                                                                                                                        @ 0
                                                                                                                        @ 0
                                                                                                                        @ 1
                                                                                                                        @ 1
                                                                                                                        @ GHC.Real.Rational
                                                                                                                        ww3 } }
                                                               } in
                                                               {__scc {main:Order1Int.int1A.tens} True False} case ({__scc {main:Order1Int.int1A.block1} True True} Order1Int.int1A4
                                                                                                                                                                      BasicTensors.delta_3
                                                                                                                                                                      flatInter)
                                                                                                                     `cast`
                                                                                                                   (Tensor.Tensor
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<1>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                                                                                                              case ({__scc {main:Order1Int.int1A.block2} True True} Order1Int.int1A3
                                                                                                                                                                      intArea
                                                                                                                                                                      flatInter)
                                                                                                                     `cast`
                                                                                                                   (Tensor.Tensor
                                                                                                                      (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                      <1
                                                                                                                       GHC.TypeNats.+ 1>_N
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (Add0L (<0>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      (AddDef (<1>_N,
                                                                                                                               <1>_N))
                                                                                                                      <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                                                                                                              case {__scc {main:Order1Int.int1A.block2} False True} Tensor.$wtensorContractWith_20
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 2
                                                                                                                                                                      @ 2
                                                                                                                                                                      Order1Int.$stensorContractWith_3
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                      Order1Int.$stensorContractWith_1
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                      Order1Int.ansatzA3
                                                                                                                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                      ww3 of ww4 { Unit# ww5 ->
                                                                                                              case {__scc {main:Order1Int.int1A.tens} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                               ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                             @ (Index.Index
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                                                  2)
                                                                                                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                                                                                                             (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 1
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                                                @ 2)
                                                                                                                                                                                                                                                             Order1Int.int1A_lvl19
                                                                                                                                                                                                                                                             ww1
                                                                                                                                                                                                                                                             ww5) of ww6 { Tensor.Tensor ww7 ->
                                                                                                              case {__scc {main:Order1Int.int1A.tensTrans} True True} Tensor.$wtensorTranspose
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 1
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 0
                                                                                                                                                                        @ 2
                                                                                                                                                                        @ 2
                                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                                        Order1Int.int1A2
                                                                                                                                                                        Order1Int.ansatzA3
                                                                                                                                                                        ww7 of ww8 { Unit# ww9 ->
                                                                                                              case {__scc {main:Order1Int.int1A.tensTrans} False True} Tensor.$wtensorTranspose
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 1
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 0
                                                                                                                                                                         @ 2
                                                                                                                                                                         @ 2
                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                         Order1Int.int1A1
                                                                                                                                                                         Order1Int.ansatzA3
                                                                                                                                                                         ww9 of ww10 { Unit# ww11 ->
                                                                                                              case {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                               ({__scc {main:Tensor.fmap} False True} Order1Int.int1A_go8
                                                                                                                                                                                                                                                                                                                                        ww11) of ww12 { Tensor.Tensor ww13 ->
                                                                                                              {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 1
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 0
                                                                                                                                                                                                      @ 2
                                                                                                                                                                                                      @ 2
                                                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                                                      ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                    @ (Index.Index
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         1
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         0
                                                                                                                                                                                                                                                         2
                                                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                                                    (Tensor.aSymTensor3
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                                                       @ 2
                                                                                                                                                                                                                                                       @ 2)
                                                                                                                                                                                                                                                    Order1Int.int1A_lvl19
                                                                                                                                                                                                                                                    ww7
                                                                                                                                                                                                                                                    ww13) } } } } } } } of ww { Tensor.Tensor ww1 ->
                 (# ww1 #) }) -}
896518029b81d690724511426c1cb34a
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
6bea971c68982273acca2a912fb5aab2
  ansatzA ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wansatzA w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
af115185b1612edce1fe5bd26de0080a
  ansatzA1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA2, Order1Int.ansatzA2)) -}
ce3708e9981d30d587c2b22c3ef431ae
  ansatzA2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8795c46eed56ca46f815918a2135d1f6
  ansatzA3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA2, Order1Int.ansatzA4)) -}
b1cf385b8ad70db01ed1df16382e2469
  ansatzA4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
071be15d44fdea83597a6b2ce3129fed
  ansatzA5 ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzA} False True} {__scc {main:Order1Int.ansatzA.prod} False True} Tensor.tensorProductNumeric
                                                                                                                @ GHC.Real.Rational
                                                                                                                @ 1
                                                                                                                @ 1
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 1
                                                                                                                @ 1
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 0
                                                                                                                @ 1
                                                                                                                @ 0
                                                                                                                @ 1
                                                                                                                @ 1
                                                                                                                GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                GHC.Real.$fOrdRatio_$s$fEqRatio) -}
8587cb509f10060ed8dab05fcba639e8
  ansatzA6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA4, Order1Int.ansatzA4)) -}
47f5d1451c075bc99167362f5ad341fa
  ansatzA7 ::
    Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzA} False True} {__scc {main:Order1Int.ansatzA.totalBlock2} False True} Tensor.tensorProductNumeric
                                                                                                                       @ GHC.Real.Rational
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 2
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 1
                                                                                                                       @ 0
                                                                                                                       @ 0
                                                                                                                       @ 2
                                                                                                                       GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                       GHC.Real.$fOrdRatio_$s$fEqRatio) -}
a8eb1842d202afe1a25629375ece3f00
  ansatzAI1 ::
    Tensor.Tensor 1 1 0 0 1 1 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAI3} False True} {__scc {main:Order1Int.ansatzAI3.prod} False True} Tensor.tensorProductNumeric
                                                                                                                    @ GHC.Real.Rational
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 0
                                                                                                                    @ 1
                                                                                                                    @ 1
                                                                                                                    GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                    GHC.Real.$fOrdRatio_$s$fEqRatio) -}
81de143755a1463da24ad116b3c0ac6b
  ansatzAI2 ::
    Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAI3} False True} {__scc {main:Order1Int.ansatzAI3.totalBlock2} False True} Tensor.tensorProductNumeric
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 2
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 1
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 2
                                                                                                                           GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                           GHC.Real.$fOrdRatio_$s$fEqRatio) -}
41fc6d3b9ce0ce389c64be3912f19e10
  ansatzAI3 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wansatzAI3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
bda95390c47cbd912cdc80b431729905
  ansatzAa ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wansatzAa w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
1c45b0a71252ba467c66e932a9127a9c
  ansatzAa1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA4, Order1Int.ansatzA2)) -}
2134cfc17acee47f682a0a07afea94b8
  ansatzAa2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Order1Int.ansatzA2, Order1Int.ansatzAa3)) -}
ceb1924fea66323d62bbd6a8647eae0c
  ansatzAa3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
37864360dbf5a667e2cfdd095b67920a
  ansatzAa4 ::
    Tensor.Tensor 1 1 0 0 0 0 2 2 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 1)
         (2 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAa} False True} {__scc {main:Order1Int.ansatzAa.prod} False True} Tensor.tensorProductNumeric
                                                                                                                  @ GHC.Real.Rational
                                                                                                                  @ 1
                                                                                                                  @ 1
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 2
                                                                                                                  @ 2
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 0
                                                                                                                  @ 1
                                                                                                                  @ 0
                                                                                                                  @ 1
                                                                                                                  @ 1
                                                                                                                  GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                  GHC.Real.$fOrdRatio_$s$fEqRatio) -}
a9e79da53a13adfb6a9fab78e079524f
  ansatzAa5 ::
    Tensor.Tensor 0 0 0 0 0 0 2 0 GHC.Real.Rational
    -> Tensor.Tensor 0 0 0 0 1 0 0 2 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (2 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 2)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.ansatzAa} False True} {__scc {main:Order1Int.ansatzAa.totalBlock2} False True} Tensor.tensorProductNumeric
                                                                                                                         @ GHC.Real.Rational
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 2
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 1
                                                                                                                         @ 0
                                                                                                                         @ 0
                                                                                                                         @ 2
                                                                                                                         GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                         GHC.Real.$fOrdRatio_$s$fEqRatio) -}
063fe49fcdc03fc935fc319a1e4300bb
  int1A ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case Order1Int.$wint1A w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
37723d4c8cce2499283964f84de8bf4b
  int1A1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
804e8aba5d108aab21c3bfd457be17b1
  int1A2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
bc9b83e033dd2b81722f5884fd3095eb
  int1A3 ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.int1A} False True} {__scc {main:Order1Int.int1A.block2} False True} Tensor.tensorProductNumeric
                                                                                                              @ GHC.Real.Rational
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
750993003af8eea781abf17ca814f0ee
  int1A4 ::
    Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (1 GHC.TypeNats.+ 1)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.int1A} False True} {__scc {main:Order1Int.int1A.block1} False True} Tensor.tensorProductNumeric
                                                                                                              @ GHC.Real.Rational
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 0
                                                                                                              @ 1
                                                                                                              @ 1
                                                                                                              GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                              GHC.Real.$fOrdRatio_$s$fEqRatio) -}
9b31a127e8c8cf6318cbf038a04bf539
  int1A5 ::
    Tensor.Tensor 1 1 0 0 0 0 1 1 GHC.Real.Rational
    -> Tensor.Tensor 0 1 0 0 0 0 0 0 GHC.Real.Rational
    -> Tensor.Tensor
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 1)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (0 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         (1 GHC.TypeNats.+ 0)
         GHC.Real.Rational
  {- Unfolding: ({__scc {main:Order1Int.int1A} False True} {__scc {main:Order1Int.int1A.flatInter} False True} Tensor.tensorProductNumeric
                                                                                                                 @ GHC.Real.Rational
                                                                                                                 @ 1
                                                                                                                 @ 1
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 1
                                                                                                                 @ 1
                                                                                                                 @ 0
                                                                                                                 @ 1
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 @ 0
                                                                                                                 GHC.Real.$fFractionalRatio_$s$fNumRatio
                                                                                                                 GHC.Real.$fOrdRatio_$s$fEqRatio) -}
eb5cff8b4c43dafb0492927eb9aadede
  int1A_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
04c35995c5506fb99c09bbc7ff6856d9
  int1A_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
a855bc095a2fc5964c7809e2011df212
  mkEqnSparseAnsatzA ::
    Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 0 0 0 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseAnsatzA} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                       Order1Int.$sfromList
                                                                         @ (GHC.Real.Ratio
                                                                              GHC.Integer.Type.Integer)
                                                                         (Order1Int.mkEqnSparseAnsatzA_go13
                                                                            (GHC.Types.[]
                                                                               @ ((GHC.Types.Int,
                                                                                   GHC.Types.Int),
                                                                                  GHC.Real.Rational))
                                                                            map1) }) -}
d55255e464828d3b1cd805a2942cd58c
  mkEqnSparseAnsatzAI ::
    Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 2 1 0 0 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseAnsatzAI} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        Order1Int.$sfromList
                                                                          @ (GHC.Real.Ratio
                                                                               GHC.Integer.Type.Integer)
                                                                          (Order1Int.mkEqnSparseAnsatzAI_go13
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   GHC.Real.Rational))
                                                                             map1) }) -}
d8411ed0c7a3909ce04157c143c365bb
  mkEqnSparseAnsatzAI_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 2 1 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
d17b8332fd3fc1c88a9f6e62629bb630
  mkEqnSparseAnsatzA_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 0 0 0) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
33d2192dd4e7f1460dd57d2f464ef510
  mkEqnSparseAnsatzAa ::
    Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 1 1 0 0 1 0 1 1 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseAnsatzAa} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        Order1Int.$sfromList
                                                                          @ (GHC.Real.Ratio
                                                                               GHC.Integer.Type.Integer)
                                                                          (Order1Int.mkEqnSparseAnsatzAa_go13
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   GHC.Real.Rational))
                                                                             map1) }) -}
71ee20cbe451c185ccfb6c69cf2b0dc6
  mkEqnSparseAnsatzAa_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 0 1 1) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
dd5b37d43ee2fc67b88c16aebacbc54b
  mkEqnSparseint1A ::
    Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational) ->
                 {__scc {main:Order1Int.mkEqnSparseint1A} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                     Order1Int.$sfromList
                                                                       @ (GHC.Real.Ratio
                                                                            GHC.Integer.Type.Integer)
                                                                       (Order1Int.mkEqnSparseint1A_go13
                                                                          (GHC.Types.[]
                                                                             @ ((GHC.Types.Int,
                                                                                 GHC.Types.Int),
                                                                                GHC.Real.Rational))
                                                                          map1) }) -}
e29f1795e6c73099c1fed8456aa60af3
  mkEqnSparseint1A_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
"SPEC/Order1Int fromList @ (Int, Int) _" [orphan] forall @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (GHC.Types.Int, GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = Order1Int.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

