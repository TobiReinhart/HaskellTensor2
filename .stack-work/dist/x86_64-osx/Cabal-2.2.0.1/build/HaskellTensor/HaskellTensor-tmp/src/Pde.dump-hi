
==================== FINAL INTERFACE ====================
2019-01-14 11:31:10.288864 UTC

interface main:Pde [hpc] 8043
  interface hash: 9fcc9f7812f964576e579dfe824834c7
  ABI hash: 6cb99ff48b3771dcca3d3397050c4c62
  export-list hash: cfda6ba989dea29b657cfa7f1b7972bc
  orphan hash: 1ffa5d69da127221a755d7bd47673a56
  flag hash: badd6e954112606c59e049e70d21435f
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Pde.addMultiInds
  Pde.combinePdes
  Pde.deriveIvar1
  Pde.evalPdeRand
  Pde.isDerivableIvar1
  Pde.mkAllMultInds
  Pde.mkPdefromTens
  Pde.multInd2Number1
  Pde.number2MultInd
  Pde.print2Maple
  Pde.print2MaplePde
  Pde.printConstPde
  Pde.prolongPde
  Pde.prolongPdeAll
  Pde.prolongPdeAllBlock1
  Pde.prolongPdeConst
  Pde.prolongPdeIvar
  Pde.prolongSymbolAll
  Pde.triangleMap
module dependencies: Ivar
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Natural 8647cd09d4aefcb1ec93a2d9a92f1f1a
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Ivar 52a8dc212ab2f8456a526e9d381a1784
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar f4885325f73264731659552a50824d1b
  Ivar ab6885cb499b09a96006f6f783229377
  addIvar 67ce428981a403b8506e974c3b8272d4
  mkIvarRandom c116f6ba0de138c76c908e08482347dd
  showIvarRational 81569a7fc8cbc713ce37361cbb7fb2a6
09244e62bbea09edcecaadbe2e88f25f
  $fEqMultiIndex :: GHC.Classes.Eq Pde.MultiIndex
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Pde.MultiIndex
                  Pde.$fEqMultiIndex2
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Bool>_R)
                  Pde.$fEqMultiIndex1
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Bool>_R) -}
12f726aafbf26bdf9569ec01a023833e
  $fEqMultiIndex1 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Bool
  {- Unfolding: ({__scc {main:Pde./=} True False} \ (t1 :: Data.IntMap.Internal.IntMap
                                                             GHC.Natural.Natural)
                                                    (t2 :: Data.IntMap.Internal.IntMap
                                                             GHC.Natural.Natural) ->
                                                  {__scc {main:Pde./=} False True} Data.IntMap.Internal.nequal
                                                                                     @ GHC.Natural.Natural
                                                                                     GHC.Natural.$fEqNatural
                                                                                     t1
                                                                                     t2) -}
3bebf012aacc81c330f073b406215d04
  $fEqMultiIndex2 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Bool
  {- Unfolding: ({__scc {main:Pde.==} True False} \ (t1 :: Data.IntMap.Internal.IntMap
                                                             GHC.Natural.Natural)
                                                    (t2 :: Data.IntMap.Internal.IntMap
                                                             GHC.Natural.Natural) ->
                                                  {__scc {main:Pde.==} False True} Data.IntMap.Internal.equal
                                                                                     @ GHC.Natural.Natural
                                                                                     GHC.Natural.$fEqNatural
                                                                                     t1
                                                                                     t2) -}
09244e62bbea09edcecaadbe2e88f25f
  $fOrdMultiIndex :: GHC.Classes.Ord Pde.MultiIndex
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Pde.MultiIndex
                  Pde.$fEqMultiIndex
                  Pde.$fOrdMultiIndex7
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Pde.$fOrdMultiIndex6
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Bool>_R)
                  Pde.$fOrdMultiIndex5
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Bool>_R)
                  Pde.$fOrdMultiIndex4
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Bool>_R)
                  Pde.$fOrdMultiIndex3
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R <GHC.Types.Bool>_R)
                  Pde.$fOrdMultiIndex2
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0]))
                  Pde.$fOrdMultiIndex1
                    `cast`
                  (Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])
                   ->_R Sym (Pde.N:MultiIndex[0])) -}
da802f446563c84b27ce0ac1d0554215
  $fOrdMultiIndex1 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
  {- Unfolding: ({__scc {main:Pde.min} True True} Data.IntMap.Internal.$fOrdIntMap_$cmin
                                                    @ GHC.Natural.Natural
                                                    GHC.Natural.$fOrdNatural) -}
4c5cbbfdeb70a807d1458f97d2c202b2
  $fOrdMultiIndex2 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
  {- Unfolding: ({__scc {main:Pde.max} True True} Data.IntMap.Internal.$fOrdIntMap_$cmax
                                                    @ GHC.Natural.Natural
                                                    GHC.Natural.$fOrdNatural) -}
e0b253a4ab745790f19859e3fd1345ea
  $fOrdMultiIndex3 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Bool
  {- Unfolding: ({__scc {main:Pde.>=} True True} Data.IntMap.Internal.$fOrdIntMap_$c>=
                                                   @ GHC.Natural.Natural
                                                   GHC.Natural.$fOrdNatural) -}
2dffcd6f84462e72e819b620cce47c45
  $fOrdMultiIndex4 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Bool
  {- Unfolding: ({__scc {main:Pde.>} True True} Data.IntMap.Internal.$fOrdIntMap_$c>
                                                  @ GHC.Natural.Natural
                                                  GHC.Natural.$fOrdNatural) -}
3aab34b66b1a4a6c4b560f261be4ab2a
  $fOrdMultiIndex5 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Bool
  {- Unfolding: ({__scc {main:Pde.<=} True True} Data.IntMap.Internal.$fOrdIntMap_$c<=
                                                   @ GHC.Natural.Natural
                                                   GHC.Natural.$fOrdNatural) -}
a23f34b22d66763c52ebcc6d7794787b
  $fOrdMultiIndex6 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Bool
  {- Unfolding: ({__scc {main:Pde.<} True True} Data.IntMap.Internal.$fOrdIntMap_$c<
                                                  @ GHC.Natural.Natural
                                                  GHC.Natural.$fOrdNatural) -}
1f1b43db175d2996029f8f76cfd9464f
  $fOrdMultiIndex7 ::
    Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Types.Ordering
  {- Unfolding: ({__scc {main:Pde.compare} True True} Data.IntMap.Internal.$fOrdIntMap_$ccompare
                                                        @ GHC.Natural.Natural
                                                        GHC.Natural.$fOrdNatural) -}
09244e62bbea09edcecaadbe2e88f25f
  $fShowMultiIndex :: GHC.Show.Show Pde.MultiIndex
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Pde.MultiIndex
                  Pde.$fShowMultiIndex_$cshowsPrec
                  Pde.$fShowMultiIndex_$cshow
                  Pde.$fShowMultiIndex_$cshowList -}
09244e62bbea09edcecaadbe2e88f25f
  $fShowMultiIndex1 :: Pde.MultiIndex -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (w :: Pde.MultiIndex) -> Pde.$w$cshowsPrec 0# w) -}
1f1cb05dc322fd59f35240d33fa594f1
  $fShowMultiIndex2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Pde.$fShowMultiIndex3) -}
54f3ce15a4ac6c27473c23173657a3eb
  $fShowMultiIndex3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultiIndex "#) -}
09244e62bbea09edcecaadbe2e88f25f
  $fShowMultiIndex_$cshow :: Pde.MultiIndex -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Pde.MultiIndex) ->
                 {__scc {main:Pde.showsPrec} True False} {__scc {main:Pde.showsPrec} False True} GHC.Base.augment
                                                                                                   @ GHC.Types.Char
                                                                                                   (\ @ b
                                                                                                      (c :: GHC.Types.Char
                                                                                                            -> b
                                                                                                            -> b)[OneShot]
                                                                                                      (n :: b)[OneShot] ->
                                                                                                    GHC.Base.foldr
                                                                                                      @ GHC.Types.Char
                                                                                                      @ b
                                                                                                      c
                                                                                                      n
                                                                                                      Pde.$fShowMultiIndex2)
                                                                                                   (Data.IntMap.Internal.$w$cshowsPrec
                                                                                                      @ GHC.Natural.Natural
                                                                                                      GHC.Natural.$fShowNatural
                                                                                                      11#
                                                                                                      x `cast`
                                                                                                      (Pde.N:MultiIndex[0])
                                                                                                      (GHC.Types.[]
                                                                                                         @ GHC.Types.Char))) -}
09244e62bbea09edcecaadbe2e88f25f
  $fShowMultiIndex_$cshowList :: [Pde.MultiIndex] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Pde.MultiIndex]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Pde.MultiIndex Pde.$fShowMultiIndex1 ls s) -}
09244e62bbea09edcecaadbe2e88f25f
  $fShowMultiIndex_$cshowsPrec ::
    GHC.Types.Int -> Pde.MultiIndex -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Pde.MultiIndex) ->
                 case w of ww { GHC.Types.I# ww1 -> Pde.$w$cshowsPrec ww1 w1 }) -}
99a418906cf9afd51293d9b8d5a476b6
  $fShowPde :: GHC.Show.Show a => GHC.Show.Show (Pde.Pde a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Pde.Pde a)
                  (Pde.$fShowPde_$cshowsPrec @ a v)
                  (Pde.$fShowPde_$cshow @ a v)
                  (Pde.$fShowPde_$cshowList @ a v) -}
4e3608ff1c2528e89a7b42a08e0c19be
  $fShowPde1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c05f2926b9f68eda2f75e6fda574f483
  $fShowPde2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Pde.$fShowPde3) -}
b502243e0c86ef687c996766e656b8b5
  $fShowPde3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pde "#) -}
99a418906cf9afd51293d9b8d5a476b6
  $fShowPde_$cshow :: GHC.Show.Show a => Pde.Pde a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Pde.Pde a) ->
                 {__scc {main:Pde.showsPrec} True False} {__scc {main:Pde.showsPrec} False True} GHC.Base.augment
                                                                                                   @ GHC.Types.Char
                                                                                                   (\ @ b
                                                                                                      (c :: GHC.Types.Char
                                                                                                            -> b
                                                                                                            -> b)[OneShot]
                                                                                                      (n :: b)[OneShot] ->
                                                                                                    GHC.Base.foldr
                                                                                                      @ GHC.Types.Char
                                                                                                      @ b
                                                                                                      c
                                                                                                      n
                                                                                                      Pde.$fShowPde2)
                                                                                                   (Data.Map.Internal.$w$cshowsPrec
                                                                                                      @ (GHC.Types.Int,
                                                                                                         Pde.MultiIndex)
                                                                                                      @ a
                                                                                                      Pde.$fShowPde_$s$fShow(,)
                                                                                                      $dShow
                                                                                                      11#
                                                                                                      x `cast`
                                                                                                      (Pde.N:Pde[0] <a>_N)
                                                                                                      (GHC.Types.[]
                                                                                                         @ GHC.Types.Char))) -}
99a418906cf9afd51293d9b8d5a476b6
  $fShowPde_$cshowList ::
    GHC.Show.Show a => [Pde.Pde a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Pde.Pde a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Pde.Pde a)
                   (Pde.$fShowPde_$cshowsPrec @ a $dShow Pde.$fShowPde1)
                   ls
                   s) -}
99a418906cf9afd51293d9b8d5a476b6
  $fShowPde_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> Pde.Pde a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Pde.Pde a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Pde.$w$cshowsPrec1 @ a w ww1 w2 }) -}
63c4046b66549536ed7db413092d9eb3
  $fShowPde_$s$fShow(,) ::
    GHC.Show.Show (GHC.Types.Int, Pde.MultiIndex)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, Pde.MultiIndex)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Show.$fShowInt
                     Pde.$fShowMultiIndex)
                  (\ (x :: (GHC.Types.Int, Pde.MultiIndex)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Show.$fShowInt
                     Pde.$fShowMultiIndex
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Int, Pde.MultiIndex)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Int, Pde.MultiIndex)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Int
                        @ Pde.MultiIndex
                        GHC.Show.$fShowInt
                        Pde.$fShowMultiIndex
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
79ddf63aac857a7735c73fda93d1d52a
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, Pde.MultiIndex)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, Pde.MultiIndex)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fEqInt
                     Pde.$fEqMultiIndex)
                  Pde.$s$fEq(,)_$s$fEq(,)_$c/= -}
52db29e3a289e6c143e1732e5d633468
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, Pde.MultiIndex)
    -> (GHC.Types.Int, Pde.MultiIndex) -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S)L),1*U(1*U(U),U)><S(S(S)L),1*U(1*U(U),U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, Pde.MultiIndex))
                   (y :: (GHC.Types.Int, Pde.MultiIndex)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Pde.$fEqMultiIndex2
                             a2 `cast` (Pde.N:MultiIndex[0])
                             b2 `cast` (Pde.N:MultiIndex[0]) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
d5ba0ccdd691fa2b07fd706a14050f6e
  $s$fOrd(,) :: GHC.Classes.Ord (GHC.Types.Int, Pde.MultiIndex)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, Pde.MultiIndex)
                  Pde.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex)
                  (\ (a1 :: (GHC.Types.Int, Pde.MultiIndex))
                     (b1 :: (GHC.Types.Int, Pde.MultiIndex)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ GHC.Types.Int
                     @ Pde.MultiIndex
                     GHC.Classes.$fOrdInt
                     Pde.$fOrdMultiIndex) -}
a1e378fb4db7f83d66325a3c97af3fa5
  $sfind1 ::
    [GHC.Types.Int] -> Data.Map.Internal.Map [GHC.Types.Int] a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
0346df8727f276cf43d4492837fd0485
  $sfromList ::
    [([GHC.Types.Int], a)] -> Data.Map.Internal.Map [GHC.Types.Int] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Int], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ [GHC.Types.Int] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ [GHC.Types.Int]
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ [GHC.Types.Int] @ a)
                             (Data.Map.Internal.Tip @ [GHC.Types.Int] @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare kx ky of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Pde.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Int]
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ [GHC.Types.Int] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Int] @ a))
                                  wild2 } }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                case kx of dt { DEFAULT ->
                                Pde.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Int]
                                     @ a
                                     1#
                                     dt
                                     x0
                                     (Data.Map.Internal.Tip @ [GHC.Types.Int] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Int] @ a))
                                  wild2 } } } } } } }) -}
8fee7a28b17587960aba0fedddded9a3
  $sfromList1 ::
    Data.Map.Internal.Map [GHC.Types.Int] a
    -> [([GHC.Types.Int], a)]
    -> Data.Map.Internal.Map [GHC.Types.Int] a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
5f8c3c023d10ce6fdb8a0b8093040823
  $sfromList2 ::
    [((GHC.Types.Int, Pde.MultiIndex), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, Pde.MultiIndex), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, Pde.MultiIndex) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, Pde.MultiIndex)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, Pde.MultiIndex) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, Pde.MultiIndex) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> Pde.$sfromList3
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, Pde.MultiIndex)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, Pde.MultiIndex)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, Pde.MultiIndex)
                                             @ a))
                                       wild2
                                  1#
                                  -> case Pde.$fOrdMultiIndex6
                                            ww2 `cast` (Pde.N:MultiIndex[0])
                                            ww5 `cast` (Pde.N:MultiIndex[0]) of wild6 {
                                       GHC.Types.False
                                       -> Pde.$sfromList3
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, Pde.MultiIndex)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, Pde.MultiIndex)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, Pde.MultiIndex)
                                                  @ a))
                                            wild2
                                       GHC.Types.True
                                       -> Pde.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, Pde.MultiIndex)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, Pde.MultiIndex)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, Pde.MultiIndex)
                                                  @ a))
                                            wild2 } }
                             1#
                             -> Pde.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, Pde.MultiIndex)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, Pde.MultiIndex) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, Pde.MultiIndex) @ a))
                                  wild2 } } } } } } } } }) -}
8768ff94b6e09c4379b7305ba2b2d2be
  $sfromList3 ::
    Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
    -> [((GHC.Types.Int, Pde.MultiIndex), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e2397924aaa41f91eb4bab198b537224
  $sinsert_$sgo8 ::
    [GHC.Types.Int]
    -> a1
    -> Data.Map.Internal.Map [GHC.Types.Int] a1
    -> Data.Map.Internal.Map [GHC.Types.Int] a1
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
70ff953079f9b41d65c45c82875ea305
  $sunion ::
    Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
1242272b2bb300d2115028b3a390698e
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
38a511d05298f5e1fd0d9cb74c5d7205
  $tc'MultiIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10623815204585778126##
                   11487948163302695425##
                   Pde.$trModule
                   Pde.$tc'MultiIndex2
                   0#
                   Pde.$tc'MultiIndex1) -}
1bc246811e302c16105152a63a732dc4
  $tc'MultiIndex1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b9cd4fc08c21fd7c525fd5dd7243bbfd
  $tc'MultiIndex2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pde.$tc'MultiIndex3) -}
78766d314d650705c879f24f6513138c
  $tc'MultiIndex3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultiIndex"#) -}
0f1a5365c34d18f78af8c6bf3e52d87d
  $tc'Pde :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13006791554997873543##
                   11142193227323426800##
                   Pde.$trModule
                   Pde.$tc'Pde2
                   1#
                   Pde.$tc'Pde1) -}
cebda3179a85ee629989b9865f451be9
  $tc'Pde1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7dfcb383cd3d2a9fd8c8803f77ed0636
  $tc'Pde2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pde.$tc'Pde3) -}
f8b6c2378a8b9c3f318eeb1a6f18e53c
  $tc'Pde3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pde"#) -}
7d870cbfbba96d98d24f646358a89c6f
  $tcMultiIndex :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1164186120300207709##
                   559057422434933506##
                   Pde.$trModule
                   Pde.$tcMultiIndex1
                   0#
                   GHC.Types.krep$*) -}
16de180e23d682c8130b7c432333c8f4
  $tcMultiIndex1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pde.$tcMultiIndex2) -}
335cfc297d04d83a12520bef28fcf377
  $tcMultiIndex2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultiIndex"#) -}
b32b65fa07dc227da255536f3ded25b6
  $tcPde :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10145811736971629081##
                   13840776875339125915##
                   Pde.$trModule
                   Pde.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
9d3bbf212e1ad37369559b12b0d3998f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Pde.$trModule3 Pde.$trModule1) -}
117bf4cc9fa53ed8c1d78df072786460
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pde.$trModule2) -}
a036a957cc1ecdedde4df8b5eb239ef1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pde"#) -}
7bde52d054ade5378552c4195c27e500
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Pde.$trModule4) -}
2583ff2a794963509d38a6d5bfed7059
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
09244e62bbea09edcecaadbe2e88f25f
  $w$cshowsPrec :: GHC.Prim.Int# -> Pde.MultiIndex -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: Pde.MultiIndex) ->
                 {__scc {main:Pde.showsPrec} True True} let {
                                                          g :: GHC.Base.String -> GHC.Base.String
                                                          = Data.IntMap.Internal.$w$cshowsPrec
                                                              @ GHC.Natural.Natural
                                                              GHC.Natural.$fShowNatural
                                                              11#
                                                              w `cast` (Pde.N:MultiIndex[0])
                                                        } in
                                                        case GHC.Prim.>=# ww 11# of lwild {
                                                          DEFAULT
                                                          -> \ (x :: GHC.Base.String) ->
                                                             GHC.Base.++
                                                               @ GHC.Types.Char
                                                               Pde.$fShowMultiIndex2
                                                               (g x)
                                                          1#
                                                          -> \ (x :: GHC.Base.String) ->
                                                             GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.$fShow(,)4
                                                               (GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Pde.$fShowMultiIndex2
                                                                  (g (GHC.Types.:
                                                                        @ GHC.Types.Char
                                                                        GHC.Show.$fShow(,)2
                                                                        x))) }) -}
99a418906cf9afd51293d9b8d5a476b6
  $w$cshowsPrec1 ::
    GHC.Show.Show a => GHC.Prim.Int# -> Pde.Pde a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: Pde.Pde a) ->
                 {__scc {main:Pde.showsPrec} True True} let {
                                                          g :: GHC.Base.String -> GHC.Base.String
                                                          = Data.Map.Internal.$w$cshowsPrec
                                                              @ (GHC.Types.Int, Pde.MultiIndex)
                                                              @ a
                                                              Pde.$fShowPde_$s$fShow(,)
                                                              w
                                                              11#
                                                              w1 `cast` (Pde.N:Pde[0] <a>_N)
                                                        } in
                                                        case GHC.Prim.>=# ww 11# of lwild {
                                                          DEFAULT
                                                          -> \ (x :: GHC.Base.String) ->
                                                             GHC.Base.++
                                                               @ GHC.Types.Char
                                                               Pde.$fShowPde2
                                                               (g x)
                                                          1#
                                                          -> \ (x :: GHC.Base.String) ->
                                                             GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.$fShow(,)4
                                                               (GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Pde.$fShowPde2
                                                                  (g (GHC.Types.:
                                                                        @ GHC.Types.Char
                                                                        GHC.Show.$fShow(,)2
                                                                        x))) }) -}
91b4d19580c1e04b7d817bc377d375c4
  $w$sgo13 ::
    (GHC.Types.Int, Pde.MultiIndex)
    -> GHC.Types.Int
    -> Pde.MultiIndex
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U><L,U><S,1*U>,
     Inline: [0] -}
02e9a89c28fda4c8f28252a3c8a9b37d
  $wdiffOrder :: Pde.MultiIndex -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Pde.MultiIndex) ->
                 {__scc {main:Pde.diffOrder} True False} case w `cast`
                                                              (Pde.N:MultiIndex[0]) of wild {
                                                           DEFAULT
                                                           -> case {__scc {main:Pde.diffOrder} False True} Pde.isDerivableIvar1_go
                                                                                                             Pde.isDerivableIvar1_z
                                                                                                             wild of wild1 {
                                                                GHC.Natural.NatS# w1
                                                                -> {__scc {main:Pde.diffOrder} False True} GHC.Integer.Type.integerToInt
                                                                                                             (GHC.Integer.Type.wordToInteger
                                                                                                                w1)
                                                                GHC.Natural.NatJ# dt
                                                                -> {__scc {main:Pde.diffOrder} False True} GHC.Integer.Type.integerToInt
                                                                                                             (GHC.Integer.Type.Jp#
                                                                                                                dt) }
                                                           Data.IntMap.Internal.Bin dt dt1 l r
                                                           -> case {__scc {main:Pde.diffOrder} False True} GHC.Prim.<#
                                                                                                             dt1
                                                                                                             0# of lwild {
                                                                DEFAULT
                                                                -> case {__scc {main:Pde.diffOrder} False True} Pde.isDerivableIvar1_go
                                                                                                                  (Pde.isDerivableIvar1_go
                                                                                                                     Pde.isDerivableIvar1_z
                                                                                                                     r)
                                                                                                                  l of wild1 {
                                                                     GHC.Natural.NatS# w1
                                                                     -> {__scc {main:Pde.diffOrder} False True} GHC.Integer.Type.integerToInt
                                                                                                                  (GHC.Integer.Type.wordToInteger
                                                                                                                     w1)
                                                                     GHC.Natural.NatJ# dt2
                                                                     -> {__scc {main:Pde.diffOrder} False True} GHC.Integer.Type.integerToInt
                                                                                                                  (GHC.Integer.Type.Jp#
                                                                                                                     dt2) }
                                                                1#
                                                                -> case {__scc {main:Pde.diffOrder} False True} Pde.isDerivableIvar1_go
                                                                                                                  (Pde.isDerivableIvar1_go
                                                                                                                     Pde.isDerivableIvar1_z
                                                                                                                     l)
                                                                                                                  r of wild1 {
                                                                     GHC.Natural.NatS# w1
                                                                     -> {__scc {main:Pde.diffOrder} False True} GHC.Integer.Type.integerToInt
                                                                                                                  (GHC.Integer.Type.wordToInteger
                                                                                                                     w1)
                                                                     GHC.Natural.NatJ# dt2
                                                                     -> {__scc {main:Pde.diffOrder} False True} GHC.Integer.Type.integerToInt
                                                                                                                  (GHC.Integer.Type.Jp#
                                                                                                                     dt2) } } }) -}
9a3598ded5c9b38d921b885d753ec1bd
  $wisDerivableIvar1 ::
    Pde.MultiIndex -> Data.IntMap.Internal.IntMap a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Pde.MultiIndex)
                   (ww :: Data.IntMap.Internal.IntMap a) ->
                 {__scc {main:Pde.isDerivableIvar1} True True} case Pde.$wdiffOrder
                                                                      w of ww1 {
                                                                 DEFAULT -> Pde.isDerivableIvar2
                                                                 1#
                                                                 -> case {__scc {main:Pde.isDerivableIvar1.pos} True True} GHC.List.$w!!
                                                                                                                             @ Data.IntSet.Internal.Key
                                                                                                                             (Data.IntMap.Internal.keys
                                                                                                                                @ GHC.Natural.Natural
                                                                                                                                w `cast`
                                                                                                                                (Pde.N:MultiIndex[0]))
                                                                                                                             0# of ww2 { GHC.Types.I# ww3 ->
                                                                    Data.IntMap.Internal.$wmember
                                                                      @ a
                                                                      ww3
                                                                      ww } }) -}
b55a2bf945707b6a6115b59d41ecd956
  $wlvl ::
    Data.IntSet.Internal.Key
    -> GHC.Natural.Natural -> [Data.IntSet.Internal.Key]
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.IntSet.Internal.Key)
                   (ww1 :: GHC.Natural.Natural) ->
                 let {
                   lvl34 :: [Data.IntSet.Internal.Key]
                   = GHC.Types.:
                       @ Data.IntSet.Internal.Key
                       ww
                       (GHC.Types.[] @ Data.IntSet.Internal.Key)
                 } in
                 {__scc {main:Pde.multInd2Number.l2.\} True True} let {
                                                                    $j :: GHC.Prim.Int#
                                                                          -> GHC.Types.Int
                                                                          -> [Data.IntSet.Internal.Key]
                                                                      <join 2> {- Arity: 2,
                                                                                  Strictness: <S,U><L,A> -}
                                                                    = \ (y :: GHC.Prim.Int#)[OneShot]
                                                                        (wild1 :: GHC.Types.Int)[OneShot] ->
                                                                      case GHC.Prim.<#
                                                                             0#
                                                                             y of lwild {
                                                                        DEFAULT
                                                                        -> GHC.Types.[]
                                                                             @ Data.IntSet.Internal.Key
                                                                        1#
                                                                        -> letrec {
                                                                             $wxs :: GHC.Prim.Int#
                                                                                     -> [Data.IntSet.Internal.Key]
                                                                               {- Arity: 1,
                                                                                  Strictness: <S,1*U>,
                                                                                  Inline: [0] -}
                                                                             = \ (ww2 :: GHC.Prim.Int#) ->
                                                                               case ww2 of ds1 {
                                                                                 DEFAULT
                                                                                 -> GHC.Types.:
                                                                                      @ Data.IntSet.Internal.Key
                                                                                      ww
                                                                                      ($wxs
                                                                                         (GHC.Prim.-#
                                                                                            ds1
                                                                                            1#))
                                                                                 1# -> lvl34 }
                                                                           } in
                                                                           $wxs y }
                                                                  } in
                                                                  case ww1 of wild {
                                                                    GHC.Natural.NatS# w
                                                                    -> case GHC.Integer.Type.integerToInt
                                                                              (GHC.Integer.Type.wordToInteger
                                                                                 w) of wild1 { DEFAULT ->
                                                                       $j
                                                                         wild1
                                                                         (GHC.Types.I# wild1) }
                                                                    GHC.Natural.NatJ# dt
                                                                    -> case GHC.Integer.Type.integerToInt
                                                                              (GHC.Integer.Type.Jp#
                                                                                 dt) of wild1 { DEFAULT ->
                                                                       $j
                                                                         wild1
                                                                         (GHC.Types.I#
                                                                            wild1) } }) -}
4ce313b38764485d14f3cd05b2d985a0
  $wlvl1 ::
    GHC.Types.Int
    -> Pde.MultiIndex
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Types.Int, [GHC.Types.Char] #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: Pde.MultiIndex)
                   (ww2 :: Ivar.Ivar GHC.Real.Rational) ->
                 {__scc {main:Pde.print2MaplePde.l2.\} True False} (# ww,
                                                                      {__scc {main:Pde.print2MaplePde.l2.\} False True} GHC.CString.unpackAppendCString#
                                                                                                                          Pde.print2MaplePde10
                                                                                                                          (case ww2 of ww3 { Ivar.Ivar ww4 ww5 ->
                                                                                                                           case ww4 of ww6 { GHC.Real.:% ww7 ww8 ->
                                                                                                                           case Ivar.$wshowIvarRational
                                                                                                                                  ww7
                                                                                                                                  ww8
                                                                                                                                  ww5 of ww9 { (#,#) ww10 ww11 ->
                                                                                                                           GHC.Base.++_$s++
                                                                                                                             @ GHC.Types.Char
                                                                                                                             (GHC.CString.unpackAppendCString#
                                                                                                                                Pde.print2MaplePde9
                                                                                                                                (case {__scc {main:Pde.multInd2Number} True True} let {
                                                                                                                                                                                    l :: [(Data.IntSet.Internal.Key,
                                                                                                                                                                                           GHC.Natural.Natural)]
                                                                                                                                                                                    = {__scc {main:Pde.multInd2Number.l} True True} Data.IntMap.Internal.toAscList
                                                                                                                                                                                                                                      @ GHC.Natural.Natural
                                                                                                                                                                                                                                      ww1
                                                                                                                                                                                                                                        `cast`
                                                                                                                                                                                                                                      (Pde.N:MultiIndex[0])
                                                                                                                                                                                  } in
                                                                                                                                                                                  Pde.multInd2Number1_go
                                                                                                                                                                                    ({__scc {main:Pde.multInd2Number.l2} True True} GHC.Base.map
                                                                                                                                                                                                                                      @ (Data.IntSet.Internal.Key,
                                                                                                                                                                                                                                         GHC.Natural.Natural)
                                                                                                                                                                                                                                      @ [Data.IntSet.Internal.Key]
                                                                                                                                                                                                                                      Pde.multInd2Number2
                                                                                                                                                                                                                                      l) of wild {
                                                                                                                                   []
                                                                                                                                   -> Pde.print2MaplePde7
                                                                                                                                   : x xs
                                                                                                                                   -> GHC.Base.++_$s++
                                                                                                                                        @ GHC.Types.Char
                                                                                                                                        Pde.print2Maple5
                                                                                                                                        GHC.Show.showList__3
                                                                                                                                        (case x of ww12 { GHC.Types.I# ww13 ->
                                                                                                                                         case GHC.Show.$wshowSignedInt
                                                                                                                                                0#
                                                                                                                                                ww13
                                                                                                                                                (Pde.print2MaplePde_showl
                                                                                                                                                   xs) of ww14 { (#,#) ww15 ww16 ->
                                                                                                                                         GHC.Types.:
                                                                                                                                           @ GHC.Types.Char
                                                                                                                                           ww15
                                                                                                                                           ww16 } }) }))
                                                                                                                             ww10
                                                                                                                             ww11 } } }) #)) -}
6fb357f4a3fd89f38150d80695d7e589
  $wmkAllMultInds :: GHC.Prim.Int# -> [Pde.MultiIndex]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {main:Pde.mkAllMultInds} True True} case GHC.Prim.>#
                                                                   1#
                                                                   ww of lwild {
                                                              DEFAULT
                                                              -> letrec {
                                                                   go1 :: GHC.Prim.Int#
                                                                          -> [Pde.MultiIndex]
                                                                     {- Arity: 1,
                                                                        Strictness: <L,U> -}
                                                                   = \ (x :: GHC.Prim.Int#) ->
                                                                     GHC.Types.:
                                                                       @ Pde.MultiIndex
                                                                       (Pde.$wnumber2MultInd x)
                                                                       (case GHC.Prim.==#
                                                                               x
                                                                               ww of lwild1 {
                                                                          DEFAULT
                                                                          -> go1 (GHC.Prim.+# x 1#)
                                                                          1#
                                                                          -> GHC.Types.[]
                                                                               @ Pde.MultiIndex })
                                                                 } in
                                                                 go1 1#
                                                              1#
                                                              -> GHC.Types.[] @ Pde.MultiIndex }) -}
b2154b4179373173ec3112ad4cd4932e
  $wmultInd2MatrixNr ::
    Pde.MultiIndex
    -> GHC.Types.Int
    -> Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Pde.MultiIndex)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int) ->
                 case {__scc {main:Pde.multInd2MatrixNr} True True} {__scc {main:Pde.multInd2MatrixNr.diff} True True} Pde.diffOrder
                                                                                                                         w of wild { GHC.Types.I# x ->
                 case x of wild1 {
                   DEFAULT -> case Pde.print2Maple3 ret_ty GHC.Prim.Int# of {}
                   0# -> 1#
                   1#
                   -> case {__scc {main:Pde.multInd2MatrixNr} False True} GHC.List.$w!!
                                                                            @ GHC.Types.Int
                                                                            ({__scc {main:Pde.multInd2MatrixNr.num} True True} Pde.multInd2Number
                                                                                                                                 w)
                                                                            0# of wild2 { GHC.Types.I# y ->
                      {__scc {main:Pde.multInd2MatrixNr} False True} GHC.Prim.+# 1# y }
                   2#
                   -> case w1 of wild2 { GHC.Types.I# y ->
                      case {__scc {main:Pde.multInd2MatrixNr} False True} Pde.$sfind1
                                                                            @ GHC.Types.Int
                                                                            ({__scc {main:Pde.multInd2MatrixNr.num} True True} Pde.multInd2Number
                                                                                                                                 w)
                                                                            w2 of wild3 { GHC.Types.I# y1 ->
                      {__scc {main:Pde.multInd2MatrixNr} False True} GHC.Prim.+#
                                                                       (GHC.Prim.+# 1# y)
                                                                       y1 } } } }) -}
2ba70d3af1d61b4cb3d96880f09dba11
  $wnumber2MultInd :: GHC.Prim.Int# -> Pde.MultiIndex
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {main:Pde.number2MultInd} True True} case ww of ds {
                                                               DEFAULT
                                                               -> case 1 of wild {
                                                                    GHC.Integer.Type.S# i#
                                                                    -> case GHC.Prim.>=#
                                                                              i#
                                                                              0# of lwild {
                                                                         DEFAULT
                                                                         -> case GHC.Natural.underflowError
                                                                            ret_ty Pde.MultiIndex
                                                                            of {}
                                                                         1#
                                                                         -> (Data.IntMap.Internal.Tip
                                                                               @ GHC.Natural.Natural
                                                                               ds
                                                                               (GHC.Natural.NatS#
                                                                                  (GHC.Prim.int2Word#
                                                                                     i#)))
                                                                              `cast`
                                                                            (Sym (Pde.N:MultiIndex[0])) }
                                                                    GHC.Integer.Type.Jp# dt
                                                                    -> case GHC.Prim.uncheckedIShiftRL#
                                                                              (GHC.Prim.sizeofByteArray#
                                                                                 dt)
                                                                              3# of wild1 {
                                                                         DEFAULT
                                                                         -> case GHC.Prim.sizeofByteArray#
                                                                                   dt of wild2 {
                                                                              DEFAULT
                                                                              -> (Data.IntMap.Internal.Tip
                                                                                    @ GHC.Natural.Natural
                                                                                    ds
                                                                                    (GHC.Natural.NatJ#
                                                                                       dt))
                                                                                   `cast`
                                                                                 (Sym (Pde.N:MultiIndex[0]))
                                                                              0#
                                                                              -> case GHC.Natural.underflowError
                                                                                 ret_ty Pde.MultiIndex
                                                                                 of {} }
                                                                         1#
                                                                         -> case GHC.Prim.indexWordArray#
                                                                                   dt
                                                                                   0# of wild2 { DEFAULT ->
                                                                            (Data.IntMap.Internal.Tip
                                                                               @ GHC.Natural.Natural
                                                                               ds
                                                                               (GHC.Natural.NatS#
                                                                                  wild2))
                                                                              `cast`
                                                                            (Sym (Pde.N:MultiIndex[0])) } }
                                                                    GHC.Integer.Type.Jn# ipv
                                                                    -> case GHC.Natural.underflowError
                                                                       ret_ty Pde.MultiIndex
                                                                       of {} }
                                                               0#
                                                               -> (Data.IntMap.Internal.Nil
                                                                     @ GHC.Natural.Natural)
                                                                    `cast`
                                                                  (Sym (Pde.N:MultiIndex[0])) }) -}
571aed1b403d1f39fc433c7dbe0c4d92
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
    -> [((GHC.Types.Int, Pde.MultiIndex), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
b7ad0ad0a9657e3d735d9c0ef662dddb
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map [GHC.Types.Int] a
    -> [([GHC.Types.Int], a)]
    -> Data.Map.Internal.Map [GHC.Types.Int] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c33b0207c62b3ea9fcbb7a5616ca7df3
  $wprolongPdeIvar ::
    Pde.MultiIndex -> Pde.Pde (Ivar.Ivar a) -> Pde.Pde (Ivar.Ivar a)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Pde.MultiIndex)
                   (w1 :: Pde.Pde (Ivar.Ivar a)) ->
                 let {
                   lvl34 :: GHC.Types.Int
                   = {__scc {main:Pde.prolongPdeIvar} False True} {__scc {main:Pde.prolongPdeIvar.map3} False True} {__scc {main:Pde.prolongPdeIvar.map3.\} False True} Pde.multInd2Number1
                                                                                                                                                                          w
                 } in
                 let {
                   lvl35 :: Data.IntSet.Internal.Key
                   = {__scc {main:Pde.prolongPdeIvar} False True} {__scc {main:Pde.prolongPdeIvar.map2} False True} {__scc {main:Pde.deriveIvar1} False True} {__scc {main:Pde.deriveIvar1.pos} False True} GHC.List.$w!!
                                                                                                                                                                                                              @ Data.IntSet.Internal.Key
                                                                                                                                                                                                              (Data.IntMap.Internal.keys
                                                                                                                                                                                                                 @ GHC.Natural.Natural
                                                                                                                                                                                                                 w `cast`
                                                                                                                                                                                                                 (Pde.N:MultiIndex[0]))
                                                                                                                                                                                                              0#
                 } in
                 {__scc {main:Pde.prolongPdeIvar} True True} let {
                                                               mapFilter :: Data.Map.Internal.Map
                                                                              (GHC.Types.Int,
                                                                               Pde.MultiIndex)
                                                                              (Ivar.Ivar a)
                                                               = {__scc {main:Pde.prolongPdeIvar.mapFilter} True True} Data.Map.Internal.filterWithKey
                                                                                                                         @ (GHC.Types.Int,
                                                                                                                            Pde.MultiIndex)
                                                                                                                         @ (Ivar.Ivar
                                                                                                                              a)
                                                                                                                         (\ (ds :: (GHC.Types.Int,
                                                                                                                                    Pde.MultiIndex))
                                                                                                                            (x :: Ivar.Ivar
                                                                                                                                    a)[OneShot] ->
                                                                                                                          Pde.isDerivableIvar1
                                                                                                                            @ a
                                                                                                                            w
                                                                                                                            x)
                                                                                                                         w1
                                                                                                                           `cast`
                                                                                                                         (Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                                          a>_N)
                                                             } in
                                                             let {
                                                               map2 :: Data.Map.Internal.Map
                                                                         (GHC.Types.Int,
                                                                          Pde.MultiIndex)
                                                                         (Ivar.Ivar a)
                                                               = {__scc {main:Pde.prolongPdeIvar.map2} True True} letrec {
                                                                                                                    go8 :: Data.Map.Internal.Map
                                                                                                                             (GHC.Types.Int,
                                                                                                                              Pde.MultiIndex)
                                                                                                                             (Ivar.Ivar
                                                                                                                                a)
                                                                                                                           -> Data.Map.Internal.Map
                                                                                                                                (GHC.Types.Int,
                                                                                                                                 Pde.MultiIndex)
                                                                                                                                (Ivar.Ivar
                                                                                                                                   a)
                                                                                                                      {- Arity: 1,
                                                                                                                         Strictness: <S,1*U> -}
                                                                                                                    = \ (ds :: Data.Map.Internal.Map
                                                                                                                                 (GHC.Types.Int,
                                                                                                                                  Pde.MultiIndex)
                                                                                                                                 (Ivar.Ivar
                                                                                                                                    a)) ->
                                                                                                                      case ds of wild {
                                                                                                                        Data.Map.Internal.Bin dt kx x l r
                                                                                                                        -> {__scc {main:Pde.deriveIvar1} True False} case x of wild1 { Ivar.Ivar s map1 ->
                                                                                                                                                                     case go8
                                                                                                                                                                            l of dt1 { DEFAULT ->
                                                                                                                                                                     case go8
                                                                                                                                                                            r of dt2 { DEFAULT ->
                                                                                                                                                                     Data.Map.Internal.Bin
                                                                                                                                                                       @ (GHC.Types.Int,
                                                                                                                                                                          Pde.MultiIndex)
                                                                                                                                                                       @ (Ivar.Ivar
                                                                                                                                                                            a)
                                                                                                                                                                       dt
                                                                                                                                                                       kx
                                                                                                                                                                       (Ivar.Ivar
                                                                                                                                                                          @ a
                                                                                                                                                                          ({__scc {main:Pde.deriveIvar1} False True} {__scc {main:Pde.deriveIvar1.pos} True False} case lvl35 of ww { GHC.Types.I# ww1 ->
                                                                                                                                                                                                                                                                   {__scc {main:Pde.deriveIvar1.i} True True} Data.IntMap.Internal.$w!
                                                                                                                                                                                                                                                                                                                @ a
                                                                                                                                                                                                                                                                                                                map1
                                                                                                                                                                                                                                                                                                                ww1 })
                                                                                                                                                                          (Data.IntMap.Internal.Nil
                                                                                                                                                                             @ a))
                                                                                                                                                                       dt1
                                                                                                                                                                       dt2 } } }
                                                                                                                        Data.Map.Internal.Tip
                                                                                                                        -> Data.Map.Internal.Tip
                                                                                                                             @ (GHC.Types.Int,
                                                                                                                                Pde.MultiIndex)
                                                                                                                             @ (Ivar.Ivar
                                                                                                                                  a) }
                                                                                                                  } in
                                                                                                                  go8
                                                                                                                    mapFilter
                                                             } in
                                                             {__scc {main:Pde.prolongPdeIvar.map3} True True} letrec {
                                                                                                                go13 :: [((GHC.Types.Int,
                                                                                                                           Pde.MultiIndex),
                                                                                                                          Ivar.Ivar
                                                                                                                            a)]
                                                                                                                        -> Data.Map.Internal.Map
                                                                                                                             (GHC.Types.Int,
                                                                                                                              Pde.MultiIndex)
                                                                                                                             (Ivar.Ivar
                                                                                                                                a)
                                                                                                                        -> [((GHC.Types.Int,
                                                                                                                              Pde.MultiIndex),
                                                                                                                             Ivar.Ivar
                                                                                                                               a)]
                                                                                                                  {- Arity: 2,
                                                                                                                     Strictness: <L,1*U><S,1*U> -}
                                                                                                                = \ (z' :: [((GHC.Types.Int,
                                                                                                                              Pde.MultiIndex),
                                                                                                                             Ivar.Ivar
                                                                                                                               a)])
                                                                                                                    (ds :: Data.Map.Internal.Map
                                                                                                                             (GHC.Types.Int,
                                                                                                                              Pde.MultiIndex)
                                                                                                                             (Ivar.Ivar
                                                                                                                                a)) ->
                                                                                                                  case ds of wild {
                                                                                                                    Data.Map.Internal.Bin dt kx x l r
                                                                                                                    -> case kx of wild1 { (,) x1 y ->
                                                                                                                       go13
                                                                                                                         (GHC.Types.:
                                                                                                                            @ ((GHC.Types.Int,
                                                                                                                                Pde.MultiIndex),
                                                                                                                               Ivar.Ivar
                                                                                                                                 a)
                                                                                                                            ({__scc {main:Pde.prolongPdeIvar.map3.\} True False} ({__scc {main:Pde.prolongPdeIvar.map3.\} False True} case lvl34 of wild2 { GHC.Types.I# y1 ->
                                                                                                                                                                                                                                      case x1 of wild3 { GHC.Types.I# y2 ->
                                                                                                                                                                                                                                      GHC.Types.I#
                                                                                                                                                                                                                                        (GHC.Prim.+#
                                                                                                                                                                                                                                           (GHC.Prim.*#
                                                                                                                                                                                                                                              136#
                                                                                                                                                                                                                                              y1)
                                                                                                                                                                                                                                           y2) } },
                                                                                                                                                                                  y),
                                                                                                                             x)
                                                                                                                            (go13
                                                                                                                               z'
                                                                                                                               r))
                                                                                                                         l }
                                                                                                                    Data.Map.Internal.Tip
                                                                                                                    -> z' }
                                                                                                              } in
                                                                                                              (Pde.$sfromList2
                                                                                                                 @ (Ivar.Ivar
                                                                                                                      a)
                                                                                                                 (go13
                                                                                                                    (GHC.Types.[]
                                                                                                                       @ ((GHC.Types.Int,
                                                                                                                           Pde.MultiIndex),
                                                                                                                          Ivar.Ivar
                                                                                                                            a))
                                                                                                                    map2))
                                                                                                                `cast`
                                                                                                              (Sym (Pde.N:Pde[0]) <Ivar.Ivar
                                                                                                                                     a>_N)) -}
2e0acfc41e65424d80f4183b0977b5e2
  $wshowl ::
    [GHC.Types.Int] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
aa3ffbf578f0f4580da2d6d1218320d0
  $wtriangleMap ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 {__scc {main:Pde.triangleMap} True True} Pde.$sfromList
                                                            @ GHC.Types.Int
                                                            (GHC.List.zip
                                                               @ [GHC.Types.Int]
                                                               @ GHC.Types.Int
                                                               ({__scc {main:Pde.triangleMap.j} True True} case GHC.Prim.>#
                                                                                                                  1#
                                                                                                                  ww of lwild {
                                                                                                             DEFAULT
                                                                                                             -> letrec {
                                                                                                                  go1 :: GHC.Prim.Int#
                                                                                                                         -> [[GHC.Types.Int]]
                                                                                                                    {- Arity: 1,
                                                                                                                       Strictness: <S,U> -}
                                                                                                                  = \ (x :: GHC.Prim.Int#) ->
                                                                                                                    let {
                                                                                                                      n :: [[GHC.Types.Int]]
                                                                                                                      = case GHC.Prim.==#
                                                                                                                               x
                                                                                                                               ww of lwild1 {
                                                                                                                          DEFAULT
                                                                                                                          -> go1
                                                                                                                               (GHC.Prim.+#
                                                                                                                                  x
                                                                                                                                  1#)
                                                                                                                          1#
                                                                                                                          -> GHC.Types.[]
                                                                                                                               @ [GHC.Types.Int] }
                                                                                                                    } in
                                                                                                                    case GHC.Prim.>#
                                                                                                                           x
                                                                                                                           ww of lwild1 {
                                                                                                                      DEFAULT
                                                                                                                      -> let {
                                                                                                                           wild :: GHC.Types.Int
                                                                                                                           = GHC.Types.I#
                                                                                                                               x
                                                                                                                         } in
                                                                                                                         letrec {
                                                                                                                           go2 :: GHC.Prim.Int#
                                                                                                                                  -> [[GHC.Types.Int]]
                                                                                                                             {- Arity: 1,
                                                                                                                                Strictness: <L,U> -}
                                                                                                                           = \ (x1 :: GHC.Prim.Int#) ->
                                                                                                                             GHC.Types.:
                                                                                                                               @ [GHC.Types.Int]
                                                                                                                               (GHC.Types.:
                                                                                                                                  @ GHC.Types.Int
                                                                                                                                  wild
                                                                                                                                  (GHC.Types.:
                                                                                                                                     @ GHC.Types.Int
                                                                                                                                     (GHC.Types.I#
                                                                                                                                        x1)
                                                                                                                                     (GHC.Types.[]
                                                                                                                                        @ GHC.Types.Int)))
                                                                                                                               (case GHC.Prim.==#
                                                                                                                                       x1
                                                                                                                                       ww of lwild2 {
                                                                                                                                  DEFAULT
                                                                                                                                  -> go2
                                                                                                                                       (GHC.Prim.+#
                                                                                                                                          x1
                                                                                                                                          1#)
                                                                                                                                  1#
                                                                                                                                  -> n })
                                                                                                                         } in
                                                                                                                         go2
                                                                                                                           x
                                                                                                                      1#
                                                                                                                      -> n }
                                                                                                                } in
                                                                                                                go1
                                                                                                                  1#
                                                                                                             1#
                                                                                                             -> GHC.Types.[]
                                                                                                                  @ [GHC.Types.Int] })
                                                               ({__scc {main:Pde.triangleMap.k} True False} Pde.triangleMap1))) -}
09244e62bbea09edcecaadbe2e88f25f
  newtype MultiIndex
    = MultiIndex (Data.IntMap.Internal.IntMap GHC.Natural.Natural)
99a418906cf9afd51293d9b8d5a476b6
  newtype Pde a
    = Pde (Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a)
438fdbd98acedba01781cefe08e437cb
  addMultiInds :: Pde.MultiIndex -> Pde.MultiIndex -> Pde.MultiIndex
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Pde.addMultiInds1
                  `cast`
                (<Pde.MultiIndex>_R
                 ->_R <Pde.MultiIndex>_R
                 ->_R Sym (Pde.N:MultiIndex[0])) -}
53e575da4b349ee22217508aec77337c
  addMultiInds1 ::
    Pde.MultiIndex
    -> Pde.MultiIndex
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Pde.MultiIndex) (ds1 :: Pde.MultiIndex) ->
                 {__scc {main:Pde.addMultiInds} True True} Data.IntMap.Strict.unionWithKey
                                                             @ GHC.Natural.Natural
                                                             Pde.addMultiInds2
                                                             ds `cast` (Pde.N:MultiIndex[0])
                                                             ds1 `cast` (Pde.N:MultiIndex[0])) -}
66ff0b2946ed3abdbcff4035e49b8897
  addMultiInds2 ::
    Data.IntSet.Internal.Key
    -> GHC.Natural.Natural
    -> GHC.Natural.Natural
    -> GHC.Natural.Natural
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,U><S,U>,
     Unfolding: InlineRule (3, True, True)
                (\ (ds :: Data.IntSet.Internal.Key)
                   (x :: GHC.Natural.Natural)[OneShot]
                   (y :: GHC.Natural.Natural)[OneShot] ->
                 GHC.Natural.plusNatural x y) -}
a6dd12d0bf88d67c729bee565040b5db
  combinePdes :: Pde.Pde a -> Pde.Pde a -> Pde.Pde a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Pde.combinePdes1
                  `cast`
                (forall (a :: <*>_N).
                 <Pde.Pde a>_R ->_R <Pde.Pde a>_R ->_R Sym (Pde.N:Pde[0]) <a>_N) -}
6bf612c8574469b14cca28e09d2239a7
  combinePdes1 ::
    Pde.Pde a
    -> Pde.Pde a
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a (ds :: Pde.Pde a) (ds1 :: Pde.Pde a) ->
                 {__scc {main:Pde.combinePdes} True True} Pde.$sunion
                                                            @ a
                                                            ds `cast` (Pde.N:Pde[0] <a>_N)
                                                            ds1 `cast` (Pde.N:Pde[0] <a>_N)) -}
3bd77ce1c0b0e73fff93384c67af60b5
  deriveIvar1 ::
    GHC.Num.Num a => Pde.MultiIndex -> Ivar.Ivar a -> Ivar.Ivar a
  {- Arity: 3, Strictness: <L,A><L,1*U><S,1*U(A,1*U)>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Pde.MultiIndex)
                   (w2 :: Ivar.Ivar a) ->
                 case w2 of ww { Ivar.Ivar ww1 ww2 ->
                 {__scc {main:Pde.deriveIvar1} True False} Ivar.Ivar
                                                             @ a
                                                             ({__scc {main:Pde.deriveIvar1} False True} case {__scc {main:Pde.deriveIvar1.pos} True True} GHC.List.$w!!
                                                                                                                                                            @ Data.IntSet.Internal.Key
                                                                                                                                                            (Data.IntMap.Internal.keys
                                                                                                                                                               @ GHC.Natural.Natural
                                                                                                                                                               w1
                                                                                                                                                                 `cast`
                                                                                                                                                               (Pde.N:MultiIndex[0]))
                                                                                                                                                            0# of ww3 { GHC.Types.I# ww4 ->
                                                                                                        {__scc {main:Pde.deriveIvar1.i} True True} Data.IntMap.Internal.$w!
                                                                                                                                                     @ a
                                                                                                                                                     ww2
                                                                                                                                                     ww4 })
                                                             (Data.IntMap.Internal.Nil @ a) }) -}
44520f2685343c1da24fefdb7e911faa
  diffOrder :: Pde.MultiIndex -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Pde.MultiIndex) ->
                 case Pde.$wdiffOrder w of ww { DEFAULT -> GHC.Types.I# ww }) -}
6ad80e69e26979bab98114c64bfdf5c7
  evalPdeRand ::
    GHC.Types.Int
    -> Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.IntMap.Internal.IntMap GHC.Types.Int
    -> Pde.Pde (Ivar.Ivar GHC.Real.Rational)
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U(U)><L,U><L,U><L,1*U> -}
2d473432f3ed764b907bf4ea3bd26e3b
  isDerivableIvar1 :: Pde.MultiIndex -> Ivar.Ivar a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S(LS),1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Pde.MultiIndex) (w1 :: Ivar.Ivar a) ->
                 case w1 of ww { Ivar.Ivar ww1 ww2 ->
                 Pde.$wisDerivableIvar1 @ a w ww2 }) -}
6558d4c4082e4971379dee6a14afc43c
  isDerivableIvar1_go ::
    GHC.Natural.Natural
    -> Data.IntMap.Internal.IntMap GHC.Natural.Natural
    -> GHC.Natural.Natural
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U> -}
19a55879416e61f443367e38b8a46577
  isDerivableIvar1_z :: GHC.Natural.Natural
  {- Unfolding: ({__scc {main:Pde.diffOrder} False True} case Pde.isDerivableIvar3 of wild {
                                                           GHC.Integer.Type.S# i#
                                                           -> case GHC.Prim.>=# i# 0# of lwild {
                                                                DEFAULT
                                                                -> GHC.Natural.underflowError
                                                                     @ GHC.Natural.Natural
                                                                1#
                                                                -> GHC.Natural.NatS#
                                                                     (GHC.Prim.int2Word# i#) }
                                                           GHC.Integer.Type.Jp# dt
                                                           -> case GHC.Prim.uncheckedIShiftRL#
                                                                     (GHC.Prim.sizeofByteArray# dt)
                                                                     3# of wild1 {
                                                                DEFAULT
                                                                -> case GHC.Prim.sizeofByteArray#
                                                                          dt of wild2 {
                                                                     DEFAULT -> GHC.Natural.NatJ# dt
                                                                     0#
                                                                     -> GHC.Natural.underflowError
                                                                          @ GHC.Natural.Natural }
                                                                1#
                                                                -> case GHC.Prim.indexWordArray#
                                                                          dt
                                                                          0# of wild2 { DEFAULT ->
                                                                   GHC.Natural.NatS# wild2 } }
                                                           GHC.Integer.Type.Jn# ipv
                                                           -> GHC.Natural.underflowError
                                                                @ GHC.Natural.Natural }) -}
8f9c1101e593bc5c185212115363c9dc
  isDerivableIvar2 :: GHC.Types.Bool
  {- Strictness: x -}
9b914b682cb0833ee8a3d0c7b6735b6f
  isDerivableIvar3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
accafa7e536bac8a3252e41cd329aac1
  mkAllMultInds :: GHC.Types.Int -> [Pde.MultiIndex]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Pde.$wmkAllMultInds ww1 }) -}
3c26c965406e0f55f076c45bad744b9e
  mkPdefromTens ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a -> Pde.Pde a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Pde.mkPdefromTens1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a>_R
                 ->_R Sym (Pde.N:Pde[0]) <a>_N) -}
a6ec6942809bf9903fe5d607cf829368
  mkPdefromTens1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (map1 :: Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a) ->
                 {__scc {main:Pde.mkPdefromTens} True True} {__scc {main:Pde.mkPdefromTens.map2} True True} Pde.$sfromList2
                                                                                                              @ a
                                                                                                              (Pde.mkPdefromTens2
                                                                                                                 @ a
                                                                                                                 (GHC.Types.[]
                                                                                                                    @ ((GHC.Types.Int,
                                                                                                                        Pde.MultiIndex),
                                                                                                                       a))
                                                                                                                 map1)) -}
47c021b7f75580620e5c493c56f1a5a1
  mkPdefromTens2 ::
    [((GHC.Types.Int, Pde.MultiIndex), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, Pde.MultiIndex), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
514f5242a5d66995656258b2521b9ea4
  multInd2Number :: Pde.MultiIndex -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Pde.MultiIndex) ->
                 {__scc {main:Pde.multInd2Number} True True} let {
                                                               l :: [(Data.IntSet.Internal.Key,
                                                                      GHC.Natural.Natural)]
                                                               = {__scc {main:Pde.multInd2Number.l} True True} Data.IntMap.Internal.toAscList
                                                                                                                 @ GHC.Natural.Natural
                                                                                                                 ds
                                                                                                                   `cast`
                                                                                                                 (Pde.N:MultiIndex[0])
                                                             } in
                                                             Pde.multInd2Number1_go
                                                               ({__scc {main:Pde.multInd2Number.l2} True True} GHC.Base.map
                                                                                                                 @ (Data.IntSet.Internal.Key,
                                                                                                                    GHC.Natural.Natural)
                                                                                                                 @ [Data.IntSet.Internal.Key]
                                                                                                                 Pde.multInd2Number2
                                                                                                                 l)) -}
8e423df2d20e98aa34df8e9c2348118c
  multInd2Number1 :: Pde.MultiIndex -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (mult :: Pde.MultiIndex) ->
                 {__scc {main:Pde.multInd2Number1} True True} case GHC.List.$wlenAcc
                                                                     @ GHC.Types.Int
                                                                     ({__scc {main:Pde.multInd2Number1.l} True True} Pde.multInd2Number
                                                                                                                       mult)
                                                                     0# of ww2 {
                                                                DEFAULT -> Pde.multInd2Number3
                                                                1#
                                                                -> GHC.List.$w!!
                                                                     @ GHC.Types.Int
                                                                     ({__scc {main:Pde.multInd2Number} True True} let {
                                                                                                                    l :: [(Data.IntSet.Internal.Key,
                                                                                                                           GHC.Natural.Natural)]
                                                                                                                    = {__scc {main:Pde.multInd2Number.l} True True} Data.IntMap.Internal.toAscList
                                                                                                                                                                      @ GHC.Natural.Natural
                                                                                                                                                                      mult
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Pde.N:MultiIndex[0])
                                                                                                                  } in
                                                                                                                  Pde.multInd2Number1_go
                                                                                                                    ({__scc {main:Pde.multInd2Number.l2} True True} GHC.Base.map
                                                                                                                                                                      @ (Data.IntSet.Internal.Key,
                                                                                                                                                                         GHC.Natural.Natural)
                                                                                                                                                                      @ [Data.IntSet.Internal.Key]
                                                                                                                                                                      Pde.multInd2Number2
                                                                                                                                                                      l))
                                                                     0# }) -}
a004364860f6b6283921aa358a61639f
  multInd2Number1_go ::
    [[Data.IntSet.Internal.Key]] -> [Data.IntSet.Internal.Key]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b8a7c2312ed29f5bf85340e6216c4756
  multInd2Number2 ::
    (Data.IntSet.Internal.Key, GHC.Natural.Natural)
    -> [Data.IntSet.Internal.Key]
  {- Arity: 1, Strictness: <S(LS),1*U(U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Data.IntSet.Internal.Key, GHC.Natural.Natural)) ->
                 case w of ww { (,) ww1 ww2 -> Pde.$wlvl ww1 ww2 }) -}
45a7f94aa672f0e0a447bafc64286b74
  multInd2Number3 :: GHC.Types.Int
  {- Strictness: x -}
219a5c5771264440ba0154a2586e46cf
  number2MultInd :: GHC.Types.Int -> Pde.MultiIndex
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Pde.$wnumber2MultInd ww1 }) -}
b646baef487cc3770c0850756f58e03f
  print2Maple ::
    GHC.Types.Int
    -> Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Pde.Pde (Ivar.Ivar GHC.Real.Rational)
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(U)><L,U><L,U>,
     Unfolding: (\ (nopsIvar :: GHC.Types.Int)
                   (triangle :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (ds :: Pde.Pde (Ivar.Ivar GHC.Real.Rational)) ->
                 {__scc {main:Pde.print2Maple} True True} GHC.CString.unpackAppendCString#
                                                            Pde.print2Maple9
                                                            (let {
                                                               l :: [((GHC.Types.Int,
                                                                       Pde.MultiIndex),
                                                                      Ivar.Ivar GHC.Real.Rational)]
                                                               = {__scc {main:Pde.print2Maple.l} True True} Data.Map.Internal.assocs
                                                                                                              @ (GHC.Types.Int,
                                                                                                                 Pde.MultiIndex)
                                                                                                              @ (Ivar.Ivar
                                                                                                                   GHC.Real.Rational)
                                                                                                              ds
                                                                                                                `cast`
                                                                                                              (Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                               GHC.Real.Rational>_N)
                                                             } in
                                                             case Pde.print2Maple_go
                                                                    ({__scc {main:Pde.print2Maple.l2} True True} GHC.Base.map
                                                                                                                   @ ((GHC.Types.Int,
                                                                                                                       Pde.MultiIndex),
                                                                                                                      Ivar.Ivar
                                                                                                                        GHC.Real.Rational)
                                                                                                                   @ [GHC.Types.Char]
                                                                                                                   (\ (ds1 :: ((GHC.Types.Int,
                                                                                                                                Pde.MultiIndex),
                                                                                                                               Ivar.Ivar
                                                                                                                                 GHC.Real.Rational)) ->
                                                                                                                    case ds1 of wild { (,) ds2 z ->
                                                                                                                    case ds2 of wild1 { (,) x y ->
                                                                                                                    {__scc {main:Pde.print2Maple.l2.\} True False} GHC.Types.:
                                                                                                                                                                     @ GHC.Types.Char
                                                                                                                                                                     Pde.print2Maple8
                                                                                                                                                                     ({__scc {main:Pde.print2Maple.l2.\} False True} GHC.Base.++_$s++
                                                                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                                                                       (GHC.Types.:
                                                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                                                          Pde.print2Maple7
                                                                                                                                                                                                                          (case z of ww { Ivar.Ivar ww1 ww2 ->
                                                                                                                                                                                                                           case ww1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                                                                                                                                           case Ivar.$wshowIvarRational
                                                                                                                                                                                                                                  ww4
                                                                                                                                                                                                                                  ww5
                                                                                                                                                                                                                                  ww2 of ww6 { (#,#) ww7 ww8 ->
                                                                                                                                                                                                                           GHC.Base.++_$s++
                                                                                                                                                                                                                             @ GHC.Types.Char
                                                                                                                                                                                                                             Pde.print2Maple5
                                                                                                                                                                                                                             ww7
                                                                                                                                                                                                                             ww8 } } }))
                                                                                                                                                                                                                       GHC.Show.$fShow(,)4
                                                                                                                                                                                                                       (case x of ww2 { GHC.Types.I# ww3 ->
                                                                                                                                                                                                                        case GHC.Show.$wshowSignedInt
                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                               ww3
                                                                                                                                                                                                                               (GHC.Types.:
                                                                                                                                                                                                                                  @ GHC.Types.Char
                                                                                                                                                                                                                                  GHC.Show.showList__1
                                                                                                                                                                                                                                  (GHC.Show.$fShow(,)_$sgo1
                                                                                                                                                                                                                                     Pde.print2Maple4
                                                                                                                                                                                                                                     (\ (w2 :: GHC.Base.String)[OneShot] ->
                                                                                                                                                                                                                                      case Pde.$wmultInd2MatrixNr
                                                                                                                                                                                                                                             y
                                                                                                                                                                                                                                             nopsIvar
                                                                                                                                                                                                                                             triangle of ww { DEFAULT ->
                                                                                                                                                                                                                                      case GHC.Show.$wshowSignedInt
                                                                                                                                                                                                                                             0#
                                                                                                                                                                                                                                             ww
                                                                                                                                                                                                                                             w2 of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                                                                      GHC.Types.:
                                                                                                                                                                                                                                        @ GHC.Types.Char
                                                                                                                                                                                                                                        ww5
                                                                                                                                                                                                                                        ww6 } })
                                                                                                                                                                                                                                     (GHC.Types.[]
                                                                                                                                                                                                                                        @ GHC.Show.ShowS))) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                                                                                        GHC.Types.:
                                                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                                                          ww5
                                                                                                                                                                                                                          ww6 } })) } })
                                                                                                                   l) of wild {
                                                               []
                                                               -> case GHC.List.scanl2
                                                                  ret_ty [GHC.Types.Char]
                                                                  of {}
                                                               : ds1 xs
                                                               -> GHC.Base.++
                                                                    @ GHC.Types.Char
                                                                    xs
                                                                    Pde.print2Maple1 })) -}
81603c8b5e2581ff577f67c1e9310387
  print2Maple1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Pde.print2Maple2) -}
f7a56067f6093fa73afce52148094c40
  print2Maple2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
ebd5d3430153324a8afb31082dd697f0
  print2Maple3 :: GHC.Types.Int
  {- Strictness: x -}
79594a4a082952642433912c8312e745
  print2Maple4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
89d268ba2f15ba44bef7d4c764720b36
  print2Maple5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Pde.print2Maple6) -}
14caa54861fbd7ce1863f8693da984af
  print2Maple6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
8d803033e8a6a8242919558365b144ec
  print2Maple7 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '='#) -}
dc6abccb456a0a8dde86b72c677fc3d4
  print2Maple8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ','#) -}
2695bb83ff396ce00a198bf5c4f57125
  print2Maple9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("{"#) -}
0fd6fbac487e01df1bb7592e3f5084b2
  print2MaplePde ::
    Pde.Pde (Ivar.Ivar GHC.Real.Rational) -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ds :: Pde.Pde (Ivar.Ivar GHC.Real.Rational)) ->
                 {__scc {main:Pde.print2MaplePde} True True} GHC.CString.unpackAppendCString#
                                                               Pde.print2MaplePde11
                                                               (let {
                                                                  l :: [((GHC.Types.Int,
                                                                          Pde.MultiIndex),
                                                                         Ivar.Ivar
                                                                           GHC.Real.Rational)]
                                                                  = {__scc {main:Pde.print2MaplePde.l} True True} Data.Map.Internal.assocs
                                                                                                                    @ (GHC.Types.Int,
                                                                                                                       Pde.MultiIndex)
                                                                                                                    @ (Ivar.Ivar
                                                                                                                         GHC.Real.Rational)
                                                                                                                    ds
                                                                                                                      `cast`
                                                                                                                    (Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                                     GHC.Real.Rational>_N)
                                                                } in
                                                                let {
                                                                  l2 :: [(GHC.Types.Int,
                                                                          [GHC.Types.Char])]
                                                                  = {__scc {main:Pde.print2MaplePde.l2} True True} GHC.Base.map
                                                                                                                     @ ((GHC.Types.Int,
                                                                                                                         Pde.MultiIndex),
                                                                                                                        Ivar.Ivar
                                                                                                                          GHC.Real.Rational)
                                                                                                                     @ (GHC.Types.Int,
                                                                                                                        [GHC.Types.Char])
                                                                                                                     Pde.print2MaplePde6
                                                                                                                     l
                                                                } in
                                                                case Pde.print2MaplePde_go1
                                                                       ({__scc {main:Pde.print2MaplePde.map2} True True} Data.IntMap.Strict.fromListWithKey
                                                                                                                           @ [GHC.Types.Char]
                                                                                                                           Pde.print2MaplePde5
                                                                                                                           l2) of wild {
                                                                  DEFAULT
                                                                  -> case Pde.print2MaplePde_go
                                                                            Pde.print2MaplePde3
                                                                            wild of wild1 {
                                                                       []
                                                                       -> case GHC.List.scanl2
                                                                          ret_ty [GHC.Types.Char]
                                                                          of {}
                                                                       : ds1 xs
                                                                       -> GHC.Base.++
                                                                            @ GHC.Types.Char
                                                                            xs
                                                                            Pde.print2MaplePde1 }
                                                                  Data.IntMap.Internal.Bin dt dt1 l1 r
                                                                  -> case GHC.Prim.<#
                                                                            dt1
                                                                            0# of lwild {
                                                                       DEFAULT
                                                                       -> case Pde.print2MaplePde_go
                                                                                 (Pde.print2MaplePde_go
                                                                                    Pde.print2MaplePde3
                                                                                    r)
                                                                                 l1 of wild1 {
                                                                            []
                                                                            -> case GHC.List.scanl2
                                                                               ret_ty [GHC.Types.Char]
                                                                               of {}
                                                                            : ds1 xs
                                                                            -> GHC.Base.++
                                                                                 @ GHC.Types.Char
                                                                                 xs
                                                                                 Pde.print2MaplePde1 }
                                                                       1#
                                                                       -> case Pde.print2MaplePde_go
                                                                                 (Pde.print2MaplePde_go
                                                                                    Pde.print2MaplePde3
                                                                                    l1)
                                                                                 r of wild1 {
                                                                            []
                                                                            -> case GHC.List.scanl2
                                                                               ret_ty [GHC.Types.Char]
                                                                               of {}
                                                                            : ds1 xs
                                                                            -> GHC.Base.++
                                                                                 @ GHC.Types.Char
                                                                                 xs
                                                                                 Pde.print2MaplePde1 } } })) -}
ee26b1cf59e8d841f0e9e3c00285e33c
  print2MaplePde1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Pde.print2MaplePde2) -}
29a8104821d893381f63b93b0827f46f
  print2MaplePde10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
dc074255a357533fadedefe7d06bc0ed
  print2MaplePde11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("["#) -}
e0bbf4533a9e8974aa16c20febd19117
  print2MaplePde2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("]"#) -}
5afda9d3518953257b3a7a2f117d1f2d
  print2MaplePde3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Pde.print2MaplePde4) -}
7cad6db8332bf7bad42ce7132c9de9b1
  print2MaplePde4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
33e67a6b245914a2db68a658b3290c55
  print2MaplePde5 ::
    Data.IntSet.Internal.Key
    -> [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: Data.IntSet.Internal.Key)
                   (x :: [GHC.Types.Char])[OneShot]
                   (y :: [GHC.Types.Char])[OneShot] ->
                 {__scc {main:Pde.print2MaplePde.map2.\} True True} GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         x)
                                                                      (GHC.CString.unpackAppendCString#
                                                                         "+"#
                                                                         y)) -}
ef2a52edd08e158bade75dfece0df7bd
  print2MaplePde6 ::
    ((GHC.Types.Int, Pde.MultiIndex), Ivar.Ivar GHC.Real.Rational)
    -> (GHC.Types.Int, [GHC.Types.Char])
  {- Arity: 1,
     Strictness: <S(SL),1*U(1*U(U,1*U),1*U(1*U(U,U),1*U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((GHC.Types.Int, Pde.MultiIndex),
                          Ivar.Ivar GHC.Real.Rational)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case Pde.$wlvl1 ww4 ww5 ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
c5838bab4ab1961d219c0407c0b7b6e8
  print2MaplePde7 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main:Pde.print2MaplePde.l2.\} False True} GHC.Base.++
                                                                     @ GHC.Types.Char
                                                                     Pde.print2MaplePde8
                                                                     Pde.print2Maple5) -}
94e8515cd73e0928af739a821eb224ba
  print2MaplePde8 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {main:Pde.print2MaplePde} False True} {__scc {main:Pde.print2MaplePde.l2} False True} {__scc {main:Pde.print2MaplePde.l2.\} False True} GHC.CString.unpackAppendCString#
                                                                                                                                                                  GHC.Show.showList__4
                                                                                                                                                                  (GHC.Types.[]
                                                                                                                                                                     @ GHC.Types.Char)) -}
84d2d93a8f485b6ad96a245ea4791cf3
  print2MaplePde9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")*L"#) -}
16375708cfd47b5d5c8286079dc6f4ea
  print2MaplePde_go ::
    [GHC.Types.Char]
    -> Data.IntMap.Internal.IntMap [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
435c77e42af539c182cc591986059660
  print2MaplePde_go1 ::
    Data.IntMap.Internal.IntMap [GHC.Types.Char]
    -> Data.IntMap.Internal.IntMap [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
14358184ba7d1c34717f7c6a856a86a0
  print2MaplePde_showl :: [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Types.Int]) ->
                 case Pde.$wshowl w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
bb51a8cc0e329e647c0c820387b56dae
  print2Maple_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3d51b7db1d3454150ec004f9719f0383
  printConstPde :: GHC.Show.Show a => Pde.Pde a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><L,U> -}
3e3a3c1f2f0d211aaa2368c6186da28b
  prolongPde ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    Pde.MultiIndex -> Pde.Pde (Ivar.Ivar a) -> Pde.Pde (Ivar.Ivar a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,U(A,C(C1(U)))><L,U><S,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: Pde.MultiIndex)
                   (eta1 :: Pde.Pde (Ivar.Ivar a)) ->
                 let {
                   lvl34 :: Ivar.Ivar a -> Ivar.Ivar a -> Ivar.Ivar a {- Arity: 2 -}
                   = Ivar.addIvar @ a $dNum $dEq
                 } in
                 ({__scc {main:Pde.prolongPde} True True} {__scc {main:Pde.getPdeMap} True False} {__scc {main:Pde.getPdeMap} True False} Pde.$sunionWith
                                                                                                                                            @ (Ivar.Ivar
                                                                                                                                                 a)
                                                                                                                                            lvl34
                                                                                                                                            (Pde.prolongPdeConst
                                                                                                                                               @ (Ivar.Ivar
                                                                                                                                                    a)
                                                                                                                                               eta
                                                                                                                                               eta1)
                                                                                                                                              `cast`
                                                                                                                                            (Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                                                             a>_N)
                                                                                                                                            (Pde.$wprolongPdeIvar
                                                                                                                                               @ a
                                                                                                                                               eta
                                                                                                                                               eta1)
                                                                                                                                              `cast`
                                                                                                                                            (Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                                                             a>_N))
                   `cast`
                 (Sym (Pde.N:Pde[0]) <Ivar.Ivar a>_N)) -}
895f8278143cfb446f086f967405c273
  prolongPdeAll ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    [Pde.MultiIndex] -> Pde.Pde (Ivar.Ivar a) -> Pde.Pde (Ivar.Ivar a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,U(A,C(C1(U)))><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Pde.prolongPdeAll1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <GHC.Classes.Eq a>_R
                 ->_R <[Pde.MultiIndex]>_R
                 ->_R <Pde.Pde (Ivar.Ivar a)>_R
                 ->_R Sym (Pde.N:Pde[0]) <Ivar.Ivar a>_N) -}
856283ed497778ecc83de180fb925d23
  prolongPdeAll1 ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    [Pde.MultiIndex]
    -> Pde.Pde (Ivar.Ivar a)
    -> Data.Map.Internal.Map
         (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,U(A,C(C1(U)))><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a)
                   (mults :: [Pde.MultiIndex])
                   (pde :: Pde.Pde (Ivar.Ivar a)) ->
                 {__scc {main:Pde.prolongPdeAll} True True} Pde.prolongPdeAll2
                                                              @ a
                                                              (Data.Map.Internal.Tip
                                                                 @ (GHC.Types.Int, Pde.MultiIndex)
                                                                 @ (Ivar.Ivar a))
                                                              ({__scc {main:Pde.prolongPdeAll.pdeMapList} True True} GHC.Base.map
                                                                                                                       @ Pde.MultiIndex
                                                                                                                       @ (Data.Map.Internal.Map
                                                                                                                            (GHC.Types.Int,
                                                                                                                             Pde.MultiIndex)
                                                                                                                            (Ivar.Ivar
                                                                                                                               a))
                                                                                                                       (\ (x :: Pde.MultiIndex) ->
                                                                                                                        {__scc {main:Pde.prolongPdeAll.pdeMapList.\} True True} {__scc {main:Pde.getPdeMap} True False} Pde.prolongPde
                                                                                                                                                                                                                          @ a
                                                                                                                                                                                                                          $dNum
                                                                                                                                                                                                                          $dEq
                                                                                                                                                                                                                          x
                                                                                                                                                                                                                          pde)
                                                                                                                         `cast`
                                                                                                                       (<Pde.MultiIndex>_R
                                                                                                                        ->_R Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                                             a>_N)
                                                                                                                       mults)) -}
16144f7857b0dac13c04586391b08d64
  prolongPdeAll2 ::
    Data.Map.Internal.Map (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar a)
    -> [Data.Map.Internal.Map
          (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar a)]
    -> Data.Map.Internal.Map
         (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar a)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d057fa7291138fa67c4ba12c62a13808
  prolongPdeAllBlock1 ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    [Pde.MultiIndex] -> Pde.Pde (Ivar.Ivar a) -> Pde.Pde (Ivar.Ivar a)
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A,A,A,A,C(U))><L,U(A,C(C1(U)))><S,1*U><L,U> -}
3567e70b1757adba4797212ab0ccf1ab
  prolongPdeConst :: Pde.MultiIndex -> Pde.Pde a -> Pde.Pde a
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a (mult :: Pde.MultiIndex) (ds :: Pde.Pde a) ->
                 let {
                   lvl34 :: GHC.Types.Int
                   = {__scc {main:Pde.prolongPdeConst} False True} {__scc {main:Pde.prolongPdeConst.\} False True} Pde.multInd2Number1
                                                                                                                     mult
                 } in
                 {__scc {main:Pde.prolongPdeConst} True True} letrec {
                                                                go13 :: [((GHC.Types.Int,
                                                                           Pde.MultiIndex),
                                                                          a)]
                                                                        -> Data.Map.Internal.Map
                                                                             (GHC.Types.Int,
                                                                              Pde.MultiIndex)
                                                                             a
                                                                        -> [((GHC.Types.Int,
                                                                              Pde.MultiIndex),
                                                                             a)]
                                                                  {- Arity: 2,
                                                                     Strictness: <L,1*U><S,1*U> -}
                                                                = \ (z' :: [((GHC.Types.Int,
                                                                              Pde.MultiIndex),
                                                                             a)])
                                                                    (ds1 :: Data.Map.Internal.Map
                                                                              (GHC.Types.Int,
                                                                               Pde.MultiIndex)
                                                                              a) ->
                                                                  case ds1 of wild {
                                                                    Data.Map.Internal.Bin dt kx x l r
                                                                    -> case kx of wild1 { (,) x1 y ->
                                                                       go13
                                                                         (GHC.Types.:
                                                                            @ ((GHC.Types.Int,
                                                                                Pde.MultiIndex),
                                                                               a)
                                                                            ({__scc {main:Pde.prolongPdeConst.\} True False} ({__scc {main:Pde.prolongPdeConst.\} False True} case lvl34 of wild2 { GHC.Types.I# y1 ->
                                                                                                                                                                              case x1 of wild3 { GHC.Types.I# y2 ->
                                                                                                                                                                              GHC.Types.I#
                                                                                                                                                                                (GHC.Prim.+#
                                                                                                                                                                                   (GHC.Prim.*#
                                                                                                                                                                                      136#
                                                                                                                                                                                      y1)
                                                                                                                                                                                   y2) } },
                                                                                                                              ({__scc {main:Pde.prolongPdeConst.\} False True} Pde.addMultiInds1
                                                                                                                                                                                 mult
                                                                                                                                                                                 y)
                                                                                                                                `cast`
                                                                                                                              (Sym (Pde.N:MultiIndex[0]))),
                                                                             x)
                                                                            (go13 z' r))
                                                                         l }
                                                                    Data.Map.Internal.Tip -> z' }
                                                              } in
                                                              (Pde.$sfromList2
                                                                 @ a
                                                                 (go13
                                                                    (GHC.Types.[]
                                                                       @ ((GHC.Types.Int,
                                                                           Pde.MultiIndex),
                                                                          a))
                                                                    ds `cast` (Pde.N:Pde[0] <a>_N)))
                                                                `cast`
                                                              (Sym (Pde.N:Pde[0]) <a>_N)) -}
29bcecffd29ef2a21e5821d97eff1c00
  prolongPdeIvar ::
    GHC.Num.Num a =>
    Pde.MultiIndex -> Pde.Pde (Ivar.Ivar a) -> Pde.Pde (Ivar.Ivar a)
  {- Arity: 3, Strictness: <L,A><L,U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Pde.MultiIndex)
                   (w2 :: Pde.Pde (Ivar.Ivar a)) ->
                 Pde.$wprolongPdeIvar @ a w1 w2) -}
0be6ba7c614affd658c3cb53c0c3fc2f
  prolongSymbolAll ::
    GHC.Num.Num a =>
    [Pde.MultiIndex] -> Pde.Pde (Ivar.Ivar a) -> Pde.Pde (Ivar.Ivar a)
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Pde.prolongSymbolAll1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Num.Num a>_R
                 ->_R <[Pde.MultiIndex]>_R
                 ->_R <Pde.Pde (Ivar.Ivar a)>_R
                 ->_R Sym (Pde.N:Pde[0]) <Ivar.Ivar a>_N) -}
a997bf747f605db5db4d9c11411bdf0c
  prolongSymbolAll1 ::
    GHC.Num.Num a =>
    [Pde.MultiIndex]
    -> Pde.Pde (Ivar.Ivar a)
    -> Data.Map.Internal.Map
         (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar a)
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dNum :: GHC.Num.Num a) -> Pde.prolongSymbolAll2 @ a) -}
e0273f8e46b35629046b004961bc81b2
  prolongSymbolAll2 ::
    [Pde.MultiIndex]
    -> Pde.Pde (Ivar.Ivar a)
    -> Data.Map.Internal.Map
         (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar a)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ a
                   (mults :: [Pde.MultiIndex])
                   (pde :: Pde.Pde (Ivar.Ivar a)) ->
                 {__scc {main:Pde.prolongSymbolAll} True True} Pde.prolongPdeAll2
                                                                 @ a
                                                                 (Data.Map.Internal.Tip
                                                                    @ (GHC.Types.Int,
                                                                       Pde.MultiIndex)
                                                                    @ (Ivar.Ivar a))
                                                                 ({__scc {main:Pde.prolongSymbolAll.pdeMapList} True True} GHC.Base.map
                                                                                                                             @ Pde.MultiIndex
                                                                                                                             @ (Data.Map.Internal.Map
                                                                                                                                  (GHC.Types.Int,
                                                                                                                                   Pde.MultiIndex)
                                                                                                                                  (Ivar.Ivar
                                                                                                                                     a))
                                                                                                                             (\ (x :: Pde.MultiIndex) ->
                                                                                                                              {__scc {main:Pde.prolongSymbolAll.pdeMapList.\} True True} {__scc {main:Pde.getPdeMap} True False} Pde.prolongPdeConst
                                                                                                                                                                                                                                   @ (Ivar.Ivar
                                                                                                                                                                                                                                        a)
                                                                                                                                                                                                                                   x
                                                                                                                                                                                                                                   pde)
                                                                                                                               `cast`
                                                                                                                             (<Pde.MultiIndex>_R
                                                                                                                              ->_R Pde.N:Pde[0] <Ivar.Ivar
                                                                                                                                                   a>_N)
                                                                                                                             mults)) -}
73062c09bc2add55bf7a854dc1427954
  triangleMap ::
    GHC.Types.Int
    -> Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Pde.$wtriangleMap ww1 }) -}
eef8485129acd1dfc39ac58bf9035c4a
  triangleMap1 :: [GHC.Types.Int]
  {- Unfolding: ({__scc {main:Pde.triangleMap} False True} {__scc {main:Pde.triangleMap.k} False True} GHC.Enum.eftInt
                                                                                                         1#
                                                                                                         9223372036854775807#) -}
instance GHC.Classes.Eq [Pde.MultiIndex] = Pde.$fEqMultiIndex
instance GHC.Classes.Ord [Pde.MultiIndex] = Pde.$fOrdMultiIndex
instance GHC.Show.Show [Pde.MultiIndex] = Pde.$fShowMultiIndex
instance GHC.Show.Show [Pde.Pde] = Pde.$fShowPde
"SPEC/Pde $fEq(,) @ Int @ MultiIndex" forall (v1 :: GHC.Classes.Eq
                                                      Pde.MultiIndex)
                                             (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ Pde.MultiIndex v v1
  = Pde.$s$fEq(,)
"SPEC/Pde $fEq(,)_$c/= @ Int @ MultiIndex" forall ($dEq1 :: GHC.Classes.Eq
                                                              Pde.MultiIndex)
                                                  ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int
                           @ Pde.MultiIndex
                           $dEq
                           $dEq1
  = Pde.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Pde $fOrd(,) @ Int @ MultiIndex" forall (v1 :: GHC.Classes.Ord
                                                       Pde.MultiIndex)
                                              (v :: GHC.Classes.Ord GHC.Types.Int)
  GHC.Classes.$fOrd(,) @ GHC.Types.Int @ Pde.MultiIndex v v1
  = Pde.$s$fOrd(,)
"SPEC/Pde $fShow(,) @ Int @ MultiIndex" forall (v1 :: GHC.Show.Show
                                                        Pde.MultiIndex)
                                               (v :: GHC.Show.Show GHC.Types.Int)
  GHC.Show.$fShow(,) @ GHC.Types.Int @ Pde.MultiIndex v v1
  = Pde.$fShowPde_$s$fShow(,)
"SPEC/Pde fromList @ (Int, MultiIndex) _" forall @ a
                                                 ($dOrd :: GHC.Classes.Ord
                                                             (GHC.Types.Int, Pde.MultiIndex))
  Data.Map.Internal.fromList @ (GHC.Types.Int, Pde.MultiIndex)
                             @ a
                             $dOrd
  = Pde.$sfromList2 @ a
"SPEC/Pde fromList @ [Int] _" [orphan] forall @ a
                                              ($dOrd :: GHC.Classes.Ord [GHC.Types.Int])
  Data.Map.Strict.Internal.fromList @ [GHC.Types.Int] @ a $dOrd
  = Pde.$sfromList @ a
"SPEC/Pde union @ (Int, MultiIndex) _" forall @ a
                                              ($dOrd :: GHC.Classes.Ord
                                                          (GHC.Types.Int, Pde.MultiIndex))
  Data.Map.Internal.union @ (GHC.Types.Int, Pde.MultiIndex) @ a $dOrd
  = Pde.$sunion @ a
"SPEC/Pde unionWith @ (Int, MultiIndex) _" forall @ a
                                                  ($dOrd :: GHC.Classes.Ord
                                                              (GHC.Types.Int, Pde.MultiIndex))
  Data.Map.Strict.Internal.unionWith @ (GHC.Types.Int,
                                        Pde.MultiIndex)
                                     @ a
                                     $dOrd
  = Pde.$sunionWith @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

