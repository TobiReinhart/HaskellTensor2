
==================== FINAL INTERFACE ====================
2019-01-31 12:58:16.350844 UTC

interface main:EquivarianceEqns [hpc] 8043
  interface hash: dae4d62d450336785c7cd3924f9b6594
  ABI hash: 024c09c474101d82ccea2ae493ef0935
  export-list hash: 753233c47284511068d96a6925317f46
  orphan hash: f652871fd98e1d3ac53d97e3ce61f2f6
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  EquivarianceEqns.eqn1_1
  EquivarianceEqns.eqn1_1Flat
  EquivarianceEqns.eqn1_2
  EquivarianceEqns.eqn1_3
  EquivarianceEqns.eqn1_4
  EquivarianceEqns.eqn2_2
  EquivarianceEqns.eqn2_2Flat
  EquivarianceEqns.eqn2_3
  EquivarianceEqns.eqn3_3
  EquivarianceEqns.eqn3_3Flat
  EquivarianceEqns.index2Sparse1
  EquivarianceEqns.index2Sparse2
  EquivarianceEqns.index2Sparse3
  EquivarianceEqns.index2Sparse4
  EquivarianceEqns.index2Sparse5
  EquivarianceEqns.index2Sparse6
  EquivarianceEqns.index2SparseConst
  EquivarianceEqns.mkEqn1Sparse
  EquivarianceEqns.mkEqn2Sparse
  EquivarianceEqns.mkEqn3Sparse
  EquivarianceEqns.mkEqn4Sparse
  EquivarianceEqns.mkEqn5Sparse
  EquivarianceEqns.mkEqn6Sparse
  EquivarianceEqns.mkEqnConstSparse
  EquivarianceEqns.mkEqnConstSparseFlat
  EquivarianceEqns.showEqns
  EquivarianceEqns.showEqnsFlat
  EquivarianceEqns.showEqnsFlatFrac
  EquivarianceEqns.showEqnsFlatMatLab
module dependencies: BasicTensors Index Ivar Pde Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  BasicTensors 37af3f9a8fd59a713f944ac004973e4c
  exports: a936cd94aa71589de0ffe8aa62c98d1e
  delta_20 c71cb81705e6e5d5901bcbd1e22180d6
  delta_3 8cc1e4b8317d66d7eca659c350329b06
  delta_9 d5d21d803cfeb6cb976912320b26274f
  flatArea fbe15ed48c6fdb6adf67a8daa949019a
  interArea c20342d63b6344034b01aaa2ac26950f
  interI_2 153215576aaafca59336b29ab4fe62f8
  interI_3 81b1ff48906d822e1b197ce00de990fd
  interJ_2 ed60109b2fcce91c3bd797c31d2300d1
  interMetric f1cf0ef1e6072ffb4b1cd47c2e48f159
  ivar1 cf5aac0f5ecd2a6da4a71e32246d624d
  ivar2 fefba9746d94216150162667d5ee2c3f
  ivar3 fc07be32b2731822cd8dc2e69dd2d345
import  -/  Index 71b3346044a1d0e00e59251850573a46
  exports: 91057ce0b804927200140466044aa77d
  Index 1f5ddc4679c562a7168aef180062eec5
  Lind_20 06537182db1996ed045a0cd1b89858a5
  Lind_9 7ecf2cdb519ad8d35de36386b0078158
  Linds_3 e889a76254b9568bcd306a682aa34a7e
  Uind_19 374cb924ed47b2df0f5f34c39baf4688
  Uind_20 4bc2e2d710a65926fc1cbc6f81e36f73
  Uind_9 d3fbf44c59cbc2b93a3471d3308e9718
  Uinds_3 a3598cb2e3c7e8040d14aca7e8d357c5
  getValInd 5c90c661410f5cfc2f14176d2316e42c
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar d9681c195fa242e7d5d49d12895d614f
  addIvar 8fbb3c436aba9d6a12321dce4d5ee059
  mkConstIvar bbf0d73bbfd79b64a7eb708bebdadb49
  sMultIvar eadd42e5f8b61bf5318f3ec797dffdba
  showIvarRational 89360616d91377574b5657c02e124edb
import  -/  Pde ee46c0f08935aa69c73c37bcf3103bae
  exports: 5f26c9b1fc31234bc17b520659bce428
import  -/  Tensor a23a73880b2c27c94d4da0de54dee0ec
  exports: 652d5857d480c465fdf5ba71dcde1677
  Tensor 4b013267227da1ee7744d7e5a0036bd0
  Tensor ba59d8983dc93fba3a30d24b40148bfb
  tensorAdd ffa73e4d3d0d9f351f17926e90320c54
  tensorContractWith_20 a25204e5f61a8dd7bfafd0d945b634e9
  tensorContractWith_3 60512091e70a83c1aec3d9e0e69c4150
  tensorContractWith_9 17704f82cb10b47cfa0e901d1235c311
  tensorProductWith ba6be009bb6b7b464027f29968945a62
  tensorSMult bfa8fcd594144d440178a5eefd4492fb
  tensorSub fa755c70900c56cb9228bd5f8e3cb8d5
  tensorTranspose 5419f653b93e8002279716673d331d33
898ed50c8dfef9764aa4a10d47443c26
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> EquivarianceEqns.$sfromList1
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> EquivarianceEqns.$sfromList1
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> EquivarianceEqns.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> EquivarianceEqns.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
fcf27c6b4f73346580fbbddb5cb65448
  $sfromList1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c6eac5849e2d65f04954f4159912821f
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case EquivarianceEqns.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
f266531f6e5069549efb77bc7f595a0b
  $stensorContractWith_10 :: GHC.Natural.Natural
  {- Unfolding: (case EquivarianceEqns.$stensorContractWith_11 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
5b04608e3a525c3edfc6f27633c15d49
  $stensorContractWith_11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
eabf99765f3ff78eb39e0a10129b9231
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
4f48823aa059eb379cc5f014c9988f08
  $stensorContractWith_20_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0f0ed6e3553a5945f08795ed8adf4c0e
  $stensorContractWith_3 :: GHC.Natural.Natural
  {- Unfolding: (case EquivarianceEqns.$stensorContractWith_20_dt of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
a3934f9b3b0bff1a692a22cb0aaf310c
  $stensorContractWith_3_dt :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
d2404a8e91570d8fe53037e69411c839
  $stensorContractWith_7 :: GHC.Natural.Natural
  {- Unfolding: (case EquivarianceEqns.$stensorContractWith_3_dt of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
69d1456cc61790b933eb7271fec47c9f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   EquivarianceEqns.$trModule3
                   EquivarianceEqns.$trModule1) -}
dc909a5562d9b1f1581bf781f7800eaf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS EquivarianceEqns.$trModule2) -}
38a636c115e284e6554426bcfde16e11
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EquivarianceEqns"#) -}
c3639da84a1c20c6876d79a4ae6e2e62
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS EquivarianceEqns.$trModule4) -}
5c485420b1720f92f915581576e71b11
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
df3fb35d6696e12cc3c026791a008ba8
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
55dc0c20c453a31e8cf10de92024b659
  $weqn1_1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 1 1) (Ivar.Ivar GHC.Real.Rational) #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn1_1} True True} {__scc {main:EquivarianceEqns.eqn1_1.prod} True True} BasicTensors.$winterArea
                                                                                                                               w
                                                                                                                               w1 of ww { Unit# ww1 ->
                 case BasicTensors.ivar1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn1_1} False True} {__scc {main:EquivarianceEqns.eqn1_1.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 EquivarianceEqns.eqn1_13
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 {__scc {main:EquivarianceEqns.eqn1_1} False True} Tensor.$wtensorContractWith_20
                                                                     @ 0
                                                                     @ 1
                                                                     @ (Ivar.Ivar GHC.Real.Rational)
                                                                     @ 0
                                                                     @ 0
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 1
                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     EquivarianceEqns.eqn1_10
                                                                     EquivarianceEqns.eqn1_7
                                                                     ww5
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_20>_N)_N
                                                                           <Index.Ind
                                                                              (1 GHC.TypeNats.+ 1)
                                                                              Index.Lind_20>_N
                                                                           (Index.Ind
                                                                              (Add0L (<0>_N))
                                                                              <Index.Uind_19>_N)_N
                                                                           (Index.Ind
                                                                              (Add0L (<0>_N))
                                                                              <Index.Lind_19>_N)_N
                                                                           (Index.Ind
                                                                              (Add0L (<0>_N))
                                                                              <Index.Uind_9>_N)_N
                                                                           (Index.Ind
                                                                              (Add0L (<0>_N))
                                                                              <Index.Lind_9>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <Ivar.Ivar
                                                                           GHC.Real.Rational>_R)_R } } }) -}
fa15cb4ce7cb596f5072e93e645ff170
  $weqn1_1Flat ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 1 1) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn1_1Flat} True True} {__scc {main:EquivarianceEqns.eqn1_1Flat.prod} True True} BasicTensors.$winterArea
                                                                                                                                       w
                                                                                                                                       w1 of ww { Unit# ww1 ->
                 case {__scc {main:EquivarianceEqns.eqn1_1Flat} False True} {__scc {main:EquivarianceEqns.eqn1_1Flat.prod} False True} BasicTensors.$wflatArea
                                                                                                                                         w1 of ww2 { Unit# ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn1_1Flat} False True} {__scc {main:EquivarianceEqns.eqn1_1Flat.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                         ww1
                                                                                                                                         ww3 of ww4 { Unit# ww5 ->
                 {__scc {main:EquivarianceEqns.eqn1_1Flat} False True} Tensor.$wtensorContractWith_20
                                                                         @ 0
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 0
                                                                         @ 1
                                                                         @ 1
                                                                         EquivarianceEqns.$stensorContractWith_3
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                         EquivarianceEqns.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         EquivarianceEqns.eqn1_10
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww5
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                  <Index.Uind_20>_N)_N
                                                                               <Index.Ind
                                                                                  (1
                                                                                   GHC.TypeNats.+ 1)
                                                                                  Index.Lind_20>_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R } } }) -}
4c26f5ac066d3b1aff8d5ce897361204
  $weqn1_2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 1 2) (Ivar.Ivar GHC.Real.Rational) #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn1_2} True True} {__scc {main:EquivarianceEqns.eqn1_2.prod} True False} {__scc {main:EquivarianceEqns.eqn1_2.intTotal} True False} {__scc {main:EquivarianceEqns.eqn1_2.int1} True True} BasicTensors.$winterArea
                                                                                                                                                                                                                                                 w
                                                                                                                                                                                                                                                 w1 of ww { Unit# ww1 ->
                 case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn1_2} False True} {__scc {main:EquivarianceEqns.eqn1_2.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case EquivarianceEqns.eqn1_19
                        `cast`
                      (Tensor.Tensor
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0R (<2>_N))
                         (Add0R (<2>_N))
                         <GHC.Real.Rational>_R)_R of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:EquivarianceEqns.eqn1_2} False True} {__scc {main:EquivarianceEqns.eqn1_2.intTotal} False True} {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                                                                                                               @ 1
                                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                                               @ 0
                                                                                                                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                                                                                                                               @ 2
                                                                                                                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                               ({__scc {main:Tensor.fmap} False True} EquivarianceEqns.eqn1_2_go8
                                                                                                                                                                                                                                                                                                                                                        ww8) of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn1_2} False True} {__scc {main:EquivarianceEqns.eqn1_2.intTotal} False True} {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                           @ 2
                                                                                                                                                                                                                           @ 2
                                                                                                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                                                                                                           ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                                                              1
                                                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                                                              0
                                                                                                                                                                                                                                                                              2
                                                                                                                                                                                                                                                                              2)
                                                                                                                                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                                                            @ 1
                                                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                                                            @ 0
                                                                                                                                                                                                                                                                            @ 2
                                                                                                                                                                                                                                                                            @ 2)
                                                                                                                                                                                                                                                                         EquivarianceEqns.eqn1_2_lvl19
                                                                                                                                                                                                                                                                         ww5
                                                                                                                                                                                                                                                                           `cast`
                                                                                                                                                                                                                                                                         (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                            ((,,,,,,,)
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                  <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (Add0R (<1>_N))
                                                                                                                                                                                                                                                                                  <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                  <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                  <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                  <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (Add0L (<0>_N))
                                                                                                                                                                                                                                                                                  <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                           <1>_N))
                                                                                                                                                                                                                                                                                  <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                                                               (Index.Ind
                                                                                                                                                                                                                                                                                  (AddDef (<1>_N,
                                                                                                                                                                                                                                                                                           <1>_N))
                                                                                                                                                                                                                                                                                  <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                                                            <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                                                                         ww10) of ww11 { Tensor.Tensor ww12 ->
                 case BasicTensors.ivar2 of ww13 { Tensor.Tensor ww14 ->
                 case {__scc {main:EquivarianceEqns.eqn1_2} False True} {__scc {main:EquivarianceEqns.eqn1_2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 EquivarianceEqns.eqn1_18
                                                                                                                                 ww12
                                                                                                                                 ww14 of ww15 { Unit# ww16 ->
                 case {__scc {main:EquivarianceEqns.eqn1_2} False True} Tensor.$wtensorContractWith_3
                                                                          @ 1
                                                                          @ 2
                                                                          @ (Ivar.Ivar
                                                                               GHC.Real.Rational)
                                                                          @ 1
                                                                          @ 2
                                                                          @ 0
                                                                          @ 0
                                                                          @ 0
                                                                          @ 0
                                                                          EquivarianceEqns.$stensorContractWith_1
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          EquivarianceEqns.$stensorContractWith_7
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                          EquivarianceEqns.eqn1_16
                                                                          EquivarianceEqns.eqn1_7
                                                                          ww16
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <1>_N))
                                                                                   <Index.Lind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                 <1>_N)))
                                                                                   <Index.Uind_3>_N)_N
                                                                                <Index.Ind
                                                                                   (2
                                                                                    GHC.TypeNats.+ 1)
                                                                                   Index.Lind_3>_N)_N
                                                                             <Ivar.Ivar
                                                                                GHC.Real.Rational>_R)_R of ww17 { Unit# ww18 ->
                 {__scc {main:EquivarianceEqns.eqn1_2} False True} Tensor.$wtensorContractWith_20
                                                                     @ 0
                                                                     @ 1
                                                                     @ (Ivar.Ivar GHC.Real.Rational)
                                                                     @ 0
                                                                     @ 0
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 2
                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     EquivarianceEqns.eqn1_10
                                                                     EquivarianceEqns.eqn1_7
                                                                     ww18
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_20>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (AddDef (<1>_N,
                                                                                            <1>_N)))
                                                                              <Index.Lind_20>_N)_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_9>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_3>_N
                                                                           <Index.Ind
                                                                              2 Index.Lind_3>_N)_N
                                                                        <Ivar.Ivar
                                                                           GHC.Real.Rational>_R)_R } } } } } } } } }) -}
3505af85ca68b03d5725b23176c633f7
  $weqn1_3 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 1 1 1) (Ivar.Ivar GHC.Real.Rational) #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} True True} {__scc {main:EquivarianceEqns.eqn1_3.prod} True False} {__scc {main:EquivarianceEqns.eqn1_3.intTotal} True False} {__scc {main:EquivarianceEqns.eqn1_3.int1} True True} BasicTensors.$winterArea
                                                                                                                                                                                                                                                 w2
                                                                                                                                                                                                                                                 w3 of ww { Unit# ww1 ->
                 case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} False True} {__scc {main:EquivarianceEqns.eqn1_3.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} False True} {__scc {main:EquivarianceEqns.eqn1_3.int2} True True} BasicTensors.$winterMetric
                                                                                                                                w
                                                                                                                                w1 of ww7 { Unit# ww8 ->
                 case BasicTensors.delta_20 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} False True} {__scc {main:EquivarianceEqns.eqn1_3.int2} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww8
                                                                                                                                 ww10 of ww11 { Unit# ww12 ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} False True} {__scc {main:EquivarianceEqns.eqn1_3.intTotal} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 0
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ 1
                                                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                                                ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                   0
                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                   1
                                                                                                                                                                                                                                   1)
                                                                                                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                 @ 1)
                                                                                                                                                                                                                              EquivarianceEqns.eqn1_2_lvl19
                                                                                                                                                                                                                              ww5
                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                 <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                              ww12
                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<1>_N))
                                                                                                                                                                                                                                       <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                    (Index.Ind
                                                                                                                                                                                                                                       (Add0R (<1>_N))
                                                                                                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                 <GHC.Real.Rational>_R)_R) of ww13 { Tensor.Tensor ww14 ->
                 case BasicTensors.ivar3 of ww15 { Tensor.Tensor ww16 ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} False True} {__scc {main:EquivarianceEqns.eqn1_3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 EquivarianceEqns.eqn1_21
                                                                                                                                 ww14
                                                                                                                                 ww16 of ww17 { Unit# ww18 ->
                 case {__scc {main:EquivarianceEqns.eqn1_3} False True} Tensor.$wtensorContractWith_9
                                                                          @ 0
                                                                          @ 1
                                                                          @ (Ivar.Ivar
                                                                               GHC.Real.Rational)
                                                                          @ 1
                                                                          @ 2
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 1
                                                                          EquivarianceEqns.$stensorContractWith_3
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                          EquivarianceEqns.$stensorContractWith_1
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          EquivarianceEqns.eqn1_10
                                                                          EquivarianceEqns.eqn1_7
                                                                          ww18
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <1>_N))
                                                                                   <Index.Lind_20>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                   <Index.Uind_9>_N)_N
                                                                                <Index.Ind
                                                                                   (1
                                                                                    GHC.TypeNats.+ 1)
                                                                                   Index.Lind_9>_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <Ivar.Ivar
                                                                                GHC.Real.Rational>_R)_R of ww19 { Unit# ww20 ->
                 {__scc {main:EquivarianceEqns.eqn1_3} False True} Tensor.$wtensorContractWith_20
                                                                     @ 0
                                                                     @ 1
                                                                     @ (Ivar.Ivar GHC.Real.Rational)
                                                                     @ 0
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 1
                                                                     @ 1
                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     EquivarianceEqns.eqn1_10
                                                                     EquivarianceEqns.eqn1_7
                                                                     ww20
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_20>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (AddDef (<1>_N,
                                                                                            <1>_N)))
                                                                              <Index.Lind_20>_N)_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_9>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_3>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_3>_N)_N
                                                                        <Ivar.Ivar
                                                                           GHC.Real.Rational>_R)_R } } } } } } } } } }) -}
33e051b9e3f2291418f4a1c892ed03ec
  $weqn2_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 1 0 0 2) (Ivar.Ivar GHC.Real.Rational) #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn2_2} True True} {__scc {main:EquivarianceEqns.eqn2_2.prod} True False} {__scc {main:EquivarianceEqns.eqn2_2.interTotal} True False} {__scc {main:EquivarianceEqns.eqn2_2.int1} True True} BasicTensors.$winterArea
                                                                                                                                                                                                                                                   w1
                                                                                                                                                                                                                                                   w2 of ww { Unit# ww1 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2} False True} {__scc {main:EquivarianceEqns.eqn2_2.int1} False True} BasicTensors.interI_2
                                                                                                                                 w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2} False True} {__scc {main:EquivarianceEqns.eqn2_2.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2} False True} {__scc {main:EquivarianceEqns.eqn2_2.interTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                       @ 0
                                                                                                                                       @ 2
                                                                                                                                       @ GHC.Real.Rational
                                                                                                                                       @ 1
                                                                                                                                       @ 1
                                                                                                                                       @ 0
                                                                                                                                       @ 0
                                                                                                                                       @ 1
                                                                                                                                       @ 0
                                                                                                                                       EquivarianceEqns.$stensorContractWith_3
                                                                                                                                         `cast`
                                                                                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                 <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                       EquivarianceEqns.$stensorContractWith_7
                                                                                                                                         `cast`
                                                                                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                 <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                       EquivarianceEqns.eqn1_10
                                                                                                                                       GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                       ww5
                                                                                                                                         `cast`
                                                                                                                                       (Data.Map.Internal.Map
                                                                                                                                          ((,,,,,,,)
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0R (<1>_N))
                                                                                                                                                <Index.Uind_20>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0R (<1>_N))
                                                                                                                                                <Index.Lind_20>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0L (<0>_N))
                                                                                                                                                <Index.Uind_19>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0L (<0>_N))
                                                                                                                                                <Index.Lind_19>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0L (<1>_N))
                                                                                                                                                <Index.Uind_9>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0L (<0>_N))
                                                                                                                                                <Index.Lind_9>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                <Index.Uind_3>_N)_N
                                                                                                                                             (Index.Ind
                                                                                                                                                (AddDef (<1>_N,
                                                                                                                                                         <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                                                                               <1>_N)))
                                                                                                                                                <Index.Lind_3>_N)_N)_N
                                                                                                                                          <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case BasicTensors.ivar1 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2} False True} {__scc {main:EquivarianceEqns.eqn2_2.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 EquivarianceEqns.eqn2_1
                                                                                                                                 ww8
                                                                                                                                 ww10 of ww11 { Unit# ww12 ->
                 {__scc {main:EquivarianceEqns.eqn2_2} False True} Tensor.$wtensorContractWith_20
                                                                     @ 0
                                                                     @ 1
                                                                     @ (Ivar.Ivar GHC.Real.Rational)
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 2
                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     EquivarianceEqns.eqn1_10
                                                                     EquivarianceEqns.eqn1_7
                                                                     ww12
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_20>_N)_N
                                                                           <Index.Ind
                                                                              (1 GHC.TypeNats.+ 1)
                                                                              Index.Lind_20>_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Uind_19>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Lind_19>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N))
                                                                              <Index.Uind_9>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Lind_9>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<2>_N))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <Ivar.Ivar
                                                                           GHC.Real.Rational>_R)_R } } } } } }) -}
c0894ef381b30df93d97c6829b615039
  $weqn2_2Flat ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 1 0 0 2) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn2_2Flat} True True} {__scc {main:EquivarianceEqns.eqn2_2Flat.prod} True False} {__scc {main:EquivarianceEqns.eqn2_2Flat.interTotal} True False} {__scc {main:EquivarianceEqns.eqn2_2Flat.int1} True True} BasicTensors.$winterArea
                                                                                                                                                                                                                                                                   w1
                                                                                                                                                                                                                                                                   w2 of ww { Unit# ww1 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2Flat} False True} {__scc {main:EquivarianceEqns.eqn2_2Flat.int1} False True} BasicTensors.interI_2
                                                                                                                                         w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2Flat} False True} {__scc {main:EquivarianceEqns.eqn2_2Flat.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 2
                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                         ww1
                                                                                                                                         ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2Flat} False True} {__scc {main:EquivarianceEqns.eqn2_2Flat.interTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                               @ 0
                                                                                                                                               @ 2
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               EquivarianceEqns.$stensorContractWith_3
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                               EquivarianceEqns.$stensorContractWith_7
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                               EquivarianceEqns.eqn1_10
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww5
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (AddDef (<1>_N,
                                                                                                                                                                 <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                                                                                       <1>_N)))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2Flat} False True} {__scc {main:EquivarianceEqns.eqn2_2Flat.prod} False True} BasicTensors.$wflatArea
                                                                                                                                         w2 of ww9 { Unit# ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn2_2Flat} False True} {__scc {main:EquivarianceEqns.eqn2_2Flat.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 2
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                         ww8
                                                                                                                                         ww10 of ww11 { Unit# ww12 ->
                 {__scc {main:EquivarianceEqns.eqn2_2Flat} False True} Tensor.$wtensorContractWith_20
                                                                         @ 0
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 0
                                                                         @ 0
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 2
                                                                         EquivarianceEqns.$stensorContractWith_3
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                         EquivarianceEqns.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         EquivarianceEqns.eqn1_10
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww12
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                  <Index.Uind_20>_N)_N
                                                                               <Index.Ind
                                                                                  (1
                                                                                   GHC.TypeNats.+ 1)
                                                                                  Index.Lind_20>_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<2>_N))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R } } } } } }) -}
407ab731e4d5eafb0ce09de50a083ac3
  $weqn2_3 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 1 1 0 1) (Ivar.Ivar GHC.Real.Rational) #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} True True} {__scc {main:EquivarianceEqns.eqn2_3.int1_1} True True} BasicTensors.$winterArea
                                                                                                                                 w2
                                                                                                                                 w3 of ww { Unit# ww1 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int1_1} False True} BasicTensors.interI_2
                                                                                                                                   w of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int1_1} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww1
                                                                                                                                   ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int1_2} True False} {__scc {main:EquivarianceEqns.eqn2_3.int1_2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                                                            @ 0
                                                                                                                                                                                            @ 2
                                                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 0
                                                                                                                                                                                            @ 0
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 0
                                                                                                                                                                                            EquivarianceEqns.$stensorContractWith_3
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                                      <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                                                                            EquivarianceEqns.$stensorContractWith_7
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                                      <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                                                                            EquivarianceEqns.eqn1_10
                                                                                                                                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                                            ww5
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                     <Index.Uind_20>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                     <Index.Lind_20>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                     <Index.Uind_19>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                     <Index.Lind_19>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                     <Index.Uind_9>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                     <Index.Lind_9>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (AddDef (<1>_N,
                                                                                                                                                                                                              <2>_N) ; Sym (AddDef (<2>_N,
                                                                                                                                                                                                                                    <1>_N)))
                                                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                               <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int1_3} True True} BasicTensors.interJ_2
                                                                                                                                  w1 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int1_3} False True} Tensor.$wtensorProductWith
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 2
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 1
                                                                                                                                   @ 0
                                                                                                                                   @ 0
                                                                                                                                   @ 2
                                                                                                                                   GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                   ww10
                                                                                                                                   ww8 of ww11 { Unit# ww12 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int1_4} True False} {__scc {main:EquivarianceEqns.eqn2_3.int1_4} False True} Tensor.$wtensorContractWith_3
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ GHC.Real.Rational
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 0
                                                                                                                                                                                            @ 0
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            @ 1
                                                                                                                                                                                            EquivarianceEqns.$stensorContractWith_1
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                                      <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                                            EquivarianceEqns.$stensorContractWith_1
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                                                                      <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                                                                            EquivarianceEqns.eqn2_7
                                                                                                                                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                                                                            ww12
                                                                                                                                                                                              `cast`
                                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                                               ((,,,,,,,)
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                     <Index.Uind_20>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                     <Index.Lind_20>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                     <Index.Uind_19>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<0>_N))
                                                                                                                                                                                                     <Index.Lind_19>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<1>_N))
                                                                                                                                                                                                     <Index.Uind_9>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0R (<1>_N))
                                                                                                                                                                                                     <Index.Lind_9>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                                                   <1>_N)))
                                                                                                                                                                                                     <Index.Uind_3>_N)_N
                                                                                                                                                                                                  (Index.Ind
                                                                                                                                                                                                     (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                                                                                   <1>_N)))
                                                                                                                                                                                                     <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                               <GHC.Real.Rational>_R)_R of ww13 { Unit# ww14 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} let {
                                                                          int1_4 :: Tensor.Tensor
                                                                                      1
                                                                                      1
                                                                                      0
                                                                                      0
                                                                                      1
                                                                                      1
                                                                                      1
                                                                                      1
                                                                                      GHC.Real.Rational
                                                                          = Tensor.Tensor
                                                                              @ 1
                                                                              @ 1
                                                                              @ 0
                                                                              @ 0
                                                                              @ 1
                                                                              @ 1
                                                                              @ 1
                                                                              @ 1
                                                                              @ GHC.Real.Rational
                                                                              ww14
                                                                        } in
                                                                        {__scc {main:EquivarianceEqns.eqn2_3.prod} True False} {__scc {main:EquivarianceEqns.eqn2_3.interTotal} True False} {__scc {main:EquivarianceEqns.eqn2_3.int1} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} int1_4 of wild { Tensor.Tensor tMap ->
                 case EquivarianceEqns.eqn2_6
                        `cast`
                      (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww15 { Tensor.Tensor ww16 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.interTotal} False True} {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                 @ 0
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ 1
                                                                                                                                                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                                                                                                                                                 ({__scc {main:Tensor.fmap} False True} EquivarianceEqns.eqn2_3_go1
                                                                                                                                                                                                                                                                                                                                                          ww16) of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} let {
                                                                          ww19 :: Data.Map.Internal.Map
                                                                                    (Index.Index
                                                                                       1
                                                                                       1
                                                                                       0
                                                                                       0
                                                                                       1
                                                                                       1
                                                                                       1
                                                                                       1)
                                                                                    GHC.Real.Rational
                                                                          = {__scc {main:EquivarianceEqns.eqn2_3.int1} False True} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} False True} EquivarianceEqns.eqn2_3_go8
                                                                                                                                                                                                                        tMap
                                                                        } in
                                                                        {__scc {main:EquivarianceEqns.eqn2_3.interTotal} False True} {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                             @ 0
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ 1
                                                                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                                                                             ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                                                                1)
                                                                                                                                                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                                                                                                                                                           (Tensor.aSymTensor3
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                                                                              @ 1)
                                                                                                                                                                                                                                                                           EquivarianceEqns.eqn1_2_lvl19
                                                                                                                                                                                                                                                                           ww19
                                                                                                                                                                                                                                                                           ww18) of ww19 { Tensor.Tensor ww20 ->
                 case BasicTensors.ivar2 of ww21 { Tensor.Tensor ww22 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 EquivarianceEqns.eqn2_5
                                                                                                                                 ww20
                                                                                                                                 ww22 of ww23 { Unit# ww24 ->
                 case {__scc {main:EquivarianceEqns.eqn2_3} False True} Tensor.$wtensorContractWith_20
                                                                          @ 0
                                                                          @ 1
                                                                          @ (Ivar.Ivar
                                                                               GHC.Real.Rational)
                                                                          @ 0
                                                                          @ 0
                                                                          @ 1
                                                                          @ 1
                                                                          @ 1
                                                                          @ 2
                                                                          EquivarianceEqns.$stensorContractWith_3
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                          EquivarianceEqns.$stensorContractWith_1
                                                                            `cast`
                                                                          (Sym (GHC.TypeNats.N:SNat[0]
                                                                                    <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                          EquivarianceEqns.eqn1_10
                                                                          EquivarianceEqns.eqn1_7
                                                                          ww24
                                                                            `cast`
                                                                          (Data.Map.Internal.Map
                                                                             ((,,,,,,,)
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                   <Index.Uind_20>_N)_N
                                                                                <Index.Ind
                                                                                   (1
                                                                                    GHC.TypeNats.+ 1)
                                                                                   Index.Lind_20>_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Uind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0L (<0>_N))
                                                                                   <Index.Lind_19>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Lind_9>_N)_N
                                                                                (Index.Ind
                                                                                   (Add0R (<1>_N))
                                                                                   <Index.Uind_3>_N)_N
                                                                                (Index.Ind
                                                                                   (AddDef (<1>_N,
                                                                                            <1>_N))
                                                                                   <Index.Lind_3>_N)_N)_N
                                                                             <Ivar.Ivar
                                                                                GHC.Real.Rational>_R)_R of ww25 { Unit# ww26 ->
                 {__scc {main:EquivarianceEqns.eqn2_3} False True} Tensor.$wtensorContractWith_3
                                                                     @ 0
                                                                     @ 1
                                                                     @ (Ivar.Ivar GHC.Real.Rational)
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 1
                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     EquivarianceEqns.eqn1_10
                                                                     EquivarianceEqns.eqn1_7
                                                                     ww26
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           <Index.Ind
                                                                              0 Index.Uind_20>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_20>_N
                                                                           <Index.Ind
                                                                              0 Index.Uind_19>_N
                                                                           <Index.Ind
                                                                              0 Index.Lind_19>_N
                                                                           <Index.Ind
                                                                              1 Index.Uind_9>_N
                                                                           <Index.Ind
                                                                              1 Index.Lind_9>_N
                                                                           (Index.Ind
                                                                              (Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Sym (AddDef (<1>_N,
                                                                                            <1>_N)))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <Ivar.Ivar
                                                                           GHC.Real.Rational>_R)_R } } } } } } } } } } } } } }) -}
e047938638cba4cd4b8a06c5c3063d68
  $weqn3_3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 1 0 0 1 0 1) (Ivar.Ivar GHC.Real.Rational) #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 3) Index.Uind_19)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} True True} {__scc {main:EquivarianceEqns.eqn3_3.prod} True False} {__scc {main:EquivarianceEqns.eqn3_3.intTotal} True False} {__scc {main:EquivarianceEqns.eqn3_3.int1} True True} BasicTensors.interJ_2
                                                                                                                                                                                                                                                 w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.int1} False True} BasicTensors.$winterArea
                                                                                                                                 w2
                                                                                                                                 w3 of ww2 { Unit# ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 2
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.intTotal} False True} BasicTensors.interI_3
                                                                                                                                     w of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.intTotal} False True} Tensor.$wtensorProductWith
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     @ 3
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 3
                                                                                                                                     GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                     ww5
                                                                                                                                       `cast`
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        ((,,,,,,,)
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<1>_N))
                                                                                                                                              <Index.Uind_20>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<1>_N))
                                                                                                                                              <Index.Lind_20>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                              <Index.Uind_19>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                              <Index.Lind_19>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<0>_N))
                                                                                                                                              <Index.Uind_9>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<1>_N))
                                                                                                                                              <Index.Lind_9>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (AddDef (<2>_N,
                                                                                                                                                       <1>_N))
                                                                                                                                              <Index.Uind_3>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<1>_N))
                                                                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                                                                        <GHC.Real.Rational>_R)_R
                                                                                                                                     ww8 of ww9 { Unit# ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.intTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                     @ 2
                                                                                                                                     @ 3
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     EquivarianceEqns.$stensorContractWith_7
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                     EquivarianceEqns.$stensorContractWith_10
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                                                                     EquivarianceEqns.eqn3_2
                                                                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                     ww10
                                                                                                                                       `cast`
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        ((,,,,,,,)
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<1>_N))
                                                                                                                                              <Index.Uind_20>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<1>_N))
                                                                                                                                              <Index.Lind_20>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0L (<1>_N))
                                                                                                                                              <Index.Uind_19>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<0>_N))
                                                                                                                                              <Index.Lind_19>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<0>_N))
                                                                                                                                              <Index.Uind_9>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<1>_N))
                                                                                                                                              <Index.Lind_9>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Add0R (<3>_N) ; Sym (AddDef (<2>_N,
                                                                                                                                                                            <1>_N)))
                                                                                                                                              <Index.Uind_3>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (AddDef (<1>_N,
                                                                                                                                                       <3>_N) ; Sym (AddDef (<3>_N,
                                                                                                                                                                             <1>_N)))
                                                                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                                                                        <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.intTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                     @ 1
                                                                                                                                     @ 2
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                     EquivarianceEqns.$stensorContractWith_7
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                     EquivarianceEqns.eqn1_16
                                                                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                     ww12
                                                                                                                                       `cast`
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        ((,,,,,,,)
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Uind_20>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Lind_20>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Uind_19>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              0
                                                                                                                                              Index.Lind_19>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              0
                                                                                                                                              Index.Uind_9>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Lind_9>_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Sym (AddDef (<1>_N,
                                                                                                                                                            <1>_N)))
                                                                                                                                              <Index.Uind_3>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Sym (AddDef (<2>_N,
                                                                                                                                                            <1>_N)))
                                                                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                                                                        <GHC.Real.Rational>_R)_R of ww13 { Unit# ww14 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.intTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 1
                                                                                                                                     @ 0
                                                                                                                                     @ 0
                                                                                                                                     @ 1
                                                                                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                                                                                       `cast`
                                                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                     EquivarianceEqns.eqn1_10
                                                                                                                                     GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                     ww14
                                                                                                                                       `cast`
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        ((,,,,,,,)
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Uind_20>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Lind_20>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Uind_19>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              0
                                                                                                                                              Index.Lind_19>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              0
                                                                                                                                              Index.Uind_9>_N
                                                                                                                                           <Index.Ind
                                                                                                                                              1
                                                                                                                                              Index.Lind_9>_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Sym (Add0L (<1>_N)))
                                                                                                                                              <Index.Uind_3>_N)_N
                                                                                                                                           (Index.Ind
                                                                                                                                              (Sym (AddDef (<1>_N,
                                                                                                                                                            <1>_N)))
                                                                                                                                              <Index.Lind_3>_N)_N)_N
                                                                                                                                        <GHC.Real.Rational>_R)_R of ww15 { Unit# ww16 ->
                 case BasicTensors.ivar1 of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3} False True} {__scc {main:EquivarianceEqns.eqn3_3.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ (Ivar.Ivar
                                                                                                                                      GHC.Real.Rational)
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 EquivarianceEqns.eqn3_1
                                                                                                                                 ww16
                                                                                                                                 ww18 of ww19 { Unit# ww20 ->
                 {__scc {main:EquivarianceEqns.eqn3_3} False True} Tensor.$wtensorContractWith_20
                                                                     @ 0
                                                                     @ 1
                                                                     @ (Ivar.Ivar GHC.Real.Rational)
                                                                     @ 1
                                                                     @ 0
                                                                     @ 0
                                                                     @ 1
                                                                     @ 0
                                                                     @ 1
                                                                     EquivarianceEqns.$stensorContractWith_3
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                     EquivarianceEqns.$stensorContractWith_1
                                                                       `cast`
                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                               <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                     EquivarianceEqns.eqn1_10
                                                                     EquivarianceEqns.eqn1_7
                                                                     ww20
                                                                       `cast`
                                                                     (Data.Map.Internal.Map
                                                                        ((,,,,,,,)
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                              <Index.Uind_20>_N)_N
                                                                           <Index.Ind
                                                                              (1 GHC.TypeNats.+ 1)
                                                                              Index.Lind_20>_N
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N))
                                                                              <Index.Uind_19>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Lind_19>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Uind_9>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N))
                                                                              <Index.Lind_9>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<0>_N))
                                                                              <Index.Uind_3>_N)_N
                                                                           (Index.Ind
                                                                              (Add0R (<1>_N))
                                                                              <Index.Lind_3>_N)_N)_N
                                                                        <Ivar.Ivar
                                                                           GHC.Real.Rational>_R)_R } } } } } } } } } }) -}
1010dff8e5a0819871cf112970537dd7
  $weqn3_3Flat ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 1 0 0 1 0 1) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 3) Index.Uind_19)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} True True} {__scc {main:EquivarianceEqns.eqn3_3Flat.prod} True False} {__scc {main:EquivarianceEqns.eqn3_3Flat.intTotal} True False} {__scc {main:EquivarianceEqns.eqn3_3Flat.int1} True True} BasicTensors.interJ_2
                                                                                                                                                                                                                                                                 w1 of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.int1} False True} BasicTensors.$winterArea
                                                                                                                                         w2
                                                                                                                                         w3 of ww2 { Unit# ww3 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.int1} False True} Tensor.$wtensorProductWith
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 2
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                         ww1
                                                                                                                                         ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.intTotal} False True} BasicTensors.interI_3
                                                                                                                                             w of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.intTotal} False True} Tensor.$wtensorProductWith
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             @ 3
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 3
                                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                             ww5
                                                                                                                                               `cast`
                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                ((,,,,,,,)
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (AddDef (<2>_N,
                                                                                                                                                               <1>_N))
                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                <GHC.Real.Rational>_R)_R
                                                                                                                                             ww8 of ww9 { Unit# ww10 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.intTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                             @ 2
                                                                                                                                             @ 3
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             EquivarianceEqns.$stensorContractWith_7
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                             EquivarianceEqns.$stensorContractWith_10
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)
                                                                                                                                             EquivarianceEqns.eqn3_2
                                                                                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                             ww10
                                                                                                                                               `cast`
                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                ((,,,,,,,)
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<0>_N))
                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<0>_N))
                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Add0R (<3>_N) ; Sym (AddDef (<2>_N,
                                                                                                                                                                                    <1>_N)))
                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                               <3>_N) ; Sym (AddDef (<3>_N,
                                                                                                                                                                                     <1>_N)))
                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                <GHC.Real.Rational>_R)_R of ww11 { Unit# ww12 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.intTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                             @ 1
                                                                                                                                             @ 2
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             EquivarianceEqns.$stensorContractWith_1
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                             EquivarianceEqns.$stensorContractWith_7
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                                                                                             EquivarianceEqns.eqn1_16
                                                                                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                             ww12
                                                                                                                                               `cast`
                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                ((,,,,,,,)
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Uind_20>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Lind_20>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Uind_19>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      0
                                                                                                                                                      Index.Lind_19>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      0
                                                                                                                                                      Index.Uind_9>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Lind_9>_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Sym (AddDef (<1>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Sym (AddDef (<2>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                <GHC.Real.Rational>_R)_R of ww13 { Unit# ww14 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.intTotal} False True} Tensor.$wtensorContractWith_3
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 1
                                                                                                                                             @ 0
                                                                                                                                             @ 0
                                                                                                                                             @ 1
                                                                                                                                             EquivarianceEqns.$stensorContractWith_3
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                             EquivarianceEqns.$stensorContractWith_1
                                                                                                                                               `cast`
                                                                                                                                             (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                       <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                             EquivarianceEqns.eqn1_10
                                                                                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                             ww14
                                                                                                                                               `cast`
                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                ((,,,,,,,)
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Uind_20>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Lind_20>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Uind_19>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      0
                                                                                                                                                      Index.Lind_19>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      0
                                                                                                                                                      Index.Uind_9>_N
                                                                                                                                                   <Index.Ind
                                                                                                                                                      1
                                                                                                                                                      Index.Lind_9>_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Sym (Add0L (<1>_N)))
                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                   (Index.Ind
                                                                                                                                                      (Sym (AddDef (<1>_N,
                                                                                                                                                                    <1>_N)))
                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                <GHC.Real.Rational>_R)_R of ww15 { Unit# ww16 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.prod} False True} BasicTensors.$wflatArea
                                                                                                                                         w3 of ww17 { Unit# ww18 ->
                 case {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} {__scc {main:EquivarianceEqns.eqn3_3Flat.prod} False True} Tensor.$wtensorProductWith
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 1
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         @ 0
                                                                                                                                         GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                         ww16
                                                                                                                                         ww18 of ww19 { Unit# ww20 ->
                 {__scc {main:EquivarianceEqns.eqn3_3Flat} False True} Tensor.$wtensorContractWith_20
                                                                         @ 0
                                                                         @ 1
                                                                         @ GHC.Real.Rational
                                                                         @ 1
                                                                         @ 0
                                                                         @ 0
                                                                         @ 1
                                                                         @ 0
                                                                         @ 1
                                                                         EquivarianceEqns.$stensorContractWith_3
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                         EquivarianceEqns.$stensorContractWith_1
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                         EquivarianceEqns.eqn1_10
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww20
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                  <Index.Uind_20>_N)_N
                                                                               <Index.Ind
                                                                                  (1
                                                                                   GHC.TypeNats.+ 1)
                                                                                  Index.Lind_20>_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<0>_N))
                                                                                  <Index.Uind_3>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Lind_3>_N)_N)_N
                                                                            <GHC.Real.Rational>_R)_R } } } } } } } } } }) -}
d0d39bd339dd2574bb5c8a854e0131a8
  $windex2Sparse1 ::
    Index.Linds_20 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Uinds_3 1)
                   (ww2 :: Index.Linds_3 1) ->
                 {__scc {main:EquivarianceEqns.index2Sparse1} True False} (# {__scc {main:EquivarianceEqns.index2Sparse1} False True} case {__scc {main:EquivarianceEqns.index2Sparse1.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse1.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> let {
                                                                                                                                             $j :: GHC.Prim.Int#
                                                                                                                                                   -> GHC.Types.Int
                                                                                                                                               <join 1> {- Arity: 1,
                                                                                                                                                           Strictness: <S,U>m -}
                                                                                                                                             = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                               case {__scc {main:EquivarianceEqns.index2Sparse1.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:EquivarianceEqns.index2Sparse1.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                           @ Index.Lind_3
                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                           s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case x1 of wild4 {
                                                                                                                                                      Index.L0_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              1#)
                                                                                                                                                      Index.L1_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              2#)
                                                                                                                                                      Index.L2_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              3#)
                                                                                                                                                      Index.L3_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse1.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              4#) } } }
                                                                                                                                           } in
                                                                                                                                           case x of wild2 {
                                                                                                                                             Index.U0_3
                                                                                                                                             -> $j
                                                                                                                                                  0#
                                                                                                                                             Index.U1_3
                                                                                                                                             -> $j
                                                                                                                                                  1#
                                                                                                                                             Index.U2_3
                                                                                                                                             -> $j
                                                                                                                                                  2#
                                                                                                                                             Index.U3_3
                                                                                                                                             -> $j
                                                                                                                                                  3# } } },
                                                                             {__scc {main:EquivarianceEqns.index2Sparse1} False True} case {__scc {main:EquivarianceEqns.index2Sparse1.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse1.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse1.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           GHC.Types.I#
                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                ({__scc {main:EquivarianceEqns.index2Sparse1.a} False True} GHC.Prim.+#
                                                                                                                                                                                                              1#
                                                                                                                                                                                                              a#)
                                                                                                                                                1#) } } } #)) -}
4fce9c9d93f45f586c155965e41b290b
  $windex2Sparse2 ::
    Index.Linds_20 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 2
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Uinds_3 1)
                   (ww2 :: Index.Linds_3 2) ->
                 {__scc {main:EquivarianceEqns.index2Sparse2} True False} (# {__scc {main:EquivarianceEqns.index2Sparse2} False True} case {__scc {main:EquivarianceEqns.index2Sparse2.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse2.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> let {
                                                                                                                                             $j :: GHC.Prim.Int#
                                                                                                                                                   -> GHC.Types.Int
                                                                                                                                               <join 1> {- Arity: 1,
                                                                                                                                                           Strictness: <S,U>m -}
                                                                                                                                             = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                               case {__scc {main:EquivarianceEqns.index2Sparse2.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:EquivarianceEqns.index2Sparse2.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                           @ Index.Lind_3
                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                           s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case x1 of wild4 {
                                                                                                                                                      Index.L0_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              1#)
                                                                                                                                                      Index.L1_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              2#)
                                                                                                                                                      Index.L2_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              3#)
                                                                                                                                                      Index.L3_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse2.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              4#) } } }
                                                                                                                                           } in
                                                                                                                                           case x of wild2 {
                                                                                                                                             Index.U0_3
                                                                                                                                             -> $j
                                                                                                                                                  0#
                                                                                                                                             Index.U1_3
                                                                                                                                             -> $j
                                                                                                                                                  1#
                                                                                                                                             Index.U2_3
                                                                                                                                             -> $j
                                                                                                                                                  2#
                                                                                                                                             Index.U3_3
                                                                                                                                             -> $j
                                                                                                                                                  3# } } },
                                                                             {__scc {main:EquivarianceEqns.index2Sparse2} False True} case {__scc {main:EquivarianceEqns.index2Sparse2.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse2.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse2.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse2.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse2.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             1#)
                                                                                                                                                          1#)
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             2#)
                                                                                                                                                          1#)
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             3#)
                                                                                                                                                          1#)
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse2.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             4#)
                                                                                                                                                          1#) } } } } } } #)) -}
57f1f3d25b5eb24665453c7f02e01811
  $windex2Sparse3 ::
    Index.Linds_20 1
    -> Index.Linds_9 1
    -> Index.Uinds_3 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Linds_9 1)
                   (ww2 :: Index.Uinds_3 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:EquivarianceEqns.index2Sparse3} True False} (# {__scc {main:EquivarianceEqns.index2Sparse3} False True} case {__scc {main:EquivarianceEqns.index2Sparse3.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse3.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> let {
                                                                                                                                             $j :: GHC.Prim.Int#
                                                                                                                                                   -> GHC.Types.Int
                                                                                                                                               <join 1> {- Arity: 1,
                                                                                                                                                           Strictness: <S,U>m -}
                                                                                                                                             = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                               case {__scc {main:EquivarianceEqns.index2Sparse3.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:EquivarianceEqns.index2Sparse3.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                           @ Index.Lind_3
                                                                                                                                                                                                                                                           0#
                                                                                                                                                                                                                                                           s1 of wild3 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x1
                                                                                                                                                 -> case x1 of wild4 {
                                                                                                                                                      Index.L0_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse3.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              1#)
                                                                                                                                                      Index.L1_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse3.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              2#)
                                                                                                                                                      Index.L2_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse3.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              3#)
                                                                                                                                                      Index.L3_3
                                                                                                                                                      -> GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.*#
                                                                                                                                                                 (GHC.Prim.-#
                                                                                                                                                                    ({__scc {main:EquivarianceEqns.index2Sparse3.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                  1#
                                                                                                                                                                                                                                  y)
                                                                                                                                                                    1#)
                                                                                                                                                                 4#)
                                                                                                                                                              4#) } } }
                                                                                                                                           } in
                                                                                                                                           case x of wild2 {
                                                                                                                                             Index.U0_3
                                                                                                                                             -> $j
                                                                                                                                                  0#
                                                                                                                                             Index.U1_3
                                                                                                                                             -> $j
                                                                                                                                                  1#
                                                                                                                                             Index.U2_3
                                                                                                                                             -> $j
                                                                                                                                                  2#
                                                                                                                                             Index.U3_3
                                                                                                                                             -> $j
                                                                                                                                                  3# } } },
                                                                             {__scc {main:EquivarianceEqns.index2Sparse3} False True} case {__scc {main:EquivarianceEqns.index2Sparse3.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse3.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse3.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse3.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse3.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case {__scc {main:EquivarianceEqns.index2Sparse3.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                                                                                                GHC.Types.I#
                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                        (GHC.Prim.+#
                                                                                                                                                           105#
                                                                                                                                                           (GHC.Prim.*#
                                                                                                                                                              (GHC.Prim.-#
                                                                                                                                                                 ({__scc {main:EquivarianceEqns.index2Sparse3.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                                 1#)
                                                                                                                                                              10#))
                                                                                                                                                        ({__scc {main:EquivarianceEqns.index2Sparse3.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                      1#
                                                                                                                                                                                                                      a#1))
                                                                                                                                                     1#) } } } } } } #)) -}
8f37e1a57cad090bb453c1432327af0b
  $windex2Sparse4 ::
    Index.Linds_20 1
    -> Index.Uinds_9 1
    -> Index.Linds_3 2
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,1*U(U)><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Uinds_9 1)
                   (ww2 :: Index.Linds_3 2) ->
                 {__scc {main:EquivarianceEqns.index2Sparse4} True False} (# {__scc {main:EquivarianceEqns.index2Sparse4} False True} case {__scc {main:EquivarianceEqns.index2Sparse4.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse4.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Uind_9
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse4.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Uind_9
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse4.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse4.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse4.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          1#)
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse4.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          2#)
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse4.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          3#)
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse4.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          4#) } } } } } },
                                                                             {__scc {main:EquivarianceEqns.index2Sparse4} False True} case {__scc {main:EquivarianceEqns.index2Sparse4.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse4.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse4.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse4.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse4.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse4.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             1#)
                                                                                                                                                          1#)
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse4.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             2#)
                                                                                                                                                          1#)
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse4.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             3#)
                                                                                                                                                          1#)
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             (GHC.Prim.+#
                                                                                                                                                                21#
                                                                                                                                                                (GHC.Prim.*#
                                                                                                                                                                   (GHC.Prim.-#
                                                                                                                                                                      ({__scc {main:EquivarianceEqns.index2Sparse4.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                                    1#
                                                                                                                                                                                                                                    a#)
                                                                                                                                                                      1#)
                                                                                                                                                                   4#))
                                                                                                                                                             4#)
                                                                                                                                                          1#) } } } } } } #)) -}
d6717044d529120f54224380a58160ba
  $windex2Sparse5 ::
    Index.Linds_20 1
    -> Index.Uinds_9 1
    -> Index.Linds_9 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Uinds_9 1)
                   (ww2 :: Index.Linds_9 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:EquivarianceEqns.index2Sparse5} True False} (# {__scc {main:EquivarianceEqns.index2Sparse5} False True} case {__scc {main:EquivarianceEqns.index2Sparse5.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse5.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Uind_9
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse5.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Uind_9
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse5.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse5.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse5.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          1#)
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse5.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          2#)
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse5.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          3#)
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             16#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse5.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          4#) } } } } } },
                                                                             {__scc {main:EquivarianceEqns.index2Sparse5} False True} case {__scc {main:EquivarianceEqns.index2Sparse5.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse5.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse5.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse5.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse5.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case {__scc {main:EquivarianceEqns.index2Sparse5.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                                                                                                GHC.Types.I#
                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                        (GHC.Prim.+#
                                                                                                                                                           105#
                                                                                                                                                           (GHC.Prim.*#
                                                                                                                                                              (GHC.Prim.-#
                                                                                                                                                                 ({__scc {main:EquivarianceEqns.index2Sparse5.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                                 1#)
                                                                                                                                                              10#))
                                                                                                                                                        ({__scc {main:EquivarianceEqns.index2Sparse5.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                      1#
                                                                                                                                                                                                                      a#1))
                                                                                                                                                     1#) } } } } } } #)) -}
6ee71d30269355afbc58ccccbd1db431
  $windex2Sparse6 ::
    Index.Linds_20 1
    -> Index.Uinds_19 1
    -> Index.Linds_9 1
    -> Index.Linds_3 1
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Index.Linds_20 1)
                   (ww1 :: Index.Uinds_19 1)
                   (ww2 :: Index.Linds_9 1)
                   (ww3 :: Index.Linds_3 1) ->
                 {__scc {main:EquivarianceEqns.index2Sparse6} True False} (# {__scc {main:EquivarianceEqns.index2Sparse6} False True} case {__scc {main:EquivarianceEqns.index2Sparse6.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse6.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Uind_19
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse6.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Uind_19
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse6.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww3 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse6.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case x1 of wild4 {
                                                                                                                                                  Index.L0_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             56#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse6.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          1#)
                                                                                                                                                  Index.L1_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             56#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse6.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          2#)
                                                                                                                                                  Index.L2_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             56#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse6.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          3#)
                                                                                                                                                  Index.L3_3
                                                                                                                                                  -> GHC.Types.I#
                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                             56#
                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                   ({__scc {main:EquivarianceEqns.index2Sparse6.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                 a#)
                                                                                                                                                                   1#)
                                                                                                                                                                4#))
                                                                                                                                                          4#) } } } } } },
                                                                             {__scc {main:EquivarianceEqns.index2Sparse6} False True} case {__scc {main:EquivarianceEqns.index2Sparse6.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                      case {__scc {main:EquivarianceEqns.index2Sparse6.a} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                  @ Index.Lind_20
                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                  s of wild1 {
                                                                                                                                        GHC.Base.Nothing
                                                                                                                                        -> case Data.Maybe.fromJust1
                                                                                                                                           ret_ty GHC.Types.Int
                                                                                                                                           of {}
                                                                                                                                        GHC.Base.Just x
                                                                                                                                        -> case {__scc {main:EquivarianceEqns.index2Sparse6.a} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                      @ Index.Lind_20
                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse6.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww2 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                           case {__scc {main:EquivarianceEqns.index2Sparse6.i} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                             GHC.Base.Nothing
                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                of {}
                                                                                                                                             GHC.Base.Just x1
                                                                                                                                             -> case {__scc {main:EquivarianceEqns.index2Sparse6.i} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                                                                                                                           x1 of a#1 { DEFAULT ->
                                                                                                                                                GHC.Types.I#
                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                        (GHC.Prim.+#
                                                                                                                                                           105#
                                                                                                                                                           (GHC.Prim.*#
                                                                                                                                                              (GHC.Prim.-#
                                                                                                                                                                 ({__scc {main:EquivarianceEqns.index2Sparse6.a} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#)
                                                                                                                                                                 1#)
                                                                                                                                                              10#))
                                                                                                                                                        ({__scc {main:EquivarianceEqns.index2Sparse6.i} False True} GHC.Prim.+#
                                                                                                                                                                                                                      1#
                                                                                                                                                                                                                      a#1))
                                                                                                                                                     1#) } } } } } } #)) -}
ae60178ed5fa44cf61373bbb4e507f0c
  $windex2SparseConst ::
    Index.Uinds_3 1
    -> Index.Linds_3 1 -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Index.Uinds_3 1) (ww1 :: Index.Linds_3 1) ->
                 {__scc {main:EquivarianceEqns.index2SparseConst} True False} (# {__scc {main:EquivarianceEqns.index2SparseConst} False True} case {__scc {main:EquivarianceEqns.index2SparseConst.m} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww of wild { Index.UnsafemkInd s ->
                                                                                                                                              case {__scc {main:EquivarianceEqns.index2SparseConst.m} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                              @ Index.Uind_3
                                                                                                                                                                                                                                                              0#
                                                                                                                                                                                                                                                              s of wild1 {
                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                   ret_ty GHC.Types.Int
                                                                                                                                                   of {}
                                                                                                                                                GHC.Base.Just x
                                                                                                                                                -> let {
                                                                                                                                                     $j :: GHC.Prim.Int#
                                                                                                                                                           -> GHC.Types.Int
                                                                                                                                                       <join 1> {- Arity: 1,
                                                                                                                                                                   Strictness: <S,U>m -}
                                                                                                                                                     = \ (y :: GHC.Prim.Int#)[OneShot] ->
                                                                                                                                                       case {__scc {main:EquivarianceEqns.index2SparseConst.n} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} ww1 of wild2 { Index.UnsafemkInd s1 ->
                                                                                                                                                       case {__scc {main:EquivarianceEqns.index2SparseConst.n} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                                                       0#
                                                                                                                                                                                                                                                                       s1 of wild3 {
                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                         -> case Data.Maybe.fromJust1
                                                                                                                                                            ret_ty GHC.Types.Int
                                                                                                                                                            of {}
                                                                                                                                                         GHC.Base.Just x1
                                                                                                                                                         -> case x1 of wild4 {
                                                                                                                                                              Index.L0_3
                                                                                                                                                              -> GHC.Types.I#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:EquivarianceEqns.index2SparseConst.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                              y)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#)
                                                                                                                                                                      1#)
                                                                                                                                                              Index.L1_3
                                                                                                                                                              -> GHC.Types.I#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:EquivarianceEqns.index2SparseConst.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                              y)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#)
                                                                                                                                                                      2#)
                                                                                                                                                              Index.L2_3
                                                                                                                                                              -> GHC.Types.I#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:EquivarianceEqns.index2SparseConst.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                              y)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#)
                                                                                                                                                                      3#)
                                                                                                                                                              Index.L3_3
                                                                                                                                                              -> GHC.Types.I#
                                                                                                                                                                   (GHC.Prim.+#
                                                                                                                                                                      (GHC.Prim.*#
                                                                                                                                                                         (GHC.Prim.-#
                                                                                                                                                                            ({__scc {main:EquivarianceEqns.index2SparseConst.m} False True} GHC.Prim.+#
                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                              y)
                                                                                                                                                                            1#)
                                                                                                                                                                         4#)
                                                                                                                                                                      4#) } } }
                                                                                                                                                   } in
                                                                                                                                                   case x of wild2 {
                                                                                                                                                     Index.U0_3
                                                                                                                                                     -> $j
                                                                                                                                                          0#
                                                                                                                                                     Index.U1_3
                                                                                                                                                     -> $j
                                                                                                                                                          1#
                                                                                                                                                     Index.U2_3
                                                                                                                                                     -> $j
                                                                                                                                                          2#
                                                                                                                                                     Index.U3_3
                                                                                                                                                     -> $j
                                                                                                                                                          3# } } },
                                                                                 EquivarianceEqns.eqn1_11 #)) -}
0d730f9fc0e0134c70dfbf0502e6a056
  $wlvl ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (w :: Ivar.Ivar GHC.Real.Rational) ->
                 let {
                   $j :: (# GHC.Real.Rational,
                            Data.IntMap.Internal.IntMap GHC.Real.Rational #)
                     <join 0>
                   = case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} True False} w of wild1 { Ivar.Ivar a1 map ->
                     (# {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} case a1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                     case GHC.Real.$w$sreduce
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww
                                                                                                               ww4)
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww1
                                                                                                               ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                     GHC.Real.:%
                                                                                                       @ GHC.Integer.Type.Integer
                                                                                                       ww7
                                                                                                       ww8 } },
                        {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} letrec {
                                                                                                       go :: Data.IntMap.Internal.IntMap
                                                                                                               GHC.Real.Rational
                                                                                                             -> Data.IntMap.Internal.IntMap
                                                                                                                  GHC.Real.Rational
                                                                                                         {- Arity: 1,
                                                                                                            Strictness: <S,1*U> -}
                                                                                                       = \ (ds :: Data.IntMap.Internal.IntMap
                                                                                                                    GHC.Real.Rational) ->
                                                                                                         case ds of wild {
                                                                                                           Data.IntMap.Internal.Bin dt1 dt2 l r
                                                                                                           -> case go
                                                                                                                     l of dt3 { DEFAULT ->
                                                                                                              case go
                                                                                                                     r of dt4 { DEFAULT ->
                                                                                                              Data.IntMap.Internal.Bin
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                dt2
                                                                                                                dt3
                                                                                                                dt4 } }
                                                                                                           Data.IntMap.Internal.Tip dt1 x
                                                                                                           -> case x of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                              case GHC.Real.$w$sreduce
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww
                                                                                                                        ww4)
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww1
                                                                                                                        ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                              Data.IntMap.Internal.Tip
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                (GHC.Real.:%
                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                   ww7
                                                                                                                   ww8) } }
                                                                                                           Data.IntMap.Internal.Nil
                                                                                                           -> Data.IntMap.Internal.Nil
                                                                                                                @ GHC.Real.Rational }
                                                                                                     } in
                                                                                                     go
                                                                                                       map #) }
                 } in
                 {__scc {main:Ivar.sMultIvar} True False} case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                          ww
                                                                                                          Ivar.addIvar1 of wild2 {
                                                            DEFAULT -> $j
                                                            1#
                                                            -> case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                               ww1
                                                                                                               GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                               case {__scc {main:Ivar.sMultIvar} False True} GHC.Prim.tagToEnum#
                                                                                                               @ GHC.Types.Bool
                                                                                                               wild3 of wild {
                                                                 GHC.Types.False -> $j
                                                                 GHC.Types.True
                                                                 -> case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.mkConstIvar} True False} EquivarianceEqns.eqn1_14 of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                    (# ww3, ww4 #) } } } }) -}
3f5183a5214e0d8e3dcc2b454f9c2440
  $wlvl1 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (w :: Ivar.Ivar GHC.Real.Rational) ->
                 let {
                   $j :: (# GHC.Real.Rational,
                            Data.IntMap.Internal.IntMap GHC.Real.Rational #)
                     <join 0>
                   = case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} True False} w of wild1 { Ivar.Ivar a1 map ->
                     (# {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} case a1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                     case GHC.Real.$w$sreduce
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww
                                                                                                               ww4)
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww1
                                                                                                               ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                     GHC.Real.:%
                                                                                                       @ GHC.Integer.Type.Integer
                                                                                                       ww7
                                                                                                       ww8 } },
                        {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} letrec {
                                                                                                       go :: Data.IntMap.Internal.IntMap
                                                                                                               GHC.Real.Rational
                                                                                                             -> Data.IntMap.Internal.IntMap
                                                                                                                  GHC.Real.Rational
                                                                                                         {- Arity: 1,
                                                                                                            Strictness: <S,1*U> -}
                                                                                                       = \ (ds :: Data.IntMap.Internal.IntMap
                                                                                                                    GHC.Real.Rational) ->
                                                                                                         case ds of wild {
                                                                                                           Data.IntMap.Internal.Bin dt1 dt2 l r
                                                                                                           -> case go
                                                                                                                     l of dt3 { DEFAULT ->
                                                                                                              case go
                                                                                                                     r of dt4 { DEFAULT ->
                                                                                                              Data.IntMap.Internal.Bin
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                dt2
                                                                                                                dt3
                                                                                                                dt4 } }
                                                                                                           Data.IntMap.Internal.Tip dt1 x
                                                                                                           -> case x of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                              case GHC.Real.$w$sreduce
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww
                                                                                                                        ww4)
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww1
                                                                                                                        ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                              Data.IntMap.Internal.Tip
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                (GHC.Real.:%
                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                   ww7
                                                                                                                   ww8) } }
                                                                                                           Data.IntMap.Internal.Nil
                                                                                                           -> Data.IntMap.Internal.Nil
                                                                                                                @ GHC.Real.Rational }
                                                                                                     } in
                                                                                                     go
                                                                                                       map #) }
                 } in
                 {__scc {main:Ivar.sMultIvar} True False} case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                          ww
                                                                                                          Ivar.addIvar1 of wild2 {
                                                            DEFAULT -> $j
                                                            1#
                                                            -> case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                               ww1
                                                                                                               GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                               case {__scc {main:Ivar.sMultIvar} False True} GHC.Prim.tagToEnum#
                                                                                                               @ GHC.Types.Bool
                                                                                                               wild3 of wild {
                                                                 GHC.Types.False -> $j
                                                                 GHC.Types.True
                                                                 -> case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.mkConstIvar} True False} EquivarianceEqns.eqn1_14 of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                    (# ww3, ww4 #) } } } }) -}
2e22353971fc674d7fa094347627cbd6
  $wlvl10 ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: [GHC.Types.Char]) ->
                 {__scc {main:EquivarianceEqns.showEqnsFlatMatLab.list2.\} True True} GHC.Base.++
                                                                                        @ GHC.Types.Char
                                                                                        ({__scc {main:EquivarianceEqns.showKeyMatLab} True True} case GHC.Show.$wshowSignedInt
                                                                                                                                                        0#
                                                                                                                                                        ww
                                                                                                                                                        (GHC.Types.[]
                                                                                                                                                           @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                                                                                 GHC.Base.++_$s++
                                                                                                                                                   @ GHC.Types.Char
                                                                                                                                                   (GHC.CString.unpackAppendCString#
                                                                                                                                                      EquivarianceEqns.showEqnsFlatMatLab4
                                                                                                                                                      (case ww1 of ww3 { GHC.Types.I# ww7 ->
                                                                                                                                                       case GHC.Show.$wshowSignedInt
                                                                                                                                                              0#
                                                                                                                                                              ww7
                                                                                                                                                              (GHC.Types.[]
                                                                                                                                                                 @ GHC.Types.Char) of ww8 { (#,#) ww9 ww10 ->
                                                                                                                                                       GHC.Types.:
                                                                                                                                                         @ GHC.Types.Char
                                                                                                                                                         ww9
                                                                                                                                                         ww10 } }))
                                                                                                                                                   ww5
                                                                                                                                                   ww6 })
                                                                                        (GHC.CString.unpackAppendCString#
                                                                                           EquivarianceEqns.showEqnsFlatMatLab4
                                                                                           (GHC.Base.++
                                                                                              @ GHC.Types.Char
                                                                                              ww2
                                                                                              EquivarianceEqns.showEqnsFlatMatLab2))) -}
900dd292022a087dcdcecc4d87b59596
  $wlvl2 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (w :: Ivar.Ivar GHC.Real.Rational) ->
                 let {
                   $j :: (# GHC.Real.Rational,
                            Data.IntMap.Internal.IntMap GHC.Real.Rational #)
                     <join 0>
                   = case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} True False} w of wild1 { Ivar.Ivar a1 map ->
                     (# {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} case a1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                     case GHC.Real.$w$sreduce
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww
                                                                                                               ww4)
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww1
                                                                                                               ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                     GHC.Real.:%
                                                                                                       @ GHC.Integer.Type.Integer
                                                                                                       ww7
                                                                                                       ww8 } },
                        {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} letrec {
                                                                                                       go :: Data.IntMap.Internal.IntMap
                                                                                                               GHC.Real.Rational
                                                                                                             -> Data.IntMap.Internal.IntMap
                                                                                                                  GHC.Real.Rational
                                                                                                         {- Arity: 1,
                                                                                                            Strictness: <S,1*U> -}
                                                                                                       = \ (ds :: Data.IntMap.Internal.IntMap
                                                                                                                    GHC.Real.Rational) ->
                                                                                                         case ds of wild {
                                                                                                           Data.IntMap.Internal.Bin dt1 dt2 l r
                                                                                                           -> case go
                                                                                                                     l of dt3 { DEFAULT ->
                                                                                                              case go
                                                                                                                     r of dt4 { DEFAULT ->
                                                                                                              Data.IntMap.Internal.Bin
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                dt2
                                                                                                                dt3
                                                                                                                dt4 } }
                                                                                                           Data.IntMap.Internal.Tip dt1 x
                                                                                                           -> case x of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                              case GHC.Real.$w$sreduce
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww
                                                                                                                        ww4)
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww1
                                                                                                                        ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                              Data.IntMap.Internal.Tip
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                (GHC.Real.:%
                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                   ww7
                                                                                                                   ww8) } }
                                                                                                           Data.IntMap.Internal.Nil
                                                                                                           -> Data.IntMap.Internal.Nil
                                                                                                                @ GHC.Real.Rational }
                                                                                                     } in
                                                                                                     go
                                                                                                       map #) }
                 } in
                 {__scc {main:Ivar.sMultIvar} True False} case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                          ww
                                                                                                          Ivar.addIvar1 of wild2 {
                                                            DEFAULT -> $j
                                                            1#
                                                            -> case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                               ww1
                                                                                                               GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                               case {__scc {main:Ivar.sMultIvar} False True} GHC.Prim.tagToEnum#
                                                                                                               @ GHC.Types.Bool
                                                                                                               wild3 of wild {
                                                                 GHC.Types.False -> $j
                                                                 GHC.Types.True
                                                                 -> case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.mkConstIvar} True False} EquivarianceEqns.eqn1_14 of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                    (# ww3, ww4 #) } } } }) -}
5c7e7686a38c9cd0f1b980cae5e58355
  $wlvl3 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (w :: Ivar.Ivar GHC.Real.Rational) ->
                 let {
                   $j :: (# GHC.Real.Rational,
                            Data.IntMap.Internal.IntMap GHC.Real.Rational #)
                     <join 0>
                   = case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} True False} w of wild1 { Ivar.Ivar a1 map ->
                     (# {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} case a1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                     case GHC.Real.$w$sreduce
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww
                                                                                                               ww4)
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww1
                                                                                                               ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                     GHC.Real.:%
                                                                                                       @ GHC.Integer.Type.Integer
                                                                                                       ww7
                                                                                                       ww8 } },
                        {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} letrec {
                                                                                                       go :: Data.IntMap.Internal.IntMap
                                                                                                               GHC.Real.Rational
                                                                                                             -> Data.IntMap.Internal.IntMap
                                                                                                                  GHC.Real.Rational
                                                                                                         {- Arity: 1,
                                                                                                            Strictness: <S,1*U> -}
                                                                                                       = \ (ds :: Data.IntMap.Internal.IntMap
                                                                                                                    GHC.Real.Rational) ->
                                                                                                         case ds of wild {
                                                                                                           Data.IntMap.Internal.Bin dt1 dt2 l r
                                                                                                           -> case go
                                                                                                                     l of dt3 { DEFAULT ->
                                                                                                              case go
                                                                                                                     r of dt4 { DEFAULT ->
                                                                                                              Data.IntMap.Internal.Bin
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                dt2
                                                                                                                dt3
                                                                                                                dt4 } }
                                                                                                           Data.IntMap.Internal.Tip dt1 x
                                                                                                           -> case x of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                              case GHC.Real.$w$sreduce
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww
                                                                                                                        ww4)
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww1
                                                                                                                        ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                              Data.IntMap.Internal.Tip
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                (GHC.Real.:%
                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                   ww7
                                                                                                                   ww8) } }
                                                                                                           Data.IntMap.Internal.Nil
                                                                                                           -> Data.IntMap.Internal.Nil
                                                                                                                @ GHC.Real.Rational }
                                                                                                     } in
                                                                                                     go
                                                                                                       map #) }
                 } in
                 {__scc {main:Ivar.sMultIvar} True False} case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                          ww
                                                                                                          Ivar.addIvar1 of wild2 {
                                                            DEFAULT -> $j
                                                            1#
                                                            -> case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                               ww1
                                                                                                               GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                               case {__scc {main:Ivar.sMultIvar} False True} GHC.Prim.tagToEnum#
                                                                                                               @ GHC.Types.Bool
                                                                                                               wild3 of wild {
                                                                 GHC.Types.False -> $j
                                                                 GHC.Types.True
                                                                 -> case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.mkConstIvar} True False} EquivarianceEqns.eqn1_14 of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                    (# ww3, ww4 #) } } } }) -}
3386827ee9f4032deeaa2305c77f11bc
  $wlvl4 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (w :: Ivar.Ivar GHC.Real.Rational) ->
                 let {
                   $j :: (# GHC.Real.Rational,
                            Data.IntMap.Internal.IntMap GHC.Real.Rational #)
                     <join 0>
                   = case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} True False} w of wild1 { Ivar.Ivar a1 map ->
                     (# {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} case a1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                     case GHC.Real.$w$sreduce
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww
                                                                                                               ww4)
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww1
                                                                                                               ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                     GHC.Real.:%
                                                                                                       @ GHC.Integer.Type.Integer
                                                                                                       ww7
                                                                                                       ww8 } },
                        {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} letrec {
                                                                                                       go :: Data.IntMap.Internal.IntMap
                                                                                                               GHC.Real.Rational
                                                                                                             -> Data.IntMap.Internal.IntMap
                                                                                                                  GHC.Real.Rational
                                                                                                         {- Arity: 1,
                                                                                                            Strictness: <S,1*U> -}
                                                                                                       = \ (ds :: Data.IntMap.Internal.IntMap
                                                                                                                    GHC.Real.Rational) ->
                                                                                                         case ds of wild {
                                                                                                           Data.IntMap.Internal.Bin dt1 dt2 l r
                                                                                                           -> case go
                                                                                                                     l of dt3 { DEFAULT ->
                                                                                                              case go
                                                                                                                     r of dt4 { DEFAULT ->
                                                                                                              Data.IntMap.Internal.Bin
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                dt2
                                                                                                                dt3
                                                                                                                dt4 } }
                                                                                                           Data.IntMap.Internal.Tip dt1 x
                                                                                                           -> case x of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                              case GHC.Real.$w$sreduce
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww
                                                                                                                        ww4)
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww1
                                                                                                                        ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                              Data.IntMap.Internal.Tip
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                (GHC.Real.:%
                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                   ww7
                                                                                                                   ww8) } }
                                                                                                           Data.IntMap.Internal.Nil
                                                                                                           -> Data.IntMap.Internal.Nil
                                                                                                                @ GHC.Real.Rational }
                                                                                                     } in
                                                                                                     go
                                                                                                       map #) }
                 } in
                 {__scc {main:Ivar.sMultIvar} True False} case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                          ww
                                                                                                          Ivar.addIvar1 of wild2 {
                                                            DEFAULT -> $j
                                                            1#
                                                            -> case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                               ww1
                                                                                                               GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                               case {__scc {main:Ivar.sMultIvar} False True} GHC.Prim.tagToEnum#
                                                                                                               @ GHC.Types.Bool
                                                                                                               wild3 of wild {
                                                                 GHC.Types.False -> $j
                                                                 GHC.Types.True
                                                                 -> case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.mkConstIvar} True False} EquivarianceEqns.eqn1_14 of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                    (# ww3, ww4 #) } } } }) -}
446f5c8e4b8871d894687212fa759170
  $wlvl5 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> Ivar.Ivar GHC.Real.Rational
    -> (# GHC.Real.Rational,
          Data.IntMap.Internal.IntMap GHC.Real.Rational #)
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U(1*U(U,U),1*U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer)
                   (w :: Ivar.Ivar GHC.Real.Rational) ->
                 let {
                   $j :: (# GHC.Real.Rational,
                            Data.IntMap.Internal.IntMap GHC.Real.Rational #)
                     <join 0>
                   = case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} True False} w of wild1 { Ivar.Ivar a1 map ->
                     (# {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} case a1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                     case GHC.Real.$w$sreduce
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww
                                                                                                               ww4)
                                                                                                            (GHC.Integer.Type.timesInteger
                                                                                                               ww1
                                                                                                               ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                     GHC.Real.:%
                                                                                                       @ GHC.Integer.Type.Integer
                                                                                                       ww7
                                                                                                       ww8 } },
                        {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.fmap} False True} letrec {
                                                                                                       go :: Data.IntMap.Internal.IntMap
                                                                                                               GHC.Real.Rational
                                                                                                             -> Data.IntMap.Internal.IntMap
                                                                                                                  GHC.Real.Rational
                                                                                                         {- Arity: 1,
                                                                                                            Strictness: <S,1*U> -}
                                                                                                       = \ (ds :: Data.IntMap.Internal.IntMap
                                                                                                                    GHC.Real.Rational) ->
                                                                                                         case ds of wild {
                                                                                                           Data.IntMap.Internal.Bin dt1 dt2 l r
                                                                                                           -> case go
                                                                                                                     l of dt3 { DEFAULT ->
                                                                                                              case go
                                                                                                                     r of dt4 { DEFAULT ->
                                                                                                              Data.IntMap.Internal.Bin
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                dt2
                                                                                                                dt3
                                                                                                                dt4 } }
                                                                                                           Data.IntMap.Internal.Tip dt1 x
                                                                                                           -> case x of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                                                              case GHC.Real.$w$sreduce
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww
                                                                                                                        ww4)
                                                                                                                     (GHC.Integer.Type.timesInteger
                                                                                                                        ww1
                                                                                                                        ww5) of ww6 { (#,#) ww7 ww8 ->
                                                                                                              Data.IntMap.Internal.Tip
                                                                                                                @ GHC.Real.Rational
                                                                                                                dt1
                                                                                                                (GHC.Real.:%
                                                                                                                   @ GHC.Integer.Type.Integer
                                                                                                                   ww7
                                                                                                                   ww8) } }
                                                                                                           Data.IntMap.Internal.Nil
                                                                                                           -> Data.IntMap.Internal.Nil
                                                                                                                @ GHC.Real.Rational }
                                                                                                     } in
                                                                                                     go
                                                                                                       map #) }
                 } in
                 {__scc {main:Ivar.sMultIvar} True False} case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                          ww
                                                                                                          Ivar.addIvar1 of wild2 {
                                                            DEFAULT -> $j
                                                            1#
                                                            -> case {__scc {main:Ivar.sMultIvar} False True} GHC.Integer.Type.eqInteger#
                                                                                                               ww1
                                                                                                               GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                               case {__scc {main:Ivar.sMultIvar} False True} GHC.Prim.tagToEnum#
                                                                                                               @ GHC.Types.Bool
                                                                                                               wild3 of wild {
                                                                 GHC.Types.False -> $j
                                                                 GHC.Types.True
                                                                 -> case {__scc {main:Ivar.sMultIvar} False True} {__scc {main:Ivar.mkConstIvar} True False} EquivarianceEqns.eqn1_14 of ww2 { Ivar.Ivar ww3 ww4 ->
                                                                    (# ww3, ww4 #) } } } }) -}
7136eaeddb8c9bdf7daba66cedcc0fa1
  $wlvl6 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(1*U(U),1*U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: (GHC.Types.Int, GHC.Types.Int))
                   (ww1 :: [GHC.Types.Char]) ->
                 {__scc {main:EquivarianceEqns.showEqns.list2.\} True True} GHC.CString.unpackAppendCString#
                                                                              EquivarianceEqns.showEqns8
                                                                              (case ww of ww2 { (,) ww3 ww4 ->
                                                                               GHC.Base.++_$s++
                                                                                 @ GHC.Types.Char
                                                                                 (GHC.CString.unpackAppendCString#
                                                                                    EquivarianceEqns.showEqns7
                                                                                    (GHC.Base.++
                                                                                       @ GHC.Types.Char
                                                                                       ww1
                                                                                       EquivarianceEqns.showEqns5))
                                                                                 GHC.Show.$fShow(,)4
                                                                                 (case ww3 of ww5 { GHC.Types.I# ww6 ->
                                                                                  case GHC.Show.$wshowSignedInt
                                                                                         0#
                                                                                         ww6
                                                                                         (GHC.Types.:
                                                                                            @ GHC.Types.Char
                                                                                            GHC.Show.showList__1
                                                                                            (GHC.Show.$fShow(,)_$sgo1
                                                                                               EquivarianceEqns.showEqns4
                                                                                               (\ (w2 :: GHC.Base.String)[OneShot] ->
                                                                                                case ww4 of ww7 { GHC.Types.I# ww8 ->
                                                                                                case GHC.Show.$wshowSignedInt
                                                                                                       0#
                                                                                                       ww8
                                                                                                       w2 of ww9 { (#,#) ww10 ww11 ->
                                                                                                GHC.Types.:
                                                                                                  @ GHC.Types.Char
                                                                                                  ww10
                                                                                                  ww11 } })
                                                                                               (GHC.Types.[]
                                                                                                  @ GHC.Show.ShowS))) of ww7 { (#,#) ww8 ww9 ->
                                                                                  GHC.Types.:
                                                                                    @ GHC.Types.Char
                                                                                    ww8
                                                                                    ww9 } }) })) -}
9df112e40c3e61c8b615552b141ea3e0
  $wlvl7 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(1*U(U),1*U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: (GHC.Types.Int, GHC.Types.Int))
                   (ww1 :: [GHC.Types.Char]) ->
                 {__scc {main:EquivarianceEqns.showEqnsFlat.list2.\} True True} GHC.CString.unpackAppendCString#
                                                                                  EquivarianceEqns.showEqns8
                                                                                  (case ww of ww2 { (,) ww3 ww4 ->
                                                                                   GHC.Base.++_$s++
                                                                                     @ GHC.Types.Char
                                                                                     (GHC.CString.unpackAppendCString#
                                                                                        EquivarianceEqns.showEqns7
                                                                                        (GHC.Base.++
                                                                                           @ GHC.Types.Char
                                                                                           ww1
                                                                                           EquivarianceEqns.showEqns5))
                                                                                     GHC.Show.$fShow(,)4
                                                                                     (case ww3 of ww5 { GHC.Types.I# ww6 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             0#
                                                                                             ww6
                                                                                             (GHC.Types.:
                                                                                                @ GHC.Types.Char
                                                                                                GHC.Show.showList__1
                                                                                                (GHC.Show.$fShow(,)_$sgo1
                                                                                                   EquivarianceEqns.showEqns4
                                                                                                   (\ (w2 :: GHC.Base.String)[OneShot] ->
                                                                                                    case ww4 of ww7 { GHC.Types.I# ww8 ->
                                                                                                    case GHC.Show.$wshowSignedInt
                                                                                                           0#
                                                                                                           ww8
                                                                                                           w2 of ww9 { (#,#) ww10 ww11 ->
                                                                                                    GHC.Types.:
                                                                                                      @ GHC.Types.Char
                                                                                                      ww10
                                                                                                      ww11 } })
                                                                                                   (GHC.Types.[]
                                                                                                      @ GHC.Show.ShowS))) of ww7 { (#,#) ww8 ww9 ->
                                                                                      GHC.Types.:
                                                                                        @ GHC.Types.Char
                                                                                        ww8
                                                                                        ww9 } }) })) -}
df8c64f97819cdb5ceb8670754b6800f
  $wlvl8 ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Integer.Type.Integer)
                   (ww1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.eqInteger#
                        ww
                        EquivarianceEqns.$stensorContractWith_20_dt of wild2 {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Integer.Type.eqInteger#
                             ww1
                             GHC.Real.$fEnumRatio1 of wild3 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }) -}
92924553b9245944b04521bd7e3c4c30
  $wlvl9 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(1*U(U),1*U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: (GHC.Types.Int, GHC.Types.Int))
                   (ww1 :: [GHC.Types.Char]) ->
                 {__scc {main:EquivarianceEqns.showEqnsFlatFrac.list2.\} True True} GHC.CString.unpackAppendCString#
                                                                                      EquivarianceEqns.showEqns8
                                                                                      (case ww of ww2 { (,) ww3 ww4 ->
                                                                                       GHC.Base.++_$s++
                                                                                         @ GHC.Types.Char
                                                                                         (GHC.CString.unpackAppendCString#
                                                                                            EquivarianceEqns.showEqns7
                                                                                            (GHC.Base.++
                                                                                               @ GHC.Types.Char
                                                                                               ww1
                                                                                               EquivarianceEqns.showEqns5))
                                                                                         GHC.Show.$fShow(,)4
                                                                                         (case ww3 of ww5 { GHC.Types.I# ww6 ->
                                                                                          case GHC.Show.$wshowSignedInt
                                                                                                 0#
                                                                                                 ww6
                                                                                                 (GHC.Types.:
                                                                                                    @ GHC.Types.Char
                                                                                                    GHC.Show.showList__1
                                                                                                    (GHC.Show.$fShow(,)_$sgo1
                                                                                                       EquivarianceEqns.showEqns4
                                                                                                       (\ (w2 :: GHC.Base.String)[OneShot] ->
                                                                                                        case ww4 of ww7 { GHC.Types.I# ww8 ->
                                                                                                        case GHC.Show.$wshowSignedInt
                                                                                                               0#
                                                                                                               ww8
                                                                                                               w2 of ww9 { (#,#) ww10 ww11 ->
                                                                                                        GHC.Types.:
                                                                                                          @ GHC.Types.Char
                                                                                                          ww10
                                                                                                          ww11 } })
                                                                                                       (GHC.Types.[]
                                                                                                          @ GHC.Show.ShowS))) of ww7 { (#,#) ww8 ww9 ->
                                                                                          GHC.Types.:
                                                                                            @ GHC.Types.Char
                                                                                            ww8
                                                                                            ww9 } }) })) -}
cffe752149dfb7314d247aa9ca0c1f23
  $wmkEqnConstSparse ::
    Data.Map.Internal.Map (Index.Index 0 0 0 0 0 0 1 1) a
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar a)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: Data.Map.Internal.Map (Index.Index 0 0 0 0 0 0 1 1) a) ->
                 {__scc {main:EquivarianceEqns.mkEqnConstSparse} True True} EquivarianceEqns.mkEqnConstSparse2
                                                                              @ a
                                                                              (EquivarianceEqns.$sfromList
                                                                                 @ a
                                                                                 (EquivarianceEqns.mkEqnConstSparse1
                                                                                    @ a
                                                                                    (GHC.Types.[]
                                                                                       @ ((GHC.Types.Int,
                                                                                           GHC.Types.Int),
                                                                                          a))
                                                                                    ww))) -}
3db7ca8c59c89c780b4cf0c8b8524b69
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
e2649fb25b6f555cbf7d081b20a1d2d6
  eqn1_1 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 1 1 (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn1_1 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ (Ivar.Ivar GHC.Real.Rational)
                   ww1 }) -}
0ac6552f8bdc632a9576d0f3b928e0e7
  eqn1_10 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((EquivarianceEqns.eqn1_12,
                  EquivarianceEqns.eqn1_11)) -}
226ee5e20f420fc62bb197f1a06e7cb4
  eqn1_11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
e037abf446e95ddb95bd044c2e107f22
  eqn1_12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
578cc50392299f3bc7c1e166e1d3889b
  eqn1_13 ::
    GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational) (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case EquivarianceEqns.$wlvl ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Ivar.Ivar @ GHC.Real.Rational ww4 ww5 } }) -}
707d452621a3fb8abe8ebd63d4ace284
  eqn1_14 :: Ivar.Ivar GHC.Real.Rational
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Ivar.Ivar
                   @ GHC.Real.Rational
                   EquivarianceEqns.eqn1_15
                   (Data.IntMap.Internal.Nil @ GHC.Real.Rational)) -}
0e295ab3b50b3dc9dc9037884f6dfb72
  eqn1_15 :: GHC.Real.Ratio GHC.Integer.Type.Integer
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   Ivar.addIvar1
                   GHC.Real.$fEnumRatio1) -}
42939da4a9dc1e832ee5ad2bb96ae322
  eqn1_16 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((EquivarianceEqns.eqn1_11,
                  EquivarianceEqns.eqn1_17)) -}
5dba7706adc9ca0b26ca3f0ec377009a
  eqn1_17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
525a70696d25c6d6d9fddbc808b73e14
  eqn1_18 ::
    GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational) (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case EquivarianceEqns.$wlvl1 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Ivar.Ivar @ GHC.Real.Rational ww4 ww5 } }) -}
4b689aa0fc8c9cdb3c4e4b34ac09bdde
  eqn1_19 ::
    Tensor.Tensor
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      (2 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:EquivarianceEqns.eqn1_2} False True} {__scc {main:EquivarianceEqns.eqn1_2.int2} True True} case BasicTensors.delta_3 of ww { Tensor.Tensor ww1 ->
                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                ww1
                                                                                                                                ww1 of ww4 { Unit# ww5 ->
                                                                                                                         case Tensor.$wtensorTranspose
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 2
                                                                                                                                @ 2
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                EquivarianceEqns.eqn1_20
                                                                                                                                EquivarianceEqns.eqn1_10
                                                                                                                                ww5
                                                                                                                                  `cast`
                                                                                                                                (Data.Map.Internal.Map
                                                                                                                                   ((,,,,,,,)
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_20>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_20>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_19>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_19>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_9>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_9>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (AddDef (<1>_N,
                                                                                                                                                  <1>_N))
                                                                                                                                         <Index.Uind_3>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (AddDef (<1>_N,
                                                                                                                                                  <1>_N))
                                                                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                                                                   <GHC.Real.Rational>_R)_R of ww2 { Unit# ww3 ->
                                                                                                                         case BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 2
                                                                                                                                @ 2
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                ww3
                                                                                                                                ww8 of ww9 { Unit# ww10 ->
                                                                                                                         Tensor.Tensor
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (2
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (2
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           ww10 } } } } }) -}
cc04103443f68c17c6ce80f5abc0f21a
  eqn1_1Flat ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 1 1 GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn1_1Flat w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
a369a7e3df2818e5ee2cd3f7c22b40f6
  eqn1_2 ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 0 1 2 (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 2, Strictness: <L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn1_2 w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 2
                   @ (Ivar.Ivar GHC.Real.Rational)
                   ww1 }) -}
28701e77c6c77621a9c24276b75678e7
  eqn1_20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
f7250e4095b6f8a0d69eb3a259c9cab3
  eqn1_21 ::
    GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational) (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case EquivarianceEqns.$wlvl2 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Ivar.Ivar @ GHC.Real.Rational ww4 ww5 } }) -}
029d56ec542a5720eed6fd84d76ee568
  eqn1_2_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
ca34d56f2e215c5438262d3cb0dbdcae
  eqn1_2_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
c63a2b9adb270cba19808f52509e7c02
  eqn1_3 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 0 1 1 1 (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn1_3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 1
                   @ (Ivar.Ivar GHC.Real.Rational)
                   ww1 }) -}
b22bd720544d992d21368f758962e175
  eqn1_4 :: Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
  {- Unfolding: ({__scc {main:EquivarianceEqns.eqn1_4} True False} BasicTensors.delta_3) -}
9fad1e2247f19ab730f5669ec05c633a
  eqn1_7 ::
    Ivar.Ivar GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U,U),1*U)><S,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Ivar.Ivar GHC.Real.Rational)
                   (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { Ivar.Ivar ww1 ww2 ->
                 case w1 of ww3 { Ivar.Ivar ww4 ww5 ->
                 {__scc {main:Ivar.addIvar} True False} Ivar.Ivar
                                                          @ GHC.Real.Rational
                                                          ({__scc {main:Ivar.addIvar} False True} GHC.Real.$fEnumRatio_$s$c+
                                                                                                    ww1
                                                                                                    ww4)
                                                          ({__scc {main:Ivar.addIvar} False True} Data.IntMap.Internal.filterWithKey
                                                                                                    @ GHC.Real.Rational
                                                                                                    EquivarianceEqns.eqn1_9
                                                                                                    (Data.IntMap.Strict.unionWithKey
                                                                                                       @ GHC.Real.Rational
                                                                                                       EquivarianceEqns.eqn1_8
                                                                                                       ww2
                                                                                                       ww5)) } }) -}
d00aae34ccc2d414772272c824f8ed61
  eqn1_8 ::
    Data.IntSet.Internal.Key
    -> GHC.Real.Rational
    -> GHC.Real.Rational
    -> GHC.Real.Ratio GHC.Integer.Type.Integer
  {- Arity: 3, Strictness: <L,A><S(SS),1*U(U,U)><S(SS),1*U(U,U)>m,
     Unfolding: (\ (ds1 :: Data.IntSet.Internal.Key)
                   (x :: GHC.Real.Rational)[OneShot]
                   (y :: GHC.Real.Rational)[OneShot] ->
                 GHC.Real.$fEnumRatio_$s$c+ x y) -}
4172b7f1b91779fd8a333c4e4b926436
  eqn1_9 ::
    Data.IntSet.Internal.Key -> GHC.Real.Rational -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(SS),1*U(U,U)>,
     Unfolding: (\ (ds1 :: Data.IntSet.Internal.Key)
                   (x :: GHC.Real.Rational)[OneShot] ->
                 case x of wild { GHC.Real.:% a1 a2 ->
                 case GHC.Integer.Type.eqInteger# a1 Ivar.addIvar1 of wild2 {
                   DEFAULT -> GHC.Types.True
                   1#
                   -> case GHC.Integer.Type.eqInteger#
                             a2
                             GHC.Real.$fEnumRatio1 of wild3 {
                        DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } }) -}
fc388ce3a4d33788869ee27c16c63246
  eqn2_1 ::
    GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational) (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case EquivarianceEqns.$wlvl3 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Ivar.Ivar @ GHC.Real.Rational ww4 ww5 } }) -}
d8c6fd8122375adcc76fa7d497eac31c
  eqn2_2 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 1 0 0 2 (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn2_2 w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ (Ivar.Ivar GHC.Real.Rational)
                   ww1 }) -}
51b06bc404e523614965fc4c5150a6ce
  eqn2_2Flat ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 1 0 0 2 GHC.Real.Rational
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn2_2Flat w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
f2e89d4c753ded4207ede78a7fc715bb
  eqn2_3 ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 0 0 1 1 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn2_3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 0
                   @ 1
                   @ (Ivar.Ivar GHC.Real.Rational)
                   ww1 }) -}
169132cfad98418a0797b7af9841fde8
  eqn2_3_go1 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
c9b16d46bc3e3828d0a052a772a15ab8
  eqn2_3_go8 ::
    Data.Map.Internal.Map
      (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 1 1 0 0 1 1 1 1) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
d8eb0c0648825a0f58ad8df479417b34
  eqn2_5 ::
    GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational) (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case EquivarianceEqns.$wlvl4 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Ivar.Ivar @ GHC.Real.Rational ww4 ww5 } }) -}
a116846ef9a94375aea55dc5d10f0889
  eqn2_6 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:EquivarianceEqns.eqn2_3} False True} {__scc {main:EquivarianceEqns.eqn2_3.int2} True True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                         case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                         case BasicTensors.delta_3 of ww4 { Tensor.Tensor ww5 ->
                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                ww3
                                                                                                                                ww5 of ww6 { Unit# ww7 ->
                                                                                                                         case Tensor.$wtensorProductWith
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ GHC.Real.Rational
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 0
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                @ 1
                                                                                                                                GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                ww1
                                                                                                                                ww7
                                                                                                                                  `cast`
                                                                                                                                (Data.Map.Internal.Map
                                                                                                                                   ((,,,,,,,)
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_20>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_20>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Uind_19>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<0>_N))
                                                                                                                                         <Index.Lind_19>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0R (<1>_N))
                                                                                                                                         <Index.Uind_9>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0R (<1>_N))
                                                                                                                                         <Index.Lind_9>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<1>_N))
                                                                                                                                         <Index.Uind_3>_N)_N
                                                                                                                                      (Index.Ind
                                                                                                                                         (Add0L (<1>_N))
                                                                                                                                         <Index.Lind_3>_N)_N)_N
                                                                                                                                   <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                                                                                                                         Tensor.Tensor
                                                                                                                           @ (1
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (1
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 0)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ (0
                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           ww9 } } } } }) -}
eeb735c4d022e46cb4b4ca98e71c983b
  eqn2_7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((EquivarianceEqns.eqn1_11,
                  EquivarianceEqns.eqn1_11)) -}
9ddb09941e26a27a9aa0d045aebcd02c
  eqn3_1 ::
    GHC.Real.Rational
    -> Ivar.Ivar GHC.Real.Rational -> Ivar.Ivar GHC.Real.Rational
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,1*U(1*U(U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Real.Rational) (w1 :: Ivar.Ivar GHC.Real.Rational) ->
                 case w of ww { GHC.Real.:% ww1 ww2 ->
                 case EquivarianceEqns.$wlvl5 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Ivar.Ivar @ GHC.Real.Rational ww4 ww5 } }) -}
25b538027dd53fd6d0e8ed70ab2475ba
  eqn3_2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((EquivarianceEqns.eqn1_17, EquivarianceEqns.eqn3_4)) -}
fe6760530cec78eaf1d2da761bcc0074
  eqn3_3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 1 0 0 1 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn3_3 w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ (Ivar.Ivar GHC.Real.Rational)
                   ww1 }) -}
24df24c81eb4a55b1c7791c2e5053dc5
  eqn3_3Flat ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Tensor.Tensor 0 1 1 0 0 1 0 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case EquivarianceEqns.$weqn3_3Flat w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 1
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
47e6b68c5513567b454aba75d3f64169
  eqn3_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
a104a6318b9d794b8645b451211eb394
  index2Sparse1 ::
    Index.Index 0 1 0 0 0 0 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2Sparse1
                        ww2
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
229298ee8114b3ba6892042a25c4299d
  index2Sparse2 ::
    Index.Index 0 1 0 0 0 0 1 2 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,A,A,1*U(U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 0 1 2) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2Sparse2
                        ww2
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
88b10ff4a215d0bdeb81d97aba99d6ae
  index2Sparse3 ::
    Index.Index 0 1 0 0 0 1 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(A,1*U(U),A,A,A,1*U(U),1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 0 1 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2Sparse3
                        ww2
                        ww6
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
e083da765ec47d93d06462015b27149b
  index2Sparse4 ::
    Index.Index 0 1 0 0 1 0 0 2 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(A,1*U(U),A,A,1*U(U),A,A,U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 1 0 0 2) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2Sparse4
                        ww2
                        ww5
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
19d4285c3101effcc4d18b4e02d87247
  index2Sparse5 ::
    Index.Index 0 1 0 0 1 1 0 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(A,1*U(U),A,A,1*U(U),1*U(U),A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 0 0 1 1 0 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2Sparse5
                        ww2
                        ww5
                        ww6
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
3fdeacb86edf39c5dfc1e68802a9ad29
  index2Sparse6 ::
    Index.Index 0 1 1 0 0 1 0 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1,
     Strictness: <S,1*U(A,1*U(U),1*U(U),A,A,1*U(U),A,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 1 1 0 0 1 0 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2Sparse6
                        ww2
                        ww3
                        ww6
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
087ddd08fd82e42be1b96524ac26a15d
  index2SparseConst ::
    Index.Index 0 0 0 0 0 0 1 1 -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U(A,A,A,A,A,A,1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Index.Index 0 0 0 0 0 0 1 1) ->
                 case w of ww { (,,,,,,,) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case EquivarianceEqns.$windex2SparseConst
                        ww7
                        ww8 of ww9 { (#,#) ww10 ww11 ->
                 (ww10, ww11) } }) -}
ad0286991a2d15a07f0e03904337d443
  mkEqn1Sparse ::
    Tensor.Tensor 0 1 0 0 0 0 1 1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 1 0 0 0 0 1 1 a) ->
                 {__scc {main:EquivarianceEqns.mkEqn1Sparse} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        EquivarianceEqns.$sfromList
                                                                          @ a
                                                                          (EquivarianceEqns.mkEqn1Sparse1
                                                                             @ a
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   a))
                                                                             map1) }) -}
f561eb59aaa1b534a8e30dd61dc2259c
  mkEqn1Sparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 1 1) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
a41677e182b8ae1b16d33531f2d0d5f2
  mkEqn2Sparse ::
    Tensor.Tensor 0 1 0 0 0 0 1 2 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 1 0 0 0 0 1 2 a) ->
                 {__scc {main:EquivarianceEqns.mkEqn2Sparse} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        EquivarianceEqns.$sfromList
                                                                          @ a
                                                                          (EquivarianceEqns.mkEqn2Sparse1
                                                                             @ a
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   a))
                                                                             map1) }) -}
f86ba5aa9439ec117bf55b6910894a16
  mkEqn2Sparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 0 1 2) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
3bc186ac533806f069ac1ff54551cf70
  mkEqn3Sparse ::
    Tensor.Tensor 0 1 0 0 0 1 1 1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 1 0 0 0 1 1 1 a) ->
                 {__scc {main:EquivarianceEqns.mkEqn3Sparse} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        EquivarianceEqns.$sfromList
                                                                          @ a
                                                                          (EquivarianceEqns.mkEqn3Sparse1
                                                                             @ a
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   a))
                                                                             map1) }) -}
8490e5610db5f01ae9c1e364f363d682
  mkEqn3Sparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 0 1 1 1) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
d9aa2de56a5d44540da3487ab479c579
  mkEqn4Sparse ::
    Tensor.Tensor 0 1 0 0 1 0 0 2 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 1 0 0 1 0 0 2 a) ->
                 {__scc {main:EquivarianceEqns.mkEqn4Sparse} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        EquivarianceEqns.$sfromList
                                                                          @ a
                                                                          (EquivarianceEqns.mkEqn4Sparse1
                                                                             @ a
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   a))
                                                                             map1) }) -}
d27e3e0bf7f31ebd47b222904253b8f1
  mkEqn4Sparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 1 0 0 2) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
52cbefc174740e46d3a3e43d1248396b
  mkEqn5Sparse ::
    Tensor.Tensor 0 1 0 0 1 1 0 1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 1 0 0 1 1 0 1 a) ->
                 {__scc {main:EquivarianceEqns.mkEqn5Sparse} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        EquivarianceEqns.$sfromList
                                                                          @ a
                                                                          (EquivarianceEqns.mkEqn5Sparse1
                                                                             @ a
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   a))
                                                                             map1) }) -}
d8e7ccec760a8bf87fe47362494878c4
  mkEqn5Sparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 0 0 1 1 0 1) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
2e72047fff4723fc464debbd7d79b9f1
  mkEqn6Sparse ::
    Tensor.Tensor 0 1 1 0 0 1 0 1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 1 1 0 0 1 0 1 a) ->
                 {__scc {main:EquivarianceEqns.mkEqn6Sparse} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                        EquivarianceEqns.$sfromList
                                                                          @ a
                                                                          (EquivarianceEqns.mkEqn6Sparse1
                                                                             @ a
                                                                             (GHC.Types.[]
                                                                                @ ((GHC.Types.Int,
                                                                                    GHC.Types.Int),
                                                                                   a))
                                                                             map1) }) -}
443ee822bdddac6386a811d1916e532d
  mkEqn6Sparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 1 1 0 0 1 0 1) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
7b45549cef88da6ff63ecfc1ea570eca
  mkEqnConstSparse ::
    Tensor.Tensor 0 0 0 0 0 0 1 1 a
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar a)
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Tensor.Tensor 0 0 0 0 0 0 1 1 a) ->
                 case w of ww { Tensor.Tensor ww1 ->
                 EquivarianceEqns.$wmkEqnConstSparse @ a ww1 }) -}
e49c7543a8a49a87a20503384452e0ce
  mkEqnConstSparse1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (Index.Index 0 0 0 0 0 0 1 1) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
cbb9da3fdaf9a519f1553318a9198892
  mkEqnConstSparse2 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fd669352a5973d9c867b3eb739d16fbf
  mkEqnConstSparseFlat ::
    Tensor.Tensor 0 0 0 0 0 0 1 1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Tensor.Tensor 0 0 0 0 0 0 1 1 a) ->
                 {__scc {main:EquivarianceEqns.mkEqnConstSparseFlat} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                                EquivarianceEqns.$sfromList
                                                                                  @ a
                                                                                  (EquivarianceEqns.mkEqnConstSparse1
                                                                                     @ a
                                                                                     (GHC.Types.[]
                                                                                        @ ((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           a))
                                                                                     map1) }) -}
cf187cc92bbed3e1eca9385614b2e25d
  showEqns ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)) ->
                 {__scc {main:EquivarianceEqns.showEqns} True True} GHC.CString.unpackAppendCString#
                                                                      EquivarianceEqns.showEqns9
                                                                      (let {
                                                                         map2 :: Data.Map.Internal.Map
                                                                                   (GHC.Types.Int,
                                                                                    GHC.Types.Int)
                                                                                   GHC.Base.String
                                                                         = {__scc {main:EquivarianceEqns.showEqns.map2} True True} EquivarianceEqns.showEqns_go13
                                                                                                                                     map1
                                                                       } in
                                                                       let {
                                                                         list1 :: [((GHC.Types.Int,
                                                                                     GHC.Types.Int),
                                                                                    GHC.Base.String)]
                                                                         = {__scc {main:EquivarianceEqns.showEqns.list1} True True} Data.Map.Internal.assocs
                                                                                                                                      @ (GHC.Types.Int,
                                                                                                                                         GHC.Types.Int)
                                                                                                                                      @ GHC.Base.String
                                                                                                                                      map2
                                                                       } in
                                                                       case EquivarianceEqns.showEqns_go
                                                                              ({__scc {main:EquivarianceEqns.showEqns.list2} True True} GHC.Base.map
                                                                                                                                          @ ((GHC.Types.Int,
                                                                                                                                              GHC.Types.Int),
                                                                                                                                             [GHC.Types.Char])
                                                                                                                                          @ [GHC.Types.Char]
                                                                                                                                          EquivarianceEqns.showEqns3
                                                                                                                                          list1) of wild {
                                                                         []
                                                                         -> case GHC.List.scanl2
                                                                            ret_ty [GHC.Types.Char]
                                                                            of {}
                                                                         : ds1 xs
                                                                         -> GHC.Base.++
                                                                              @ GHC.Types.Char
                                                                              xs
                                                                              EquivarianceEqns.showEqns1 })) -}
2597b9bd806733e7094b96b87c635218
  showEqns1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   EquivarianceEqns.showEqns2) -}
b3ba756a6c16e2fcf4bcf1bf4471952e
  showEqns2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
ea12f2b9e06215693f92410746e3bac4
  showEqns3 ::
    ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])) ->
                 case w of ww { (,) ww1 ww2 -> EquivarianceEqns.$wlvl6 ww1 ww2 }) -}
3930e0c2c85144c0e702a8f2b3fd26d5
  showEqns4 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
416f287b0e6c2b1619b8e80e83f7258d
  showEqns5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   EquivarianceEqns.showEqns6) -}
25b85605bb44499024984a05b571d1d5
  showEqns6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
60f0346b2b0176d0dc587c0eb9895dbd
  showEqns7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("="#) -}
589326ab506ac258ad61ed007f49c1b7
  showEqns8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
d5469d1483518d42f9e37f565e83fd21
  showEqns9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("{"#) -}
17d92f603d0675f8cd08401104081836
  showEqnsFlat ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational) ->
                 {__scc {main:EquivarianceEqns.showEqnsFlat} True True} GHC.CString.unpackAppendCString#
                                                                          EquivarianceEqns.showEqns9
                                                                          (let {
                                                                             map2 :: Data.Map.Internal.Map
                                                                                       (GHC.Types.Int,
                                                                                        GHC.Types.Int)
                                                                                       GHC.Base.String
                                                                             = {__scc {main:EquivarianceEqns.showEqnsFlat.map2} True True} EquivarianceEqns.showEqnsFlat_go13
                                                                                                                                             (Data.Map.Internal.filterWithKey
                                                                                                                                                @ (GHC.Types.Int,
                                                                                                                                                   GHC.Types.Int)
                                                                                                                                                @ GHC.Real.Rational
                                                                                                                                                EquivarianceEqns.showEqnsFlat2
                                                                                                                                                map1)
                                                                           } in
                                                                           let {
                                                                             list1 :: [((GHC.Types.Int,
                                                                                         GHC.Types.Int),
                                                                                        GHC.Base.String)]
                                                                             = {__scc {main:EquivarianceEqns.showEqnsFlat.list1} True True} Data.Map.Internal.assocs
                                                                                                                                              @ (GHC.Types.Int,
                                                                                                                                                 GHC.Types.Int)
                                                                                                                                              @ GHC.Base.String
                                                                                                                                              map2
                                                                           } in
                                                                           case EquivarianceEqns.showEqns_go
                                                                                  ({__scc {main:EquivarianceEqns.showEqnsFlat.list2} True True} GHC.Base.map
                                                                                                                                                  @ ((GHC.Types.Int,
                                                                                                                                                      GHC.Types.Int),
                                                                                                                                                     [GHC.Types.Char])
                                                                                                                                                  @ [GHC.Types.Char]
                                                                                                                                                  EquivarianceEqns.showEqnsFlat1
                                                                                                                                                  list1) of wild {
                                                                             []
                                                                             -> case GHC.List.scanl2
                                                                                ret_ty [GHC.Types.Char]
                                                                                of {}
                                                                             : ds1 xs
                                                                             -> GHC.Base.++
                                                                                  @ GHC.Types.Char
                                                                                  xs
                                                                                  EquivarianceEqns.showEqns1 })) -}
3f0b8e1a796c82f134dabc890e6abea0
  showEqnsFlat1 ::
    ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])) ->
                 case w of ww { (,) ww1 ww2 -> EquivarianceEqns.$wlvl7 ww1 ww2 }) -}
641b5caa6440587b6e38571641d71923
  showEqnsFlat2 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Real.Rational -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(SS),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: GHC.Real.Rational) ->
                 case w1 of ww { GHC.Real.:% ww1 ww2 ->
                 EquivarianceEqns.$wlvl8 ww1 ww2 }) -}
d9c3fbbaeb231fc9e5af6dc8c8aefef8
  showEqnsFlatFrac ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational) ->
                 {__scc {main:EquivarianceEqns.showEqnsFlatFrac} True True} GHC.CString.unpackAppendCString#
                                                                              EquivarianceEqns.showEqns9
                                                                              (let {
                                                                                 map2 :: Data.Map.Internal.Map
                                                                                           (GHC.Types.Int,
                                                                                            GHC.Types.Int)
                                                                                           GHC.Base.String
                                                                                 = {__scc {main:EquivarianceEqns.showEqnsFlatFrac.map2} True True} EquivarianceEqns.showEqnsFlatFrac_go13
                                                                                                                                                     (Data.Map.Internal.filterWithKey
                                                                                                                                                        @ (GHC.Types.Int,
                                                                                                                                                           GHC.Types.Int)
                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                        EquivarianceEqns.showEqnsFlat2
                                                                                                                                                        map1)
                                                                               } in
                                                                               let {
                                                                                 list1 :: [((GHC.Types.Int,
                                                                                             GHC.Types.Int),
                                                                                            GHC.Base.String)]
                                                                                 = {__scc {main:EquivarianceEqns.showEqnsFlatFrac.list1} True True} Data.Map.Internal.assocs
                                                                                                                                                      @ (GHC.Types.Int,
                                                                                                                                                         GHC.Types.Int)
                                                                                                                                                      @ GHC.Base.String
                                                                                                                                                      map2
                                                                               } in
                                                                               case EquivarianceEqns.showEqns_go
                                                                                      ({__scc {main:EquivarianceEqns.showEqnsFlatFrac.list2} True True} GHC.Base.map
                                                                                                                                                          @ ((GHC.Types.Int,
                                                                                                                                                              GHC.Types.Int),
                                                                                                                                                             [GHC.Types.Char])
                                                                                                                                                          @ [GHC.Types.Char]
                                                                                                                                                          EquivarianceEqns.showEqnsFlatFrac1
                                                                                                                                                          list1) of wild {
                                                                                 []
                                                                                 -> case GHC.List.scanl2
                                                                                    ret_ty [GHC.Types.Char]
                                                                                    of {}
                                                                                 : ds1 xs
                                                                                 -> GHC.Base.++
                                                                                      @ GHC.Types.Char
                                                                                      xs
                                                                                      EquivarianceEqns.showEqns1 })) -}
96e5ca5d944df43a3b27bfefb81e1610
  showEqnsFlatFrac1 ::
    ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])
    -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U(1*U(1*U(U),1*U(U)),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])) ->
                 case w of ww { (,) ww1 ww2 -> EquivarianceEqns.$wlvl9 ww1 ww2 }) -}
3796d6dd162691dbe1dc08e163d10f26
  showEqnsFlatFrac_go13 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
ca05f054422957f2c636bc66e1dc1280
  showEqnsFlatMatLab ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (map1 :: Data.Map.Internal.Map
                              (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational) ->
                 {__scc {main:EquivarianceEqns.showEqnsFlatMatLab} True True} let {
                                                                                map2 :: Data.Map.Internal.Map
                                                                                          (GHC.Types.Int,
                                                                                           GHC.Types.Int)
                                                                                          GHC.Base.String
                                                                                = {__scc {main:EquivarianceEqns.showEqnsFlatMatLab.map2} True True} EquivarianceEqns.showEqnsFlat_go13
                                                                                                                                                      (Data.Map.Internal.filterWithKey
                                                                                                                                                         @ (GHC.Types.Int,
                                                                                                                                                            GHC.Types.Int)
                                                                                                                                                         @ GHC.Real.Rational
                                                                                                                                                         EquivarianceEqns.showEqnsFlat2
                                                                                                                                                         map1)
                                                                              } in
                                                                              let {
                                                                                list1 :: [((GHC.Types.Int,
                                                                                            GHC.Types.Int),
                                                                                           GHC.Base.String)]
                                                                                = {__scc {main:EquivarianceEqns.showEqnsFlatMatLab.list1} True True} Data.Map.Internal.assocs
                                                                                                                                                       @ (GHC.Types.Int,
                                                                                                                                                          GHC.Types.Int)
                                                                                                                                                       @ GHC.Base.String
                                                                                                                                                       map2
                                                                              } in
                                                                              EquivarianceEqns.showEqns_go
                                                                                ({__scc {main:EquivarianceEqns.showEqnsFlatMatLab.list2} True True} GHC.Base.map
                                                                                                                                                      @ ((GHC.Types.Int,
                                                                                                                                                          GHC.Types.Int),
                                                                                                                                                         [GHC.Types.Char])
                                                                                                                                                      @ [GHC.Types.Char]
                                                                                                                                                      EquivarianceEqns.showEqnsFlatMatLab1
                                                                                                                                                      list1)) -}
c44de8eede510221908349d3c8a7d7e9
  showEqnsFlatMatLab1 ::
    ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])
    -> [GHC.Types.Char]
  {- Arity: 1,
     Strictness: <S(S(S(S)L)L),1*U(1*U(1*U(U),1*U(U)),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((GHC.Types.Int, GHC.Types.Int), [GHC.Types.Char])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.I# ww7 ->
                 EquivarianceEqns.$wlvl10 ww7 ww5 ww2 } } }) -}
9598a5409deef0cf40796474fb868b33
  showEqnsFlatMatLab2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   EquivarianceEqns.showEqnsFlatMatLab3) -}
ed3d3fad3704ad5dc5a46f334b9764f7
  showEqnsFlatMatLab3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" \n"#) -}
c8486f01311d69320fe868b9196cfce6
  showEqnsFlatMatLab4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
27eefcc3039f5f1be7ccd41d2292cbdd
  showEqnsFlat_go13 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
c299b10295702dde5909567e2c957541
  showEqns_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
96331f7147d79c678acbd2423eed3206
  showEqns_go13 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
"SPEC/EquivarianceEqns fromList @ (Int, Int) _" [orphan] forall @ a
                                                                ($dOrd :: GHC.Classes.Ord
                                                                            (GHC.Types.Int,
                                                                             GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = EquivarianceEqns.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

