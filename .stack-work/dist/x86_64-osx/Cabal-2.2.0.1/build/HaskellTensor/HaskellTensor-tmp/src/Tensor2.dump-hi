
==================== FINAL INTERFACE ====================
2019-01-30 12:19:23.525172 UTC

interface main:Tensor2 8043
  interface hash: 77ea65f4d94710684e9cd7a1ce592f39
  ABI hash: f1a5469d1fabe0d58c0e0037a3fef214
  export-list hash: c7404c5489c55bbd5b4fc766cd2e8b08
  orphan hash: f941ced24fcaf00d333373f30ea096e6
  flag hash: 707c86cfbee6a9c65f08462953a21ad8
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tensor2.intAIB
  Tensor2.mkEqnSparseIntAIB
  Tensor2.triangleMap2
  Tensor2.triangleMap3
  Tensor2.triangleMapArea
  Tensor2.Ind
  Tensor2.Index
  Tensor2.Tensor
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Sequence.Internal a2eae372f67713826bf16d410fc6cd8f
import  -/  containers-0.5.11.0:Data.Sequence.Internal.Sorting 481f0d31b76dfcad90c740727653678b
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
0f2bcfe2d5fad1652a545636b4597b38
  $s$fEq(,,,,,,,) ::
    GHC.Classes.Eq
      (Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int)
                  (\ (ds :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int))
                     (ds1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int,
                              Data.Sequence.Internal.Seq GHC.Types.Int)) ->
                   case ds of wild { (,,,,,,,) a1 a2 a3 a4 a5 a6 a7 a8 ->
                   case ds1 of wild1 { (,,,,,,,) b1 b2 b3 b4 b5 b6 b7 b8 ->
                   case Data.Sequence.Internal.$fEqSeq_$c==
                          @ GHC.Types.Int
                          GHC.Classes.$fEqInt
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.False
                     GHC.Types.True
                     -> case Data.Sequence.Internal.$fEqSeq_$c==
                               @ GHC.Types.Int
                               GHC.Classes.$fEqInt
                               a2
                               b2 of wild3 {
                          GHC.Types.False -> GHC.Types.False
                          GHC.Types.True
                          -> case Data.Sequence.Internal.$fEqSeq_$c==
                                    @ GHC.Types.Int
                                    GHC.Classes.$fEqInt
                                    a3
                                    b3 of wild4 {
                               GHC.Types.False -> GHC.Types.False
                               GHC.Types.True
                               -> case Data.Sequence.Internal.$fEqSeq_$c==
                                         @ GHC.Types.Int
                                         GHC.Classes.$fEqInt
                                         a4
                                         b4 of wild5 {
                                    GHC.Types.False -> GHC.Types.False
                                    GHC.Types.True
                                    -> case Data.Sequence.Internal.$fEqSeq_$c==
                                              @ GHC.Types.Int
                                              GHC.Classes.$fEqInt
                                              a5
                                              b5 of wild6 {
                                         GHC.Types.False -> GHC.Types.False
                                         GHC.Types.True
                                         -> case Data.Sequence.Internal.$fEqSeq_$c==
                                                   @ GHC.Types.Int
                                                   GHC.Classes.$fEqInt
                                                   a6
                                                   b6 of wild7 {
                                              GHC.Types.False -> GHC.Types.False
                                              GHC.Types.True
                                              -> case Data.Sequence.Internal.$fEqSeq_$c==
                                                        @ GHC.Types.Int
                                                        GHC.Classes.$fEqInt
                                                        a7
                                                        b7 of wild8 {
                                                   GHC.Types.False -> GHC.Types.False
                                                   GHC.Types.True
                                                   -> Data.Sequence.Internal.$fEqSeq_$c==
                                                        @ GHC.Types.Int
                                                        GHC.Classes.$fEqInt
                                                        a8
                                                        b8 } } } } } } } } })
                  (GHC.Classes.$fEq(,,,,,,,)_$c/=
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                     Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq) -}
ca9c071a68bea6b759a6450522d1296f
  $s$fEq(,,,,,,,)_$s$fEqSeq ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt)
                  Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq_$c/= -}
814ba914fad44d9e9335faffd140174d
  $s$fEq(,,,,,,,)_$s$fEqSeq_$c/= ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq GHC.Types.Int)
                   (y :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ GHC.Types.Int
                        GHC.Classes.$fEqInt
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d7e061c88f469ce467a44647bb0c9239
  $s$fOrd(,,,,,,,) ::
    GHC.Classes.Ord
      (Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int,
       Data.Sequence.Internal.Seq GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int,
                     Data.Sequence.Internal.Seq GHC.Types.Int)
                  (GHC.Classes.$fOrd(,,,,,,,)_$cp1Ord
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq)
                  (GHC.Classes.$fOrd(,,,,,,,)_$ccompare
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq)
                  (GHC.Classes.$fOrd(,,,,,,,)_$c<
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq)
                  (\ (a1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int))
                     (b1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int)) ->
                   case b1 of wild { (,,,,,,,) a2 a3 a4 a5 a6 a7 a8 a9 ->
                   case a1 of wild1 { (,,,,,,,) b2 b3 b4 b5 b6 b7 b8 b9 ->
                   case Data.Sequence.Internal.$fOrdSeq_$ccompare
                          @ GHC.Types.Int
                          GHC.Classes.$fOrdInt
                          a2
                          b2 of wild2 {
                     GHC.Types.LT -> GHC.Types.False
                     GHC.Types.EQ
                     -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                               @ GHC.Types.Int
                               GHC.Classes.$fOrdInt
                               a3
                               b3 of wild3 {
                          GHC.Types.LT -> GHC.Types.False
                          GHC.Types.EQ
                          -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                    @ GHC.Types.Int
                                    GHC.Classes.$fOrdInt
                                    a4
                                    b4 of wild4 {
                               GHC.Types.LT -> GHC.Types.False
                               GHC.Types.EQ
                               -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                         @ GHC.Types.Int
                                         GHC.Classes.$fOrdInt
                                         a5
                                         b5 of wild5 {
                                    GHC.Types.LT -> GHC.Types.False
                                    GHC.Types.EQ
                                    -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                              @ GHC.Types.Int
                                              GHC.Classes.$fOrdInt
                                              a6
                                              b6 of wild6 {
                                         GHC.Types.LT -> GHC.Types.False
                                         GHC.Types.EQ
                                         -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                   @ GHC.Types.Int
                                                   GHC.Classes.$fOrdInt
                                                   a7
                                                   b7 of wild7 {
                                              GHC.Types.LT -> GHC.Types.False
                                              GHC.Types.EQ
                                              -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                        @ GHC.Types.Int
                                                        GHC.Classes.$fOrdInt
                                                        a8
                                                        b8 of wild8 {
                                                   GHC.Types.LT -> GHC.Types.False
                                                   GHC.Types.EQ
                                                   -> case Data.Sequence.Internal.$fOrdSeq_$c<
                                                             @ GHC.Types.Int
                                                             GHC.Classes.$fOrdInt
                                                             a9
                                                             b9 of wild11 {
                                                        GHC.Types.False -> GHC.Types.True
                                                        GHC.Types.True -> GHC.Types.False }
                                                   GHC.Types.GT -> GHC.Types.True }
                                              GHC.Types.GT -> GHC.Types.True }
                                         GHC.Types.GT -> GHC.Types.True }
                                    GHC.Types.GT -> GHC.Types.True }
                               GHC.Types.GT -> GHC.Types.True }
                          GHC.Types.GT -> GHC.Types.True }
                     GHC.Types.GT -> GHC.Types.True } } })
                  (\ (a1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int))
                     (b1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int)) ->
                   GHC.Classes.$fOrd(,,,,,,,)_$c<
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
                     b1
                     a1)
                  (\ (a1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int))
                     (b1 :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int,
                             Data.Sequence.Internal.Seq GHC.Types.Int)) ->
                   case a1 of wild { (,,,,,,,) a2 a3 a4 a5 a6 a7 a8 a9 ->
                   case b1 of wild1 { (,,,,,,,) b2 b3 b4 b5 b6 b7 b8 b9 ->
                   case Data.Sequence.Internal.$fOrdSeq_$ccompare
                          @ GHC.Types.Int
                          GHC.Classes.$fOrdInt
                          a2
                          b2 of wild2 {
                     GHC.Types.LT -> GHC.Types.False
                     GHC.Types.EQ
                     -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                               @ GHC.Types.Int
                               GHC.Classes.$fOrdInt
                               a3
                               b3 of wild3 {
                          GHC.Types.LT -> GHC.Types.False
                          GHC.Types.EQ
                          -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                    @ GHC.Types.Int
                                    GHC.Classes.$fOrdInt
                                    a4
                                    b4 of wild4 {
                               GHC.Types.LT -> GHC.Types.False
                               GHC.Types.EQ
                               -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                         @ GHC.Types.Int
                                         GHC.Classes.$fOrdInt
                                         a5
                                         b5 of wild5 {
                                    GHC.Types.LT -> GHC.Types.False
                                    GHC.Types.EQ
                                    -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                              @ GHC.Types.Int
                                              GHC.Classes.$fOrdInt
                                              a6
                                              b6 of wild6 {
                                         GHC.Types.LT -> GHC.Types.False
                                         GHC.Types.EQ
                                         -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                   @ GHC.Types.Int
                                                   GHC.Classes.$fOrdInt
                                                   a7
                                                   b7 of wild7 {
                                              GHC.Types.LT -> GHC.Types.False
                                              GHC.Types.EQ
                                              -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                        @ GHC.Types.Int
                                                        GHC.Classes.$fOrdInt
                                                        a8
                                                        b8 of wild8 {
                                                   GHC.Types.LT -> GHC.Types.False
                                                   GHC.Types.EQ
                                                   -> case Data.Sequence.Internal.$fOrdSeq_$c<
                                                             @ GHC.Types.Int
                                                             GHC.Classes.$fOrdInt
                                                             a9
                                                             b9 of wild11 {
                                                        GHC.Types.False -> GHC.Types.True
                                                        GHC.Types.True -> GHC.Types.False }
                                                   GHC.Types.GT -> GHC.Types.True }
                                              GHC.Types.GT -> GHC.Types.True }
                                         GHC.Types.GT -> GHC.Types.True }
                                    GHC.Types.GT -> GHC.Types.True }
                               GHC.Types.GT -> GHC.Types.True }
                          GHC.Types.GT -> GHC.Types.True }
                     GHC.Types.GT -> GHC.Types.True } } })
                  (\ (x :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int))
                     (y :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int)) ->
                   case y of wild { (,,,,,,,) a2 a3 a4 a5 a6 a7 a8 a9 ->
                   case x of wild1 { (,,,,,,,) b2 b3 b4 b5 b6 b7 b8 b9 ->
                   case Data.Sequence.Internal.$fOrdSeq_$ccompare
                          @ GHC.Types.Int
                          GHC.Classes.$fOrdInt
                          a2
                          b2 of wild2 {
                     GHC.Types.LT -> wild1
                     GHC.Types.EQ
                     -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                               @ GHC.Types.Int
                               GHC.Classes.$fOrdInt
                               a3
                               b3 of wild3 {
                          GHC.Types.LT -> wild1
                          GHC.Types.EQ
                          -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                    @ GHC.Types.Int
                                    GHC.Classes.$fOrdInt
                                    a4
                                    b4 of wild4 {
                               GHC.Types.LT -> wild1
                               GHC.Types.EQ
                               -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                         @ GHC.Types.Int
                                         GHC.Classes.$fOrdInt
                                         a5
                                         b5 of wild5 {
                                    GHC.Types.LT -> wild1
                                    GHC.Types.EQ
                                    -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                              @ GHC.Types.Int
                                              GHC.Classes.$fOrdInt
                                              a6
                                              b6 of wild6 {
                                         GHC.Types.LT -> wild1
                                         GHC.Types.EQ
                                         -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                   @ GHC.Types.Int
                                                   GHC.Classes.$fOrdInt
                                                   a7
                                                   b7 of wild7 {
                                              GHC.Types.LT -> wild1
                                              GHC.Types.EQ
                                              -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                        @ GHC.Types.Int
                                                        GHC.Classes.$fOrdInt
                                                        a8
                                                        b8 of wild8 {
                                                   GHC.Types.LT -> wild1
                                                   GHC.Types.EQ
                                                   -> case Data.Sequence.Internal.$fOrdSeq_$c<
                                                             @ GHC.Types.Int
                                                             GHC.Classes.$fOrdInt
                                                             a9
                                                             b9 of wild11 {
                                                        GHC.Types.False -> wild
                                                        GHC.Types.True -> wild1 }
                                                   GHC.Types.GT -> wild }
                                              GHC.Types.GT -> wild }
                                         GHC.Types.GT -> wild }
                                    GHC.Types.GT -> wild }
                               GHC.Types.GT -> wild }
                          GHC.Types.GT -> wild }
                     GHC.Types.GT -> wild } } })
                  (\ (x :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int))
                     (y :: (Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int,
                            Data.Sequence.Internal.Seq GHC.Types.Int)) ->
                   case y of wild { (,,,,,,,) a2 a3 a4 a5 a6 a7 a8 a9 ->
                   case x of wild1 { (,,,,,,,) b2 b3 b4 b5 b6 b7 b8 b9 ->
                   case Data.Sequence.Internal.$fOrdSeq_$ccompare
                          @ GHC.Types.Int
                          GHC.Classes.$fOrdInt
                          a2
                          b2 of wild2 {
                     GHC.Types.LT -> wild
                     GHC.Types.EQ
                     -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                               @ GHC.Types.Int
                               GHC.Classes.$fOrdInt
                               a3
                               b3 of wild3 {
                          GHC.Types.LT -> wild
                          GHC.Types.EQ
                          -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                    @ GHC.Types.Int
                                    GHC.Classes.$fOrdInt
                                    a4
                                    b4 of wild4 {
                               GHC.Types.LT -> wild
                               GHC.Types.EQ
                               -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                         @ GHC.Types.Int
                                         GHC.Classes.$fOrdInt
                                         a5
                                         b5 of wild5 {
                                    GHC.Types.LT -> wild
                                    GHC.Types.EQ
                                    -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                              @ GHC.Types.Int
                                              GHC.Classes.$fOrdInt
                                              a6
                                              b6 of wild6 {
                                         GHC.Types.LT -> wild
                                         GHC.Types.EQ
                                         -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                   @ GHC.Types.Int
                                                   GHC.Classes.$fOrdInt
                                                   a7
                                                   b7 of wild7 {
                                              GHC.Types.LT -> wild
                                              GHC.Types.EQ
                                              -> case Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                        @ GHC.Types.Int
                                                        GHC.Classes.$fOrdInt
                                                        a8
                                                        b8 of wild8 {
                                                   GHC.Types.LT -> wild
                                                   GHC.Types.EQ
                                                   -> case Data.Sequence.Internal.$fOrdSeq_$c<
                                                             @ GHC.Types.Int
                                                             GHC.Classes.$fOrdInt
                                                             a9
                                                             b9 of wild11 {
                                                        GHC.Types.False -> wild1
                                                        GHC.Types.True -> wild }
                                                   GHC.Types.GT -> wild1 }
                                              GHC.Types.GT -> wild1 }
                                         GHC.Types.GT -> wild1 }
                                    GHC.Types.GT -> wild1 }
                               GHC.Types.GT -> wild1 }
                          GHC.Types.GT -> wild1 }
                     GHC.Types.GT -> wild1 } } }) -}
6d3d15b70ff1269ac458b5128c8f0173
  $s$fOrd(,,,,,,,)_$s$fOrdSeq ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                  Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt)
                  (\ (x :: Data.Sequence.Internal.Seq GHC.Types.Int)
                     (y :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ GHC.Types.Int
                          GHC.Classes.$fOrdInt
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq GHC.Types.Int)
                     (y :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ GHC.Types.Int
                          GHC.Classes.$fOrdInt
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
815c76db99884fe9ebb57a671517dc4f
  $s$fOrdSeq_$cmax ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq GHC.Types.Int)
                   (y :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ GHC.Types.Int
                        GHC.Classes.$fOrdInt
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
90acec11cba9aa0a35db4cb4e52da07e
  $s$fOrdSeq_$cmin ::
    Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq GHC.Types.Int
    -> Data.Sequence.Internal.Seq GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq GHC.Types.Int)
                   (y :: Data.Sequence.Internal.Seq GHC.Types.Int) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ GHC.Types.Int
                        GHC.Classes.$fOrdInt
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
292c4226b8bf086f0b114ca8cade9ce8
  $sfind1 :: Tensor2.Ind -> Data.Map.Internal.Map Tensor2.Ind a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
da43481cadf078e5081fda3ee0619fc9
  $sfromAscListWithKey ::
    (Tensor2.Index -> a -> a -> a)
    -> [(Tensor2.Index, a)] -> Data.Map.Internal.Map Tensor2.Index a
  {- Arity: 2, Strictness: <L,C(C1(C1(U)))><S,1*U> -}
ed7c1eb4de91cc9703764cd8d35baf7d
  $sfromList ::
    [(Tensor2.Index, a)] -> Data.Map.Internal.Map Tensor2.Index a
  {- Arity: 1, Strictness: <S,1*U> -}
97ebe4ec24f217bc1284f0c0407726ba
  $sfromList1 ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww3 ww5 ->
                           case ky of ww6 { (,) ww7 ww8 ->
                           case ww3 of wild4 { GHC.Types.I# x# ->
                           case ww7 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> Tensor2.$sfromList2
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww5 of wild6 { GHC.Types.I# x1 ->
                                     case ww8 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> Tensor2.$sfromList2
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> Tensor2.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> Tensor2.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
6078e2d8f1669e7ce8efdb609d6f266a
  $sfromList2 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
b6646e78ec67ce779044ec719605cfc2
  $sfromList3 ::
    [(Tensor2.Index, a)] -> Data.Map.Internal.Map Tensor2.Index a
  {- Arity: 1, Strictness: <S,1*U> -}
bd5b296ba7d3cacd4fe5b3a3c7b4e995
  $sinsertWithKey_go8 ::
    GHC.Classes.Ord k1 =>
    (k1 -> a1 -> a1 -> a1)
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,1*C1(C1(C1(U)))><S,1*U><L,U><S,1*U> -}
4538b5f57f13c4da7d377f3f6c3f936f
  $sinsert_$sgo1 ::
    Tensor2.Index
    -> Tensor2.Index
    -> a1
    -> Data.Map.Internal.Map Tensor2.Index a1
    -> Data.Map.Internal.Map Tensor2.Index a1
  {- Arity: 4,
     Strictness: <L,U><S,1*U(U,U,U,U,U,U,U,U)><L,U><S,1*U> -}
52d4254e097171053a0eb964df5a1e08
  $smapKeysWith ::
    (a -> a -> a)
    -> (k1 -> Tensor2.Index)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map Tensor2.Index a
  {- Arity: 3, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ k1
                   (c :: a -> a -> a)
                   (f :: k1 -> Tensor2.Index)
                   (eta1 :: Data.Map.Internal.Map k1 a) ->
                 let {
                   f1 :: Tensor2.Index -> a -> a -> a
                     {- Arity: 3, Strictness: <L,A><L,U><L,U>,
                        Unfolding: InlineRule (3, True, True)
                                   (\ (ds :: Tensor2.Index) (x1 :: a) (y :: a) -> c x1 y) -}
                   = \ (ds :: Tensor2.Index) (x1 :: a)[OneShot] (y :: a)[OneShot] ->
                     c x1 y
                 } in
                 letrec {
                   go8 :: [(Tensor2.Index, a)]
                          -> Data.Map.Internal.Map k1 a -> [(Tensor2.Index, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Tensor2.Index, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go8 (GHC.Types.: @ (Tensor2.Index, a) (f kx, x) (go8 z' r)) l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 letrec {
                   go9 :: Data.Map.Internal.Map Tensor2.Index a
                          -> [(Tensor2.Index, a)] -> Data.Map.Internal.Map Tensor2.Index a
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (z :: Data.Map.Internal.Map Tensor2.Index a)
                       (ds :: [(Tensor2.Index, a)]) ->
                     case ds of wild {
                       [] -> z
                       : x1 xs
                       -> case x1 of wild1 { (,) k x2 ->
                          case Tensor2.$sinsertWithKey_go8
                                 @ Tensor2.Index
                                 @ a
                                 Tensor2.$s$fOrd(,,,,,,,)
                                 f1
                                 k
                                 x2
                                 z of z' { DEFAULT ->
                          go9 z' xs } } }
                 } in
                 go9
                   (Data.Map.Internal.Tip @ Tensor2.Index @ a)
                   (go8 (GHC.Types.[] @ (Tensor2.Index, a)) eta1)) -}
74c46b4df7d3f20cfba7dcc9d07543d3
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map Tensor2.Index a
    -> Data.Map.Internal.Map Tensor2.Index a
    -> Data.Map.Internal.Map Tensor2.Index a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
aa8775b66e36de9a29d94904c868f6df
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tensor2.$trModule3
                   Tensor2.$trModule1) -}
f3265ef370c2aa3b4a9dd578aabbc2d1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor2.$trModule2) -}
84d27adee6b98055ab0249219a75c441
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor2"#) -}
11b42bb5851e847d2876f67c2c5164f9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor2.$trModule4) -}
63ba6bb8f3794c6f0887b6b7e38c61ae
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
5173d13060f145ec95e0d0227baac440
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
4fb81873b51388e8f3cddcaaf8e81733
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
087ca343a971e13136a01a77cc34d72f
  $wsymIndList ::
    GHC.Enum.Enum a =>
    GHC.Prim.Int# -> GHC.Types.Int -> [Data.Sequence.Internal.Seq a]
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><S,U><L,U>,
     Inline: [0] -}
59a3fd917e539040e6eb0411f70edea0
  type Ind = Data.Sequence.Internal.Seq GHC.Types.Int
61a366c6aa4a020c5e24c0f1ab312e6b
  type Index =
    (Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind,
     Tensor2.Ind, Tensor2.Ind, Tensor2.Ind)
0b422ab240ef98b2665171acd605b1be
  type Rank =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
484a7caa209d88ca43683d89121d826a
  type Tensor a = Data.Map.Internal.Map Tensor2.Index a
33cd6cd1667c902c2c5bc61feaa0236f
  intAIB ::
    Data.Map.Internal.Map Tensor2.Ind GHC.Types.Int
    -> Data.Map.Internal.Map Tensor2.Ind GHC.Types.Int
    -> Data.Map.Internal.Map Tensor2.Ind GHC.Types.Int
    -> Data.Map.Internal.Map Tensor2.Ind GHC.Types.Int
    -> Tensor2.Tensor GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U> -}
c297649e89ae98935990305feb1f604a
  mkEqnSparseIntAIB ::
    Tensor2.Tensor GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (map1 :: Tensor2.Tensor GHC.Real.Rational) ->
                 Tensor2.$sfromList1
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (Tensor2.mkEqnSparseIntAIB_go13
                      (GHC.Types.[]
                         @ ((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational))
                      map1)) -}
f3e47b52ec9e2687ffb06bfbd0234cc6
  mkEqnSparseIntAIB_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map Tensor2.Index GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
426bba198779a734d8ce8e78f232fa85
  triangleMap1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9a8af2e7540dfdd6ae352b5f2bb2d5b2
  triangleMap2 ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Strict.Internal.fromList
                   @ (Data.Sequence.Internal.Seq a)
                   @ b
                   (Data.Sequence.Internal.$fOrdSeq @ a $dOrd)
                   (GHC.List.zip
                      @ (Data.Sequence.Internal.Seq a)
                      @ b
                      (Tensor2.$wsymIndList @ a $dEnum 2# Tensor2.triangleMap5)
                      (GHC.Enum.enumFrom
                         @ b
                         $dEnum1
                         (GHC.Enum.toEnum @ b $dEnum1 Tensor2.triangleMap1)))) -}
99817b72350467b137e7c7c9bdba2d84
  triangleMap3 ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(A,A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   @ b
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dEnum1 :: GHC.Enum.Enum b)
                   ($dOrd :: GHC.Classes.Ord a) ->
                 Data.Map.Strict.Internal.fromList
                   @ (Data.Sequence.Internal.Seq a)
                   @ b
                   (Data.Sequence.Internal.$fOrdSeq @ a $dOrd)
                   (GHC.List.zip
                      @ (Data.Sequence.Internal.Seq a)
                      @ b
                      (Tensor2.$wsymIndList @ a $dEnum 3# Tensor2.triangleMap5)
                      (GHC.Enum.enumFrom
                         @ b
                         $dEnum1
                         (GHC.Enum.toEnum @ b $dEnum1 Tensor2.triangleMap1)))) -}
de46930ae18c24921c4e078a3dee5d40
  triangleMap5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
ad015fbfc289841c624b8087d9be812e
  triangleMapArea ::
    (GHC.Enum.Enum a, GHC.Enum.Enum b, GHC.Classes.Ord a) =>
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq a) b
  {- Arity: 3,
     Strictness: <S(LLLLLLC(C(S))L),U(C(U),A,C(U),A,A,A,C(C1(U)),A)><L,U(A,A,1*C1(U),A,1*C1(U),A,A,A)><L,U(U(C(C1(U)),A),C(C1(U)),A,A,C(C1(U)),A,A,A)> -}
"SPEC/Tensor2 $fEq(,,,,,,,) @ (Seq Int) @ (Seq Int) @ (Seq
                                                        Int) @ (Seq Int) @ (Seq Int) @ (Seq
                                                                                          Int) @ (Seq
                                                                                                    Int) @ (Seq
                                                                                                              Int)" [orphan] forall (v7 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             GHC.Types.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v6 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v5 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v4 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v3 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v2 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v1 :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 (v :: GHC.Classes.Eq
ata.Sequence.Internal.Seq
ypes.Int))
  GHC.Classes.$fEq(,,,,,,,) @ (Data.Sequence.Internal.Seq
                                 GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                            v
                            v1
                            v2
                            v3
                            v4
                            v5
                            v6
                            v7
  = Tensor2.$s$fEq(,,,,,,,)
"SPEC/Tensor2 $fEqSeq @ Int" [orphan] forall (v :: GHC.Classes.Eq
                                                     GHC.Types.Int)
  Data.Sequence.Internal.$fEqSeq @ GHC.Types.Int v
  = Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq
"SPEC/Tensor2 $fEqSeq_$c/= @ Int" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             GHC.Types.Int)
  Data.Sequence.Internal.$fEqSeq_$c/= @ GHC.Types.Int $dEq
  = Tensor2.$s$fEq(,,,,,,,)_$s$fEqSeq_$c/=
"SPEC/Tensor2 $fOrd(,,,,,,,) @ (Seq Int) @ (Seq Int) @ (Seq
                                                         Int) @ (Seq Int) @ (Seq Int) @ (Seq
                                                                                           Int) @ (Seq
                                                                                                     Int) @ (Seq
                                                                                                               Int)" [orphan] forall (v7 :: GHC.Classes.Ord
ata.Sequence.Internal.Seq
ypes.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (v6 :: GHC.Classes.Ord
ata.Sequence.Internal.Seq
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  GHC.Types.Int))
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      (v5 :: GHC.Classes.Ord
ata.Sequence.Internal.Seq
ypes.Int))
v4 :: GHC.Classes.Ord
ata.Sequence.Internal.Seq
ypes.Int))
v3 :: GHC.Classes.Ord
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Data.Sequence.Internal.Seq
ypes.Int))
v2 :: GHC.Classes.Ord
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (Data.Sequence.Internal.Seq
ypes.Int))
v1 :: GHC.Classes.Ord
ata.Sequence.Internal.Seq
ypes.Int))
v :: GHC.Classes.Ord
ata.Sequence.Internal.Seq
ypes.Int))
  GHC.Classes.$fOrd(,,,,,,,) @ (Data.Sequence.Internal.Seq
                                  GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             @ (Data.Sequence.Internal.Seq GHC.Types.Int)
                             v
                             v1
                             v2
                             v3
                             v4
                             v5
                             v6
                             v7
  = Tensor2.$s$fOrd(,,,,,,,)
"SPEC/Tensor2 $fOrdSeq @ Int" [orphan] forall (v :: GHC.Classes.Ord
                                                      GHC.Types.Int)
  Data.Sequence.Internal.$fOrdSeq @ GHC.Types.Int v
  = Tensor2.$s$fOrd(,,,,,,,)_$s$fOrdSeq
"SPEC/Tensor2 $fOrdSeq_$cmax @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                GHC.Types.Int)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ GHC.Types.Int $dOrd
  = Tensor2.$s$fOrdSeq_$cmax
"SPEC/Tensor2 $fOrdSeq_$cmin @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                GHC.Types.Int)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ GHC.Types.Int $dOrd
  = Tensor2.$s$fOrdSeq_$cmin
"SPEC/Tensor2 fromAscListWithKey @ Index _" [orphan] forall @ a
                                                            ($dEq :: GHC.Classes.Eq Tensor2.Index)
  Data.Map.Strict.Internal.fromAscListWithKey @ (Tensor2.Ind,
                                                 Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind,
                                                 Tensor2.Ind, Tensor2.Ind, Tensor2.Ind)
                                              @ a
                                              $dEq
  = Tensor2.$sfromAscListWithKey @ a
"SPEC/Tensor2 fromList @ (Int, Int) _" [orphan] forall @ a
                                                       ($dOrd :: GHC.Classes.Ord
                                                                   (GHC.Types.Int, GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = Tensor2.$sfromList1 @ a
"SPEC/Tensor2 fromList @ Index _" [orphan] forall @ a
                                                  ($dOrd :: GHC.Classes.Ord Tensor2.Index)
  Data.Map.Strict.Internal.fromList @ (Tensor2.Ind, Tensor2.Ind,
                                       Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind,
                                       Tensor2.Ind, Tensor2.Ind)
                                    @ a
                                    $dOrd
  = Tensor2.$sfromList @ a
"SPEC/Tensor2 fromList @ Index _" [orphan] forall @ a
                                                  ($dOrd :: GHC.Classes.Ord Tensor2.Index)
  Data.Map.Internal.fromList @ (Tensor2.Ind, Tensor2.Ind,
                                Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind,
                                Tensor2.Ind)
                             @ a
                             $dOrd
  = Tensor2.$sfromList3 @ a
"SPEC/Tensor2 mapKeysWith @ Index _ _" [orphan] forall @ a
                                                       @ k1
                                                       ($dOrd :: GHC.Classes.Ord Tensor2.Index)
  Data.Map.Strict.Internal.mapKeysWith @ (Tensor2.Ind, Tensor2.Ind,
                                          Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind,
                                          Tensor2.Ind, Tensor2.Ind)
                                       @ a
                                       @ k1
                                       $dOrd
  = Tensor2.$smapKeysWith @ a @ k1
"SPEC/Tensor2 unionWith @ Index _" [orphan] forall @ a
                                                   ($dOrd :: GHC.Classes.Ord Tensor2.Index)
  Data.Map.Strict.Internal.unionWith @ (Tensor2.Ind, Tensor2.Ind,
                                        Tensor2.Ind, Tensor2.Ind, Tensor2.Ind, Tensor2.Ind,
                                        Tensor2.Ind, Tensor2.Ind)
                                     @ a
                                     $dOrd
  = Tensor2.$sunionWith @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

