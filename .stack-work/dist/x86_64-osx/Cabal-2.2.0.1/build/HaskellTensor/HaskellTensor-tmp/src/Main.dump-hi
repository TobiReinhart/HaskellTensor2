
==================== FINAL INTERFACE ====================
2019-01-10 20:33:29.998891 UTC

interface main:Main 8043
  interface hash: 81093f98320705e7501b6bba3b4bb15a
  ABI hash: fa8bd72d2a31cdd55feea6fb80dbf726
  export-list hash: 9f1c7d54c2175efe65109a4ab4d74f30
  orphan hash: 9f05db9adc5d8dbe66b0ae68ea554b5c
  flag hash: 26906880275f8331bc9f1651bb2d3f20
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Ansatz BasicTensors EquivarianceEqns
                     EquivarianceMetric Index Integrabillity Ivar Pde Perturbation
                     Symmetrize Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  Ansatz fceab4c3109e895058fcc6810ff83fa5
  exports: 59de763b5ed7159158b40cd802183e31
  getAllInds 4b228fae884f7c62e4c0b34256830676
  getAllIndsLabel 5bf3850834f9ec098cfcaf730be1a416
import  -/  BasicTensors 7da7d9b4111070d0fcb49fe29a885e43
  exports: ee852659668621914165c2baf135a5c3
  delta_9 e75aa262356472dc198559ec7f775732
  flatArea c50387668f8e570ba03b4875269be9e8
  flatAreaMap 45fc69ea838313a3be4b563d5cc8f021
  interI_3 9ebbcc686d6c1e79936e1e48d95b2145
  interJ_2 2f0595593070d5b724a7c4cfafd49d1c
  invEta 654a36e8807dd2df11817151dcb7615d
  invEtaAbs 8c61a1a1828dcde141516155f97f410e
  ivar3M 7fccb231ed4c1eb7a6c6b5ef86484e1d
  triangleMap2 e9d6524b1e8bf49505f134508bfb94ca
  triangleMap3 daa6a0056d907db7646fa3352c855f31
  triangleMapArea a91b35fbeac767f993b935761009c80c
import  -/  EquivarianceEqns 14196e4cc9600cb0a989327decc7a1fb
  exports: 17332bd3a91566b072d1511317ff9a55
  eqn1_1 7266898c421bab0e5fcf02e80fee66c3
  eqn1_1Flat 90008274854544991e51ea033d9729a8
  eqn1_2 b780bf0cf0a524ff01321c1bf815b8aa
  eqn1_3 eb7c72a0611a828b88c83941faccc3be
  eqn1_4 87196d66631068545cecea1ba08f4cd7
  eqn2_2 a6d554ea67216956391d155f4e2fbc9f
  eqn2_2Flat 637cd4e719c7ae1e1b7e860ff44411bf
  eqn2_3 443a7987077f34cf3355188b9175d5ec
  eqn3_3 423d57d576425a2a062a635668d63188
  eqn3_3Flat 2edb310d0e5056ffcd32d42b904a6e15
  mkEqn1Sparse 3e6aa2db07e386eb01b91074f468ad72
  mkEqn2Sparse 08de88a0a5dc3ef369cbded15ab694a8
  mkEqn3Sparse 6d6fd4a2dcad7a755130b17d3c658eab
  mkEqn4Sparse 9276dc81a3506154e7435e57f848e3f0
  mkEqn5Sparse f3c57ed8ae07262036a677030df95542
  mkEqn6Sparse 512b9a62f4b560b9b70c68e248b5d70b
  mkEqnConstSparse bac4327cf53946d31ed0521542939366
  mkEqnConstSparseFlat 5aab3ca1a14086ac683e435f1d1a69a5
  showEqnsFlat 19815f52ade9889b0f554ccaacf824be
import  -/  EquivarianceMetric b0b61bc35827109582b81bc5629308d0
  exports: 70c5689f919659ae1a2e8e7443db1155
  eqn1_1M 2b4f04f8a7d5a2cca540081a1d5505ad
  eqn1_2M 5ac881ac61e8305ad707f6a2fb26a944
  eqn1_3M 08ecb9f50dc48ba31bef02fe529873c0
  eqn2_2M 9533a8bd3d85efea53e2ce9c2267b35e
  eqn2_3M 32c15b18d279ba600913ba9a7a321a9d
  eqn3_3M 03103ce443af4fe3a1c04e188ad1e460
  mkEqn1SparseM fc035248924c172327018ffbbd84e6bc
  mkEqn2SparseM 257e718cf22263b686c27bd9105bf364
  mkEqn3SparseM f23ae2e0a4cf2d133ddeb8664388eed0
  mkEqn4SparseM 1aa9d8fce788a8999bd7fb84646272c9
  mkEqn5SparseM aeed38c88758bf5a5f85a3f274b31d07
  mkEqn6SparseM 46f64c87982cefbe3780949e37795ab8
  mkEqn6SparseMPulled ed65c43fb34f564a5ce5327a206b3680
import  -/  Index 60260ed90a129e1e10b6c5fafcb2ded1
  exports: 02acfc58131cc32506762c89c9bc64b7
  Lind_20 8a3588434be3c9662430693d2d2e332f
  Lind_9 89b0e08dbee85927dc2463ead2b84188
  Linds_3 562700c5f35c258ae2adef3c77ddc1b1
  Uind_19 bb9e43f50d34b9bc0ad289f9375995d1
  Uind_20 f2c1b76a3e7f0dd431510d7cb9f659a1
  Uind_9 ab8f3576b9e9258982a5d77295330a40
  Uinds_3 63ef11ca566ba01817ced09e779f86a0
  mkInd c1470ba25733eac9d3cf9089c612a176
import  -/  Integrabillity 954904924aa665346e1878b672036b5e
  exports: 7c132107d034c1939aa76da027a27d39
  areaMetricMetric1 4a7283266f1421dec14b9f5fd861e394
  areaMetricMetric1intCond d9880e7866b4079fc5abd2d121f5fc6b
  densityEqnArea1 82f85688749566e98c0686f346fb8820
  densityEqnArea2 07e0e0e03f37337fb20420388d2f8869
  densityEqnMetric1 fb018d8ae8b72826b65b6adfce0c67b0
  densityEqnMetric2 7a255a0c9e62b508cb46764abb2dd291
  flatMetricInter 0d7965ec515e9fcec717ed4ff7a66ad6
  flatMetricInterProlong 2bc0834b0d2adf594d017317bae1bc95
  int1Test 5ae31e0ca66a664e143f3414cea7c294
  int1Test2 ef963cdb25bb9f4b055ffe1f46abdb8b
  int1Test3 6c8dee3de883cbad21592b7a4306cb43
  int1Zero deb3291e38302f3b3a14f529bfc3342f
  intCond1 215b3a079db265e8be115dbe94949938
  intCond1RelFac ebced8cd1e4cc44e267dda1a7e1705ab
  intCond1Zero d38eec1b4c6ce97ce82334c0392d2cb8
  intCond1noFactor c36732802aeb73635fecc8dd127d6725
  intCond2 caf977e720d109fe32faccf2ae5c27fa
  intCond2_1 58eaaad365fd8f9e07934608ffb5d017
  intCond2_1Symbol 7a3016a2ca5a8a1e579ab2e012a21b71
  intCond2_1SymbolPure 8497b713e6d68a7c1a33e79808bf9a55
  intCond2_1SymbolRed 1769a55f2c6adff5bdab5191f8c33b63
  intCond2_1SymbolRedWrong ea810ed3118661844ba8ed59b6cac777
  intCond3 56331a3b7571d82aff1f4bc6624854a0
  intCondComp 8d035470cd7473a460b0b83f5ad85435
  intCondCompNoSym 408a4816a48b2955931b6e9852cb7164
  intCondCompZero 284bc6ed1561e43264725e2c3d1cec0f
  intCondOrd2 02aedc5c07028225bb6e889d81704813
  intCondSym 10ce178cf59fee31effdf188bcfc41f0
  intRankDef1 7f90a9c310d018da3f1552aeb38c0182
  intRankDef2 26a3a7c53343d7e6b3ebb85502ff8c5e
  intRankDef3 95314079179b1cc40a799672276c8b22
  intRankDef5 0609e71593927cd556ea8a57b16835c5
  mkEqnSparseAreaM 5041494bad28de566d92935b50c4989c
  mkEqnSparseAreaMintCond 210e601dab688a318fe9a0b3f462a9ac
  mkEqnSparseBlock1Eta 019efd5345d6ab0a082984a3e7194546
  mkEqnSparseCond1 ab666ffee812c459f6a106e3e7380c2b
  mkEqnSparseCond1Zero 71e478ea2f5ccc170cf6448826f3d6ed
  mkEqnSparseCond2 d72b0cb9e804c0c542f317e32f51cdf3
  mkEqnSparseCond3 cdc51e6d9413378bcdf24b432bb3c889
  mkEqnSparseDens1 61503779c1b5af1162adc0df17083f07
  mkEqnSparseDens1Area a001c8e2d760f59e24966e02df8bc1ee
  mkEqnSparseDens2 b22f68ff85cbe8bd0379368e45a3208f
  mkEqnSparseDens2Area 39fb541183794525263ba5d5b5d6fe66
  mkEqnSparseProjector ccc838a26218d76ca6d17298e35750d3
  mkEqnSparseProjector2 873e3757adb9d000a5eb6f8333b6e896
  mkEqnSparseflatMetricInter 0daec6f27360600c463fd5a2a0e674fe
  mkEqnSparseflatMetricInterProlong c57afc2159bbddaacb25f4a5c54ea394
  mkEqnSparseintCond2_1 dd0c0248ea34424c15c9cac99f8855c6
  mkEqnSparseintCond2_1New 6cba58e4512c3822a49f4e9d5480d09c
  mkEqnSparseintCond2_1Symbol 43df950d4b7597094058d7f79f7838a0
  mkEqnSparseintCond2_1SymbolPure 1dbd24a84f2fc06a6819fc14bc904ad0
  mkEqnSparseintCond2_1SymbolRed 3f6f9588c689c80fe0fe183c9c929a66
  mkEqnSparseintCond2_1SymbolRedFull 281f2f1a23f81fc3a57ef0a426b88c71
  mkEqnSparseintCondComp 2e01fc02cd5ba94c54e28aa850a34b36
  mkEqnSparseintCondCompNew bf858b0872e4141fb64470c1be118852
  mkEqnSparseintCondCompNoSym b458a723af974662084d00b9ef116144
  mkEqnSparseintCondOrd2 766e39425e8c3f3450df07ae4f4107d2
  mkEqnSparseintCondSym 20226e398c98fb5e4857b2fb94012e11
  mkEqnSparseintRankDef1 a8b3f7a8ec033e71250891aa413e8586
  mkEqnSparseintRankDef3 87e3a82eed0f3d2f36e137235941eca5
  projectorMatrix 20d718300423ff766bb99023f42eb7ec
  projectorMatrix2 f9b15f38e08f1953318eb026d185fc7d
import  -/  Ivar 59828d84f4f392dde7d157e78b1e20aa
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar 6fb5b1c62e6ccfd9020c45c8471a027a
  addIvar d292753012f6d0425a83cacf61d3f780
  sMultIvar 9041089729d8e9da4cfe3d58c70439ce
import  -/  Pde eae954b97181edb505aaa709b5471e56
  exports: d780795f6c5eb865753089f7498e7db4
  combinePdes a3131fb0e902bb84dba4af01a668b5fc
  mkAllMultInds 3e531cb074fd39791bcea39b2595cd89
  mkPdefromTens 3010bf5a6e20f8633ed9503df0feeecb
  prolongPdeAll 43bab96c96476c7e8ba02fd20ac8d6b3
  prolongPdeAllBlock1 e19caaf3aff30c882d9ba374e4833ad3
  triangleMap 5bea8461d5a5ab5c3c07217eb50efa4d
import  -/  Perturbation 86ade4a35031a7923795650af6c4ad33
  exports: 2151821fea7fdcfba530bb109075c579
  areaEvalMap14 9785e41a4a69641d2e2862c1ae367f7f
  evalFullAns 2d20900e5382b0af4462bec02b4eb33b
  getRepIndsPert 0b0f504db262da94ad7657bee44c2907
  mkPertAns 7de5bb19932085d89984fecca65953b8
  symAnsSetPert 2dc22dcb1b0de462f8027f9a29873628
import  -/  Symmetrize b5f0b4927f9e36a72e9b4cc67721e63e
  exports: c79a0ef965b8f406eb0b9e72ceb58ef0
  getRepInds db9f32ddd6ee6ab813b40760a609a8e4
  mkAns 06d0925877023ff7f5a7034b2c348be4
  symAnsSet 3e28567e813dc1dfde267efbdbdbad70
import  -/  Tensor 9c4499b0a9f488433615a1f4f28a9b18
  exports: fec1157eea535063319b082e204812dd
  Tensor de2cb2f95a4c3ff6ea3ffdde0ef67deb
  tensorContractWith_3 529107206dcaa10693fc48c26137b94b
  tensorContractWith_9 cc576f2038f8bd555f142bcde424c5f8
  tensorProductWith 6e1300f3b6ea8f7dd056901f69230be2
import  -/  tf-random-0.5:System.Random.TF 8abc0839ff798088d7b0fe5da790c9f8
import  -/  tf-random-0.5:System.Random.TF.Gen edab7920943edb50441b167dda441e39
import  -/  tf-random-0.5:System.Random.TF.Init 28db424486cba3a1801495a4cd020295
import  -/  tf-random-0.5:System.Random.TF.Instances 38b1c99a14c0f48d6db9f4a900310278
759c1de5a2f0b46f04556923ce7d2ab4
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (\ (ds :: Index.Ind n Index.Uind_3)
                     (ds1 :: Index.Ind n Index.Uind_3) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_3
                     Index.$fEqUind_3
                     a1
                     b1 } })
                  (Main.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
966913581c3294dcc73365b4450e0b94
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (\ (ds :: Index.Ind n Index.Lind_3)
                     (ds1 :: Index.Ind n Index.Lind_3) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_3
                     Index.$fEqLind_3
                     a1
                     b1 } })
                  (Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
df1cbbd80851edc2f9216b0cd9f8d850
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
755894b120163e1bd21c5fbc6e35ab02
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
990a15f86d84f30bccf37026ccdbd6e9
  $s$fEqSeq ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_3
                     Index.$fEqUind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/= -}
65c4a8fdd0fb51de1fe44ec02d104e21
  $s$fEqSeq1 ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_3
                     Index.$fEqLind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/=1 -}
a26df6b7f47a65286241dedc1d6d45e4
  $s$fEqSeq_$s$fEqSeq_$c/= ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d92ed8225fa2bec073094fb1d9ff370d
  $s$fEqSeq_$s$fEqSeq_$c/=1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5f654ec29bae49586783c4054e0fca64
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Main.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_3
                     Index.$fOrdUind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
cb595ca779cbc4d85a7d2e56bb00ab69
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Main.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_3
                     Index.$fOrdLind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
9aae71e6b0316f0e00c906779052ab70
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_3
                   Index.$fOrdUind_3
                   a2
                   b1 } }) -}
e3619b3f4cbe579c9bfa674745d22474
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_3
                   Index.$fOrdLind_3
                   a2
                   b1 } }) -}
a4a67ca63d1ee58542edbd4261fdc029
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
0896197ec387c7efdb65c07c5401e9a9
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
ad550bf913b001bf6329fd651f65e3ef
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_3
                   Index.$fOrdUind_3
                   a2
                   b1 } }) -}
8d6265440110fda05957b2605878c5e1
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_3
                   Index.$fOrdLind_3
                   a2
                   b1 } }) -}
5dda3af6c1da81a99fa7744f02ef1a05
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
4b34ff5e1487fb6e591e2e0d89c99d7d
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
4d213b19112dc8e6980cd8d34c065c29
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Uind_3
                   Index.$fOrdUind_3
                   a2
                   b1 } }) -}
4563f490a184c0d44f994a74a9def5e6
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Lind_3
                   Index.$fOrdLind_3
                   a2
                   b1 } }) -}
51fe1d4efd33817af1b3f070a86d30eb
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
6e58e00ef28dd5767505410063510d30
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
436df17ce799da3f108e77f680a9dc5d
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
64ec8319772d0d4ca98cde75ab4b593a
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
f6468afa3266b585b68e57f94ae08caa
  $s$fOrdSeq ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  Main.$s$fEqSeq
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
4ee755ba959b50133b55cb91b901444a
  $s$fOrdSeq1 ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  Main.$s$fEqSeq1
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
ebf3e8657610096185ed369e45f88b5b
  $s$fOrdSeq_$cmax ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
f147f3b72e9202f0d046ccbad72a3c78
  $s$fOrdSeq_$cmax1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
f2edbcc3b938c555e74ebe69edcf2f41
  $s$fOrdSeq_$cmin ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
ddb2649e8ebe960d2dc14286b6cc0a23
  $s$fOrdSeq_$cmin1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
bc5cb79c1852dfa635f5f38b270618bc
  $sfromList ::
    [(Index.Ind 4 Index.Uind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Index.Ind 4 Index.Uind_3, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Index.UnsafemkInd ipv ->
                           Data.Map.Internal.Bin
                             @ (Index.Ind 4 Index.Uind_3)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a)
                             (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { Index.UnsafemkInd a2 ->
                           case ky of wild5 { Index.UnsafemkInd b1 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c<
                                  @ Index.Uind_3
                                  Index.$fOrdUind_3
                                  a2
                                  b1 of wild6 {
                             GHC.Types.False
                             -> Main.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 4 Index.Uind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a))
                                  wild2
                             GHC.Types.True
                             -> Main.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 4 Index.Uind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Uind_3) @ a))
                                  wild2 } } } } } } }) -}
8c9c24dd30227d91768706d330a635b9
  $sfromList1 ::
    Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
    -> [(Index.Ind 4 Index.Uind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
6f1d474e546b4a0199ac49624596e059
  $sfromList10 ::
    [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Lind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Lind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Lind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Lind_3
                                  Index.$fOrdLind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go4
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList11
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
72c338eee4a3716e56ccf7c332a3c19b
  $sfromList11 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bef133f745c2490636b980df572819f3
  $sfromList2 ::
    [(Index.Ind 2 Index.Uind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Index.Ind 2 Index.Uind_3, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Index.UnsafemkInd ipv ->
                           Data.Map.Internal.Bin
                             @ (Index.Ind 2 Index.Uind_3)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a)
                             (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { Index.UnsafemkInd a2 ->
                           case ky of wild5 { Index.UnsafemkInd b1 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c<
                                  @ Index.Uind_3
                                  Index.$fOrdUind_3
                                  a2
                                  b1 of wild6 {
                             GHC.Types.False
                             -> Main.$sfromList3
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 2 Index.Uind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a))
                                  wild2
                             GHC.Types.True
                             -> Main.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 2 Index.Uind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Uind_3) @ a))
                                  wild2 } } } } } } }) -}
5b38ff5241f4417a2ab720e8e97e4608
  $sfromList3 ::
    Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
    -> [(Index.Ind 2 Index.Uind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
edd0345e3316544955e6a2e1c4988d33
  $sfromList4 ::
    [(Index.Ind 4 Index.Lind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Index.Ind 4 Index.Lind_3, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Index.UnsafemkInd ipv ->
                           Data.Map.Internal.Bin
                             @ (Index.Ind 4 Index.Lind_3)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a)
                             (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { Index.UnsafemkInd a2 ->
                           case ky of wild5 { Index.UnsafemkInd b1 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c<
                                  @ Index.Lind_3
                                  Index.$fOrdLind_3
                                  a2
                                  b1 of wild6 {
                             GHC.Types.False
                             -> Main.$sfromList5
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 4 Index.Lind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a))
                                  wild2
                             GHC.Types.True
                             -> Main.$wpoly_go2
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 4 Index.Lind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 4 Index.Lind_3) @ a))
                                  wild2 } } } } } } }) -}
d6d611c34438eca0d6cef31eaac3b22a
  $sfromList5 ::
    Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
    -> [(Index.Ind 4 Index.Lind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
661cf397f84e069874bdf737e9e9bd92
  $sfromList6 ::
    [(Index.Ind 2 Index.Lind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Index.Ind 2 Index.Lind_3, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Index.UnsafemkInd ipv ->
                           Data.Map.Internal.Bin
                             @ (Index.Ind 2 Index.Lind_3)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a)
                             (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { Index.UnsafemkInd a2 ->
                           case ky of wild5 { Index.UnsafemkInd b1 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c<
                                  @ Index.Lind_3
                                  Index.$fOrdLind_3
                                  a2
                                  b1 of wild6 {
                             GHC.Types.False
                             -> Main.$sfromList7
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 2 Index.Lind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a))
                                  wild2
                             GHC.Types.True
                             -> Main.$wpoly_go3
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Index.Ind 2 Index.Lind_3)
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a)
                                     (Data.Map.Internal.Tip @ (Index.Ind 2 Index.Lind_3) @ a))
                                  wild2 } } } } } } }) -}
f8f4a409fec462b53af4fb93439b0622
  $sfromList7 ::
    Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
    -> [(Index.Ind 2 Index.Lind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
76e4352f5b10d682a5b1702e9c2bb04a
  $sfromList8 ::
    [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Uind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Uind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Uind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Uind_3
                                  Index.$fOrdUind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList9
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
f55407554e96341f9d67add77b008465
  $sfromList9 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
5f1c2a5a93e44c080e5d92c8437bafb6
  $sinsert_go8 ::
    GHC.Classes.Ord k1 =>
    k1
    -> a1 -> Data.Map.Internal.Map k1 a1 -> Data.Map.Internal.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U><S,1*U> -}
c0763cc33331f0246b046c6947ecf51b
  $smapKeys ::
    (k1 -> Index.Ind 4 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Main.$sfromList
                   @ a
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Uind_3, a)) eta)) -}
9c8177b5e29333877b3b92570399fbf0
  $smapKeys1 ::
    (k1 -> Index.Ind 2 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Main.$sfromList2
                   @ a
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Uind_3, a)) eta)) -}
5daa34917d23a0d5919320970ec67ab8
  $smapKeys2 ::
    (k1 -> Index.Ind 4 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Main.$sfromList4
                   @ a
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Lind_3, a)) eta)) -}
7f375095800e896f7ecb2b767e16feee
  $smapKeys3 ::
    (k1 -> Index.Ind 2 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Main.$sfromList6
                   @ a
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Lind_3, a)) eta)) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
d355c3759d41aa0da1702bf5d396248c
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
    -> [(Index.Ind 2 Index.Uind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
843ba28ac8be3f95818baeef66f94df4
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
    -> [(Index.Ind 4 Index.Uind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
e9e57703947df6f5a0816816cd133e1a
  $wpoly_go2 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
    -> [(Index.Ind 4 Index.Lind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
6b4087e9d486813eabceca295704e4bb
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
    -> [(Index.Ind 2 Index.Lind_3, a)]
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
7cac206639cdfb8748bf82d57e01333b
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
0c470b15671b8aef13ad7828a0573e8a
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
6de77d0a894fef9e92b032da22866095
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ddd87956774cb9ac2ab5cae30519fa26
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.TF.Init.theTFGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.TF.Gen.TFGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.TF.Gen.TFGen
                        @ (System.Random.TF.Gen.TFGen, System.Random.TF.Gen.TFGen)
                        @ System.Random.TF.Gen.TFGen
                        r#
                        System.Random.TF.Gen.tfGenSplit
                        s of ds1 { (#,#) ipv ipv1 ->
                 System.IO.appendFile2
                   @ ()
                   Main.main21
                   GHC.IO.IOMode.WriteMode
                   Main.main2
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   ipv } }) -}
3bfdef216afa20a35d529996446bc4e0
  main10 ::
    Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) Index.Uind_9
  {- Unfolding: (Main.$smapKeys3
                   @ (Data.Sequence.Internal.Seq Index.Lind_3)
                   @ Index.Uind_9
                   Main.main12
                   (Main.$sfromList10
                      @ Index.Uind_9
                      (GHC.List.zip
                         @ (Data.Sequence.Internal.Seq Index.Lind_3)
                         @ Index.Uind_9
                         (BasicTensors.$wsymIndList
                            @ Index.Lind_3
                            Index.$fEnumLind_3
                            2#
                            BasicTensors.flatArea3)
                         Main.main11))) -}
078777ee873580a84726228ebbc2f51d
  main11 :: [Index.Uind_9]
  {- Unfolding: (case GHC.Prim.dataToTag#
                        @ Index.Uind_9
                        (Index.$w$ctoEnum7 0#) of a# { DEFAULT ->
                 case GHC.Prim.># a# 9# of lwild {
                   DEFAULT -> Index.$fEnumUind_9_go a#
                   1# -> GHC.Types.[] @ Index.Uind_9 } }) -}
e71fb2193043fccf06935e1cc55d91e7
  main12 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 2 Index.Lind_3
  {- Unfolding: (Index.mkInd @ 2 @ Index.Lind_3 Main.main8) -}
ef3810afdb0eeb98bb196dbbea684db6
  main13 ::
    Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) Index.Lind_20
  {- Unfolding: (Main.$smapKeys
                   @ (Data.Sequence.Internal.Seq Index.Uind_3)
                   @ Index.Lind_20
                   Main.main15
                   (Main.$sfromList8
                      @ Index.Lind_20
                      (GHC.List.zip
                         @ (Data.Sequence.Internal.Seq Index.Uind_3)
                         @ Index.Lind_20
                         (BasicTensors.$wareaDofList
                            @ Index.Uind_3
                            Index.$fEnumUind_3
                            Index.$fOrdUind_3)
                         Main.main14))) -}
167f727201e722a9cb11aa4446734ca5
  main14 :: [Index.Lind_20]
  {- Unfolding: (case GHC.Prim.dataToTag#
                        @ Index.Lind_20
                        (Index.$w$ctoEnum1 0#) of a# { DEFAULT ->
                 case GHC.Prim.># a# 20# of lwild {
                   DEFAULT -> Index.$fEnumLind_20_go a#
                   1# -> GHC.Types.[] @ Index.Lind_20 } }) -}
5dfebd4b0b871540bd3af77e7e03b54e
  main15 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 4 Index.Uind_3
  {- Unfolding: (Index.mkInd @ 4 @ Index.Uind_3 Main.main16) -}
d6fadb4700e2a3bf0158074fefc83127
  main16 :: GHC.TypeNats.KnownNat 4
  {- Unfolding: (case Main.main17 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT
                        -> (GHC.Natural.underflowError @ GHC.Natural.Natural)
                             `cast`
                           (Sym (GHC.TypeNats.N:SNat[0]
                                     <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                        1#
                        -> (GHC.Natural.NatS# (GHC.Prim.int2Word# i#))
                             `cast`
                           (Sym (GHC.TypeNats.N:SNat[0]
                                     <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT
                             -> (GHC.Natural.NatJ# dt)
                                  `cast`
                                (Sym (GHC.TypeNats.N:SNat[0]
                                          <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)
                             0#
                             -> (GHC.Natural.underflowError @ GHC.Natural.Natural)
                                  `cast`
                                (Sym (GHC.TypeNats.N:SNat[0]
                                          <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N) }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           (GHC.Natural.NatS# wild2)
                             `cast`
                           (Sym (GHC.TypeNats.N:SNat[0]
                                     <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N) } }
                   GHC.Integer.Type.Jn# ipv
                   -> (GHC.Natural.underflowError @ GHC.Natural.Natural)
                        `cast`
                      (Sym (GHC.TypeNats.N:SNat[0]
                                <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N) }) -}
d8c4a4f9e241319773086fe505aac2e9
  main17 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
2b3141bf1ad8e0bbec41a694372c4a93
  main18 ::
    Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) Index.Uind_20
  {- Unfolding: (Main.$smapKeys2
                   @ (Data.Sequence.Internal.Seq Index.Lind_3)
                   @ Index.Uind_20
                   Main.main20
                   (Main.$sfromList10
                      @ Index.Uind_20
                      (GHC.List.zip
                         @ (Data.Sequence.Internal.Seq Index.Lind_3)
                         @ Index.Uind_20
                         (BasicTensors.$wareaDofList
                            @ Index.Lind_3
                            Index.$fEnumLind_3
                            Index.$fOrdLind_3)
                         Main.main19))) -}
db56d3ef2bfa58846f1eb95658613431
  main19 :: [Index.Uind_20]
  {- Unfolding: (case GHC.Prim.dataToTag#
                        @ Index.Uind_20
                        (Index.$w$ctoEnum5 0#) of a# { DEFAULT ->
                 case GHC.Prim.># a# 20# of lwild {
                   DEFAULT -> Index.$fEnumUind_20_go a#
                   1# -> GHC.Types.[] @ Index.Uind_20 } }) -}
0219572baa0c518a50518b3b4eb62156
  main2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2 hdl Main.main3 GHC.Types.False) -}
9ae8ea0cb62ddd972e20ae40961f6234
  main20 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 4 Index.Lind_3
  {- Unfolding: (Index.mkInd @ 4 @ Index.Lind_3 Main.main16) -}
c1d93352a32f920a04138943214ae94a
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
d7119a49c2b2a0e9cd6724da76edc876
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/TobiasReinhart/Desktop/HaskellTensor/HaskellTensor2Data/intCondCompNoSym_10_1_19.txt"#) -}
7eea243eb1a46b89318bc5ed75214c3d
  main23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
773fe525057b48143f10eeba878b97ee
  main3 :: GHC.Base.String
  {- Unfolding: (EquivarianceEqns.showEqnsFlat Main.main4) -}
396dbb114f747d447dd28601109e2bcc
  main4 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Unfolding: (case Integrabillity.$wintCondCompNoSym
                        Main.main18
                        Main.main13
                        Main.main10
                        Main.main5 of ww { Unit# ww1 ->
                 Integrabillity.$sfromList
                   @ (GHC.Real.Ratio GHC.Integer.Type.Integer)
                   (Integrabillity.mkEqnSparseintCondCompNoSym_go13
                      (GHC.Types.[]
                         @ ((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational))
                      ww1) }) -}
ebb9c90c53b94ff09a41ca31f66209be
  main5 ::
    Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) Index.Lind_9
  {- Unfolding: (Main.$smapKeys1
                   @ (Data.Sequence.Internal.Seq Index.Uind_3)
                   @ Index.Lind_9
                   Main.main7
                   (Main.$sfromList8
                      @ Index.Lind_9
                      (GHC.List.zip
                         @ (Data.Sequence.Internal.Seq Index.Uind_3)
                         @ Index.Lind_9
                         (BasicTensors.$wsymIndList
                            @ Index.Uind_3
                            Index.$fEnumUind_3
                            2#
                            BasicTensors.flatArea3)
                         Main.main6))) -}
f2c8b5709c5d2a70579cc7d4dedcfc5a
  main6 :: [Index.Lind_9]
  {- Unfolding: (case GHC.Prim.dataToTag#
                        @ Index.Lind_9
                        (Index.$w$ctoEnum3 0#) of a# { DEFAULT ->
                 case GHC.Prim.># a# 9# of lwild {
                   DEFAULT -> Index.$fEnumLind_9_go a#
                   1# -> GHC.Types.[] @ Index.Lind_9 } }) -}
159721d8da1ca2341ed4b15a4f65c2e7
  main7 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 2 Index.Uind_3
  {- Unfolding: (Index.mkInd @ 2 @ Index.Uind_3 Main.main8) -}
772fe0164a6b2b30122cc20bc4f4960c
  main8 :: GHC.TypeNats.KnownNat 2
  {- Unfolding: (case Main.main9 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT
                        -> (GHC.Natural.underflowError @ GHC.Natural.Natural)
                             `cast`
                           (Sym (GHC.TypeNats.N:SNat[0]
                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                        1#
                        -> (GHC.Natural.NatS# (GHC.Prim.int2Word# i#))
                             `cast`
                           (Sym (GHC.TypeNats.N:SNat[0]
                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT
                             -> (GHC.Natural.NatJ# dt)
                                  `cast`
                                (Sym (GHC.TypeNats.N:SNat[0]
                                          <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                             0#
                             -> (GHC.Natural.underflowError @ GHC.Natural.Natural)
                                  `cast`
                                (Sym (GHC.TypeNats.N:SNat[0]
                                          <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N) }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           (GHC.Natural.NatS# wild2)
                             `cast`
                           (Sym (GHC.TypeNats.N:SNat[0]
                                     <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N) } }
                   GHC.Integer.Type.Jn# ipv
                   -> (GHC.Natural.underflowError @ GHC.Natural.Natural)
                        `cast`
                      (Sym (GHC.TypeNats.N:SNat[0]
                                <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N) }) -}
9711e7d1083c62fcd58621528657b951
  main9 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
"SPEC/Main $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Main.$s$fEqInd1 @ n
"SPEC/Main $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Main.$s$fEqInd @ n
"SPEC/Main $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Main $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Main $fEqSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Lind_3 v = Main.$s$fEqSeq1
"SPEC/Main $fEqSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Uind_3 v = Main.$s$fEqSeq
"SPEC/Main $fEqSeq_$c/= @ Lind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Lind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=1
"SPEC/Main $fEqSeq_$c/= @ Uind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Uind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=
"SPEC/Main $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Main.$s$fOrdInd1 @ n
"SPEC/Main $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Main.$s$fOrdInd @ n
"SPEC/Main $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<1 @ n
"SPEC/Main $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c< @ n
"SPEC/Main $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<=1 @ n
"SPEC/Main $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c<= @ n
"SPEC/Main $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>1 @ n
"SPEC/Main $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c> @ n
"SPEC/Main $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>=1 @ n
"SPEC/Main $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c>= @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare1 @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare @ n
"SPEC/Main $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmax1 @ n
"SPEC/Main $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmax @ n
"SPEC/Main $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmin1 @ n
"SPEC/Main $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmin @ n
"SPEC/Main $fOrdSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Lind_3 v = Main.$s$fOrdSeq1
"SPEC/Main $fOrdSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Uind_3 v = Main.$s$fOrdSeq
"SPEC/Main $fOrdSeq_$cmax @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax1
"SPEC/Main $fOrdSeq_$cmax @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax
"SPEC/Main $fOrdSeq_$cmin @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin1
"SPEC/Main $fOrdSeq_$cmin @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin
"SPEC/Main fromList @ (Ind 2 Lind_3) _" [orphan] forall @ a
                                                        ($dOrd :: GHC.Classes.Ord
                                                                    (Index.Ind 2 Index.Lind_3))
  Data.Map.Internal.fromList @ (Index.Ind 2 Index.Lind_3) @ a $dOrd
  = Main.$sfromList6 @ a
"SPEC/Main fromList @ (Ind 2 Uind_3) _" [orphan] forall @ a
                                                        ($dOrd :: GHC.Classes.Ord
                                                                    (Index.Ind 2 Index.Uind_3))
  Data.Map.Internal.fromList @ (Index.Ind 2 Index.Uind_3) @ a $dOrd
  = Main.$sfromList2 @ a
"SPEC/Main fromList @ (Ind 4 Lind_3) _" [orphan] forall @ a
                                                        ($dOrd :: GHC.Classes.Ord
                                                                    (Index.Ind 4 Index.Lind_3))
  Data.Map.Internal.fromList @ (Index.Ind 4 Index.Lind_3) @ a $dOrd
  = Main.$sfromList4 @ a
"SPEC/Main fromList @ (Ind 4 Uind_3) _" [orphan] forall @ a
                                                        ($dOrd :: GHC.Classes.Ord
                                                                    (Index.Ind 4 Index.Uind_3))
  Data.Map.Internal.fromList @ (Index.Ind 4 Index.Uind_3) @ a $dOrd
  = Main.$sfromList @ a
"SPEC/Main fromList @ (Seq Lind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Lind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Lind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList10 @ a
"SPEC/Main fromList @ (Seq Uind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Uind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Uind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList8 @ a
"SPEC/Main mapKeys @ (Ind 2 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys3 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 2 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys1 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys2 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys @ k1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

