
==================== FINAL INTERFACE ====================
2019-01-30 13:12:02.817712 UTC

interface main:Main [hpc] 8043
  interface hash: 9f0cd454f49b0a6f77ff5ddcd27dd09e
  ABI hash: f564a4b8d02747b18e970c5410f941a0
  export-list hash: 81adccc0e3b972248c2f887cd420bed7
  orphan hash: 7644bfb62686b5e48794e6093ae6d851
  flag hash: 8371069d9a3c93df4564b1c967507c8a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Ansatz AnsatzEqns2 BasicTensors
                     EquivarianceEqns EquivarianceMetric Index Integrabillity Ivar
                     Order1Int Order2Int Order3Int Pde Perturbation PerturbationTree2
                     Symmetrize Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  containers-0.5.11.0:Data.Tree 334e5590b70599cff00c9af57a2f6140
import  -/  Ansatz f73908cbebb99b64870766cefd70bd60
  exports: d003aa5bf1bb4010f41a5bd7e042ed4f
  getAllInds f97716c1ab6421429a03cd0ddc22a1c2
  getAllIndsLabel e03e808361151ff16b7e6f10a1ca594c
import  -/  AnsatzEqns2 15cee42964c8d3c43a41ae28a827fc0c
  exports: d19d3a0cdafa83117ca972888026a06f
  ansatzAB e3b81441b80dd59efd12c5849468e5d8
  ansatzABb a858ed7734d0bf95c40d2a46d373f8f2
  ansatzAIB 6a3d08bc234689d4c9fdf32a9dce89bb
  ansatzAIBJ e469dccddb135660d0be14ffc4e7187c
  ansatzAaBI be421aead02d88abc8049398d949b9f2
  ansatzAaBb c2c2926a0700822b262515d3019fabb7
  intCond2NoSym c402cf7c1bb0af40b84c61563b98f900
  intCondfirstOrder 4c201ab0aa36c9426012c7428d8c74cd
  mkEqnSparseAnsatzAB 739c5227036ab6051945d247dd9c8acb
  mkEqnSparseAnsatzABSolo a7111943d03dac2f3b06935648efa2d9
  mkEqnSparseAnsatzABb bce9b509e183a316f07886a59a112dd9
  mkEqnSparseAnsatzAIB ec66f1fa6f20b6ebd50870584c9c1999
  mkEqnSparseAnsatzAIBJ 1a3748ddd4cc743c5d45841d2c64720d
  mkEqnSparseAnsatzAaBI c5f652358fe942c10e6c0c762fcc7857
  mkEqnSparseAnsatzAaBb bfdd0462de3bbd68afb32afc77b5c6e8
  mkEqnSparseRemoveAIB 7046e5903a35d89441667a7ac59810be
  mkEqnSparsefirstOrder 61b46fc5ddae77020d47ac6aec070db4
  mkEqnSparseintCond2NoSym e42d8adbbe4d7ac07603a88b46d87771
  removeAIB ace9b5b180173553646cc35dc1d3cf94
import  -/  BasicTensors 10d18b2ce638ae10d6a88a26bebb82b9
  exports: 7c8d1234970990518faafb72d526964b
  delta_9 740447499625393bd14a76aab4e324d9
  flatArea 48543a7405251d520517921354f55ae2
  flatAreaMap 49c88e820e95b1d7306ba557b23e2aa5
  interI_3 6aff8eaec247a39feb7bdd8518fc95d2
  interJ_2 fd26ec1b7ffe0f24cd918600521bcd30
  invEta 3bf1d6bd9509f7bed3ec3eb59c246f11
  invEtaAbs b0f94ee186942e9d7dc4214f64087870
  ivar3M 5bb9c83ceb6a0668c4fa03b0b68fe895
  triangleMap2 dc5ef4ca5df7d6eb1e4ca257796254f2
  triangleMap3 869b8774a8397303049bab37d318f1b4
  triangleMapArea 0b89df38230afa775e6a93997322d5a2
import  -/  EquivarianceEqns dd96df3600b28dc762b4aebca6600b59
  exports: 753233c47284511068d96a6925317f46
  eqn1_1 611b22149286033a3866b45fc64264d2
  eqn1_1Flat 9d42472bd0422a2fdb153abe5b61c279
  eqn1_2 a28680349054c4adf27b381b5ee1d305
  eqn1_3 d12500664672f7adc773925632719d7c
  eqn1_4 0f01ed42e0a96695663c5836ce8c3418
  eqn2_2 c45dd578c8f272e05c2e34b772fd287e
  eqn2_2Flat 47159aa2101f474d4da9ee650eaae2ff
  eqn2_3 d4fe485fd25a0250626fb676511e889b
  eqn3_3 d3f5c31221e50b40408de95018b2d91b
  eqn3_3Flat 94d26c0f8de60c3f384512deef85e91d
  mkEqn1Sparse bc86720b2063a7c731043eaf431f31ea
  mkEqn2Sparse 93c04341b30157ae49892a97de30bf93
  mkEqn3Sparse b045a4c3c504f073498b5e68073eeb22
  mkEqn4Sparse 6583d154a589a43a86e5aeb06d60428c
  mkEqn5Sparse 6045e06e60119a04a4c693f4ed57aff2
  mkEqn6Sparse de56e299c6ffc2eedf48b08d5ad06184
  mkEqnConstSparse 8cf4d827776fae0546b1fac053c56d7f
  mkEqnConstSparseFlat f2eba49c53303d26fb66cd66d522c8f2
import  -/  EquivarianceMetric ab904405ef94a25c9d7fe6e77ef1d532
  exports: 2b056822118b67df8be19594354d4341
  eqn1_1M a94e33c8427217608cc7e1894bda4187
  eqn1_2M 4b05136a9d678054f4fbb0cb5f7e67d5
  eqn1_3M 205bdfae9fadd91beef703fbab981d58
  eqn2_2M dcd5fe35d6d6bb022f3c3736ed85d2ed
  eqn2_3M 1a898c7c35ecd6e60a81e5737c8a762d
  eqn3_3M 75d5b2e80911feb76b1c797e1e8e4b96
  mkEqn1SparseM 43ed701f60cae5e012783e7f4908e989
  mkEqn2SparseM bb27f69af2f8b8380292bff572e6462d
  mkEqn3SparseM 1f155bf3704257066057a2227db2a0ea
  mkEqn4SparseM ee0f4c3785616c5c73df25ca47f8f7cb
  mkEqn5SparseM 5c44b852d1d121b1ddc571f348a9c322
  mkEqn6SparseM 52bbced1218b89f69d7f78e5c554064e
  mkEqn6SparseMPulled 4621e5764f1d5ece4fde0aa26d9698f0
import  -/  Index 916735ab1c970e74aca1c88789549127
  exports: 02acfc58131cc32506762c89c9bc64b7
  Lind_20 5cac02519d44dca311f6e8704af0dab2
  Lind_9 73aca7325a4de01fdae5b6543362ad8f
  Linds_3 c9b2d4e9731309292bed9f6cde6d0fbe
  Uind_19 6d17fb706b006cde8f4dcf01b5f488fc
  Uind_20 15d31188056502dc8c3e5921dd9b7dea
  Uind_9 f9351646ec069dfd583f698aca259967
  Uinds_3 fbf4f6c082947ccf71014b6f1ec9eea9
  mkInd 787182ae68a857c28d39dd96e88fa190
import  -/  Integrabillity bde7629f5630a34a5392418be394e310
  exports: d4f8116907b124ed0ac26b53ce21db97
  areaMetricMetric1 7fb92c6108ba7c6960fc5105951a85a5
  areaMetricMetric1intCond 7619fc74382ebd9efd1970569e6912bd
  densityEqnArea1 4bc82f206e137943c7e7833ed2d584d4
  densityEqnArea2 25ab85d6e3f49fdc51b01805eec2b786
  densityEqnMetric1 6ead93db45bfb1bed87712d21337ef6c
  densityEqnMetric2 544178b590c9afbfaccf2f3d95aa79b5
  flatMetricInter a62a774f579e8d7358657e415d919553
  flatMetricInterProlong ee2eddcae112e42d67de8ba84b799704
  int1Test abe67b25db59848921fb80c711a5f520
  int1Test2 b73f4ec4c90aa745ccb77906d8eaf107
  int1Test3 7ca2a4972d8f81a9c975643203b61c16
  int1Zero 44a2a5180c45add3365f5dbd83706a85
  intCond1 ce3ade1e3fefaf15125889d4e387efc1
  intCond1RelFac ef8c8799edde960fc2771502ae4e3535
  intCond1Zero e7e5b85cb522735df62fabca1eab6c7a
  intCond1noFactor 8f409e3135a6005aa48cc46e0240485a
  intCond2 b5153d0a39581fe4ca39140f05b3c2b4
  intCond2_1 7e3d2fbdf61d6a377b294ef2f0feff26
  intCond2_1Symbol 871ae9a4b82261f8d63dac5941d94491
  intCond2_1SymbolPure a685f46bc3bce692ce387fe3a886c65d
  intCond2_1SymbolRed c6922d9a02c4208912b5cdab2fc89976
  intCond2_1SymbolRedWrong 32000e5a64029656265fd133e72270bf
  intCond3 777a41f69feda34505f614ec3f279a84
  intCondComp c6a0ca4b7957ef6521d43c45b01c2f1c
  intCondCompNoSym a32e90d1184f8a40dfdb8eb5c3d6a625
  intCondCompZero c75a17694f1f47fbfc3c73865a30b4e0
  intCondOrd2 046dd770a3110cd8d4d87ae2b8b472d6
  intCondSym 04a4e2a569a15376674a45fe9338f127
  intRankDef1 901032c40db6aab83099354f62c58e22
  intRankDef2 c4cf5e0048f7c52b537c4f63597f3fcd
  intRankDef3 ae9115834330a69358fdbe6832390fbb
  intRankDef5 2d09b32e896aacd370064fa63aa983db
  inter4Factor e2369f1e9efda3c66a780599870f500d
  inter4noFactor e3f7d4cc752bd53716e719cbe42b6aae
  inter6Factor 04e7bede78ae52d328da9f987d179f27
  inter6noFactor 271d5660a939ef45f0f67bd83e7418f7
  mkEqnSparseAreaM b87591db9ccf9eb1154cc60826a6647c
  mkEqnSparseAreaMintCond 5a8311792098a4f77cba5ca61539391f
  mkEqnSparseBlock1Eta 345f42e91a9deaddb0c177b867747d57
  mkEqnSparseCond1 d315ddc0c6c5ea8581a1e2644164f1d0
  mkEqnSparseCond1Zero 96793655ca2be5e318fb7e8922c2b636
  mkEqnSparseCond2 7e943f6ade712966c064dd5c2e11d065
  mkEqnSparseCond3 ea621ebac177fbc5322e0208321561a8
  mkEqnSparseDens1 1eccd5dda40b87393c5523d90d362f0d
  mkEqnSparseDens1Area 97a39d01ef0d8f8e13c9138392af7ca5
  mkEqnSparseDens2 6ceadecf1f5dcfdba0eab220e2e1b917
  mkEqnSparseDens2Area 832b3604857ad631097847844cc29bb7
  mkEqnSparseProjector efa216d1d4661afaebb211102caa5997
  mkEqnSparseProjector2 31fa1933035de550313a537d5b1e17c9
  mkEqnSparseflatMetricInter 242fdd4fc5087acde484ac4408880ff2
  mkEqnSparseflatMetricInterProlong c74f05c4e8447fdd69c2d11ec3617d85
  mkEqnSparseintCond2_1 34d90a3cd8b9bab59b6c99b066fa795a
  mkEqnSparseintCond2_1New 5fc762133f89c19054797ae5ac942d14
  mkEqnSparseintCond2_1Symbol bb4ee56d1b40b4dae32a53017c473644
  mkEqnSparseintCond2_1SymbolPure a88c1993bc7636d9270256fc32c3a32c
  mkEqnSparseintCond2_1SymbolRed 8e530625acff710a5d66175755f4b841
  mkEqnSparseintCond2_1SymbolRedFull d7f920e9643064d284ee8a8755126978
  mkEqnSparseintCondComp 1bffb307dc575985d38692d641344586
  mkEqnSparseintCondCompNew 11bd77aecd9e6941fddad4962d196d94
  mkEqnSparseintCondCompNoSym aba05f07b09138a2a9ef8a478197b7ca
  mkEqnSparseintCondOrd2 10873f7e81bae4b4ce07323b17f2ddf7
  mkEqnSparseintCondSym ef81835a2ced7bbe818157a42b417d45
  mkEqnSparseintRankDef1 500626ed1a746ac8431afde06e390f21
  mkEqnSparseintRankDef3 0641d33f4994dacfd7c647270d12716a
  mkEqnSparseinter6Mat 8d01512402bf783dbc9681acd268eaae
  mkEqnSparseinterMat 391962208f99f0b487f9502de03cb25d
  mkEqnSparseprolongation1AI_ACK 984b50f294c731d80e84f6a237aa8022
  mkEqnSparseprolongation1AI_AI 0534bd1547ecdb869f05b2a88af2717b
  mkEqnSparseprolongation2AaBb bebc1d6433cf187b061708d8c715b898
  mkEqnSparseprolongation2AaBbC 43d8622a11503c6691fe6daf670d165a
  projectorMatrix 356df79faf6c4f4900930c0bbe2a4504
  projectorMatrix2 e978c82f16b419252aae6db57ce2943f
  prolongation1AI_ACK 01123e212cb0c2026c816b4c80bafbca
  prolongation1AI_AI 10085361cdfc0758dda0b8b508757d63
  prolongation2AaBb c310987466ff86510b5e678b7a57b088
  prolongation2AaBbC 1e6d07f8aa1aa62d0a12e8fbc9b3ac7c
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar d9681c195fa242e7d5d49d12895d614f
  addIvar 8fbb3c436aba9d6a12321dce4d5ee059
  sMultIvar eadd42e5f8b61bf5318f3ec797dffdba
import  -/  Order1Int 96a55dc4bf5906051ebe39ac7ee65b3e
  exports: 3156458f202b8180fa4d12d06df87b30
  ansatzA 74076cbe5ba3af3a731d1c2984689a9c
  ansatzAI3 6b2745f52550f1402046c7287d788962
  ansatzAa 030bceb994a16de3380836a43c274f8b
  int1A 34845a18df1e4d5a8b1c71e4d60a2b99
  mkEqnSparseAnsatzA 479c4683f29834ec3403a47e64cd40c1
  mkEqnSparseAnsatzAI c19a27430515cf9f7ad7d8ca968e54e4
  mkEqnSparseAnsatzAa 818371a18d106a9b4aa4374bff846a82
  mkEqnSparseint1A 95ce13febb2f65bf6a08756331cffe9c
import  -/  Order2Int 5dba99e4165f7c19d738ddc3862bb08c
  exports: 4f623a5f2457420a1860ede7998dab4e
  ansatzAB2 82babcdd78fd39f7e666f315660d404a
  ansatzABb2 c450cfd0e7ebc5a0c3c182d4d5f758d3
  ansatzAI2 977336cf6b32feab98e8a99af58ccf46
  ansatzAIB2 b0395299889fd81c058af67a93a97553
  intAB1 a8cd8b07714afc008e85682335393814
  intAB2 e69a1ba041b47e3b89c956cdf835bfd5
  intAI 55642fb815851d0b527977d07e141e19
  intAIB cacac4f05c3001def8b5c3197510a2fb
  intAIBsym 7a55ba68904223dfdaca0e548041e9c4
  intAIBsymRed 0e4cdc75ffd36bafa0bae2839f81315d
  intAIBsymZero c21a226aed8fe970226f8304fc7688ba
  mkEqnSparseAnsatzAB2 3f191c8f0152163cdef459b993e6ddf5
  mkEqnSparseAnsatzABb2 f3b5bbb1b851ec90b071f0835be0976c
  mkEqnSparseAnsatzAI2 15a0e66b5a89a444548e0eadcefd157b
  mkEqnSparseAnsatzAIB2 d27c2ac5ebacf9b0028751c559e5c493
  mkEqnSparseIntAB 4d35b270191f99d81c9c765573f6c150
  mkEqnSparseIntABTrian f41e397d1f3c0526f5d2a435114a9c77
  mkEqnSparseIntAI 32c88823fee0c2351cfe9c73c47b2ad6
  mkEqnSparseIntAIB 9f16bfda756c0cd33ae2349e06baeeda
  mkEqnSparseIntAIBsym 6937088a03527cca58d73c5b0573275b
import  -/  Order3Int 99519e32bb0751ca5b13c302191e522f
  exports: 81fa4163c0bc1061b90598d78c984378
  ansatzABC2 131a59761cdfa11410c359bbefcf45a6
  ansatzAIBC 58e4315ed01ed25d70feaaf77ad46952
  ansatzAIBbC 03e22d8d7b159a3514f52d15c37f030c
  ansatzAaBC 8734e8575fe1863ed3ed4d6224dd575a
  ansatzAaBbC d3f9b52797849cf469fe4efa52bee364
  intABC 6b5875b75c6fbe9bd5f87f8e20dd1f0f
  intAIBC 6d8b02ab548162fa2250d814196e9c64
  intAIBJC 65bc95088b61e28712adb5e0efa783d0
  intAaBbC2 599554fd6340c40b38627d33cfe3f1be
  mkEqnSparseAnsatzABC2 a6886dfdc64ad87b24e38818f0814a66
  mkEqnSparseAnsatzAIBC 9594363610da47143350cdea9e4452bc
  mkEqnSparseAnsatzAIBbC e3d8c50b7ad3795e7444c52e17dccbe3
  mkEqnSparseAnsatzAaBC 03f559df829c9f75a859c0f8393fba00
  mkEqnSparseAnsatzAaBbC 11c1527a95a6d7af73dd66afac49accb
  mkEqnSparseAnsatzAaBbCTrian c1011d1a2861f33acad1f420ed8579bb
  mkEqnSparseIntABC2 583a64f52a434821b3c1f725f498d646
  mkEqnSparseintAIBC 813f6f1de4e515af6977c97258f72653
  mkEqnSparseintAIBJCTrian 6bb214793040671a648c9dd1193c7727
  mkEqnSparseintAaBbC f713b32b248e890a4c7996d3137e1dd9
  mkEqnSparseintAaBbCTrian 3c426d460e30d28eaacfd6bf90d07db3
import  -/  Pde ee46c0f08935aa69c73c37bcf3103bae
  exports: 5f26c9b1fc31234bc17b520659bce428
  combinePdes e668828f712acf7ce28df2ea465cc6e1
  combinePdesIvar 20f42dae1ab1457697a98c56145d7aee
  evalPdeRand 2d8d450edcec32557be021d500ab2010
  mkAllMultInds bf0af01d64f78ed6b76e736efc56dc84
  mkPdefromTens 1551927b2522a390f4507ce57ff1d41e
  print2MaplePde 0eaa39a61456362eec9673a76cc7c9a4
  prolongPdeAll 03b94f7160f389c6636ed7779bcf926b
  prolongPdeAllBlock1 49a6f3a9973d391a5cea6f4f5e5ee82b
  triangleMap 6f6cb5818f8026a7398d6fed169d2b36
import  -/  Perturbation 1a0e86698ec5a31cdfef7b507847abb4
  exports: afe5ee48f916c87e6d4d8513ac5538a7
  getRepIndsPert d5bed47af632d16aa7daa0e08eec2575
  mkPertAns 0573e464e13eb4346da16daaa56fed73
  symAnsSetPert 2a4b458e30b9b27870a28d777b5e3934
import  -/  PerturbationTree2 ebf70c4b1caee4ff6709b530226ccf09
  exports: 839fa9d52d79510573164c35e970ae28
  Eta a43211dae5652da76f9a1c84d96eaba0
  Var 10f5f2b34f2bcc0d79a1844dcb498c6c
  getEpsForest a44a51750cb1b52318e07f9912f58530
  mkForestFromAscList 34dd799fe2849812812f3f7d63e3eb2f
  symAnsatzForestEta 33f46d3ade579e050ef6de308854530c
import  -/  Symmetrize 9eee972227eba3994cb0eb9abca1881f
  exports: c79a0ef965b8f406eb0b9e72ceb58ef0
  getRepInds ca123f6656165a8a3650c82dfb152bfd
  mkAns bebb29c873be3222ecd07cdf115aeb59
  symAnsSet d0b7ac2190be176fd19e3a9b97f21a8c
import  -/  Tensor 649e40ce171c799ca6fc6d5773952aeb
  exports: d17f89ed15067c3352c7cc8d833615c2
  Tensor 6b073edeec5c0fb2159f4bff97d6ec2b
  evalTensorVals f2d600ebb19075ce2be6e614e56dddde
  tensorContractWith_3 553870f1abeb22fca19ee1dd0833949e
  tensorContractWith_9 c3ca78c71aafdd77baeff0c8078ab4b6
  tensorProductWith 88519887641d1c05cbb72a78550a017e
import  -/  tf-random-0.5:System.Random.TF 8abc0839ff798088d7b0fe5da790c9f8
import  -/  tf-random-0.5:System.Random.TF.Gen 8fa21695e0c1bda98aa67c940256094c
import  -/  tf-random-0.5:System.Random.TF.Init aa704b33ab60eed3e2b68a17a54fbfe6
import  -/  tf-random-0.5:System.Random.TF.Instances 8c4572fd10d56e74d9a1b310cc06013d
70fe008ecc420925c316daac7946fc07
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  Main.$s$fEq(,)_$s$fEq(,)_$c/= -}
d9c29de69e24759049df94d820948480
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (GHC.Types.Int, GHC.Types.Int))
                   (y :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.eqInt a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
42bc0b26514980badc60cc2e3a285986
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (\ (ds :: Index.Ind n Index.Uind_3)
                     (ds1 :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_3
                                                       Index.$fEqUind_3
                                                       a1
                                                       b1 } })
                  (Main.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
ef5bd57a5d409a7dc03fa6e364275abd
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (\ (ds :: Index.Ind n Index.Lind_3)
                     (ds1 :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_3
                                                       Index.$fEqLind_3
                                                       a1
                                                       b1 } })
                  (Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
bdc3718357f7461193245ef11e43dd4c
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_3
                                                                                              Index.$fEqUind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
74abadb8735e42909ca94b501e816221
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_3
                                                                                              Index.$fEqLind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
fb3eb0c284196369861e68101c93f7c8
  $s$fEqSeq ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_3
                     Index.$fEqUind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/= -}
101330b73140388d3fc37feb351aadc0
  $s$fEqSeq1 ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_3
                     Index.$fEqLind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/=1 -}
f7acc4ac2dc414c43cd854557674ee7d
  $s$fEqSeq_$s$fEqSeq_$c/= ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
14f604262e36bbfe1ca4913ad53ed1c6
  $s$fEqSeq_$s$fEqSeq_$c/=1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fe5ec3a6975912c8d1bfdd6cf07055ec
  $s$fOrd(,) :: GHC.Classes.Ord (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  Main.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (\ (a1 :: (GHC.Types.Int, GHC.Types.Int))
                     (b1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt) -}
6bae4f5791c4c55c60045a8ade8ad851
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Main.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_3
                                                            Index.$fOrdUind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_3
                                                      Index.$fOrdUind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_3
                                                                                       Index.$fOrdUind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
42c3ef60e21f771af34b4b5cc6facbc9
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Main.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_3
                                                            Index.$fOrdLind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_3
                                                      Index.$fOrdLind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_3
                                                                                       Index.$fOrdLind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
0689d11592b2fb0ea0b409f974c447c6
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_3
                                                    Index.$fOrdUind_3
                                                    a2
                                                    b1 } }) -}
c6d7bba21c68dabe5f9a30fb2ce1c048
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_3
                                                    Index.$fOrdLind_3
                                                    a2
                                                    b1 } }) -}
fdc479475f9ae8d0e8507337222019ec
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
9ce88169f252632f35460a281092d12e
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
9918381b6180170f00af052e93862228
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_3
                                                                                     Index.$fOrdUind_3
                                                                                     a2
                                                                                     b1 } }) -}
976851a93bd070d39535419f71bdf6e4
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_3
                                                                                     Index.$fOrdLind_3
                                                                                     a2
                                                                                     b1 } }) -}
2183057e66f5d4fac1d45744776d9f02
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
67284f95c0b146b8e863746778a50526
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
c111dc3c20a823b71d364f9908daefb8
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_3
                                                          Index.$fOrdUind_3
                                                          a2
                                                          b1 } }) -}
55e82d66a0e53fe76bb4280f0dcf0fa5
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_3
                                                          Index.$fOrdLind_3
                                                          a2
                                                          b1 } }) -}
03760dddfc05f05cf96bddbb28e7a06c
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
b7053025db7f83c347c1e2707f9fa0ea
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
596f6644aa0ad6a95b8d5eb291c77579
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
7f84837263894fc48642c77cb5706f39
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
280dfe8241a414a98de18e356e3a284a
  $s$fOrdSeq ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  Main.$s$fEqSeq
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
1a4233153269550316b08f9452fb65c8
  $s$fOrdSeq1 ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  Main.$s$fEqSeq1
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
ab518b6bf0dca328531e4c2e8928c3db
  $s$fOrdSeq_$cmax ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
2821a4616c7f34e48f7965a6de1c5f74
  $s$fOrdSeq_$cmax1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
ef19148d7fd4344e38e9bef5e16fd1da
  $s$fOrdSeq_$cmin ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
c0428df5134bc156f6b1f89aa6bea4e6
  $s$fOrdSeq_$cmin1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
95aeb0ee28c741c2b0f6447b1b3aff6d
  $sfromList ::
    [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Uind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Uind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Uind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Uind_3
                                  Index.$fOrdUind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
2cb59abda8dc0d90e69473c9a701fcd3
  $sfromList1 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
7e73f6e4f9a5301b96acfabea37aae5d
  $sfromList2 ::
    [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Lind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Lind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Lind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Lind_3
                                  Index.$fOrdLind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList3
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
b3c4e7430ead9902edb8f55ef5ba48d2
  $sfromList3 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
4a01b569f5d5ffe4fcd489feceb086da
  $smapKeys ::
    (k1 -> Index.Ind 4 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 4 Index.Uind_3)
                   @ a
                   (Main.$s$fOrdInd @ 4)
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Uind_3, a)) eta)) -}
c527b6b05148eaca904728f41db787c5
  $smapKeys1 ::
    (k1 -> Index.Ind 2 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 2 Index.Uind_3)
                   @ a
                   (Main.$s$fOrdInd @ 2)
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Uind_3, a)) eta)) -}
8c12c7593f709517da1537f4c03b1d48
  $smapKeys2 ::
    (k1 -> Index.Ind 4 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 4 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 4)
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Lind_3, a)) eta)) -}
20cf5c99ff13d6af0a659746e1c218bd
  $smapKeys3 ::
    (k1 -> Index.Ind 2 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 2 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 2)
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Lind_3, a)) eta)) -}
ffd7d23a081c24645604fbbac759100e
  $smapKeys4 ::
    (k1 -> Index.Ind 3 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 3 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 3 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 3 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 3 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 3 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 3 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 3 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 3)
                   (go13 (GHC.Types.[] @ (Index.Ind 3 Index.Lind_3, a)) eta)) -}
67c7916dcc5105cad85644fc2343dfa5
  $sunion ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0391868b9c00b133f7c9591f9b290645
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
d399533509acec150045ff71d0553b5f
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
e5a49d17f08b450c135b2d770108b660
  main :: GHC.Types.IO ()
  {- Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
83f27d30e7cb03b5beae530b5ed8f2cd
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Unfolding: ({__scc {main:Main.main} True False} \ (s :: GHC.Prim.State#
                                                               GHC.Prim.RealWorld) ->
                                                     {__scc {main:Main.main} False True} case System.Random.TF.Init.newTFGen1
                                                                                                s of ds1 { (#,#) ipv ipv1 ->
                                                                                         GHC.IO.Handle.Text.hPutStr2
                                                                                           GHC.IO.Handle.FD.stdout
                                                                                           Main.main2
                                                                                           GHC.Types.False
                                                                                           ipv }) -}
b6ea34b3ba5d744964a0a123defe943d
  main10 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main11
                   (GHC.Types.[]
                      @ (Data.Map.Internal.Map
                           (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)))) -}
ec00c82f24f4c92270c4017a27d6a7db
  main11 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqnConstSparse} True True} EquivarianceEqns.mkEqnConstSparse
                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                          Main.main_eqnConst) -}
b9d42d431ba3dbf37fd5f759555b2092
  main12 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqn6Sparse} True True} EquivarianceEqns.mkEqn6Sparse
                                                                                                                                                                                      @ (Ivar.Ivar
                                                                                                                                                                                           GHC.Real.Rational)
                                                                                                                                                                                      Main.main_eqn6) -}
6c17843f7864c65ee7d494f0db3c9944
  main13 :: [Index.Lind_20]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                 @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                 Main.main_a of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                          case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                                 20# of lwild {
                                                                                                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                                                                                                            -> Index.$fEnumLind_20_go
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                                 @ Index.Lind_20 } }) -}
d57b5a8350795e126bc8155880d5e48c
  main14 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 4 Index.Uind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} Index.mkInd
                                                                                                    @ 4
                                                                                                    @ Index.Uind_3
                                                                                                    Main.main15
                                                                                                      `cast`
                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                              <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)) -}
afb15250ede846afdb6421860c20ec27
  main15 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main16 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
e484f02e3f84d248bb183dd81b05162e
  main16 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
89c8db222929c894fcc4bc7e8aad2068
  main17 :: [Index.Uind_20]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                 @ Index.Uind_20
                                                                                                                                                                                                                                                                                                                                                 Main.main_a1 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                          case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                                 20# of lwild {
                                                                                                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                                                                                                            -> Index.$fEnumUind_20_go
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                                 @ Index.Uind_20 } }) -}
47d16fd29dc21228805d8d9be791da28
  main18 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 4 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} Index.mkInd
                                                                                                    @ 4
                                                                                                    @ Index.Lind_3
                                                                                                    Main.main15
                                                                                                      `cast`
                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                              <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)) -}
89cd212f2cd4b41d52e7c32a658d8956
  main19 :: [Index.Lind_9]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                               Main.main_a2 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                        case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                               9# of lwild {
                                                                                                                                                                                                                                                                                                                                          DEFAULT
                                                                                                                                                                                                                                                                                                                                          -> Index.$fEnumLind_9_go
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                                                                                                          -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_9 } }) -}
31eb282db296c562c6eb96167220f7a7
  main2 :: GHC.Base.String
  {- Unfolding: ({__scc {main:Main.main} False True} Pde.evalPdeRand
                                                       Main.main36
                                                       ({__scc {main:Main.main.trian} True False} Main.main35)
                                                       ({__scc {main:Main.main.flatAreaM} True False} Main.main34)
                                                       ({__scc {main:Main.main.pde} True False} Main.main3)
                                                         `cast`
                                                       (Sym (Pde.N:Pde[0]) <Ivar.Ivar
                                                                              GHC.Real.Rational>_N)) -}
d74daa56d0fbf09675c81ab911745d94
  main20 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 2 Index.Uind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} Index.mkInd
                                                                                                      @ 2
                                                                                                      @ Index.Uind_3
                                                                                                      Main.main21
                                                                                                        `cast`
                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)) -}
471c35fc16a51f20ad171c2a15114e11
  main21 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main22 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
16ba422f9b9b95418b5a4cd3095d47aa
  main22 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
05b03f2e4c156759741e6ff0e3be97d8
  main23 :: [Index.Uind_19]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.mapInter3} False True} {__scc {main:BasicTensors.triangleMap3} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.mapInter3} False True} {__scc {main:BasicTensors.triangleMap3} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                             @ Index.Uind_19
                                                                                                                                                                                                                                                                                                                                             Main.main_a3 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                      case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                             a#
                                                                                                                                                                                                                                                                                                                                             19# of lwild {
                                                                                                                                                                                                                                                                                                                                        DEFAULT
                                                                                                                                                                                                                                                                                                                                        -> Index.$fEnumUind_19_go
                                                                                                                                                                                                                                                                                                                                             a#
                                                                                                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                                                                                                        -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                             @ Index.Uind_19 } }) -}
643ae51419db56fc2ebd1cb79e96357b
  main24 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 3 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.mapInter3} False True} Index.mkInd
                                                                                                     @ 3
                                                                                                     @ Index.Lind_3
                                                                                                     Main.main25
                                                                                                       `cast`
                                                                                                     (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                               <3>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <3>_N)) -}
d1cb9d79a4f87a6a2035955996a55912
  main25 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main26 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
23a3fbc436be32d527efb9cf35df41e5
  main26 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
b197579080597dd251fa68e8a01282f1
  main27 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqn5Sparse} True True} EquivarianceEqns.mkEqn5Sparse
                                                                                                                                                                                      @ (Ivar.Ivar
                                                                                                                                                                                           GHC.Real.Rational)
                                                                                                                                                                                      Main.main_eqn5) -}
71be7ce59d8d404548fa52862bc6ab9d
  main28 :: [Index.Uind_9]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                               @ Index.Uind_9
                                                                                                                                                                                                                                                                                                                                               Main.main_a4 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                        case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                               9# of lwild {
                                                                                                                                                                                                                                                                                                                                          DEFAULT
                                                                                                                                                                                                                                                                                                                                          -> Index.$fEnumUind_9_go
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                                                                                                          -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                               @ Index.Uind_9 } }) -}
91707a0b125b25730f9233aeb7dd27f2
  main29 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 2 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} Index.mkInd
                                                                                                      @ 2
                                                                                                      @ Index.Lind_3
                                                                                                      Main.main21
                                                                                                        `cast`
                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)) -}
66c5ceb64d88996e46b0d7ef6455ef0c
  main3 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, Pde.MultiIndex) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.pde} False True} Pde.mkPdefromTens1
                                                                                               @ (Ivar.Ivar
                                                                                                    GHC.Real.Rational)
                                                                                               Main.main_totalEqn) -}
4749b7c23ae0a2d8256d94777ee91c17
  main30 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqn4Sparse} True True} EquivarianceEqns.mkEqn4Sparse
                                                                                                                                                                                      @ (Ivar.Ivar
                                                                                                                                                                                           GHC.Real.Rational)
                                                                                                                                                                                      Main.main_eqn4) -}
acad8e54ac698ed16ec57cc0e18fc927
  main31 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqn3Sparse} True True} EquivarianceEqns.mkEqn3Sparse
                                                                                                                                                                                      @ (Ivar.Ivar
                                                                                                                                                                                           GHC.Real.Rational)
                                                                                                                                                                                      Main.main_eqn3) -}
6a0ed15c49ee987d2c67600b3d06d501
  main32 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqn2Sparse} True True} EquivarianceEqns.mkEqn2Sparse
                                                                                                                                                                                      @ (Ivar.Ivar
                                                                                                                                                                                           GHC.Real.Rational)
                                                                                                                                                                                      Main.main_eqn2) -}
566bde896d7f77d9be28fe3fbaca459e
  main33 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.eqn1Sparse} True True} EquivarianceEqns.mkEqn1Sparse
                                                                                                                                                                                      @ (Ivar.Ivar
                                                                                                                                                                                           GHC.Real.Rational)
                                                                                                                                                                                      Main.main_eqn1) -}
5f567e31c7f2519cfa8f110b365f766a
  main34 :: Data.IntMap.Internal.IntMap GHC.Types.Int
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.flatAreaM} False True} BasicTensors.flatAreaMap
                                                                                                     Main.main_map2Area) -}
292d39d6f21a3d9a0f52584b64f62564
  main35 :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.trian} False True} {__scc {main:Pde.triangleMap} True True} Pde.$sunion1
                                                                                                                                          @ GHC.Types.Int
                                                                                                                                          (Pde.$wtriangleMap2P
                                                                                                                                             315#)
                                                                                                                                          (Pde.$wtriangleMap3P
                                                                                                                                             315#)) -}
f02ab3cc2fe8ab8742cdd6288dc2dc94
  main36 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 315#) -}
dc08c032831a761632020441fe6900ee
  main37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
f9a3d8c8b4a38d3de72ecece5b9bd912
  main4 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main33
                   Main.main5) -}
c21292d4df6642eee74aba5c9c9951e6
  main5 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main32
                   Main.main6) -}
dd04ecbcc263c2e2f518635c57455694
  main6 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main31
                   Main.main7) -}
def1c2dd51ec336545612b172b79ef1c
  main7 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main30
                   Main.main8) -}
045aa823ac46fd08882f4a7c358ab9ed
  main8 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main27
                   Main.main9) -}
39118924859039eb6b2138abaafddc40
  main9 ::
    [Data.Map.Internal.Map
       (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational))
                   Main.main12
                   Main.main10) -}
e835f3a54934be7485721c6279d4ca75
  main_a :: Index.Lind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} Index.$w$ctoEnum1
                                                                                                                                                           0#) -}
bf2ca04e567fa812c117e7f4a3482653
  main_a1 :: Index.Uind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} Index.$w$ctoEnum5
                                                                                                                                                           0#) -}
a76c0b0527707d724a972108dd61cf24
  main_a2 :: Index.Lind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} Index.$w$ctoEnum3
                                                                                                                                                          0#) -}
02f0dfd15465112e73ead2d9ade70a8d
  main_a3 :: Index.Uind_19
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.mapInter3} False True} {__scc {main:BasicTensors.triangleMap3} False True} Index.$w$ctoEnum4
                                                                                                                                                         0#) -}
966c3fa4c2af5a91482cbe68da44a9f0
  main_a4 :: Index.Uind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} Index.$w$ctoEnum7
                                                                                                                                                          0#) -}
bf50b5a8a031528a337ed3227618a363
  main_eqn1 ::
    Tensor.Tensor 0 1 0 0 0 0 1 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqn1} True True} EquivarianceEqns.eqn1_1
                                                                                               Main.main_map1Area
                                                                                               Main.main_map2Area) -}
3504a5aa9e033375f631a164e7bc70e1
  main_eqn2 ::
    Tensor.Tensor 0 1 0 0 0 0 1 2 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqn2} True True} EquivarianceEqns.eqn1_2
                                                                                               Main.main_map1Area
                                                                                               Main.main_map2Area) -}
110d6a369355aa68a2f4c54fb6c355c5
  main_eqn3 ::
    Tensor.Tensor 0 1 0 0 0 1 1 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqn3} True True} EquivarianceEqns.eqn1_3
                                                                                               Main.main_map1Metric
                                                                                               Main.main_map2Metric
                                                                                               Main.main_map1Area
                                                                                               Main.main_map2Area) -}
9e04b811605e8be8c8316925728015b4
  main_eqn4 ::
    Tensor.Tensor 0 1 0 0 1 0 0 2 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqn4} True True} EquivarianceEqns.eqn2_2
                                                                                               Main.main_map1Metric
                                                                                               Main.main_map1Area
                                                                                               Main.main_map2Area) -}
0cb6539983df53fb0701fb6bf0f0c706
  main_eqn5 ::
    Tensor.Tensor 0 1 0 0 1 1 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqn5} True True} EquivarianceEqns.eqn2_3
                                                                                               Main.main_map1Metric
                                                                                               Main.main_map2Metric
                                                                                               Main.main_map1Area
                                                                                               Main.main_map2Area) -}
c868a8ccb5eae320527203369d9d3858
  main_eqn6 ::
    Tensor.Tensor 0 1 1 0 0 1 0 1 (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqn6} True True} EquivarianceEqns.eqn3_3
                                                                                               Main.main_mapInter3
                                                                                               Main.main_map2Metric
                                                                                               Main.main_map1Area
                                                                                               Main.main_map2Area) -}
f112e32da31be5b0a2acc6b60f59b091
  main_eqnConst :: Tensor.Tensor 0 0 0 0 0 0 1 1 GHC.Real.Rational
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.eqnConst} True False} EquivarianceEqns.eqn1_4) -}
d2c50ecefb37e1f8d65989b7d0f1806e
  main_go13 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
    -> [Data.Map.Internal.Map
          (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
00fb91510c9329795ffc0b3faa875836
  main_map1Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} True True} Main.$smapKeys2
                                                                                                   @ (Data.Sequence.Internal.Seq
                                                                                                        Index.Lind_3)
                                                                                                   @ Index.Uind_20
                                                                                                   Main.main18
                                                                                                   ({__scc {main:BasicTensors.triangleMapArea} True True} Main.$sfromList2
                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                            (GHC.List.zip
                                                                                                                                                               @ (Data.Sequence.Internal.Seq
                                                                                                                                                                    Index.Lind_3)
                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                               (BasicTensors.$wareaDofList
                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                  Index.$fEnumLind_3
                                                                                                                                                                  Index.$fOrdLind_3)
                                                                                                                                                               ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} True False} Main.main17)))) -}
7f24535bb60db4a8dcdf401a483ab5e0
  main_map1Metric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} True True} Main.$smapKeys3
                                                                                                     @ (Data.Sequence.Internal.Seq
                                                                                                          Index.Lind_3)
                                                                                                     @ Index.Uind_9
                                                                                                     Main.main29
                                                                                                     ({__scc {main:BasicTensors.triangleMap2} True True} Main.$sfromList2
                                                                                                                                                           @ Index.Uind_9
                                                                                                                                                           (GHC.List.zip
                                                                                                                                                              @ (Data.Sequence.Internal.Seq
                                                                                                                                                                   Index.Lind_3)
                                                                                                                                                              @ Index.Uind_9
                                                                                                                                                              (BasicTensors.$wsymIndList
                                                                                                                                                                 @ Index.Lind_3
                                                                                                                                                                 Index.$fEnumLind_3
                                                                                                                                                                 2#
                                                                                                                                                                 BasicTensors.epsilon1)
                                                                                                                                                              ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} True False} Main.main28)))) -}
7d67a844a00c0669ed33b992db9dab12
  main_map2Area ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} True True} Main.$smapKeys
                                                                                                   @ (Data.Sequence.Internal.Seq
                                                                                                        Index.Uind_3)
                                                                                                   @ Index.Lind_20
                                                                                                   Main.main14
                                                                                                   ({__scc {main:BasicTensors.triangleMapArea} True True} Main.$sfromList
                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                            (GHC.List.zip
                                                                                                                                                               @ (Data.Sequence.Internal.Seq
                                                                                                                                                                    Index.Uind_3)
                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                               (BasicTensors.$wareaDofList
                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                  Index.$fEnumUind_3
                                                                                                                                                                  Index.$fOrdUind_3)
                                                                                                                                                               ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} True False} Main.main13)))) -}
7b1af42968000a1e8945587b6f97924e
  main_map2Metric ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} True True} Main.$smapKeys1
                                                                                                     @ (Data.Sequence.Internal.Seq
                                                                                                          Index.Uind_3)
                                                                                                     @ Index.Lind_9
                                                                                                     Main.main20
                                                                                                     ({__scc {main:BasicTensors.triangleMap2} True True} Main.$sfromList
                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                           (GHC.List.zip
                                                                                                                                                              @ (Data.Sequence.Internal.Seq
                                                                                                                                                                   Index.Uind_3)
                                                                                                                                                              @ Index.Lind_9
                                                                                                                                                              (BasicTensors.$wsymIndList
                                                                                                                                                                 @ Index.Uind_3
                                                                                                                                                                 Index.$fEnumUind_3
                                                                                                                                                                 2#
                                                                                                                                                                 BasicTensors.epsilon1)
                                                                                                                                                              ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} True False} Main.main19)))) -}
0e9031ee1331b564b0ba253448aa5663
  main_mapInter3 ::
    Data.Map.Internal.Map (Index.Linds_3 3) Index.Uind_19
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.mapInter3} True True} Main.$smapKeys4
                                                                                                    @ (Data.Sequence.Internal.Seq
                                                                                                         Index.Lind_3)
                                                                                                    @ Index.Uind_19
                                                                                                    Main.main24
                                                                                                    ({__scc {main:BasicTensors.triangleMap3} True True} Main.$sfromList2
                                                                                                                                                          @ Index.Uind_19
                                                                                                                                                          (GHC.List.zip
                                                                                                                                                             @ (Data.Sequence.Internal.Seq
                                                                                                                                                                  Index.Lind_3)
                                                                                                                                                             @ Index.Uind_19
                                                                                                                                                             (BasicTensors.$wsymIndList
                                                                                                                                                                @ Index.Lind_3
                                                                                                                                                                Index.$fEnumLind_3
                                                                                                                                                                3#
                                                                                                                                                                BasicTensors.epsilon1)
                                                                                                                                                             ({__scc {main:Main.main} False True} {__scc {main:Main.main.mapInter3} False True} {__scc {main:BasicTensors.triangleMap3} False True} {__scc {main:Index.enumFrom} True False} Main.main23)))) -}
a11fe6ccc77ebfd45330d15665fa498a
  main_totalEqn ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) (Ivar.Ivar GHC.Real.Rational)
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.totalEqn} True True} Main.main_go13
                                                                                                   (Data.Map.Internal.Tip
                                                                                                      @ (GHC.Types.Int,
                                                                                                         GHC.Types.Int)
                                                                                                      @ (Ivar.Ivar
                                                                                                           GHC.Real.Rational))
                                                                                                   Main.main4) -}
"SPEC/Main $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                         GHC.Types.Int)
                                                (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fEq(,)
"SPEC/Main $fEq(,)_$c/= @ Int @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                 GHC.Types.Int)
                                                     ($dEq :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,)_$c/= @ GHC.Types.Int @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Main $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Main.$s$fEqInd1 @ n
"SPEC/Main $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Main.$s$fEqInd @ n
"SPEC/Main $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Main $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Main $fEqSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Lind_3 v = Main.$s$fEqSeq1
"SPEC/Main $fEqSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Uind_3 v = Main.$s$fEqSeq
"SPEC/Main $fEqSeq_$c/= @ Lind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Lind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=1
"SPEC/Main $fEqSeq_$c/= @ Uind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Uind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=
"SPEC/Main $fOrd(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Ord
                                                          GHC.Types.Int)
                                                 (v :: GHC.Classes.Ord GHC.Types.Int)
  GHC.Classes.$fOrd(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fOrd(,)
"SPEC/Main $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Main.$s$fOrdInd1 @ n
"SPEC/Main $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Main.$s$fOrdInd @ n
"SPEC/Main $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<1 @ n
"SPEC/Main $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c< @ n
"SPEC/Main $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<=1 @ n
"SPEC/Main $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c<= @ n
"SPEC/Main $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>1 @ n
"SPEC/Main $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c> @ n
"SPEC/Main $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>=1 @ n
"SPEC/Main $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c>= @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare1 @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare @ n
"SPEC/Main $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmax1 @ n
"SPEC/Main $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmax @ n
"SPEC/Main $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmin1 @ n
"SPEC/Main $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmin @ n
"SPEC/Main $fOrdSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Lind_3 v = Main.$s$fOrdSeq1
"SPEC/Main $fOrdSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Uind_3 v = Main.$s$fOrdSeq
"SPEC/Main $fOrdSeq_$cmax @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax1
"SPEC/Main $fOrdSeq_$cmax @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax
"SPEC/Main $fOrdSeq_$cmin @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin1
"SPEC/Main $fOrdSeq_$cmin @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin
"SPEC/Main fromList @ (Seq Lind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Lind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Lind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList2 @ a
"SPEC/Main fromList @ (Seq Uind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Uind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Uind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList @ a
"SPEC/Main mapKeys @ (Ind 2 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys3 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 2 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys1 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 3 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 3 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 3 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys4 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys2 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys @ k1 @ a
"SPEC/Main union @ (Int, Int) _" [orphan] forall @ a
                                                 ($dOrd :: GHC.Classes.Ord
                                                             (GHC.Types.Int, GHC.Types.Int))
  Data.Map.Internal.union @ (GHC.Types.Int, GHC.Types.Int) @ a $dOrd
  = Main.$sunion @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

