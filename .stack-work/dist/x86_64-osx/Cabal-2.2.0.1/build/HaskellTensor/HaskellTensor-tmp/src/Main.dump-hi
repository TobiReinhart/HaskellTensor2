
==================== FINAL INTERFACE ====================
2019-01-14 12:41:34.323044 UTC

interface main:Main [hpc] 8043
  interface hash: fd977e32a25bf07ff99b9474c5d84e15
  ABI hash: 084a453a7fa9f199a074b7be59a81478
  export-list hash: 20ea06eaadf24244b2373e64f4dc3360
  orphan hash: 2fb9c59d0c4f9c893699234dcdca2ef9
  flag hash: 8371069d9a3c93df4564b1c967507c8a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Ansatz AnsatzEqns2 BasicTensors
                     EquivarianceEqns EquivarianceMetric Index Integrabillity Ivar
                     Order2Int Order3Int Pde Perturbation Symmetrize Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  Ansatz feb006ea34150c9f561fce99c96513c5
  exports: 59de763b5ed7159158b40cd802183e31
  getAllInds 783e0080d02bd8e916cd48b33a5025dd
  getAllIndsLabel 3ce0d27e27bdc1552a623af8b1f86292
import  -/  AnsatzEqns2 08db792c5ab049902c32a1165953e63a
  exports: 4dc5760416efc558b113e18d014c3a72
  ansatzAB f1ac815d5e5dbcbcb1969dd2f313429b
  ansatzABb f693b6cb769af7160eacaf21db3fe9c4
  ansatzAIB a4a9faafbfdba3478d282a98636afa2a
  ansatzAIBJ 9fca1ccdbc9600ca26a0efba26a492ef
  ansatzAaBI a0c6c3a84b6d9523f234b6e48932e17a
  ansatzAaBb dec5b7c645692eef50af449aaf5de8a7
  intCond2NoSym bdab2047ce0fb7e358f1e4e7f3bc2324
  intCondfirstOrder fb516fb0b1d95b58758dafac4b63aab4
  mkEqnSparseAnsatzAB abfa69c1caf52a0fcc9b841ff1e7fa48
  mkEqnSparseAnsatzABb 4ab0c2e195d39ad4255e40197de8681e
  mkEqnSparseAnsatzAIB 63b99a3e4b81784c50e098a38e6ca631
  mkEqnSparseAnsatzAIBJ 21494c6634389983b32bfb91a0e5a33e
  mkEqnSparseAnsatzAaBI 51fb0346a60654fbf36c871e35bd567b
  mkEqnSparseAnsatzAaBb 5a03bb22f365995863a5e6b30609dbea
  mkEqnSparseRemoveAIB 8de152545b6853b229019b72ed93b50b
  mkEqnSparsefirstOrder 34e07a7c9ec1611565f6299eb8a60736
  mkEqnSparseintCond2NoSym 1b62876ed2478ca32c643a04a5694671
  removeAIB 7edb8fdf8f6c02b3b724d205631fd9fb
import  -/  BasicTensors d4363735d8d89b5596a5cfb59fbaa771
  exports: 867791133ab0dbc401ec9d976534d4e5
  delta_9 e9324645d3138b43f168fb5d060d9a92
  flatArea bbf091d9addc9a92105b91e0f02cc79f
  flatAreaMap 422c408475727807f6c73d789db14f9b
  interI_3 79b7d807d559a622673827f93c22be35
  interJ_2 9b79bc13ca20b85449870e1022aff4c3
  invEta 13d253f89307018a8d192c06ea8a2c9b
  invEtaAbs 5f65b5c8098c70c97015743fe412ad61
  ivar3M bde58bcc6c25888fc58ef3c635f89a7b
  triangleMap2 fbb5c8e89e0e03b8873bc25be0eb9500
  triangleMap3 8dd1e550bd7aa4cb7fa6f8ac03a5fc2e
  triangleMapArea b0b568e496e1dc531baba3fd13a7b18f
import  -/  EquivarianceEqns 328105ba29cf8bbc07964656fa9d8b53
  exports: 84062590276b987b26bd45d594b7213f
  eqn1_1 5a4bb51d41e25fa521e3ab2fde17bb5d
  eqn1_1Flat 0a770c9c41cea44fb468087c8ec0c870
  eqn1_2 50f4a8da96b054038964e122bc53cd55
  eqn1_3 ce53fb4f5e444e62fe355768f6721af9
  eqn1_4 c48cd4b7a36f44c63ec523d175956fbb
  eqn2_2 1953564dacb7e2ee7a0f9cd76faf366a
  eqn2_2Flat ee56c3cfff82e8a4916b8a7f40e24b2e
  eqn2_3 50acd07f2a10652644ef1663bc2eee52
  eqn3_3 2709920bc48a9859bf2b10aa98cbf3db
  eqn3_3Flat f0723cb90d5da35bc6e53edac3faa02d
  mkEqn1Sparse d1e15bd48da7724912dd5994b6ffee29
  mkEqn2Sparse 7059feda71ed742d497c0a4854dba48b
  mkEqn3Sparse 86e4890f5fa7e6fc3beb2c5833f79611
  mkEqn4Sparse 800bfbec51c5d861f20acb7d0abe611d
  mkEqn5Sparse 5ac1c8113f0aa213287691fd4c432930
  mkEqn6Sparse 2cf22545f1e3d892f299ae213fba13ec
  mkEqnConstSparse 9c1fb85bf1611eb3dbc3c8d8b9a4f120
  mkEqnConstSparseFlat d75cefda29dbb74183e4ba3208881e10
  showEqnsFlatFrac 76210a89123250eb6e7932df62c08784
import  -/  EquivarianceMetric 064b64891d76fbe89624d1c2b836dd6d
  exports: 2b056822118b67df8be19594354d4341
  eqn1_1M 47112040a50260031a1d1c41f21b9978
  eqn1_2M 3095770d1c9829b88e348979852237fe
  eqn1_3M 436e5f48be10d1d7dba4c3ab8ae15004
  eqn2_2M a32f750634b5ff107ccc992d84088ef1
  eqn2_3M b9b88715370288936956a2949059aaae
  eqn3_3M c7b72d202840d1474761626af34ac0e3
  mkEqn1SparseM f81c772d0608572a17556f5d41673636
  mkEqn2SparseM 9e81ea8006b46a3908a5a830001cfdd7
  mkEqn3SparseM a778c872ef8d3433fb614969834e6a1f
  mkEqn4SparseM b0e74fc95f5d020e70cd14f34c9890fd
  mkEqn5SparseM c7327fb5e45dbbc444f10e9dc86a09b1
  mkEqn6SparseM bc53057ca748c5d86d9886f2127fc1ff
  mkEqn6SparseMPulled aeaff466b3200e26acfe3dcfae0b8ea1
import  -/  Index 4e45ffe97a9e3350beda6ba6fddd508e
  exports: 02acfc58131cc32506762c89c9bc64b7
  Lind_20 e4ac8c6f7ebef7ec8e61c4d2cfb1eb39
  Lind_9 4aee189fe42e76ae12f56b446871f579
  Linds_3 d96a0ea977d5e85b62cd5a4bb306555b
  Uind_19 5617b560a7323420bf5fc6665a89c5da
  Uind_20 48afc3e8961cc0b26810f59a3ecd189e
  Uind_9 56099c3d674cbe5024bf0cce617d25f7
  Uinds_3 1dd738c5bf5e3d67af91d29761e9a9ea
  mkInd 0b3b6e2c21e3978a80c74568b36cedc1
import  -/  Integrabillity 7e50271a8ac04667845edd061efb8b82
  exports: f7811f7e2add78f14be0731bd2330bbf
  areaMetricMetric1 9e279cf647044511c64786c2c5777f70
  areaMetricMetric1intCond 169c82ffb440f6cca0a72ae667b41e2f
  densityEqnArea1 ab6ad045fa65fe41eb3a4747f01ed886
  densityEqnArea2 1d9e730a265c12255c0f34f4609b1e07
  densityEqnMetric1 aeb0debfa5c749bbcd69439d56f9327d
  densityEqnMetric2 ad1cd9019d8bea2408a4c30a9051ba38
  flatMetricInter e0c2534ad1fe52820e8787a647d67bef
  flatMetricInterProlong e7f1e62255f1944c9f515950b17544bb
  int1Test 4b1f3d08a40e2f2767ac294e40c4052a
  int1Test2 947556081829ec6131f78ede5c462f69
  int1Test3 fb4c8dd9639380c0181907b523763379
  int1Zero ddb5546ba10807fa84538fb879305404
  intCond1 f03121783edda1a9b7772620aa21477d
  intCond1RelFac 842ec049c0bb0b76a9fad9b24f815831
  intCond1Zero eb3091674f60d224e5dd8ffe4fe04906
  intCond1noFactor 3b199ee34bd2923f4b0f5d06e73c4139
  intCond2 c2d507258c5232d4040ed54070ac8b9f
  intCond2_1 0e07963227ef58ddc59dda9924b1d972
  intCond2_1Symbol 80e64a60df939f50034024b415a1b5cc
  intCond2_1SymbolPure e9960e127f59a7dfa91b60a96a73b6f7
  intCond2_1SymbolRed d433d19248d2eced9c90ed053f6a6c0d
  intCond2_1SymbolRedWrong 40947d8a924ea2beea63022d87cb9a6e
  intCond3 fd63c5fdb825b94a567678702b9e4395
  intCondComp 17820469801f00f043c7ccf8eb168499
  intCondCompNoSym 3274fe681b0d8a9cbdfeebf5f82c63a0
  intCondCompZero d4962131d669f91cbe2ff5eec3979433
  intCondOrd2 7bbce6711279acb78f9f0e4e2b500d78
  intCondSym 78ebb42be7abd8a58bb65255e2287659
  intRankDef1 3acfb13ea63abfd6662cd0f5ec9b0748
  intRankDef2 47db57910658353bb6b86040b340d739
  intRankDef3 0515d9362b5a08b6026f798b7b4b5a12
  intRankDef5 6528ce0de2553f32ba87673227106807
  inter4Factor 9a5104264a22e3dec85397f8925b293f
  inter4noFactor fc544dacfef708eebb7ef1a03a7049a3
  inter6Factor 8a58d6401e9946cde9684b86409c65cb
  inter6noFactor 31f0333844fe6389897d40fc05e70c8b
  mkEqnSparseAreaM 1587dfd54486ae5a075a7d6e405b07e5
  mkEqnSparseAreaMintCond 3aadf92e89cc9d5122060da49a712a71
  mkEqnSparseBlock1Eta aec2a702a400a37c4d4f968bbcf86122
  mkEqnSparseCond1 4290e11c95cd9b0ff398f6b9b5f066c6
  mkEqnSparseCond1Zero 182f36dcb4087c680de168dd3f2dce30
  mkEqnSparseCond2 68196dbf91608f16ba40cd19df42b866
  mkEqnSparseCond3 e0845d54d484e48f186ae50e593a6c8b
  mkEqnSparseDens1 1f8691fadf178be5906dcf919931c56f
  mkEqnSparseDens1Area ecc33e4e15536aedd84d12c81790c7e1
  mkEqnSparseDens2 7ae67ae31b9a0a3f11b0096bd76cc6d7
  mkEqnSparseDens2Area ba79afc0177fed7f9816161f5c30bde9
  mkEqnSparseProjector b7bd8e459f6300774f70f362c4619ab5
  mkEqnSparseProjector2 735633864ae62396c1359b411d601cca
  mkEqnSparseflatMetricInter 76c66c4acdea0de30309aa59622c0253
  mkEqnSparseflatMetricInterProlong 692e7811e3ab0e94ccd926b2f637dfae
  mkEqnSparseintCond2_1 2bafb7b8cad8c23c139d67a2ed416f2e
  mkEqnSparseintCond2_1New 11f53cec43061c9cd9a55fc68240230a
  mkEqnSparseintCond2_1Symbol 48497e3fac34f1d73bc00811a47cb0b2
  mkEqnSparseintCond2_1SymbolPure cbbf3c04b2893a8a86078b6ae049c8b7
  mkEqnSparseintCond2_1SymbolRed 297c2190bd6ad7a974848da5bab6c0f7
  mkEqnSparseintCond2_1SymbolRedFull cacad3242b0d23939235fa6bbb1e1668
  mkEqnSparseintCondComp 0c48ddd30d83bb5fa493a7f0cddda385
  mkEqnSparseintCondCompNew 59b8f6f3db5f3e95c5e29625a82907bf
  mkEqnSparseintCondCompNoSym 6af12f053467fb01c1fa97078b6220e8
  mkEqnSparseintCondOrd2 d7aa4f6a593b2ac61c62d74b3d92ab01
  mkEqnSparseintCondSym 4568b99b493dc31804da97e452e89ad6
  mkEqnSparseintRankDef1 fb0c6186d78c9165872aca930866f415
  mkEqnSparseintRankDef3 e6a07caf75820fd623aa9e2ccbdab489
  mkEqnSparseinter6Mat ada1ffe9775fac6469c993f4a2feae98
  mkEqnSparseinterMat 7a446ffc2855c69d0a84d0ef829ec7aa
  projectorMatrix 9fe2cea0472ac031bb3eba718bcaacb8
  projectorMatrix2 34ae8b3f7e347d520853a13bd59a21bb
import  -/  Ivar 52a8dc212ab2f8456a526e9d381a1784
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar ab6885cb499b09a96006f6f783229377
  addIvar 67ce428981a403b8506e974c3b8272d4
  sMultIvar 6fe3f98bfd11ce74b5f6274a48774f32
import  -/  Order2Int 284bceef8a9405979020f4a017f90dbd
  exports: 2b04398cba20fd8196465ef856206567
  ansatzAB2 e5742847d71fa3a6f264554a4209734b
  ansatzABb2 e11ca58f7e59e3f347c880d3a6715155
  ansatzAI2 2b700feea7739f1a9a2958952947e228
  ansatzAIB2 5b41d50b3a179b7bae8b41990bdff56a
  intAB1 3940302cb20d2696962ee2f53a0adaa1
  intAB2 7dd9580a5f4f59d4ae78d6c13dda2f2b
  intAI e7928aa51612f42e9db9b56d832fb7f6
  intAIB 434829b316053f672501f286855df446
  intAIBsym 3e7721948ec0c4cb33b07cbce9d5f43c
  intAIBsymRed c8fc1eb8123ed6e3d31e0c9c083ad691
  intAIBsymZero 6788725dee84c9bb57a1789532b6e67a
  mkEqnSparseAnsatzAB2 29db8034e28f671c21cc5aaa521ff519
  mkEqnSparseAnsatzABb2 f9037156a11fcc24b96ff42a370e9b1b
  mkEqnSparseAnsatzAI2 ced334c3f1d3eacf21e7909815a0a72b
  mkEqnSparseAnsatzAIB2 0f36b7c52babdd4de794a50c636542aa
  mkEqnSparseIntAB 7ea0c7064d8c75a507fb84b8016fc1fb
  mkEqnSparseIntAI 2958cc212e6e1455dc0dad739243ad46
  mkEqnSparseIntAIB fbea693d1f6e032c916c37cdd3bae4d4
  mkEqnSparseIntAIBsym 6ae3af8587b47740714633cf23e94547
import  -/  Order3Int 38547e5194de278e0928efeed77c6267
  exports: 9507dc54ea2831b0f018c3a4667f8526
  ansatzABC 00abfbfa0224ed84288f252a637a699f
  mkEqnSparseAnsatzABC2 61ae9e15e42657180dccfc2013d97694
import  -/  Pde 6cb99ff48b3771dcca3d3397050c4c62
  exports: cfda6ba989dea29b657cfa7f1b7972bc
  combinePdes a6dd12d0bf88d67c729bee565040b5db
  mkAllMultInds accafa7e536bac8a3252e41cd329aac1
  mkPdefromTens 3c26c965406e0f55f076c45bad744b9e
  prolongPdeAll 895f8278143cfb446f086f967405c273
  prolongPdeAllBlock1 d057fa7291138fa67c4ba12c62a13808
  triangleMap 73062c09bc2add55bf7a854dc1427954
import  -/  Perturbation 9cd3173f7dda3eefe87038fd2e336b85
  exports: 2151821fea7fdcfba530bb109075c579
  areaEvalMap14 ad6f19cda87e442aff95308d4843fa89
  evalFullAns 3f5bd82e41bdec92688ebde96bf23b81
  getRepIndsPert 13b6d55c805d5dbacccc6a3141a813e7
  mkPertAns 1c94df5eff2db4d14fa401f01010dfb7
  symAnsSetPert 2a4b458e30b9b27870a28d777b5e3934
import  -/  Symmetrize 66145e28705a6a21f2f4a17b4eadd368
  exports: c79a0ef965b8f406eb0b9e72ceb58ef0
  getRepInds c6035c72af4a6f7b04c068e41a254df9
  mkAns e8478eafe632cea5c721e905d7fe50db
  symAnsSet d0b7ac2190be176fd19e3a9b97f21a8c
import  -/  Tensor 88b99fd1b88cbea55a626a90a73dd2b2
  exports: 1f9546fa9c961086005dc0c53843135a
  Tensor 3ab1a6a46c1592b826cacc18b7d3183c
  evalTensorVals d93c93bc8bd5eea5ee1951188e264168
  tensorContractWith_3 32b1524ea23a0fe2397cbf4893bf7082
  tensorContractWith_9 50d1dc79c4d8b26159393b0de556f618
  tensorProductWith cffa20a3309e88d9f99b616ada68e984
import  -/  tf-random-0.5:System.Random.TF 8abc0839ff798088d7b0fe5da790c9f8
import  -/  tf-random-0.5:System.Random.TF.Gen 8fa21695e0c1bda98aa67c940256094c
import  -/  tf-random-0.5:System.Random.TF.Init aa704b33ab60eed3e2b68a17a54fbfe6
import  -/  tf-random-0.5:System.Random.TF.Instances 8c4572fd10d56e74d9a1b310cc06013d
2f84d72a5dfb829f61fcbb31e2ac917d
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (\ (ds :: Index.Ind n Index.Uind_3)
                     (ds1 :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_3
                                                       Index.$fEqUind_3
                                                       a1
                                                       b1 } })
                  (Main.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
d823745383ac0ef7ed39c2ed17920145
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (\ (ds :: Index.Ind n Index.Lind_3)
                     (ds1 :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_3
                                                       Index.$fEqLind_3
                                                       a1
                                                       b1 } })
                  (Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
ed25862163703e2280b419811c848f94
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_3
                                                                                              Index.$fEqUind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
04f61ab7fc0cc0c6f08df92f79deb10c
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_3
                                                                                              Index.$fEqLind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
959718f79bdc356d2dc483956306e8f9
  $s$fEqSeq ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_3
                     Index.$fEqUind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/= -}
58c1e8554cf192f75661ec2c62acfbcd
  $s$fEqSeq1 ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_3
                     Index.$fEqLind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/=1 -}
f3bd553af6cac5cd31befb2b36c56c99
  $s$fEqSeq_$s$fEqSeq_$c/= ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
091455f8ca828966e2a0ddc43611783f
  $s$fEqSeq_$s$fEqSeq_$c/=1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1a1d1670f34230eb4af575d1e6802786
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Main.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_3
                                                            Index.$fOrdUind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_3
                                                      Index.$fOrdUind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_3
                                                                                       Index.$fOrdUind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
af141e10fcff58945696df55895ba3e6
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Main.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_3
                                                            Index.$fOrdLind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_3
                                                      Index.$fOrdLind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_3
                                                                                       Index.$fOrdLind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
c025dd8d1d699bb8afef2eb9820f6250
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_3
                                                    Index.$fOrdUind_3
                                                    a2
                                                    b1 } }) -}
3d342d76c772bf57d06b66dcb18ec4f3
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_3
                                                    Index.$fOrdLind_3
                                                    a2
                                                    b1 } }) -}
8e51a8f8a6eb5ad5efd796620c08e5f9
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
fc63d72b83e53831164070fc496c9c4c
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
34a79b99297b2969e6e75021069b339f
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_3
                                                                                     Index.$fOrdUind_3
                                                                                     a2
                                                                                     b1 } }) -}
4de8317ce71c3f0b005d39f664872c49
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_3
                                                                                     Index.$fOrdLind_3
                                                                                     a2
                                                                                     b1 } }) -}
79ea4c6c2380bfea7590ed79f5fb1157
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
cd04a5117d7bc03bb1ea884dd3494804
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
5b3bfae312578127b1bdf6319892ff0d
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_3
                                                          Index.$fOrdUind_3
                                                          a2
                                                          b1 } }) -}
5c60d5c1c55f0c4ad54cb5c952071af9
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_3
                                                          Index.$fOrdLind_3
                                                          a2
                                                          b1 } }) -}
939ff7466b84bd587690d276a8295055
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
93c5cb5c4ff02ad0a9be7710037a5436
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
11ea11d0ad533fd674841a7f845261ee
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
84a1b367b27b5bc2031b12c452cd7378
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
85295748a992548a31f22320ea2f6408
  $s$fOrdSeq ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  Main.$s$fEqSeq
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
2b2fdca1bb0e69718fc4c4516c7d216f
  $s$fOrdSeq1 ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  Main.$s$fEqSeq1
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
de72e44f4370bd9e144a7cb2c89620a5
  $s$fOrdSeq_$cmax ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
88153066703dc065e3597cba263d7398
  $s$fOrdSeq_$cmax1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
66baeeb90a005fd28cce0c1d5b486d9a
  $s$fOrdSeq_$cmin ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
9be27b4f27f5849af14bfb3726b3b411
  $s$fOrdSeq_$cmin1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
9ad15d12f6ab63182b3616f807071b9f
  $sfromList ::
    [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Uind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Uind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Uind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Uind_3
                                  Index.$fOrdUind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
78d048be5fdc74c7d3cecca4e6d7d58f
  $sfromList1 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
522d13cdb47ce4afc8ce6f7bedbb1cd4
  $sfromList2 ::
    [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Lind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Lind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Lind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Lind_3
                                  Index.$fOrdLind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList3
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
964ac97afbda2575a54d330676abefa9
  $sfromList3 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
6a7d00ec80c224229c73e2db82262461
  $smapKeys ::
    (k1 -> Index.Ind 4 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 4 Index.Uind_3)
                   @ a
                   (Main.$s$fOrdInd @ 4)
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Uind_3, a)) eta)) -}
a9488abb3f4e1b5ca5c17882a55aa011
  $smapKeys1 ::
    (k1 -> Index.Ind 2 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 2 Index.Uind_3)
                   @ a
                   (Main.$s$fOrdInd @ 2)
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Uind_3, a)) eta)) -}
07965dc6404a07adaf228cc970df6054
  $smapKeys2 ::
    (k1 -> Index.Ind 4 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 4 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 4)
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Lind_3, a)) eta)) -}
4b1ff72afa15b16702d07605b46be9b2
  $smapKeys3 ::
    (k1 -> Index.Ind 2 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 2 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 2)
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Lind_3, a)) eta)) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
82ae3192e7932fede016e7efdaaa15bd
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
f637d82656566a38c8e9f8c1d6f50efd
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
ba18f6eb112c97d01603426c4edd2ae2
  main :: GHC.Types.IO ()
  {- Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3ff65702cf0acb6b31d013553b5cdaef
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Unfolding: ({__scc {main:Main.main} True False} \ (s :: GHC.Prim.State#
                                                               GHC.Prim.RealWorld) ->
                                                     {__scc {main:Main.main} False True} case System.Random.TF.Init.newTFGen1
                                                                                                s of ds1 { (#,#) ipv ipv1 ->
                                                                                         System.IO.appendFile2
                                                                                           @ ()
                                                                                           Main.main16
                                                                                           GHC.IO.IOMode.WriteMode
                                                                                           Main.main2
                                                                                             `cast`
                                                                                           (<GHC.IO.Handle.Types.Handle>_R
                                                                                            ->_R Sym (GHC.Types.N:IO[0]
                                                                                                          <()>_R))
                                                                                           ipv }) -}
963f964bfb0d187652bd7cd29fcb8eb7
  main10 :: [Index.Lind_20]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                 @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                 Main.main_a2 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                          case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                                 20# of lwild {
                                                                                                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                                                                                                            -> Index.$fEnumLind_20_go
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                                 @ Index.Lind_20 } }) -}
e065f2a78a2019d6f4b34e8ca0193171
  main11 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 4 Index.Uind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} Index.mkInd
                                                                                                    @ 4
                                                                                                    @ Index.Uind_3
                                                                                                    Main.main12
                                                                                                      `cast`
                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                              <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)) -}
f5546db404e421a34266a6b29b6c43b7
  main12 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main13 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
07e26f16ea78f1fb77cab1f1f3a841a3
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
ccff54faabcfb5d713fce19c5582e578
  main14 :: [Index.Uind_20]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                 @ Index.Uind_20
                                                                                                                                                                                                                                                                                                                                                 Main.main_a3 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                          case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                                 20# of lwild {
                                                                                                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                                                                                                            -> Index.$fEnumUind_20_go
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                                 @ Index.Uind_20 } }) -}
8f4de1fec723ee820fca5cc46ba302e6
  main15 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 4 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} Index.mkInd
                                                                                                    @ 4
                                                                                                    @ Index.Lind_3
                                                                                                    Main.main12
                                                                                                      `cast`
                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                              <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)) -}
c6c3ef79ba28ff414a3bbd8d82e36baa
  main16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main17) -}
1642c83d4cdb182be807e835b39d1ebb
  main17 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/TobiasReinhart/Desktop/HaskellTensor/HaskellTensor2Data/Ansatz/2ndOrderInt/ansatzAB2_12_1_19.txt"#) -}
21f861e13a9344c0a4e66430646a551f
  main18 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
0c6d4c929607012b2df155af7910ca67
  main2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hdl
                   ({__scc {main:Main.main} False True} EquivarianceEqns.showEqnsFlatFrac
                                                          ({__scc {main:Main.main.ansatzCondAB} True False} Main.main3))
                   GHC.Types.False) -}
34013cff55e2d1a97a75ccd790aa3791
  main3 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.ansatzCondAB} False True} {__scc {main:Order2Int.mkEqnSparseAnsatzAB2} True True} case Main.main_ds of wild { Tensor.Tensor map1 ->
                                                                                                                                                              Order2Int.$sfromList
                                                                                                                                                                @ (GHC.Real.Ratio
                                                                                                                                                                     GHC.Integer.Type.Integer)
                                                                                                                                                                (Order2Int.mkEqnSparseAnsatzAB2_go13
                                                                                                                                                                   (GHC.Types.[]
                                                                                                                                                                      @ ((GHC.Types.Int,
                                                                                                                                                                          GHC.Types.Int),
                                                                                                                                                                         GHC.Real.Rational))
                                                                                                                                                                   map1) }) -}
8be770da30bf5a3d1093e2cbf5c2a29b
  main4 :: [Index.Lind_9]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                               Main.main_a of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                        case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                               9# of lwild {
                                                                                                                                                                                                                                                                                                                                          DEFAULT
                                                                                                                                                                                                                                                                                                                                          -> Index.$fEnumLind_9_go
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                                                                                                          -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_9 } }) -}
01947df234f4dcf6c3b508f4e8749c03
  main5 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 2 Index.Uind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} Index.mkInd
                                                                                                      @ 2
                                                                                                      @ Index.Uind_3
                                                                                                      Main.main6
                                                                                                        `cast`
                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)) -}
80279e82394dc2c96c511d573e507a2c
  main6 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main7 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
1c7904640b7498a7ac5cc358b390a991
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
8b6bfd161fcd6d29391c46825568fbd4
  main8 :: [Index.Uind_9]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                               @ Index.Uind_9
                                                                                                                                                                                                                                                                                                                                               Main.main_a1 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                        case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                               9# of lwild {
                                                                                                                                                                                                                                                                                                                                          DEFAULT
                                                                                                                                                                                                                                                                                                                                          -> Index.$fEnumUind_9_go
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                                                                                                          -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                               @ Index.Uind_9 } }) -}
b70931c6dbad3dff8e6290250b240500
  main9 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 2 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} Index.mkInd
                                                                                                      @ 2
                                                                                                      @ Index.Lind_3
                                                                                                      Main.main6
                                                                                                        `cast`
                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)) -}
f8675d0069c5cf5bf8ae916e3d46ada2
  main_a :: Index.Lind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} Index.$w$ctoEnum3
                                                                                                                                                          0#) -}
b2ddf0ae9275fc82f903f252d27a36b5
  main_a1 :: Index.Uind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} Index.$w$ctoEnum7
                                                                                                                                                          0#) -}
0c519813ef57a4cee17c369149db457f
  main_a2 :: Index.Lind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} Index.$w$ctoEnum1
                                                                                                                                                           0#) -}
a303255ce8d33225c8ab1d80c7f9c9cc
  main_a3 :: Index.Uind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} Index.$w$ctoEnum5
                                                                                                                                                           0#) -}
065abbd90893b5129f167470fc8bc24b
  main_ds :: Tensor.Tensor 2 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.ansatzCondAB} False True} Order2Int.ansatzAB2
                                                                                                        Main.main_map1Area
                                                                                                        Main.main_map2Area
                                                                                                        Main.main_map1Metric
                                                                                                        Main.main_map2Metric) -}
7e41d3490238993dca17fa08d2c51127
  main_map1Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} True True} Main.$smapKeys2
                                                                                                   @ (Data.Sequence.Internal.Seq
                                                                                                        Index.Lind_3)
                                                                                                   @ Index.Uind_20
                                                                                                   Main.main15
                                                                                                   ({__scc {main:BasicTensors.triangleMapArea} True True} Main.$sfromList2
                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                            (GHC.List.zip
                                                                                                                                                               @ (Data.Sequence.Internal.Seq
                                                                                                                                                                    Index.Lind_3)
                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                               (BasicTensors.$wareaDofList
                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                  Index.$fEnumLind_3
                                                                                                                                                                  Index.$fOrdLind_3)
                                                                                                                                                               ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} True False} Main.main14)))) -}
027429b82a34564531d056d0dec5d654
  main_map1Metric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} True True} Main.$smapKeys3
                                                                                                     @ (Data.Sequence.Internal.Seq
                                                                                                          Index.Lind_3)
                                                                                                     @ Index.Uind_9
                                                                                                     Main.main9
                                                                                                     ({__scc {main:BasicTensors.triangleMap2} True True} Main.$sfromList2
                                                                                                                                                           @ Index.Uind_9
                                                                                                                                                           (GHC.List.zip
                                                                                                                                                              @ (Data.Sequence.Internal.Seq
                                                                                                                                                                   Index.Lind_3)
                                                                                                                                                              @ Index.Uind_9
                                                                                                                                                              (BasicTensors.$wsymIndList
                                                                                                                                                                 @ Index.Lind_3
                                                                                                                                                                 Index.$fEnumLind_3
                                                                                                                                                                 2#
                                                                                                                                                                 BasicTensors.epsilon1)
                                                                                                                                                              ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} True False} Main.main8)))) -}
c878005829f439a8fe9faeb04de890e3
  main_map2Area ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} True True} Main.$smapKeys
                                                                                                   @ (Data.Sequence.Internal.Seq
                                                                                                        Index.Uind_3)
                                                                                                   @ Index.Lind_20
                                                                                                   Main.main11
                                                                                                   ({__scc {main:BasicTensors.triangleMapArea} True True} Main.$sfromList
                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                            (GHC.List.zip
                                                                                                                                                               @ (Data.Sequence.Internal.Seq
                                                                                                                                                                    Index.Uind_3)
                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                               (BasicTensors.$wareaDofList
                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                  Index.$fEnumUind_3
                                                                                                                                                                  Index.$fOrdUind_3)
                                                                                                                                                               ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} True False} Main.main10)))) -}
667ad31fafb410e8840de69d01a07021
  main_map2Metric ::
    Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} True True} Main.$smapKeys1
                                                                                                     @ (Data.Sequence.Internal.Seq
                                                                                                          Index.Uind_3)
                                                                                                     @ Index.Lind_9
                                                                                                     Main.main5
                                                                                                     ({__scc {main:BasicTensors.triangleMap2} True True} Main.$sfromList
                                                                                                                                                           @ Index.Lind_9
                                                                                                                                                           (GHC.List.zip
                                                                                                                                                              @ (Data.Sequence.Internal.Seq
                                                                                                                                                                   Index.Uind_3)
                                                                                                                                                              @ Index.Lind_9
                                                                                                                                                              (BasicTensors.$wsymIndList
                                                                                                                                                                 @ Index.Uind_3
                                                                                                                                                                 Index.$fEnumUind_3
                                                                                                                                                                 2#
                                                                                                                                                                 BasicTensors.epsilon1)
                                                                                                                                                              ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} True False} Main.main4)))) -}
"SPEC/Main $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Main.$s$fEqInd1 @ n
"SPEC/Main $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Main.$s$fEqInd @ n
"SPEC/Main $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Main $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Main $fEqSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Lind_3 v = Main.$s$fEqSeq1
"SPEC/Main $fEqSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Uind_3 v = Main.$s$fEqSeq
"SPEC/Main $fEqSeq_$c/= @ Lind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Lind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=1
"SPEC/Main $fEqSeq_$c/= @ Uind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Uind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=
"SPEC/Main $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Main.$s$fOrdInd1 @ n
"SPEC/Main $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Main.$s$fOrdInd @ n
"SPEC/Main $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<1 @ n
"SPEC/Main $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c< @ n
"SPEC/Main $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<=1 @ n
"SPEC/Main $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c<= @ n
"SPEC/Main $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>1 @ n
"SPEC/Main $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c> @ n
"SPEC/Main $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>=1 @ n
"SPEC/Main $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c>= @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare1 @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare @ n
"SPEC/Main $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmax1 @ n
"SPEC/Main $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmax @ n
"SPEC/Main $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmin1 @ n
"SPEC/Main $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmin @ n
"SPEC/Main $fOrdSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Lind_3 v = Main.$s$fOrdSeq1
"SPEC/Main $fOrdSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Uind_3 v = Main.$s$fOrdSeq
"SPEC/Main $fOrdSeq_$cmax @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax1
"SPEC/Main $fOrdSeq_$cmax @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax
"SPEC/Main $fOrdSeq_$cmin @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin1
"SPEC/Main $fOrdSeq_$cmin @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin
"SPEC/Main fromList @ (Seq Lind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Lind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Lind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList2 @ a
"SPEC/Main fromList @ (Seq Uind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Uind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Uind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList @ a
"SPEC/Main mapKeys @ (Ind 2 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys3 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 2 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys1 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys2 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys @ k1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

