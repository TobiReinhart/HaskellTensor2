
==================== FINAL INTERFACE ====================
2019-01-14 15:48:25.282011 UTC

interface main:Main [hpc] 8043
  interface hash: dc8d4367521af49ce712dd2112f1273c
  ABI hash: 59182ca9c90b3b5ac75115a15c44a9c9
  export-list hash: 00b7a4d7c37599f3df9748d1e6446be2
  orphan hash: 8a005a1a337f95d35b8ad956c85ccec8
  flag hash: 8371069d9a3c93df4564b1c967507c8a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies: Ansatz AnsatzEqns2 BasicTensors
                     EquivarianceEqns EquivarianceMetric Index Integrabillity Ivar
                     Order2Int Order3Int Pde Perturbation Symmetrize Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  Ansatz feb006ea34150c9f561fce99c96513c5
  exports: 59de763b5ed7159158b40cd802183e31
  getAllInds 783e0080d02bd8e916cd48b33a5025dd
  getAllIndsLabel 3ce0d27e27bdc1552a623af8b1f86292
import  -/  AnsatzEqns2 9f97219dbed17ad16711488d0e78bb4c
  exports: 4dc5760416efc558b113e18d014c3a72
  ansatzAB 0455d31ba48bb609927460d273f73a08
  ansatzABb 6737fd638596f36dbe5aa9f968908a03
  ansatzAIB 992e6c555d1f552d01b42492852c9862
  ansatzAIBJ 67aab838b033a649332b09d2f4049d03
  ansatzAaBI 657e522af06098bcbc8c3630e88633db
  ansatzAaBb ca6060ebf506dfd8242dea540071551c
  intCond2NoSym b7a90dd63efd5d308af564bcc4cba5da
  intCondfirstOrder adf7a07886a6f25d6106b37e6b2ea345
  mkEqnSparseAnsatzAB 594695a33efc2f3c4cb15af38231ed1b
  mkEqnSparseAnsatzABb 35e90826ab9a7abee8644f0b88c7fbc3
  mkEqnSparseAnsatzAIB aa95ab060474a16e35b4df230d727982
  mkEqnSparseAnsatzAIBJ 7d5924794f2ac7a9cb9835b163328032
  mkEqnSparseAnsatzAaBI 541f347691aab0ca89576f55f97a6cbb
  mkEqnSparseAnsatzAaBb 8e74d5571ee6f08a66f157c7ad55bec5
  mkEqnSparseRemoveAIB 70bafecdefd258a354846bcd82f62615
  mkEqnSparsefirstOrder 21262b982f1c132cb7e7ed23c728d826
  mkEqnSparseintCond2NoSym 6e8eb76b58c343eb5214a5d615cc0a13
  removeAIB 2424d1fdbcffff71e3d06d4589c1509c
import  -/  BasicTensors 0df78451cdb64d61e6036444805588ff
  exports: e3eb46cbf5e0ff0a91078b17412e1317
  delta_9 d22b99ceb5d7fccaba80523aeb233ebd
  flatArea dafe102fa9e82f4531fea855a20ac749
  flatAreaMap 00fe57af877f05f840d815fd9479db08
  flatAreaST 8d04d96791f16fc29bf0336afba645a9
  interI_3 c1f77ae09fc7268af2bcc60cec1b5e02
  interJ_2 362b1aa162de63a16d8e4ffc4dc03f56
  interJ_Area 987c62b3368a5d0eb9619727446b86ff
  invEta 29cbd6497485ab1e1bb9ae455a681bd3
  invEtaAbs 425618e36b01c94361c70812b1a872a4
  ivar3M 848ae5997711deddd1e8874e3c02e89e
  triangleMap2 56aa8ecfa987217033efaa00715c566c
  triangleMap3 e91bf82386c7e77635cce33de25b8746
  triangleMapArea fa08e0ee195d1e7a634865e41bebf3c1
import  -/  EquivarianceEqns 944da51003f384ade1029a7d52cf5384
  exports: 84062590276b987b26bd45d594b7213f
  eqn1_1 cfea6f1d752366f2a694172dd697db52
  eqn1_1Flat 0e1c7f9fde7827589fd1255121fdee68
  eqn1_2 8db1bef3c0b209cf69772716c8306582
  eqn1_3 3012751b5e579f7d29952691f08d8853
  eqn1_4 0fbabe0b70c787e400c2b97386bbda72
  eqn2_2 c3c7607c457de98113e2d565cf023fa8
  eqn2_2Flat 20781707fce10622ed22644052cf3520
  eqn2_3 fff13002fcb42b766d3346c43665adf9
  eqn3_3 dec6abd25d17c60f850264513a6c4f4c
  eqn3_3Flat 410774d14af19ecc8c1461ef22e4d938
  mkEqn1Sparse 8bca361bcce797f067421dec5062fd07
  mkEqn2Sparse 66597f1af55a0c42b993f5dfe28e1b07
  mkEqn3Sparse 6d6fd4568024fc220bdc68d17e333ffa
  mkEqn4Sparse e9936e6dfe897344a56df1f56eb3e1d3
  mkEqn5Sparse acda8d2bb2e7882f91ce37465ad4852a
  mkEqn6Sparse 7a259c81cded6a74e60fa028b69a9de8
  mkEqnConstSparse 6027d8bd7b985e36b8a128c2af5066d1
  mkEqnConstSparseFlat c5092da7fc6566c34aef64adcdcaeb22
  showEqnsFlat ddb372e5f3886126823df96ac3b14c18
import  -/  EquivarianceMetric 94a0451584faf0eeea963f2ceda8b01e
  exports: 2b056822118b67df8be19594354d4341
  eqn1_1M 25d79727501a77eb02a5db34fc80ed30
  eqn1_2M 3c1f5599819fcbb4e6b30203234b5804
  eqn1_3M 37847c72965aacf3b1289c7ee94affe8
  eqn2_2M a6c9a0b7434443720ca3f3ccc119f467
  eqn2_3M 67fdf4cee79eadd53c784dc8f4714080
  eqn3_3M 906a46f62b7469f5936ca5945c8dba01
  mkEqn1SparseM f0073f80c0d75a68804604e9110b4ed4
  mkEqn2SparseM 74ccd8d49672422a77ca36b42bedd26f
  mkEqn3SparseM 05aeff35b379fae65f64ee1bd1380eec
  mkEqn4SparseM 25eca02eaed1ecb1ea0acc5ba4afd1fd
  mkEqn5SparseM 7891941d5e9ebd9597d3b33c03a35c46
  mkEqn6SparseM 12a339e25924b96fc810774bcc1123f9
  mkEqn6SparseMPulled 47c0c3b2c78ed25f05265ea96c565c4d
import  -/  Index e389b597f52dbfefe3745bcba1949c62
  exports: 02acfc58131cc32506762c89c9bc64b7
  Lind_20 9976c80afe3129a8da6eeef509cd939d
  Lind_9 199ec47d455794929a9c39c4489984a9
  Linds_3 b7f25c6c6ec24e0defe93a5bf531b4b2
  Uind_19 d671ee312bb9cf797ac44fea3cd70c8f
  Uind_20 b5e99ed389304ee9c82083925596c8cb
  Uind_9 8fce60bf392f1d712124e42ff35dcfc1
  Uinds_3 311b0a992b6841d7d23b3d8756aed0ef
  mkInd 5e4f36c0df3f4b8edd769168b4da8340
import  -/  Integrabillity d228707934964cc5d4985a843f52fc02
  exports: f7811f7e2add78f14be0731bd2330bbf
  areaMetricMetric1 bbe8071a66c16599e898ba037fe1981a
  areaMetricMetric1intCond 32f7b4541c2d55757e5645dad0605aed
  densityEqnArea1 d883df2bea737af7ef8ecb9b996a1d96
  densityEqnArea2 2cb4ff397e0d724f40016a0d67bdab8e
  densityEqnMetric1 df9b4138cbf425b99c379866c1f4113b
  densityEqnMetric2 26e116590c118e999cefe275c6f2faa9
  flatMetricInter 11c93fd8e7de26e0d6210f06f82c3f4e
  flatMetricInterProlong afd496628344ed2f55aeaa9530eaf7a0
  int1Test b835b3c74e4f06c9f7de5ec438887aff
  int1Test2 de6f038a557e46c53f64520daf39b7d7
  int1Test3 e6726a79ef80ae93da5041df196534d0
  int1Zero 190bec525b96df681b11ec9e8884e1c9
  intCond1 3d89276df4ac2644a927e4a9a91b7245
  intCond1RelFac c612129fedd074c318a93d9ea5cbce69
  intCond1Zero 165e1e96b4f1c9cb5717194f010b72b7
  intCond1noFactor 61514018173dfa8bfb074e0500ce191f
  intCond2 e5f2dbb5abff159eb9862f68c2041bf7
  intCond2_1 74ead4720dd8172b4969d9ad7cdd8c34
  intCond2_1Symbol f7dd987a9d0e2e4e65d28c92b2a448a5
  intCond2_1SymbolPure 10e6d1168ea694f6325da236eea15af9
  intCond2_1SymbolRed 1a4e13fcb1ee30777cea84fdaeee3d2e
  intCond2_1SymbolRedWrong c6aec5a0b95040ceff2dd100b82a7fd5
  intCond3 14c94e1d667f7cb02e9b02eca2d006ec
  intCondComp d4ef4d92fdebbc5fef2d3d02afa10f6e
  intCondCompNoSym 84945337f4ab98272933788ce4b1a1fe
  intCondCompZero cf4cdd0e521e732a7dc68feab6710e3a
  intCondOrd2 560fcb33287a348cca7c2f92bb71c274
  intCondSym c18b8f9f2997da4fafb2df8c9cfbb7b2
  intRankDef1 00cd005855e4102401a6e1c25c9a5108
  intRankDef2 2da377583ab18d2860f7da3b3c612ac1
  intRankDef3 23b803f3ee50ebcec4f3815cad7b9253
  intRankDef5 fdeae808b6436e3bfbeaf45698b47b3a
  inter4Factor 9e4c6ee4e2fa55535e903b928256ae6c
  inter4noFactor 6f9f1ea33969d2d34ef9b638cd7a7220
  inter6Factor cb4773ca058a698a4a3c15cdc2610b34
  inter6noFactor a1e2fe0b0085b5ff12b14421ed0d950c
  mkEqnSparseAreaM 413b499c8a254e20256ae1cd7514859b
  mkEqnSparseAreaMintCond 813170269f0adb5e039e44bb71e1a0a9
  mkEqnSparseBlock1Eta 0d1025409ce878ae250d31259688a88a
  mkEqnSparseCond1 34d2e39b88ceb6e68bd170ed1aa0b6c7
  mkEqnSparseCond1Zero cb543baeabd0a9efb1780f986caacb6f
  mkEqnSparseCond2 efe38a561ec4cbe977980a00da8f6ef4
  mkEqnSparseCond3 13ff3d60f16f1c97d8fd2109630b4dfc
  mkEqnSparseDens1 60300b9c0a67f0591e0e4cf5e0b4e8cb
  mkEqnSparseDens1Area 5d7d85a7133a98e1991516746fe86683
  mkEqnSparseDens2 d3c70b52413104e1bdf130f753311d2e
  mkEqnSparseDens2Area 8fa06f5de0fa9b64c0ef4ed988467e36
  mkEqnSparseProjector f476cee300758015fe33cc0459e1c4dd
  mkEqnSparseProjector2 70934047f27cefe1cbcb6c562eddeef5
  mkEqnSparseflatMetricInter a48cebe9fc230b66865b51ad88eaf4db
  mkEqnSparseflatMetricInterProlong 92a695ca7a8f6ee2390cb7e8811a70ff
  mkEqnSparseintCond2_1 6f30b57164b2c7a35b70b58e5e2d8769
  mkEqnSparseintCond2_1New b40cd213cac4c25a6e0a75da543ab7da
  mkEqnSparseintCond2_1Symbol 8ef38c385e4216ff8084ba24e320a1b8
  mkEqnSparseintCond2_1SymbolPure 1a40d8f9a95a44b592c094085d8fd02c
  mkEqnSparseintCond2_1SymbolRed 32267d0bcdcae30b2af7a299bfac373e
  mkEqnSparseintCond2_1SymbolRedFull 78e406bc99c5d8d424eb344efdaff5ca
  mkEqnSparseintCondComp fc441c14b591e0447926cae16760026e
  mkEqnSparseintCondCompNew 570158158051610d6e6e344a6a9857d4
  mkEqnSparseintCondCompNoSym a553cae80e130616d581e29e7b27d5f5
  mkEqnSparseintCondOrd2 2f42837a3e2f1d2d492c2593c3e6ae4b
  mkEqnSparseintCondSym 4a0ff96c3c3a03b198967efe5e6c87ce
  mkEqnSparseintRankDef1 a3e45699cf904a69e84493d635348884
  mkEqnSparseintRankDef3 c74ed25ac8aca3d88630ed5092e8042b
  mkEqnSparseinter6Mat 8c50ffecb02ff1adf81e4a742a13fc68
  mkEqnSparseinterMat ffbe79535ccabf79288f88f36c028f90
  projectorMatrix 7b405e0a47f25c322b495217fee52a49
  projectorMatrix2 dc7b8cf54475bfbb2ba7cf2c1baa827e
import  -/  Ivar 52a8dc212ab2f8456a526e9d381a1784
  exports: 847b7f62b7be31da91814bf314ffd8e5
  Ivar ab6885cb499b09a96006f6f783229377
  addIvar 67ce428981a403b8506e974c3b8272d4
  sMultIvar 6fe3f98bfd11ce74b5f6274a48774f32
import  -/  Order2Int f00ce383d526e12ff5f64a582e6d93af
  exports: 2b04398cba20fd8196465ef856206567
  ansatzAB2 b84daf663453de2df80e0736c704a3a9
  ansatzABb2 8cb218112d141934a806e5afbd890543
  ansatzAI2 4f649be8304b9ed2390bda1d46faeb31
  ansatzAIB2 e4a5b250b449c2edfde5e2a05ad7ba4b
  intAB1 a30134422dfae3df08955e26039787f8
  intAB2 e36779689c8a332d6660dc7a6ff9cfdb
  intAI d2ac4034440c5390a5ab65a4eb283e2e
  intAIB be4caf20c37da297606300f83972c859
  intAIBsym 7c7ae9d73bfcc3dcabfc76245503a147
  intAIBsymRed 6a44757ff7b09a366647e02758189895
  intAIBsymZero f2e170a75143b75fbdb131f52af1e6a5
  mkEqnSparseAnsatzAB2 460f02be303a964805c8352e4565d55a
  mkEqnSparseAnsatzABb2 49014ccbffbe7ad2bc154a3ca2a2d75c
  mkEqnSparseAnsatzAI2 0dac55c66739528c49f5938bcf076177
  mkEqnSparseAnsatzAIB2 0ae0af2a61e3af791162045f7dae25d8
  mkEqnSparseIntAB 14dddf94e1918784057786c935e80cda
  mkEqnSparseIntAI 4a2e08a47294520edb83bd96a06f42ef
  mkEqnSparseIntAIB 47779767e58f4e24470975ef006f1f06
  mkEqnSparseIntAIBsym 05a39b7221dff0c6f699b40cd47b17e8
import  -/  Order3Int 3b1510afa7b783d680c730bfd047188e
  exports: 9507dc54ea2831b0f018c3a4667f8526
  ansatzABC 6613ac0bce1a06fa83230ce5c0d12e7d
  mkEqnSparseAnsatzABC2 b30c504981cb3c8cebb009cb9f3fae62
import  -/  Pde 6cb99ff48b3771dcca3d3397050c4c62
  exports: cfda6ba989dea29b657cfa7f1b7972bc
  combinePdes a6dd12d0bf88d67c729bee565040b5db
  mkAllMultInds accafa7e536bac8a3252e41cd329aac1
  mkPdefromTens 3c26c965406e0f55f076c45bad744b9e
  prolongPdeAll 895f8278143cfb446f086f967405c273
  prolongPdeAllBlock1 d057fa7291138fa67c4ba12c62a13808
  triangleMap 73062c09bc2add55bf7a854dc1427954
import  -/  Perturbation 9cd3173f7dda3eefe87038fd2e336b85
  exports: 2151821fea7fdcfba530bb109075c579
  areaEvalMap14 ad6f19cda87e442aff95308d4843fa89
  evalFullAns 3f5bd82e41bdec92688ebde96bf23b81
  getRepIndsPert 13b6d55c805d5dbacccc6a3141a813e7
  mkPertAns 1c94df5eff2db4d14fa401f01010dfb7
  symAnsSetPert 2a4b458e30b9b27870a28d777b5e3934
import  -/  Symmetrize 66145e28705a6a21f2f4a17b4eadd368
  exports: c79a0ef965b8f406eb0b9e72ceb58ef0
  getRepInds c6035c72af4a6f7b04c068e41a254df9
  mkAns e8478eafe632cea5c721e905d7fe50db
  symAnsSet d0b7ac2190be176fd19e3a9b97f21a8c
import  -/  Tensor 70d6952dea62d47ab6f2d598c8b571ec
  exports: cc1f578937ee3122bbbb4f8cf3eb8582
  Tensor 6b5aa7fabc304949e9aed286ed95183b
  evalTensorVals 14734b541d192bc3f2a6f80e399a2e13
  tensorContractWith_3 d4730f4187bd6ebe8b3dd0280edaf514
  tensorContractWith_9 8930e2e4933f3ae0d2c7678e040aa484
  tensorProductWith 1110039333b95adaab3b9466e9a23aae
import  -/  tf-random-0.5:System.Random.TF 8abc0839ff798088d7b0fe5da790c9f8
import  -/  tf-random-0.5:System.Random.TF.Gen 8fa21695e0c1bda98aa67c940256094c
import  -/  tf-random-0.5:System.Random.TF.Init aa704b33ab60eed3e2b68a17a54fbfe6
import  -/  tf-random-0.5:System.Random.TF.Instances 8c4572fd10d56e74d9a1b310cc06013d
c6eac0d301cf3268ff874e0b87cdcc18
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Index.$fEqInd_$c== @ n @ Index.Uind_3 Index.$fEqUind_3)
                  (Main.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
ccfc8a8be776c15d2e41d574cb8cbed5
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Index.$fEqInd_$c== @ n @ Index.Lind_3 Index.$fEqLind_3)
                  (Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
4d7da6b064de3f20a09302ad2be67cbd
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8346b2ef730d1ee0d2286b70665ee6c4
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
31f160c34c46e3564e81435c03f764c8
  $s$fEqSeq ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_3
                     Index.$fEqUind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/= -}
a997727f2d0cb232f5d64dcbed0f3f5f
  $s$fEqSeq1 ::
    GHC.Classes.Eq (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  (Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_3
                     Index.$fEqLind_3)
                  Main.$s$fEqSeq_$s$fEqSeq_$c/=1 -}
3a327cf79015c50438140ad82d5247bb
  $s$fEqSeq_$s$fEqSeq_$c/= ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d2c2ba83c3963c88fb325c05cd889e24
  $s$fEqSeq_$s$fEqSeq_$c/=1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
718191ac253853eec270b1d9bf979fe1
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Main.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_3
                                                            Index.$fOrdUind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_3
                                                      Index.$fOrdUind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_3
                                                                                       Index.$fOrdUind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
48e2e4e431c8b45e37de3646fa79e475
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Main.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_3
                                                            Index.$fOrdLind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_3
                                                      Index.$fOrdLind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_3
                                                                                       Index.$fOrdLind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
5e280bac7e084c825c97af8a87662589
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_3
                                                    Index.$fOrdUind_3
                                                    a2
                                                    b1 } }) -}
a9ff29cd2b1741f691f47e3f4cb11f81
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_3
                                                    Index.$fOrdLind_3
                                                    a2
                                                    b1 } }) -}
6bd5050b856dfa03eba666df2543618c
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
80f3cf711b4b52c00da18c014c0a3980
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
7c6dacb9b5791dc73982fae577cb859e
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_3
                                                                                     Index.$fOrdUind_3
                                                                                     a2
                                                                                     b1 } }) -}
815dd8432b88d496db681e6da9ee411f
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_3
                                                                                     Index.$fOrdLind_3
                                                                                     a2
                                                                                     b1 } }) -}
98bd23e11d5684b9563e05647af8482d
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
a7296e1cd98e3baf9d4e021a79e9a8f1
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
281f3c3b2ec8d0fa79308295f502f953
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_3
                                                          Index.$fOrdUind_3
                                                          a2
                                                          b1 } }) -}
a9ea11a181df58ee40e368b745fa616f
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_3
                                                          Index.$fOrdLind_3
                                                          a2
                                                          b1 } }) -}
9563cd1eb8298b77d86fc450ecc70a27
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
8dad326a25a3283cd0266e4d7296fce8
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
47231d2e575d2c8b9d44ca062613bf7b
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
5892ff769326325f3e486d90118999ca
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
efdf30fe51c8cd5d6bbef038c6402870
  $s$fOrdSeq ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Uind_3)
                  Main.$s$fEqSeq
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Uind_3
                     Index.$fOrdUind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
369fd92c3d3f70b98a0a48cb406ce2ac
  $s$fOrdSeq1 ::
    GHC.Classes.Ord (Data.Sequence.Internal.Seq Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Index.Lind_3)
                  Main.$s$fEqSeq1
                  (Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c<=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (Data.Sequence.Internal.$fOrdSeq_$c>=
                     @ Index.Lind_3
                     Index.$fOrdLind_3)
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> x GHC.Types.True -> y })
                  (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                     (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<=
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          x
                          y of wild {
                     GHC.Types.False -> y GHC.Types.True -> x }) -}
07a76a18fb561c8f5d6209920136ef2e
  $s$fOrdSeq_$cmax ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a4904c488931d1e35b2c53524505243b
  $s$fOrdSeq_$cmax1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a8c704d92978162d6d06eb7c7e1fb97e
  $s$fOrdSeq_$cmin ::
    Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
    -> Data.Sequence.Internal.Seq Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Uind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Uind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
1c8ae2da021cdc8cc99aadfabc4116ee
  $s$fOrdSeq_$cmin1 ::
    Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
    -> Data.Sequence.Internal.Seq Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Data.Sequence.Internal.Seq Index.Lind_3)
                   (y :: Data.Sequence.Internal.Seq Index.Lind_3) ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<=
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
2c1d0030070d6ec677493f9272debeda
  $sfromList ::
    [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Uind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Uind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Uind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Uind_3
                                  Index.$fOrdUind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Uind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Uind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Uind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
57268a63cf840f35e0d9c7f73b0a32c1
  $sfromList1 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
acbb977343f951a76226029b89cd2c14
  $sfromList2 ::
    [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Data.Sequence.Internal.Seq Index.Lind_3, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (Data.Sequence.Internal.N:Seq[0]
                                     <Index.Lind_3>_R) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ (Data.Sequence.Internal.Seq Index.Lind_3)
                             @ a
                             1#
                             nt `cast` (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                             x1
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Data.Sequence.Internal.$fOrdSeq_$c>=
                                  @ Index.Lind_3
                                  Index.$fOrdLind_3
                                  kx
                                  ky of wild4 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$wpoly_go1
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                case kx
                                       `cast`
                                     (Data.Sequence.Internal.N:Seq[0]
                                          <Index.Lind_3>_R) of nt { DEFAULT ->
                                Main.$sfromList3
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                     @ a
                                     1#
                                     nt
                                       `cast`
                                     (Sym (Data.Sequence.Internal.N:Seq[0] <Index.Lind_3>_R))
                                     x0
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Data.Sequence.Internal.Seq Index.Lind_3)
                                        @ a))
                                  wild2 } } } } } } }) -}
c470f9016ce682e55cc5092c55efd61d
  $sfromList3 ::
    Data.Map.Internal.Map (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
1bd1a5feb2e61fdcda3c42211a0a5895
  $smapKeys ::
    (k1 -> Index.Ind 4 Index.Uind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Uind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Uind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Uind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Uind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Uind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Uind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 4 Index.Uind_3)
                   @ a
                   (Main.$s$fOrdInd @ 4)
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Uind_3, a)) eta)) -}
eca8d4d73e7eda7738caca7dfb695bf9
  $smapKeys2 ::
    (k1 -> Index.Ind 4 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 4 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 4 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 4 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 4 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 4 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 4 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 4 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 4)
                   (go13 (GHC.Types.[] @ (Index.Ind 4 Index.Lind_3, a)) eta)) -}
5c1be3b0886073308b624cfd9ca7f2cf
  $smapKeys3 ::
    (k1 -> Index.Ind 2 Index.Lind_3)
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (Index.Ind 2 Index.Lind_3) a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   (f :: k1 -> Index.Ind 2 Index.Lind_3)
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 letrec {
                   go13 :: [(Index.Ind 2 Index.Lind_3, a)]
                           -> Data.Map.Internal.Map k1 a -> [(Index.Ind 2 Index.Lind_3, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [(Index.Ind 2 Index.Lind_3, a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> go13
                            (GHC.Types.: @ (Index.Ind 2 Index.Lind_3, a) (f kx, x) (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 Data.Map.Internal.fromList
                   @ (Index.Ind 2 Index.Lind_3)
                   @ a
                   (Main.$s$fOrdInd1 @ 2)
                   (go13 (GHC.Types.[] @ (Index.Ind 2 Index.Lind_3, a)) eta)) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
21bf87fdb20aaf6f675686f21a2cd24f
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Lind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Lind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
589728a66bd324e5ac267d12cb366a97
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
    -> [(Data.Sequence.Internal.Seq Index.Uind_3, a)]
    -> Data.Map.Internal.Map
         (Data.Sequence.Internal.Seq Index.Uind_3) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
826c8cbcd8410ff75809f622ec425b47
  main :: GHC.Types.IO ()
  {- Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
beba920dd6f701af2295af129c4ffbb9
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Unfolding: ({__scc {main:Main.main} True False} \ (s :: GHC.Prim.State#
                                                               GHC.Prim.RealWorld) ->
                                                     {__scc {main:Main.main} False True} case System.Random.TF.Init.newTFGen1
                                                                                                s of ds1 { (#,#) ipv ipv1 ->
                                                                                         System.IO.appendFile2
                                                                                           @ ()
                                                                                           Main.main14
                                                                                           GHC.IO.IOMode.WriteMode
                                                                                           Main.main2
                                                                                             `cast`
                                                                                           (<GHC.IO.Handle.Types.Handle>_R
                                                                                            ->_R Sym (GHC.Types.N:IO[0]
                                                                                                          <()>_R))
                                                                                           ipv }) -}
97bf1bccdcd6aeb6f970406027b9de61
  main10 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main11 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
6997b1a079ca1b1cc101830d7cb0f327
  main11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
d9f8848d88b4ed3cf4be781e7fafa3fb
  main12 :: [Index.Uind_20]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                 @ Index.Uind_20
                                                                                                                                                                                                                                                                                                                                                 Main.main_a2 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                          case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                                 20# of lwild {
                                                                                                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                                                                                                            -> Index.$fEnumUind_20_go
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                                 @ Index.Uind_20 } }) -}
788e4c3f65225157d9854fc0c4c563db
  main13 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 4 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} Index.mkInd
                                                                                                    @ 4
                                                                                                    @ Index.Lind_3
                                                                                                    Main.main10
                                                                                                      `cast`
                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                              <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)) -}
2bb0d98bc4b6606d373ab087173362df
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
010efc30748c98c5e8a4fb4a79a02811
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("/Users/TobiasReinhart/Desktop/HaskellTensor/HaskellTensor2Data/Ansatz/2ndOrderInt/ansatzAB3_12_1_19.txt"#) -}
caf5704cb67d4bb89f7d07210b199ea6
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
fd6b28f1efdc12886d734db2aa1df93a
  main2 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hdl
                   ({__scc {main:Main.main} False True} EquivarianceEqns.showEqnsFlat
                                                          ({__scc {main:Main.main.ansAB} True False} Main.main3))
                   GHC.Types.False) -}
6dc17a524e6e96316df1c43417479b69
  main3 ::
    Data.Map.Internal.Map
      (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.ansAB} False True} case AnsatzEqns2.$wansatzAB
                                                                                                      Main.main_map1Area
                                                                                                      Main.main_map2Area
                                                                                                      Main.main_map1Metric of ww { Unit# ww1 ->
                                                                                               AnsatzEqns2.$wmkEqnSparseAnsatzAB
                                                                                                 Main.main_trian
                                                                                                 ww1 }) -}
f29178a505f597aeff34549af1853547
  main4 :: [Index.Uind_9]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                               @ Index.Uind_9
                                                                                                                                                                                                                                                                                                                                               Main.main_a of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                        case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                               9# of lwild {
                                                                                                                                                                                                                                                                                                                                          DEFAULT
                                                                                                                                                                                                                                                                                                                                          -> Index.$fEnumUind_9_go
                                                                                                                                                                                                                                                                                                                                               a#
                                                                                                                                                                                                                                                                                                                                          1#
                                                                                                                                                                                                                                                                                                                                          -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                               @ Index.Uind_9 } }) -}
7b0547cd1f6d8a5770414b4e979b7195
  main5 ::
    Data.Sequence.Internal.Seq Index.Lind_3 -> Index.Ind 2 Index.Lind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} Index.mkInd
                                                                                                      @ 2
                                                                                                      @ Index.Lind_3
                                                                                                      Main.main6
                                                                                                        `cast`
                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)) -}
80279e82394dc2c96c511d573e507a2c
  main6 :: GHC.Natural.Natural
  {- Unfolding: (case Main.main7 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
1c7904640b7498a7ac5cc358b390a991
  main7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
2fc38b2a035f450169fe93f02943839a
  main8 :: [Index.Lind_20]
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} False True} case GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                 @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                 Main.main_a1 of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                          case GHC.Prim.>#
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                                 20# of lwild {
                                                                                                                                                                                                                                                                                                                                            DEFAULT
                                                                                                                                                                                                                                                                                                                                            -> Index.$fEnumLind_20_go
                                                                                                                                                                                                                                                                                                                                                 a#
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            -> GHC.Types.[]
                                                                                                                                                                                                                                                                                                                                                 @ Index.Lind_20 } }) -}
d92166e461aaa342a7efee96bf9853f7
  main9 ::
    Data.Sequence.Internal.Seq Index.Uind_3 -> Index.Ind 4 Index.Uind_3
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} Index.mkInd
                                                                                                    @ 4
                                                                                                    @ Index.Uind_3
                                                                                                    Main.main10
                                                                                                      `cast`
                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                              <4>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <4>_N)) -}
1e89896328831e74c0dd7a6710e2b9b0
  main_a :: Index.Uind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} Index.$w$ctoEnum7
                                                                                                                                                          0#) -}
1617db18ff0e655664cf1384429eacbf
  main_a1 :: Index.Lind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} Index.$w$ctoEnum1
                                                                                                                                                           0#) -}
e3ff00f0a2ee231bd1389805c466f791
  main_a2 :: Index.Uind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} Index.$w$ctoEnum5
                                                                                                                                                           0#) -}
18edec4345f78606faddd0f45c022d92
  main_map1Area ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} True True} Main.$smapKeys2
                                                                                                   @ (Data.Sequence.Internal.Seq
                                                                                                        Index.Lind_3)
                                                                                                   @ Index.Uind_20
                                                                                                   Main.main13
                                                                                                   ({__scc {main:BasicTensors.triangleMapArea} True True} Main.$sfromList2
                                                                                                                                                            @ Index.Uind_20
                                                                                                                                                            (GHC.List.zip
                                                                                                                                                               @ (Data.Sequence.Internal.Seq
                                                                                                                                                                    Index.Lind_3)
                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                               (BasicTensors.$wareaDofList
                                                                                                                                                                  @ Index.Lind_3
                                                                                                                                                                  Index.$fEnumLind_3
                                                                                                                                                                  Index.$fOrdLind_3)
                                                                                                                                                               ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} True False} Main.main12)))) -}
45f61d509b85a80b39677afb712d40d5
  main_map1Metric ::
    Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} True True} Main.$smapKeys3
                                                                                                     @ (Data.Sequence.Internal.Seq
                                                                                                          Index.Lind_3)
                                                                                                     @ Index.Uind_9
                                                                                                     Main.main5
                                                                                                     ({__scc {main:BasicTensors.triangleMap2} True True} Main.$sfromList2
                                                                                                                                                           @ Index.Uind_9
                                                                                                                                                           (GHC.List.zip
                                                                                                                                                              @ (Data.Sequence.Internal.Seq
                                                                                                                                                                   Index.Lind_3)
                                                                                                                                                              @ Index.Uind_9
                                                                                                                                                              (BasicTensors.$wsymIndList
                                                                                                                                                                 @ Index.Lind_3
                                                                                                                                                                 Index.$fEnumLind_3
                                                                                                                                                                 2#
                                                                                                                                                                 BasicTensors.epsilon1)
                                                                                                                                                              ({__scc {main:Main.main} False True} {__scc {main:Main.main.map1Metric} False True} {__scc {main:BasicTensors.triangleMap2} False True} {__scc {main:Index.enumFrom} True False} Main.main4)))) -}
c793e13880cec64169d7543c47e6080d
  main_map2Area ::
    Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} True True} Main.$smapKeys
                                                                                                   @ (Data.Sequence.Internal.Seq
                                                                                                        Index.Uind_3)
                                                                                                   @ Index.Lind_20
                                                                                                   Main.main9
                                                                                                   ({__scc {main:BasicTensors.triangleMapArea} True True} Main.$sfromList
                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                            (GHC.List.zip
                                                                                                                                                               @ (Data.Sequence.Internal.Seq
                                                                                                                                                                    Index.Uind_3)
                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                               (BasicTensors.$wareaDofList
                                                                                                                                                                  @ Index.Uind_3
                                                                                                                                                                  Index.$fEnumUind_3
                                                                                                                                                                  Index.$fOrdUind_3)
                                                                                                                                                               ({__scc {main:Main.main} False True} {__scc {main:Main.main.map2Area} False True} {__scc {main:BasicTensors.triangleMapArea} False True} {__scc {main:Index.enumFrom} True False} Main.main8)))) -}
536950829e3face9d0e55b83d1096ce2
  main_trian :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
  {- Unfolding: ({__scc {main:Main.main} False True} {__scc {main:Main.main.trian} True True} Pde.$wtriangleMap
                                                                                                315#) -}
"SPEC/Main $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Main.$s$fEqInd1 @ n
"SPEC/Main $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                               (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Main.$s$fEqInd @ n
"SPEC/Main $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Main $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Main.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Main $fEqSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Lind_3 v = Main.$s$fEqSeq1
"SPEC/Main $fEqSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Eq
                                                     Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq @ Index.Uind_3 v = Main.$s$fEqSeq
"SPEC/Main $fEqSeq_$c/= @ Lind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Lind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Lind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=1
"SPEC/Main $fEqSeq_$c/= @ Uind_3" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                             Index.Uind_3)
  Data.Sequence.Internal.$fEqSeq_$c/= @ Index.Uind_3 $dEq
  = Main.$s$fEqSeq_$s$fEqSeq_$c/=
"SPEC/Main $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Main.$s$fOrdInd1 @ n
"SPEC/Main $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Main.$s$fOrdInd @ n
"SPEC/Main $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<1 @ n
"SPEC/Main $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c< @ n
"SPEC/Main $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c<=1 @ n
"SPEC/Main $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c<= @ n
"SPEC/Main $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>1 @ n
"SPEC/Main $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                    ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c> @ n
"SPEC/Main $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$c>=1 @ n
"SPEC/Main $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                     ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$c>= @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare1 @ n
"SPEC/Main $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                          ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$ccompare @ n
"SPEC/Main $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmax1 @ n
"SPEC/Main $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmax @ n
"SPEC/Main $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Main.$s$fOrdInd_$cmin1 @ n
"SPEC/Main $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Main.$s$fOrdInd_$cmin @ n
"SPEC/Main $fOrdSeq @ Lind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Lind_3 v = Main.$s$fOrdSeq1
"SPEC/Main $fOrdSeq @ Uind_3" [orphan] forall (v :: GHC.Classes.Ord
                                                      Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq @ Index.Uind_3 v = Main.$s$fOrdSeq
"SPEC/Main $fOrdSeq_$cmax @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax1
"SPEC/Main $fOrdSeq_$cmax @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmax @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmax
"SPEC/Main $fOrdSeq_$cmin @ Lind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Lind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Lind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin1
"SPEC/Main $fOrdSeq_$cmin @ Uind_3" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Index.Uind_3)
  Data.Sequence.Internal.$fOrdSeq_$cmin @ Index.Uind_3 $dOrd
  = Main.$s$fOrdSeq_$cmin
"SPEC/Main fromList @ (Seq Lind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Lind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Lind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList2 @ a
"SPEC/Main fromList @ (Seq Uind_3) _" [orphan] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord
                                                                  (Data.Sequence.Internal.Seq
                                                                     Index.Uind_3))
  Data.Map.Strict.Internal.fromList @ (Data.Sequence.Internal.Seq
                                         Index.Uind_3)
                                    @ a
                                    $dOrd
  = Main.$sfromList @ a
"SPEC/Main mapKeys @ (Ind 2 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 2 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 2 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys3 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Lind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Lind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Lind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys2 @ k1 @ a
"SPEC/Main mapKeys @ (Ind 4 Uind_3) _ _" [orphan] forall @ k1
                                                         @ a
                                                         ($dOrd :: GHC.Classes.Ord
                                                                     (Index.Ind 4 Index.Uind_3))
  Data.Map.Internal.mapKeys @ (Index.Ind 4 Index.Uind_3)
                            @ k1
                            @ a
                            $dOrd
  = Main.$smapKeys @ k1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

