
==================== FINAL INTERFACE ====================
2019-01-27 13:06:32.51978 UTC

interface main:PerturbationTree2 [hpc] 8043
  interface hash: 9ba30ae69246a82905f32efbfaacc75f
  ABI hash: 26f6d548603bd51706899564188401e5
  export-list hash: 7bc9ef096bdb1f5c85b28e768516f22a
  orphan hash: da888f9b7238f0722db02707c713b398
  flag hash: badd6e954112606c59e049e70d21435f
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  PerturbationTree2.flattenForest
  PerturbationTree2.getEpsForest
  PerturbationTree2.getEpsilonInds
  PerturbationTree2.getEtaForest
  PerturbationTree2.getEtaInds
  PerturbationTree2.getForestLabels
  PerturbationTree2.mapNodes
  PerturbationTree2.mkAllVars
  PerturbationTree2.mkEpsilonList
  PerturbationTree2.mkEtaList
  PerturbationTree2.mkForestFromAscList
  PerturbationTree2.printAnsatz
  PerturbationTree2.reduceAnsatzEps
  PerturbationTree2.reduceAnsatzEta
  PerturbationTree2.relabelAnsatzForest
  PerturbationTree2.showAnsatzNode
  PerturbationTree2.symAnsatzForestEps
  PerturbationTree2.symAnsatzForestEta
  PerturbationTree2.AnsatzForest
  PerturbationTree2.AnsatzNode
  PerturbationTree2.Symmetry
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0* deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.IntMap.Internal ef73a09d9589b16c95e337bc0715aa57
import  -/  containers-0.5.11.0:Data.IntMap.Strict 79a3c61ca2c76eb71c4304029717e288
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
1191b8140eaba8122ae4967bc6483f20
  $fEqAnsatzForest ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (PerturbationTree2.AnsatzForest a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (PerturbationTree2.AnsatzForest a)
                  (PerturbationTree2.$fEqAnsatzForest_$c== @ a v)
                  (PerturbationTree2.$fEqAnsatzForest_$c/= @ a v) -}
1191b8140eaba8122ae4967bc6483f20
  $fEqAnsatzForest_$c/= ::
    GHC.Classes.Eq a =>
    PerturbationTree2.AnsatzForest a
    -> PerturbationTree2.AnsatzForest a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq1 :: GHC.Classes.Eq a)
                   (x :: PerturbationTree2.AnsatzForest a)
                   (y :: PerturbationTree2.AnsatzForest a) ->
                 case PerturbationTree2.$fEqAnsatzForest_$c==
                        @ a
                        $dEq1
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1191b8140eaba8122ae4967bc6483f20
  $fEqAnsatzForest_$c== ::
    GHC.Classes.Eq a =>
    PerturbationTree2.AnsatzForest a
    -> PerturbationTree2.AnsatzForest a -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)> -}
2125d03a5bdeb11eedf586a05bbd4065
  $fEqAnsatzForest_$s$c== ::
    PerturbationTree2.AnsatzForest
      (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a28a071977fc922da3210b2204bebf60
  $fEqAnsatzNode ::
    GHC.Classes.Eq a => GHC.Classes.Eq (PerturbationTree2.AnsatzNode a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (PerturbationTree2.AnsatzNode a)
                  (PerturbationTree2.$fEqAnsatzNode_$c== @ a v)
                  (PerturbationTree2.$fEqAnsatzNode_$c/= @ a v) -}
a28a071977fc922da3210b2204bebf60
  $fEqAnsatzNode_$c/= ::
    GHC.Classes.Eq a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq1 :: GHC.Classes.Eq a)
                   (x :: PerturbationTree2.AnsatzNode a)
                   (y :: PerturbationTree2.AnsatzNode a) ->
                 case PerturbationTree2.$fEqAnsatzNode_$c== @ a $dEq1 x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a28a071977fc922da3210b2204bebf60
  $fEqAnsatzNode_$c== ::
    GHC.Classes.Eq a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: PerturbationTree2.AnsatzNode a)
                   (ds1 :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.==} True True} case ds of wild {
                                                                 PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT -> GHC.Types.False
                                                                      PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                      -> case GHC.Classes.==
                                                                                @ a
                                                                                $dEq1
                                                                                a1
                                                                                b1 of wild2 {
                                                                           GHC.Types.False
                                                                           -> GHC.Types.False
                                                                           GHC.Types.True
                                                                           -> case GHC.Classes.==
                                                                                     @ a
                                                                                     $dEq1
                                                                                     a2
                                                                                     b2 of wild3 {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.False
                                                                                GHC.Types.True
                                                                                -> case GHC.Classes.==
                                                                                          @ a
                                                                                          $dEq1
                                                                                          a3
                                                                                          b3 of wild4 {
                                                                                     GHC.Types.False
                                                                                     -> GHC.Types.False
                                                                                     GHC.Types.True
                                                                                     -> GHC.Classes.==
                                                                                          @ a
                                                                                          $dEq1
                                                                                          a4
                                                                                          b4 } } } }
                                                                 PerturbationTree2.Eta a1 a2
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT -> GHC.Types.False
                                                                      PerturbationTree2.Eta b1 b2
                                                                      -> case GHC.Classes.==
                                                                                @ a
                                                                                $dEq1
                                                                                a1
                                                                                b1 of wild2 {
                                                                           GHC.Types.False
                                                                           -> GHC.Types.False
                                                                           GHC.Types.True
                                                                           -> GHC.Classes.==
                                                                                @ a
                                                                                $dEq1
                                                                                a2
                                                                                b2 } }
                                                                 PerturbationTree2.Var a1 a2
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT -> GHC.Types.False
                                                                      PerturbationTree2.Var b1 b2
                                                                      -> case a1 of wild2 { GHC.Real.:% a4 a5 ->
                                                                         case b1 of wild3 { GHC.Real.:% b4 b5 ->
                                                                         case GHC.Integer.Type.eqInteger#
                                                                                a4
                                                                                b4 of wild4 {
                                                                           DEFAULT
                                                                           -> GHC.Types.False
                                                                           1#
                                                                           -> case GHC.Integer.Type.eqInteger#
                                                                                     a5
                                                                                     b5 of wild5 {
                                                                                DEFAULT
                                                                                -> GHC.Types.False
                                                                                1#
                                                                                -> GHC.Classes.eqInt
                                                                                     a2
                                                                                     b2 } } } } } }) -}
a28a071977fc922da3210b2204bebf60
  $fEqAnsatzNode_$s$c/= ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (y :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 case PerturbationTree2.$fEqAnsatzNode_$s$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a28a071977fc922da3210b2204bebf60
  $fEqAnsatzNode_$s$c== ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (ds1 :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.==} True True} case ds of wild {
                                                                 PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT -> GHC.Types.False
                                                                      PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                      -> case a1 of wild2 { GHC.Types.I# x ->
                                                                         case b1 of wild3 { GHC.Types.I# y ->
                                                                         case GHC.Prim.==#
                                                                                x
                                                                                y of lwild {
                                                                           DEFAULT
                                                                           -> GHC.Types.False
                                                                           1#
                                                                           -> case a2 of wild4 { GHC.Types.I# x1 ->
                                                                              case b2 of wild5 { GHC.Types.I# y1 ->
                                                                              case GHC.Prim.==#
                                                                                     x1
                                                                                     y1 of lwild1 {
                                                                                DEFAULT
                                                                                -> GHC.Types.False
                                                                                1#
                                                                                -> case a3 of wild6 { GHC.Types.I# x2 ->
                                                                                   case b3 of wild7 { GHC.Types.I# y2 ->
                                                                                   case GHC.Prim.==#
                                                                                          x2
                                                                                          y2 of lwild2 {
                                                                                     DEFAULT
                                                                                     -> GHC.Types.False
                                                                                     1#
                                                                                     -> GHC.Classes.eqInt
                                                                                          a4
                                                                                          b4 } } } } } } } } } }
                                                                 PerturbationTree2.Eta a1 a2
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT -> GHC.Types.False
                                                                      PerturbationTree2.Eta b1 b2
                                                                      -> case a1 of wild2 { GHC.Types.I# x ->
                                                                         case b1 of wild3 { GHC.Types.I# y ->
                                                                         case GHC.Prim.==#
                                                                                x
                                                                                y of lwild {
                                                                           DEFAULT
                                                                           -> GHC.Types.False
                                                                           1#
                                                                           -> GHC.Classes.eqInt
                                                                                a2
                                                                                b2 } } } }
                                                                 PerturbationTree2.Var a1 a2
                                                                 -> case ds1 of wild1 {
                                                                      DEFAULT -> GHC.Types.False
                                                                      PerturbationTree2.Var b1 b2
                                                                      -> case a1 of wild2 { GHC.Real.:% a4 a5 ->
                                                                         case b1 of wild3 { GHC.Real.:% b4 b5 ->
                                                                         case GHC.Integer.Type.eqInteger#
                                                                                a4
                                                                                b4 of wild4 {
                                                                           DEFAULT
                                                                           -> GHC.Types.False
                                                                           1#
                                                                           -> case GHC.Integer.Type.eqInteger#
                                                                                     a5
                                                                                     b5 of wild5 {
                                                                                DEFAULT
                                                                                -> GHC.Types.False
                                                                                1#
                                                                                -> GHC.Classes.eqInt
                                                                                     a2
                                                                                     b2 } } } } } }) -}
a28a071977fc922da3210b2204bebf60
  $fEqAnsatzNode_$s$fEqAnsatzNode ::
    GHC.Classes.Eq (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (PerturbationTree2.AnsatzNode GHC.Types.Int)
                  PerturbationTree2.$fEqAnsatzNode_$s$c==
                  PerturbationTree2.$fEqAnsatzNode_$s$c/= -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (PerturbationTree2.AnsatzNode a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (PerturbationTree2.AnsatzNode a)
                  (PerturbationTree2.$fOrdAnsatzNode_$cp1Ord @ a v)
                  (PerturbationTree2.$fOrdAnsatzNode_$ccompare @ a v)
                  (PerturbationTree2.$fOrdAnsatzNode_$c< @ a v)
                  (PerturbationTree2.$fOrdAnsatzNode_$c<= @ a v)
                  (\ (a1 :: PerturbationTree2.AnsatzNode a)
                     (b :: PerturbationTree2.AnsatzNode a) ->
                   {__scc {main:PerturbationTree2.>} True True} PerturbationTree2.$fOrdAnsatzNode_$c<
                                                                  @ a
                                                                  v
                                                                  b
                                                                  a1)
                  (PerturbationTree2.$fOrdAnsatzNode_$c>= @ a v)
                  (PerturbationTree2.$fOrdAnsatzNode_$cmax @ a v)
                  (PerturbationTree2.$fOrdAnsatzNode_$cmin @ a v) -}
17e583209b063bf3832da98e6d9f6bd3
  $fOrdAnsatzNode1 ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.>=} True True} {__scc {main:PerturbationTree2.<} True False} case a of wild {
                                                                                                               PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                                                               -> case b of wild1 {
                                                                                                                    DEFAULT
                                                                                                                    -> GHC.Types.False
                                                                                                                    PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                                                                    -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                            a1
                                                                                                                                                                            b1 of wild2 {
                                                                                                                         GHC.Types.LT
                                                                                                                         -> GHC.Types.False
                                                                                                                         GHC.Types.EQ
                                                                                                                         -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                 a2
                                                                                                                                                                                 b2 of wild3 {
                                                                                                                              GHC.Types.LT
                                                                                                                              -> GHC.Types.False
                                                                                                                              GHC.Types.EQ
                                                                                                                              -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                      a3
                                                                                                                                                                                      b3 of wild4 {
                                                                                                                                   GHC.Types.LT
                                                                                                                                   -> GHC.Types.False
                                                                                                                                   GHC.Types.EQ
                                                                                                                                   -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                           a4
                                                                                                                                                                                           b4 of wild5 {
                                                                                                                                        GHC.Types.False
                                                                                                                                        -> GHC.Types.True
                                                                                                                                        GHC.Types.True
                                                                                                                                        -> GHC.Types.False }
                                                                                                                                   GHC.Types.GT
                                                                                                                                   -> GHC.Types.True }
                                                                                                                              GHC.Types.GT
                                                                                                                              -> GHC.Types.True }
                                                                                                                         GHC.Types.GT
                                                                                                                         -> GHC.Types.True } }
                                                                                                               PerturbationTree2.Eta a1 a2
                                                                                                               -> case b of wild1 {
                                                                                                                    PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                                                                    -> GHC.Types.True
                                                                                                                    PerturbationTree2.Eta b1 b2
                                                                                                                    -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                            a1
                                                                                                                                                                            b1 of wild2 {
                                                                                                                         GHC.Types.LT
                                                                                                                         -> GHC.Types.False
                                                                                                                         GHC.Types.EQ
                                                                                                                         -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                 a2
                                                                                                                                                                                 b2 of wild3 {
                                                                                                                              GHC.Types.False
                                                                                                                              -> GHC.Types.True
                                                                                                                              GHC.Types.True
                                                                                                                              -> GHC.Types.False }
                                                                                                                         GHC.Types.GT
                                                                                                                         -> GHC.Types.True }
                                                                                                                    PerturbationTree2.Var ipv ipv1
                                                                                                                    -> GHC.Types.False }
                                                                                                               PerturbationTree2.Var a1 a2
                                                                                                               -> case b of wild1 {
                                                                                                                    DEFAULT
                                                                                                                    -> GHC.Types.True
                                                                                                                    PerturbationTree2.Var b1 b2
                                                                                                                    -> case {__scc {main:PerturbationTree2.<} False True} GHC.Real.$fEnumRatio_$s$ccompare
                                                                                                                                                                            a1
                                                                                                                                                                            b1 of wild2 {
                                                                                                                         GHC.Types.LT
                                                                                                                         -> GHC.Types.False
                                                                                                                         GHC.Types.EQ
                                                                                                                         -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                 a2
                                                                                                                                                                                 b2 of wild3 {
                                                                                                                              GHC.Types.False
                                                                                                                              -> GHC.Types.True
                                                                                                                              GHC.Types.True
                                                                                                                              -> GHC.Types.False }
                                                                                                                         GHC.Types.GT
                                                                                                                         -> GHC.Types.True } } }) -}
3e53dc4e62afb4561597476e318bf544
  $fOrdAnsatzNode2 ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.<=} True True} {__scc {main:PerturbationTree2.<} True False} case b of wild {
                                                                                                               PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                                                               -> case a of wild1 {
                                                                                                                    DEFAULT
                                                                                                                    -> GHC.Types.False
                                                                                                                    PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                                                                    -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                            a1
                                                                                                                                                                            b1 of wild2 {
                                                                                                                         GHC.Types.LT
                                                                                                                         -> GHC.Types.False
                                                                                                                         GHC.Types.EQ
                                                                                                                         -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                 a2
                                                                                                                                                                                 b2 of wild3 {
                                                                                                                              GHC.Types.LT
                                                                                                                              -> GHC.Types.False
                                                                                                                              GHC.Types.EQ
                                                                                                                              -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                      a3
                                                                                                                                                                                      b3 of wild4 {
                                                                                                                                   GHC.Types.LT
                                                                                                                                   -> GHC.Types.False
                                                                                                                                   GHC.Types.EQ
                                                                                                                                   -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                           a4
                                                                                                                                                                                           b4 of wild5 {
                                                                                                                                        GHC.Types.False
                                                                                                                                        -> GHC.Types.True
                                                                                                                                        GHC.Types.True
                                                                                                                                        -> GHC.Types.False }
                                                                                                                                   GHC.Types.GT
                                                                                                                                   -> GHC.Types.True }
                                                                                                                              GHC.Types.GT
                                                                                                                              -> GHC.Types.True }
                                                                                                                         GHC.Types.GT
                                                                                                                         -> GHC.Types.True } }
                                                                                                               PerturbationTree2.Eta a1 a2
                                                                                                               -> case a of wild1 {
                                                                                                                    PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                                                                    -> GHC.Types.True
                                                                                                                    PerturbationTree2.Eta b1 b2
                                                                                                                    -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                            a1
                                                                                                                                                                            b1 of wild2 {
                                                                                                                         GHC.Types.LT
                                                                                                                         -> GHC.Types.False
                                                                                                                         GHC.Types.EQ
                                                                                                                         -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                 a2
                                                                                                                                                                                 b2 of wild3 {
                                                                                                                              GHC.Types.False
                                                                                                                              -> GHC.Types.True
                                                                                                                              GHC.Types.True
                                                                                                                              -> GHC.Types.False }
                                                                                                                         GHC.Types.GT
                                                                                                                         -> GHC.Types.True }
                                                                                                                    PerturbationTree2.Var ipv ipv1
                                                                                                                    -> GHC.Types.False }
                                                                                                               PerturbationTree2.Var a1 a2
                                                                                                               -> case a of wild1 {
                                                                                                                    DEFAULT
                                                                                                                    -> GHC.Types.True
                                                                                                                    PerturbationTree2.Var b1 b2
                                                                                                                    -> case {__scc {main:PerturbationTree2.<} False True} GHC.Real.$fEnumRatio_$s$ccompare
                                                                                                                                                                            a1
                                                                                                                                                                            b1 of wild2 {
                                                                                                                         GHC.Types.LT
                                                                                                                         -> GHC.Types.False
                                                                                                                         GHC.Types.EQ
                                                                                                                         -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                 a2
                                                                                                                                                                                 b2 of wild3 {
                                                                                                                              GHC.Types.False
                                                                                                                              -> GHC.Types.True
                                                                                                                              GHC.Types.True
                                                                                                                              -> GHC.Types.False }
                                                                                                                         GHC.Types.GT
                                                                                                                         -> GHC.Types.True } } }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$c< ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),1*C1(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: PerturbationTree2.AnsatzNode a)
                   (b :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.<} True True} case a1 of wild {
                                                                PerturbationTree2.Epsilon a2 a3 a4 a5
                                                                -> case b of wild1 {
                                                                     DEFAULT -> GHC.Types.True
                                                                     PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                     -> case GHC.Classes.compare
                                                                               @ a
                                                                               $dOrd
                                                                               a2
                                                                               b1 of wild2 {
                                                                          GHC.Types.LT
                                                                          -> GHC.Types.True
                                                                          GHC.Types.EQ
                                                                          -> case GHC.Classes.compare
                                                                                    @ a
                                                                                    $dOrd
                                                                                    a3
                                                                                    b2 of wild3 {
                                                                               GHC.Types.LT
                                                                               -> GHC.Types.True
                                                                               GHC.Types.EQ
                                                                               -> case GHC.Classes.compare
                                                                                         @ a
                                                                                         $dOrd
                                                                                         a4
                                                                                         b3 of wild4 {
                                                                                    GHC.Types.LT
                                                                                    -> GHC.Types.True
                                                                                    GHC.Types.EQ
                                                                                    -> GHC.Classes.<
                                                                                         @ a
                                                                                         $dOrd
                                                                                         a5
                                                                                         b4
                                                                                    GHC.Types.GT
                                                                                    -> GHC.Types.False }
                                                                               GHC.Types.GT
                                                                               -> GHC.Types.False }
                                                                          GHC.Types.GT
                                                                          -> GHC.Types.False } }
                                                                PerturbationTree2.Eta a2 a3
                                                                -> case b of wild1 {
                                                                     PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                     -> GHC.Types.False
                                                                     PerturbationTree2.Eta b1 b2
                                                                     -> case GHC.Classes.compare
                                                                               @ a
                                                                               $dOrd
                                                                               a2
                                                                               b1 of wild2 {
                                                                          GHC.Types.LT
                                                                          -> GHC.Types.True
                                                                          GHC.Types.EQ
                                                                          -> GHC.Classes.<
                                                                               @ a
                                                                               $dOrd
                                                                               a3
                                                                               b2
                                                                          GHC.Types.GT
                                                                          -> GHC.Types.False }
                                                                     PerturbationTree2.Var ipv ipv1
                                                                     -> GHC.Types.True }
                                                                PerturbationTree2.Var a2 a3
                                                                -> case b of wild1 {
                                                                     DEFAULT -> GHC.Types.False
                                                                     PerturbationTree2.Var b1 b2
                                                                     -> case a2 of ww { GHC.Real.:% ww1 ww2 ->
                                                                        case b1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                        case GHC.Real.$w$s$ccompare
                                                                               ww1
                                                                               ww2
                                                                               ww4
                                                                               ww5 of wild2 {
                                                                          GHC.Types.LT
                                                                          -> GHC.Types.True
                                                                          GHC.Types.EQ
                                                                          -> GHC.Classes.ltInt a3 b2
                                                                          GHC.Types.GT
                                                                          -> GHC.Types.False } } } } }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$c<= ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: PerturbationTree2.AnsatzNode a)
                   (b :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.<=} True True} case PerturbationTree2.$fOrdAnsatzNode_$c<
                                                                      @ a
                                                                      $dOrd
                                                                      b
                                                                      a1 of wild {
                                                                 GHC.Types.False -> GHC.Types.True
                                                                 GHC.Types.True
                                                                 -> GHC.Types.False }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$c>= ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: PerturbationTree2.AnsatzNode a)
                   (b :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.>=} True True} case PerturbationTree2.$fOrdAnsatzNode_$c<
                                                                      @ a
                                                                      $dOrd
                                                                      a1
                                                                      b of wild {
                                                                 GHC.Types.False -> GHC.Types.True
                                                                 GHC.Types.True
                                                                 -> GHC.Types.False }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$ccompare ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> GHC.Types.Ordering
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: PerturbationTree2.AnsatzNode a)
                   (b :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.compare} True True} case a1 of wild {
                                                                      PerturbationTree2.Epsilon a2 a3 a4 a5
                                                                      -> case b of wild1 {
                                                                           DEFAULT -> GHC.Types.LT
                                                                           PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                           -> case GHC.Classes.compare
                                                                                     @ a
                                                                                     $dOrd
                                                                                     a2
                                                                                     b1 of wild2 {
                                                                                GHC.Types.LT
                                                                                -> GHC.Types.LT
                                                                                GHC.Types.EQ
                                                                                -> case GHC.Classes.compare
                                                                                          @ a
                                                                                          $dOrd
                                                                                          a3
                                                                                          b2 of wild3 {
                                                                                     GHC.Types.LT
                                                                                     -> GHC.Types.LT
                                                                                     GHC.Types.EQ
                                                                                     -> case GHC.Classes.compare
                                                                                               @ a
                                                                                               $dOrd
                                                                                               a4
                                                                                               b3 of wild4 {
                                                                                          GHC.Types.LT
                                                                                          -> GHC.Types.LT
                                                                                          GHC.Types.EQ
                                                                                          -> GHC.Classes.compare
                                                                                               @ a
                                                                                               $dOrd
                                                                                               a5
                                                                                               b4
                                                                                          GHC.Types.GT
                                                                                          -> GHC.Types.GT }
                                                                                     GHC.Types.GT
                                                                                     -> GHC.Types.GT }
                                                                                GHC.Types.GT
                                                                                -> GHC.Types.GT } }
                                                                      PerturbationTree2.Eta a2 a3
                                                                      -> case b of wild1 {
                                                                           PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                           -> GHC.Types.GT
                                                                           PerturbationTree2.Eta b1 b2
                                                                           -> case GHC.Classes.compare
                                                                                     @ a
                                                                                     $dOrd
                                                                                     a2
                                                                                     b1 of wild2 {
                                                                                GHC.Types.LT
                                                                                -> GHC.Types.LT
                                                                                GHC.Types.EQ
                                                                                -> GHC.Classes.compare
                                                                                     @ a
                                                                                     $dOrd
                                                                                     a3
                                                                                     b2
                                                                                GHC.Types.GT
                                                                                -> GHC.Types.GT }
                                                                           PerturbationTree2.Var ipv ipv1
                                                                           -> GHC.Types.LT }
                                                                      PerturbationTree2.Var a2 a3
                                                                      -> case b of wild1 {
                                                                           DEFAULT -> GHC.Types.GT
                                                                           PerturbationTree2.Var b1 b2
                                                                           -> case a2 of ww { GHC.Real.:% ww1 ww2 ->
                                                                              case b1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                              case GHC.Real.$w$s$ccompare
                                                                                     ww1
                                                                                     ww2
                                                                                     ww4
                                                                                     ww5 of wild2 {
                                                                                GHC.Types.LT
                                                                                -> GHC.Types.LT
                                                                                GHC.Types.EQ
                                                                                -> GHC.Classes.compareInt
                                                                                     a3
                                                                                     b2
                                                                                GHC.Types.GT
                                                                                -> GHC.Types.GT } } } } }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$cmax ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> PerturbationTree2.AnsatzNode a
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: PerturbationTree2.AnsatzNode a)
                   (y :: PerturbationTree2.AnsatzNode a) ->
                 case {__scc {main:PerturbationTree2.<=} True True} PerturbationTree2.$fOrdAnsatzNode_$c<
                                                                      @ a
                                                                      $dOrd
                                                                      y
                                                                      x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$cmin ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> PerturbationTree2.AnsatzNode a
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A,A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: PerturbationTree2.AnsatzNode a)
                   (y :: PerturbationTree2.AnsatzNode a) ->
                 case {__scc {main:PerturbationTree2.<=} True True} PerturbationTree2.$fOrdAnsatzNode_$c<
                                                                      @ a
                                                                      $dOrd
                                                                      y
                                                                      x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (PerturbationTree2.AnsatzNode a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 PerturbationTree2.$fEqAnsatzNode
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$s$c< ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.<} True True} case a of wild {
                                                                PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                -> case b of wild1 {
                                                                     DEFAULT -> GHC.Types.True
                                                                     PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                     -> case a1 of wild2 { GHC.Types.I# x# ->
                                                                        case b1 of wild3 { GHC.Types.I# y# ->
                                                                        case GHC.Prim.<#
                                                                               x#
                                                                               y# of lwild {
                                                                          DEFAULT
                                                                          -> case GHC.Prim.==#
                                                                                    x#
                                                                                    y# of lwild1 {
                                                                               DEFAULT
                                                                               -> GHC.Types.False
                                                                               1#
                                                                               -> case a2 of wild4 { GHC.Types.I# x#1 ->
                                                                                  case b2 of wild5 { GHC.Types.I# y#1 ->
                                                                                  case GHC.Prim.<#
                                                                                         x#1
                                                                                         y#1 of lwild2 {
                                                                                    DEFAULT
                                                                                    -> case GHC.Prim.==#
                                                                                              x#1
                                                                                              y#1 of lwild3 {
                                                                                         DEFAULT
                                                                                         -> GHC.Types.False
                                                                                         1#
                                                                                         -> case a3 of wild6 { GHC.Types.I# x#2 ->
                                                                                            case b3 of wild7 { GHC.Types.I# y#2 ->
                                                                                            case GHC.Prim.<#
                                                                                                   x#2
                                                                                                   y#2 of lwild4 {
                                                                                              DEFAULT
                                                                                              -> case GHC.Prim.==#
                                                                                                        x#2
                                                                                                        y#2 of lwild5 {
                                                                                                   DEFAULT
                                                                                                   -> GHC.Types.False
                                                                                                   1#
                                                                                                   -> GHC.Classes.ltInt
                                                                                                        a4
                                                                                                        b4 }
                                                                                              1#
                                                                                              -> GHC.Types.True } } } }
                                                                                    1#
                                                                                    -> GHC.Types.True } } } }
                                                                          1#
                                                                          -> GHC.Types.True } } } }
                                                                PerturbationTree2.Eta a1 a2
                                                                -> case b of wild1 {
                                                                     PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                     -> GHC.Types.False
                                                                     PerturbationTree2.Eta b1 b2
                                                                     -> case a1 of wild2 { GHC.Types.I# x# ->
                                                                        case b1 of wild3 { GHC.Types.I# y# ->
                                                                        case GHC.Prim.<#
                                                                               x#
                                                                               y# of lwild {
                                                                          DEFAULT
                                                                          -> case GHC.Prim.==#
                                                                                    x#
                                                                                    y# of lwild1 {
                                                                               DEFAULT
                                                                               -> GHC.Types.False
                                                                               1#
                                                                               -> GHC.Classes.ltInt
                                                                                    a2
                                                                                    b2 }
                                                                          1# -> GHC.Types.True } } }
                                                                     PerturbationTree2.Var ipv ipv1
                                                                     -> GHC.Types.True }
                                                                PerturbationTree2.Var a1 a2
                                                                -> case b of wild1 {
                                                                     DEFAULT -> GHC.Types.False
                                                                     PerturbationTree2.Var b1 b2
                                                                     -> case a1 of ww { GHC.Real.:% ww1 ww2 ->
                                                                        case b1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                        case GHC.Real.$w$s$ccompare
                                                                               ww1
                                                                               ww2
                                                                               ww4
                                                                               ww5 of wild2 {
                                                                          GHC.Types.LT
                                                                          -> GHC.Types.True
                                                                          GHC.Types.EQ
                                                                          -> GHC.Classes.ltInt a2 b2
                                                                          GHC.Types.GT
                                                                          -> GHC.Types.False } } } } }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$s$ccompare ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.compare} True True} case a of wild {
                                                                      PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                      -> case b of wild1 {
                                                                           DEFAULT -> GHC.Types.LT
                                                                           PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                           -> case a1 of wild2 { GHC.Types.I# x# ->
                                                                              case b1 of wild3 { GHC.Types.I# y# ->
                                                                              case GHC.Prim.<#
                                                                                     x#
                                                                                     y# of lwild {
                                                                                DEFAULT
                                                                                -> case GHC.Prim.==#
                                                                                          x#
                                                                                          y# of lwild1 {
                                                                                     DEFAULT
                                                                                     -> GHC.Types.GT
                                                                                     1#
                                                                                     -> case a2 of wild4 { GHC.Types.I# x#1 ->
                                                                                        case b2 of wild5 { GHC.Types.I# y#1 ->
                                                                                        case GHC.Prim.<#
                                                                                               x#1
                                                                                               y#1 of lwild2 {
                                                                                          DEFAULT
                                                                                          -> case GHC.Prim.==#
                                                                                                    x#1
                                                                                                    y#1 of lwild3 {
                                                                                               DEFAULT
                                                                                               -> GHC.Types.GT
                                                                                               1#
                                                                                               -> case a3 of wild6 { GHC.Types.I# x#2 ->
                                                                                                  case b3 of wild7 { GHC.Types.I# y#2 ->
                                                                                                  case GHC.Prim.<#
                                                                                                         x#2
                                                                                                         y#2 of lwild4 {
                                                                                                    DEFAULT
                                                                                                    -> case GHC.Prim.==#
                                                                                                              x#2
                                                                                                              y#2 of lwild5 {
                                                                                                         DEFAULT
                                                                                                         -> GHC.Types.GT
                                                                                                         1#
                                                                                                         -> GHC.Classes.compareInt
                                                                                                              a4
                                                                                                              b4 }
                                                                                                    1#
                                                                                                    -> GHC.Types.LT } } } }
                                                                                          1#
                                                                                          -> GHC.Types.LT } } } }
                                                                                1#
                                                                                -> GHC.Types.LT } } } }
                                                                      PerturbationTree2.Eta a1 a2
                                                                      -> case b of wild1 {
                                                                           PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                           -> GHC.Types.GT
                                                                           PerturbationTree2.Eta b1 b2
                                                                           -> case a1 of wild2 { GHC.Types.I# x# ->
                                                                              case b1 of wild3 { GHC.Types.I# y# ->
                                                                              case GHC.Prim.<#
                                                                                     x#
                                                                                     y# of lwild {
                                                                                DEFAULT
                                                                                -> case GHC.Prim.==#
                                                                                          x#
                                                                                          y# of lwild1 {
                                                                                     DEFAULT
                                                                                     -> GHC.Types.GT
                                                                                     1#
                                                                                     -> GHC.Classes.compareInt
                                                                                          a2
                                                                                          b2 }
                                                                                1#
                                                                                -> GHC.Types.LT } } }
                                                                           PerturbationTree2.Var ipv ipv1
                                                                           -> GHC.Types.LT }
                                                                      PerturbationTree2.Var a1 a2
                                                                      -> case b of wild1 {
                                                                           DEFAULT -> GHC.Types.GT
                                                                           PerturbationTree2.Var b1 b2
                                                                           -> case a1 of ww { GHC.Real.:% ww1 ww2 ->
                                                                              case b1 of ww3 { GHC.Real.:% ww4 ww5 ->
                                                                              case GHC.Real.$w$s$ccompare
                                                                                     ww1
                                                                                     ww2
                                                                                     ww4
                                                                                     ww5 of wild2 {
                                                                                GHC.Types.LT
                                                                                -> GHC.Types.LT
                                                                                GHC.Types.EQ
                                                                                -> GHC.Classes.compareInt
                                                                                     a2
                                                                                     b2
                                                                                GHC.Types.GT
                                                                                -> GHC.Types.GT } } } } }) -}
0d93a76c7e93f36c913f3d39fee89550
  $fOrdAnsatzNode_$s$cmax ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (y :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 case {__scc {main:PerturbationTree2.<=} True True} PerturbationTree2.$fOrdAnsatzNode_$s$c<
                                                                      y
                                                                      x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
64bb9b29a0a5e170c05c8b4341d69a36
  $fOrdAnsatzNode_$s$cmin ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int
    -> PerturbationTree2.AnsatzNode GHC.Types.Int
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                   (y :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                 case {__scc {main:PerturbationTree2.<=} True True} PerturbationTree2.$fOrdAnsatzNode_$s$c<
                                                                      y
                                                                      x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
a28a071977fc922da3210b2204bebf60
  $fOrdAnsatzNode_$s$fOrdAnsatzNode ::
    GHC.Classes.Ord (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (PerturbationTree2.AnsatzNode GHC.Types.Int)
                  PerturbationTree2.$fEqAnsatzNode_$s$fEqAnsatzNode
                  PerturbationTree2.$fOrdAnsatzNode_$s$ccompare
                  PerturbationTree2.$fOrdAnsatzNode_$s$c<
                  (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                     (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                   {__scc {main:PerturbationTree2.<=} True True} {__scc {main:PerturbationTree2.<} True False} case b of wild {
                                                                                                                 PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                                                                 -> case a of wild1 {
                                                                                                                      DEFAULT
                                                                                                                      -> GHC.Types.False
                                                                                                                      PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                                                                      -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                              a1
                                                                                                                                                                              b1 of wild2 {
                                                                                                                           GHC.Types.LT
                                                                                                                           -> GHC.Types.False
                                                                                                                           GHC.Types.EQ
                                                                                                                           -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                   a2
                                                                                                                                                                                   b2 of wild3 {
                                                                                                                                GHC.Types.LT
                                                                                                                                -> GHC.Types.False
                                                                                                                                GHC.Types.EQ
                                                                                                                                -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                        a3
                                                                                                                                                                                        b3 of wild4 {
                                                                                                                                     GHC.Types.LT
                                                                                                                                     -> GHC.Types.False
                                                                                                                                     GHC.Types.EQ
                                                                                                                                     -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                             a4
                                                                                                                                                                                             b4 of wild5 {
                                                                                                                                          GHC.Types.False
                                                                                                                                          -> GHC.Types.True
                                                                                                                                          GHC.Types.True
                                                                                                                                          -> GHC.Types.False }
                                                                                                                                     GHC.Types.GT
                                                                                                                                     -> GHC.Types.True }
                                                                                                                                GHC.Types.GT
                                                                                                                                -> GHC.Types.True }
                                                                                                                           GHC.Types.GT
                                                                                                                           -> GHC.Types.True } }
                                                                                                                 PerturbationTree2.Eta a1 a2
                                                                                                                 -> case a of wild1 {
                                                                                                                      PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                                                                      -> GHC.Types.True
                                                                                                                      PerturbationTree2.Eta b1 b2
                                                                                                                      -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                              a1
                                                                                                                                                                              b1 of wild2 {
                                                                                                                           GHC.Types.LT
                                                                                                                           -> GHC.Types.False
                                                                                                                           GHC.Types.EQ
                                                                                                                           -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                   a2
                                                                                                                                                                                   b2 of wild3 {
                                                                                                                                GHC.Types.False
                                                                                                                                -> GHC.Types.True
                                                                                                                                GHC.Types.True
                                                                                                                                -> GHC.Types.False }
                                                                                                                           GHC.Types.GT
                                                                                                                           -> GHC.Types.True }
                                                                                                                      PerturbationTree2.Var ipv ipv1
                                                                                                                      -> GHC.Types.False }
                                                                                                                 PerturbationTree2.Var a1 a2
                                                                                                                 -> case a of wild1 {
                                                                                                                      DEFAULT
                                                                                                                      -> GHC.Types.True
                                                                                                                      PerturbationTree2.Var b1 b2
                                                                                                                      -> case {__scc {main:PerturbationTree2.<} False True} GHC.Real.$fEnumRatio_$s$ccompare
                                                                                                                                                                              a1
                                                                                                                                                                              b1 of wild2 {
                                                                                                                           GHC.Types.LT
                                                                                                                           -> GHC.Types.False
                                                                                                                           GHC.Types.EQ
                                                                                                                           -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                   a2
                                                                                                                                                                                   b2 of wild3 {
                                                                                                                                GHC.Types.False
                                                                                                                                -> GHC.Types.True
                                                                                                                                GHC.Types.True
                                                                                                                                -> GHC.Types.False }
                                                                                                                           GHC.Types.GT
                                                                                                                           -> GHC.Types.True } } })
                  (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                     (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                   {__scc {main:PerturbationTree2.>} True True} PerturbationTree2.$fOrdAnsatzNode_$s$c<
                                                                  b
                                                                  a)
                  (\ (a :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                     (b :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                   {__scc {main:PerturbationTree2.>=} True True} {__scc {main:PerturbationTree2.<} True False} case a of wild {
                                                                                                                 PerturbationTree2.Epsilon a1 a2 a3 a4
                                                                                                                 -> case b of wild1 {
                                                                                                                      DEFAULT
                                                                                                                      -> GHC.Types.False
                                                                                                                      PerturbationTree2.Epsilon b1 b2 b3 b4
                                                                                                                      -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                              a1
                                                                                                                                                                              b1 of wild2 {
                                                                                                                           GHC.Types.LT
                                                                                                                           -> GHC.Types.False
                                                                                                                           GHC.Types.EQ
                                                                                                                           -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                   a2
                                                                                                                                                                                   b2 of wild3 {
                                                                                                                                GHC.Types.LT
                                                                                                                                -> GHC.Types.False
                                                                                                                                GHC.Types.EQ
                                                                                                                                -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                                        a3
                                                                                                                                                                                        b3 of wild4 {
                                                                                                                                     GHC.Types.LT
                                                                                                                                     -> GHC.Types.False
                                                                                                                                     GHC.Types.EQ
                                                                                                                                     -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                             a4
                                                                                                                                                                                             b4 of wild5 {
                                                                                                                                          GHC.Types.False
                                                                                                                                          -> GHC.Types.True
                                                                                                                                          GHC.Types.True
                                                                                                                                          -> GHC.Types.False }
                                                                                                                                     GHC.Types.GT
                                                                                                                                     -> GHC.Types.True }
                                                                                                                                GHC.Types.GT
                                                                                                                                -> GHC.Types.True }
                                                                                                                           GHC.Types.GT
                                                                                                                           -> GHC.Types.True } }
                                                                                                                 PerturbationTree2.Eta a1 a2
                                                                                                                 -> case b of wild1 {
                                                                                                                      PerturbationTree2.Epsilon ds ds1 ds2 ds3
                                                                                                                      -> GHC.Types.True
                                                                                                                      PerturbationTree2.Eta b1 b2
                                                                                                                      -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.compareInt
                                                                                                                                                                              a1
                                                                                                                                                                              b1 of wild2 {
                                                                                                                           GHC.Types.LT
                                                                                                                           -> GHC.Types.False
                                                                                                                           GHC.Types.EQ
                                                                                                                           -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                   a2
                                                                                                                                                                                   b2 of wild3 {
                                                                                                                                GHC.Types.False
                                                                                                                                -> GHC.Types.True
                                                                                                                                GHC.Types.True
                                                                                                                                -> GHC.Types.False }
                                                                                                                           GHC.Types.GT
                                                                                                                           -> GHC.Types.True }
                                                                                                                      PerturbationTree2.Var ipv ipv1
                                                                                                                      -> GHC.Types.False }
                                                                                                                 PerturbationTree2.Var a1 a2
                                                                                                                 -> case b of wild1 {
                                                                                                                      DEFAULT
                                                                                                                      -> GHC.Types.True
                                                                                                                      PerturbationTree2.Var b1 b2
                                                                                                                      -> case {__scc {main:PerturbationTree2.<} False True} GHC.Real.$fEnumRatio_$s$ccompare
                                                                                                                                                                              a1
                                                                                                                                                                              b1 of wild2 {
                                                                                                                           GHC.Types.LT
                                                                                                                           -> GHC.Types.False
                                                                                                                           GHC.Types.EQ
                                                                                                                           -> case {__scc {main:PerturbationTree2.<} False True} GHC.Classes.ltInt
                                                                                                                                                                                   a2
                                                                                                                                                                                   b2 of wild3 {
                                                                                                                                GHC.Types.False
                                                                                                                                -> GHC.Types.True
                                                                                                                                GHC.Types.True
                                                                                                                                -> GHC.Types.False }
                                                                                                                           GHC.Types.GT
                                                                                                                           -> GHC.Types.True } } })
                  (\ (x :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                     (y :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                   case {__scc {main:PerturbationTree2.<=} True True} PerturbationTree2.$fOrdAnsatzNode_$s$c<
                                                                        y
                                                                        x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: PerturbationTree2.AnsatzNode GHC.Types.Int)
                     (y :: PerturbationTree2.AnsatzNode GHC.Types.Int) ->
                   case {__scc {main:PerturbationTree2.<=} True True} PerturbationTree2.$fOrdAnsatzNode_$s$c<
                                                                        y
                                                                        x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
1191b8140eaba8122ae4967bc6483f20
  $fShowAnsatzForest ::
    GHC.Show.Show a => GHC.Show.Show (PerturbationTree2.AnsatzForest a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (PerturbationTree2.AnsatzForest a)
                  (PerturbationTree2.$fShowAnsatzForest_$cshowsPrec @ a v)
                  (PerturbationTree2.$fShowAnsatzForest_$cshow @ a v)
                  (PerturbationTree2.$fShowAnsatzForest_$cshowList @ a v) -}
b9c60370c211bcf29306cde13cda3bdd
  $fShowAnsatzForest1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1191b8140eaba8122ae4967bc6483f20
  $fShowAnsatzForest_$cshow ::
    GHC.Show.Show a =>
    PerturbationTree2.AnsatzForest a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: PerturbationTree2.AnsatzForest a) ->
                 PerturbationTree2.$fShowAnsatzForest_$cshowsPrec
                   @ a
                   $dShow
                   PerturbationTree2.$fShowAnsatzForest1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1191b8140eaba8122ae4967bc6483f20
  $fShowAnsatzForest_$cshowList ::
    GHC.Show.Show a =>
    [PerturbationTree2.AnsatzForest a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [PerturbationTree2.AnsatzForest a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (PerturbationTree2.AnsatzForest a)
                   (PerturbationTree2.$fShowAnsatzForest_$cshowsPrec
                      @ a
                      $dShow
                      PerturbationTree2.$fShowAnsatzForest1)
                   ls
                   s) -}
1191b8140eaba8122ae4967bc6483f20
  $fShowAnsatzForest_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> PerturbationTree2.AnsatzForest a -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
a28a071977fc922da3210b2204bebf60
  $fShowAnsatzNode ::
    GHC.Show.Show a => GHC.Show.Show (PerturbationTree2.AnsatzNode a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (PerturbationTree2.AnsatzNode a)
                  (PerturbationTree2.$fShowAnsatzNode_$cshowsPrec @ a v)
                  (PerturbationTree2.$fShowAnsatzNode_$cshow @ a v)
                  (PerturbationTree2.$fShowAnsatzNode_$cshowList @ a v) -}
a28a071977fc922da3210b2204bebf60
  $fShowAnsatzNode_$cshow ::
    GHC.Show.Show a =>
    PerturbationTree2.AnsatzNode a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: PerturbationTree2.AnsatzNode a) ->
                 PerturbationTree2.$fShowAnsatzNode_$cshowsPrec
                   @ a
                   $dShow
                   PerturbationTree2.$fShowAnsatzForest1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a28a071977fc922da3210b2204bebf60
  $fShowAnsatzNode_$cshowList ::
    GHC.Show.Show a =>
    [PerturbationTree2.AnsatzNode a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [PerturbationTree2.AnsatzNode a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (PerturbationTree2.AnsatzNode a)
                   (PerturbationTree2.$fShowAnsatzNode_$cshowsPrec
                      @ a
                      $dShow
                      PerturbationTree2.$fShowAnsatzForest1)
                   ls
                   s) -}
a28a071977fc922da3210b2204bebf60
  $fShowAnsatzNode_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> PerturbationTree2.AnsatzNode a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: PerturbationTree2.AnsatzNode a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 PerturbationTree2.$w$cshowsPrec @ a w ww1 w2 }) -}
63f1a71eb949b75c1afd601e30bb16df
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [([GHC.Types.Char], a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt1 { DEFAULT ->
                                PerturbationTree2.$sfromList1
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt1
                                     x
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt1 { DEFAULT ->
                                PerturbationTree2.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1#
                                     dt1
                                     x
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Internal.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } }) -}
3c201d245fd9f6f142dfda8cde84ee30
  $sfromList1 ::
    Data.Map.Internal.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2f5004d6524b3dbed65d95c9897e599f
  $sfromList2 ::
    [(PerturbationTree2.AnsatzNode GHC.Types.Int, a)]
    -> Data.Map.Internal.Map
         (PerturbationTree2.AnsatzNode GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U> -}
f90413d4d92cb88f0952c70bb0421457
  $sinsert_$sgo13 ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
    -> Data.Map.Internal.Map [GHC.Types.Char] a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
4f60808bff1cc8c0a1b5f0657ace3938
  $slookup1 ::
    PerturbationTree2.AnsatzNode GHC.Types.Int
    -> Data.Map.Internal.Map
         (PerturbationTree2.AnsatzNode GHC.Types.Int) a
    -> GHC.Base.Maybe a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
679574d99491d31218b6a480cc2f7efc
  $tc'EmptyForest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16383830790063041581##
                   10521790908862821293##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tc'EmptyForest2
                   1#
                   PerturbationTree2.$tc'EmptyForest1) -}
bdc0a2f17eb0d1fd56584bf1d141f05b
  $tc'EmptyForest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
60bd5cf9ba6672cb211c378ae7027ecf
  $tc'EmptyForest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   PerturbationTree2.$tc'EmptyForest3) -}
235514a0cdfa4f56338df4ef82f554de
  $tc'EmptyForest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyForest"#) -}
d7cca1bd704bf9dbe5487f87cd330994
  $tc'Epsilon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12079225788781256355##
                   14553847118470367466##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tc'Epsilon2
                   1#
                   PerturbationTree2.$tc'Epsilon1) -}
650e56389befad60624449bfd95c1a8d
  $tc'Epsilon1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
61ef1e12e53311fcdad14606013434ba
  $tc'Epsilon2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$tc'Epsilon3) -}
89afe0c2c95cf9a95c0407e4e478721b
  $tc'Epsilon3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Epsilon"#) -}
ab81ac90189af9453e47425b879c268c
  $tc'Eta :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7852645482568365830##
                   16982176084161520644##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tc'Eta2
                   1#
                   PerturbationTree2.$tc'Eta1) -}
342ef1b682ff5c5f4886137e32d4a73e
  $tc'Eta1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6204d9ac5e440c3e2df7da0625456f84
  $tc'Eta2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$tc'Eta3) -}
fc63e64c69c0a7d9cab77bf826770ca0
  $tc'Eta3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Eta"#) -}
52c0d60649d8a430aef6bea05ac7d686
  $tc'Forest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10415893409300108553##
                   15886801042903742402##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tc'Forest2
                   1#
                   PerturbationTree2.$tc'Forest1) -}
0aa1abbef16b83e3166aa641bfe26aec
  $tc'Forest1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b458ea8c705e4ea9b0e805ae3a27aad3
  $tc'Forest2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$tc'Forest3) -}
313cfa47ec9a6147d3419e9bed3b9df1
  $tc'Forest3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Forest"#) -}
5140e163fa212d148cb762d1d4a98446
  $tc'Leaf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18890327851819462##
                   6343889344455347731##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tc'Leaf2
                   1#
                   PerturbationTree2.$tc'Leaf1) -}
3687da64e33771c95e3e73570d902974
  $tc'Leaf1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
161d45520a8a764cc3f6913f45b33696
  $tc'Leaf2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$tc'Leaf3) -}
5b788ab3f8fec4599fab8d5474d2758b
  $tc'Leaf3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leaf"#) -}
1844a7c5c6f97582c908b5cda98586f2
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2422175850322654441##
                   15498694520185293782##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tc'Var2
                   1#
                   PerturbationTree2.$tc'Var1) -}
250d4c41f0d4df2f237f238c163531f8
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3d6fe78dfa1b3e276342e740081ba93c
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$tc'Var3) -}
f38f10065b4fddd326b0b9136b4ca5bb
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
3fa9f3b69f9cd1cb4278556a3f1db961
  $tcAnsatzForest :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11197574214373676524##
                   10818330031283122330##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tcAnsatzForest1
                   0#
                   GHC.Types.krep$*Arr*) -}
6c4d8429bc1a4cc2c8dd52e217b2c148
  $tcAnsatzForest1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   PerturbationTree2.$tcAnsatzForest2) -}
a4a155275b275870f41bff8d57abe67c
  $tcAnsatzForest2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AnsatzForest"#) -}
4a67c76058eb92d5824fe8d5e3512bad
  $tcAnsatzNode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5651067835222125043##
                   6066944754555504014##
                   PerturbationTree2.$trModule
                   PerturbationTree2.$tcAnsatzNode1
                   0#
                   GHC.Types.krep$*Arr*) -}
27387c3304e90a47879caf2f6db2957b
  $tcAnsatzNode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$tcAnsatzNode2) -}
937fb516f307f28bdb77252508d42ac8
  $tcAnsatzNode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AnsatzNode"#) -}
5022dde2700869bb7e12703a5843c061
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   PerturbationTree2.$trModule3
                   PerturbationTree2.$trModule1) -}
5fae8e21ba76767fc6ac08286021580c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$trModule2) -}
3873d7c92afb1b72b596bbad052f3f90
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PerturbationTree2"#) -}
fcbf918661693eb8f035b43ac3ff4fee
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS PerturbationTree2.$trModule4) -}
36ff7194a4e383f5fe03ad2a33d91f14
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a28a071977fc922da3210b2204bebf60
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> PerturbationTree2.AnsatzNode a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
72d65b977e31e62b827de629e7188565
  $w$ssymAnsatzForestEps ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [([GHC.Types.Int], [GHC.Types.Int])]
    -> [[GHC.Types.Int]]
    -> [[[GHC.Types.Int]]]
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 6, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0] -}
4ed74fc310dc4208896c3147f82baa0e
  $w$ssymAnsatzForestEta ::
    [(GHC.Types.Int, GHC.Types.Int)]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> [([GHC.Types.Int], [GHC.Types.Int])]
    -> [[GHC.Types.Int]]
    -> [[[GHC.Types.Int]]]
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 6, Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0] -}
edef0e65dc13fc7cb3d3500851bbedff
  $wgetEpsForest ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Prim.Int#
    -> PerturbationTree2.Symmetry GHC.Types.Int
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 4, Strictness: <L,U><L,U><S,U><L,U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int])
                   (w1 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (ww :: GHC.Prim.Int#)
                   (w2 :: PerturbationTree2.Symmetry GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.getEpsForest} True True} let {
                                                                           allVars :: forall a.
                                                                                      [PerturbationTree2.AnsatzNode
                                                                                         a]
                                                                           = \ @ a ->
                                                                             {__scc {main:PerturbationTree2.getEpsForest.allVars} True True} {__scc {main:PerturbationTree2.mkAllVars} True True} PerturbationTree2.getEpsForest3
                                                                                                                                                                                                    @ a
                                                                                                                                                                                                    ww
                                                                         } in
                                                                         let {
                                                                           allInds :: [[GHC.Types.Int]]
                                                                           = {__scc {main:PerturbationTree2.getEpsForest.allInds} True True} PerturbationTree2.getEpsilonInds
                                                                                                                                               w
                                                                                                                                               w1
                                                                         } in
                                                                         PerturbationTree2.getEpsForest_$sreduceAnsatzEps
                                                                           w2
                                                                           ({__scc {main:PerturbationTree2.getEpsForest.allForests} True True} PerturbationTree2.getEpsForest_go2
                                                                                                                                                 (allVars
                                                                                                                                                    @ GHC.Types.Int)
                                                                                                                                                 allInds)) -}
067810db30faeab643536d93b4865f6f
  $wgetEtaForest ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Prim.Int#
    -> PerturbationTree2.Symmetry GHC.Types.Int
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 4, Strictness: <L,1*U><L,U><S,U><L,U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Int])
                   (w1 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (ww :: GHC.Prim.Int#)
                   (w2 :: PerturbationTree2.Symmetry GHC.Types.Int) ->
                 {__scc {main:PerturbationTree2.getEtaForest} True True} let {
                                                                           allVars :: forall a.
                                                                                      [PerturbationTree2.AnsatzNode
                                                                                         a]
                                                                           = \ @ a ->
                                                                             {__scc {main:PerturbationTree2.getEtaForest.allVars} True True} {__scc {main:PerturbationTree2.mkAllVars} True True} PerturbationTree2.getEpsForest3
                                                                                                                                                                                                    @ a
                                                                                                                                                                                                    ww
                                                                         } in
                                                                         let {
                                                                           allInds :: [[GHC.Types.Int]]
                                                                           = {__scc {main:PerturbationTree2.getEtaForest.allInds} True True} PerturbationTree2.getEtaInds
                                                                                                                                               w
                                                                                                                                               w1
                                                                         } in
                                                                         PerturbationTree2.getEtaForest_$sreduceAnsatzEta
                                                                           w2
                                                                           ({__scc {main:PerturbationTree2.getEtaForest.allForests} True True} PerturbationTree2.getEtaForest_go2
                                                                                                                                                 (allVars
                                                                                                                                                    @ GHC.Types.Int)
                                                                                                                                                 allInds)) -}
c7986e6fe62e669b28893d6d4b90d3b2
  $wmapNodes ::
    GHC.Classes.Ord b =>
    (a -> b)
    -> PerturbationTree2.AnsatzForest a
    -> PerturbationTree2.AnsatzForest b
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,C(C1(U)),A,A)><L,C(U)><S,1*U>,
     Inline: [0] -}
08bae7bf820e57e785ba8bfc41855c09
  $wmkEpsilonList ::
    PerturbationTree2.AnsatzNode a
    -> [a]
    -> (# PerturbationTree2.AnsatzNode a,
          [PerturbationTree2.AnsatzNode a] #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: PerturbationTree2.AnsatzNode a)
                   (w1 :: [a]) ->
                 {__scc {main:PerturbationTree2.mkEpsilonList} True False} case w1 of wild {
                                                                             []
                                                                             -> (# w,
                                                                                   GHC.Types.[]
                                                                                     @ (PerturbationTree2.AnsatzNode
                                                                                          a) #)
                                                                             : ipv ipv1
                                                                             -> case {__scc {main:PerturbationTree2.mkEpsilonList} False True} let {
                                                                                                                                                 ds :: (a,
                                                                                                                                                        a,
                                                                                                                                                        a,
                                                                                                                                                        a)
                                                                                                                                                 = case {__scc {main:PerturbationTree2.mkEpsilonList.(...)} True True} GHC.List.$wunsafeTake
                                                                                                                                                                                                                         @ a
                                                                                                                                                                                                                         4#
                                                                                                                                                                                                                         wild of wild1 {
                                                                                                                                                     []
                                                                                                                                                     -> PerturbationTree2.mkEpsilonList1
                                                                                                                                                          @ a
                                                                                                                                                     : i ds1
                                                                                                                                                     -> case ds1 of wild2 {
                                                                                                                                                          []
                                                                                                                                                          -> PerturbationTree2.mkEpsilonList1
                                                                                                                                                               @ a
                                                                                                                                                          : j ds2
                                                                                                                                                          -> case ds2 of wild3 {
                                                                                                                                                               []
                                                                                                                                                               -> PerturbationTree2.mkEpsilonList1
                                                                                                                                                                    @ a
                                                                                                                                                               : k ds3
                                                                                                                                                               -> case ds3 of wild4 {
                                                                                                                                                                    []
                                                                                                                                                                    -> PerturbationTree2.mkEpsilonList1
                                                                                                                                                                         @ a
                                                                                                                                                                    : l ds4
                                                                                                                                                                    -> case ds4 of wild5 {
                                                                                                                                                                         []
                                                                                                                                                                         -> (i,
                                                                                                                                                                             j,
                                                                                                                                                                             k,
                                                                                                                                                                             l)
                                                                                                                                                                         : ipv2 ipv3
                                                                                                                                                                         -> PerturbationTree2.mkEpsilonList1
                                                                                                                                                                              @ a } } } } }
                                                                                                                                               } in
                                                                                                                                               GHC.Types.:
                                                                                                                                                 @ (PerturbationTree2.AnsatzNode
                                                                                                                                                      a)
                                                                                                                                                 (PerturbationTree2.Epsilon
                                                                                                                                                    @ a
                                                                                                                                                    ({__scc {main:PerturbationTree2.mkEpsilonList.i} True True} case ds of ds1 { (,,,) i j k l ->
                                                                                                                                                                                                                i })
                                                                                                                                                    ({__scc {main:PerturbationTree2.mkEpsilonList.j} True True} case ds of ds1 { (,,,) i j k l ->
                                                                                                                                                                                                                j })
                                                                                                                                                    ({__scc {main:PerturbationTree2.mkEpsilonList.k} True True} case ds of ds1 { (,,,) i j k l ->
                                                                                                                                                                                                                k })
                                                                                                                                                    ({__scc {main:PerturbationTree2.mkEpsilonList.l} True True} case ds of ds1 { (,,,) i j k l ->
                                                                                                                                                                                                                l }))
                                                                                                                                                 (case PerturbationTree2.$wmkEtaList
                                                                                                                                                         @ a
                                                                                                                                                         w
                                                                                                                                                         ({__scc {main:PerturbationTree2.mkEpsilonList.rest} True True} PerturbationTree2.$wunsafeDrop
                                                                                                                                                                                                                          @ a
                                                                                                                                                                                                                          4#
                                                                                                                                                                                                                          wild) of ww { (#,#) ww1 ww2 ->
                                                                                                                                                  GHC.Types.:
                                                                                                                                                    @ (PerturbationTree2.AnsatzNode
                                                                                                                                                         a)
                                                                                                                                                    ww1
                                                                                                                                                    ww2 }) of ww { : ww1 ww2 ->
                                                                                (# ww1,
                                                                                   ww2 #) } }) -}
e6113706bede4c598f2f56233726f261
  $wmkEtaList ::
    PerturbationTree2.AnsatzNode a
    -> [a]
    -> (# PerturbationTree2.AnsatzNode a,
          [PerturbationTree2.AnsatzNode a] #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
ba8fc27c4caddfc4ea6a3b75eae16833
  $wmkForestFromAscList :: [a] -> PerturbationTree2.AnsatzForest a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
33136375135c00ee34a786be40b94bb1
  $wpoly_fail :: GHC.Prim.Void# -> PerturbationTree2.AnsatzNode a
  {- Arity: 1, Strictness: <B,A>x, Inline: [0] -}
6db8727af0f6929f6a15eae066491f52
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
6b0b3f0a2a2ca004499252bf02975ac2
  $wshowAnsatzNode ::
    GHC.Show.Show a =>
    PerturbationTree2.AnsatzNode a
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.showAnsatzNode} True False} case w1 of wild {
                                                                              PerturbationTree2.Epsilon i j k l
                                                                              -> {__scc {main:PerturbationTree2.showAnsatzNode} False True} GHC.Show.$w$cshowsPrec2
                                                                                                                                              @ a
                                                                                                                                              @ a
                                                                                                                                              @ a
                                                                                                                                              @ a
                                                                                                                                              w
                                                                                                                                              w
                                                                                                                                              w
                                                                                                                                              w
                                                                                                                                              i
                                                                                                                                              j
                                                                                                                                              k
                                                                                                                                              l
                                                                                                                                              (GHC.Types.[]
                                                                                                                                                 @ GHC.Types.Char)
                                                                              PerturbationTree2.Eta i b
                                                                              -> (# GHC.Show.$fShow(,)4,
                                                                                    {__scc {main:PerturbationTree2.showAnsatzNode} False True} GHC.Show.showsPrec
                                                                                                                                                 @ a
                                                                                                                                                 w
                                                                                                                                                 GHC.Show.$fShow(,)1
                                                                                                                                                 i
                                                                                                                                                 (GHC.Types.:
                                                                                                                                                    @ GHC.Types.Char
                                                                                                                                                    GHC.Show.showList__1
                                                                                                                                                    (GHC.Show.$fShow(,)_$sgo1
                                                                                                                                                       PerturbationTree2.showAnsatzNode3
                                                                                                                                                       (GHC.Show.showsPrec
                                                                                                                                                          @ a
                                                                                                                                                          w
                                                                                                                                                          GHC.Show.$fShow(,)1
                                                                                                                                                          b)
                                                                                                                                                       (GHC.Types.[]
                                                                                                                                                          @ GHC.Show.ShowS))) #)
                                                                              PerturbationTree2.Var i j
                                                                              -> case i of ww { GHC.Real.:% ww1 ww2 ->
                                                                                 case {__scc {main:PerturbationTree2.showAnsatzNode} False True} GHC.Real.$w$s$cshow
                                                                                                                                                   ww1
                                                                                                                                                   ww2 of ww3 { (#,#) ww4 ww5 ->
                                                                                 case {__scc {main:PerturbationTree2.showAnsatzNode} False True} GHC.Base.++_$s++
                                                                                                                                                   @ GHC.Types.Char
                                                                                                                                                   (GHC.CString.unpackAppendCString#
                                                                                                                                                      PerturbationTree2.showAnsatzNode2
                                                                                                                                                      (GHC.CString.unpackAppendCString#
                                                                                                                                                         PerturbationTree2.showAnsatzNode1
                                                                                                                                                         (case j of ww7 { GHC.Types.I# ww8 ->
                                                                                                                                                          case GHC.Show.$wshowSignedInt
                                                                                                                                                                 0#
                                                                                                                                                                 ww8
                                                                                                                                                                 (GHC.Types.[]
                                                                                                                                                                    @ GHC.Types.Char) of ww9 { (#,#) ww10 ww6 ->
                                                                                                                                                          GHC.Types.:
                                                                                                                                                            @ GHC.Types.Char
                                                                                                                                                            ww10
                                                                                                                                                            ww6 } })))
                                                                                                                                                   ww4
                                                                                                                                                   ww5 of ww7 { : ww8 ww9 ->
                                                                                 (# ww8,
                                                                                    ww9 #) } } } }) -}
18c1788a9a2941fe0ac2ee43198740e1
  $wsymAnsatzForestEps ::
    GHC.Classes.Ord a =>
    [(a, a)]
    -> [(a, a)]
    -> [([a], [a])]
    -> [[a]]
    -> [[[a]]]
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,C(C1(U)),A,A,A)><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0] -}
c67314fd52d0b6bb9ed5b1d0600846ef
  $wsymAnsatzForestEta ::
    GHC.Classes.Ord a =>
    [(a, a)]
    -> [(a, a)]
    -> [([a], [a])]
    -> [[a]]
    -> [[[a]]]
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 7,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0] -}
afe1ba193d92dc7c7c1fb29f208ae273
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
1191b8140eaba8122ae4967bc6483f20
  type role AnsatzForest nominal
  data AnsatzForest a
    = Forest (Data.Map.Internal.Map
                a (PerturbationTree2.AnsatzForest a))
    | Leaf a
    | EmptyForest
a28a071977fc922da3210b2204bebf60
  data AnsatzNode a
    = Epsilon a a a a | Eta a a | Var GHC.Real.Rational GHC.Types.Int
7e7e5d9948fe58fc2fe4e390735bb02c
  type Symmetry a =
    ([(a, a)], [(a, a)], [([a], [a])], [[a]], [[[a]]])
0a487eb3035876036b5834d04015d60f
  addForests ::
    GHC.Classes.Ord a =>
    (a -> GHC.Types.Bool)
    -> (a -> a -> a)
    -> PerturbationTree2.AnsatzForest a
    -> PerturbationTree2.AnsatzForest a
    -> PerturbationTree2.AnsatzForest a
  {- Arity: 5,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)><L,C(U)><L,C(C1(U))><S,1*U><S,1*U> -}
3d106e685900336c81823b7f848e0e2d
  addVars ::
    PerturbationTree2.AnsatzNode a
    -> PerturbationTree2.AnsatzNode a -> PerturbationTree2.AnsatzNode a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m3, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: PerturbationTree2.AnsatzNode a)
                   (w1 :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.addVars} True False} case w of wild {
                                                                       DEFAULT
                                                                       -> {__scc {main:PerturbationTree2.addVars} False True} PerturbationTree2.$wpoly_fail
                                                                                                                                @ a
                                                                                                                                GHC.Prim.void#
                                                                       PerturbationTree2.Var x y
                                                                       -> case w1 of wild1 {
                                                                            DEFAULT
                                                                            -> {__scc {main:PerturbationTree2.addVars} False True} PerturbationTree2.$wpoly_fail
                                                                                                                                     @ a
                                                                                                                                     GHC.Prim.void#
                                                                            PerturbationTree2.Var x' y'
                                                                            -> case y of wild2 { GHC.Types.I# x1 ->
                                                                               case y' of wild3 { GHC.Types.I# y1 ->
                                                                               case {__scc {main:PerturbationTree2.addVars} False True} GHC.Prim.==#
                                                                                                                                          x1
                                                                                                                                          y1 of lwild {
                                                                                 DEFAULT
                                                                                 -> case PerturbationTree2.getEpsForest1
                                                                                    ret_ty (PerturbationTree2.AnsatzNode
                                                                                              a)
                                                                                    of {}
                                                                                 1#
                                                                                 -> PerturbationTree2.Var
                                                                                      @ a
                                                                                      ({__scc {main:PerturbationTree2.addVars} False True} GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                             x
                                                                                                                                             x')
                                                                                      wild2 } } } } }) -}
3e88579103d356d0d385b9d641b9a5f9
  flattenForest ::
    GHC.Classes.Ord a => PerturbationTree2.AnsatzForest a -> [[a]]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U> -}
ea4e24ca31c5485cf14eefcd1f68bd81
  getAllIndsEta :: [GHC.Types.Int] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 {__scc {main:PerturbationTree2.getAllIndsEta} True True} case ds of wild {
                                                                            []
                                                                            -> PerturbationTree2.getEtaInds1
                                                                            : a ds1
                                                                            -> let {
                                                                                 fail :: GHC.Prim.Void#
                                                                                         -> [[GHC.Types.Int]]
                                                                                   <join 1> {- Arity: 1,
                                                                                               Strictness: <L,A> -}
                                                                                 = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                                                                                   let {
                                                                                     l :: [([GHC.Types.Int],
                                                                                            [GHC.Types.Int])]
                                                                                     = {__scc {main:PerturbationTree2.getAllIndsEta.l} True True} GHC.Base.map
                                                                                                                                                    @ GHC.Types.Int
                                                                                                                                                    @ ([GHC.Types.Int],
                                                                                                                                                       [GHC.Types.Int])
                                                                                                                                                    (\ (y :: GHC.Types.Int) ->
                                                                                                                                                     {__scc {main:PerturbationTree2.getAllIndsEta.l.\} True False} (GHC.Types.:
                                                                                                                                                                                                                      @ GHC.Types.Int
                                                                                                                                                                                                                      a
                                                                                                                                                                                                                      (GHC.Types.:
                                                                                                                                                                                                                         @ GHC.Types.Int
                                                                                                                                                                                                                         y
                                                                                                                                                                                                                         (GHC.Types.[]
                                                                                                                                                                                                                            @ GHC.Types.Int)),
                                                                                                                                                                                                                    {__scc {main:PerturbationTree2.getAllIndsEta.l.\} False True} Data.OldList.deleteBy
                                                                                                                                                                                                                                                                                    @ GHC.Types.Int
                                                                                                                                                                                                                                                                                    GHC.Classes.eqInt
                                                                                                                                                                                                                                                                                    y
                                                                                                                                                                                                                                                                                    ds1))
                                                                                                                                                    ds1
                                                                                   } in
                                                                                   {__scc {main:PerturbationTree2.getAllIndsEta.res} True True} PerturbationTree2.getEtaInds_go
                                                                                                                                                  l
                                                                               } in
                                                                               case ds1 of wild1 {
                                                                                 []
                                                                                 -> fail
                                                                                      GHC.Prim.void#
                                                                                 : b ds2
                                                                                 -> case ds2 of wild2 {
                                                                                      []
                                                                                      -> GHC.Types.:
                                                                                           @ [GHC.Types.Int]
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Int
                                                                                              a
                                                                                              (GHC.Types.:
                                                                                                 @ GHC.Types.Int
                                                                                                 b
                                                                                                 (GHC.Types.[]
                                                                                                    @ GHC.Types.Int)))
                                                                                           (GHC.Types.[]
                                                                                              @ [GHC.Types.Int])
                                                                                      : ipv ipv1
                                                                                      -> fail
                                                                                           GHC.Prim.void# } } }) -}
7d4b662bb4545d6c6f860dcd3ad3dac8
  getEpsForest ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Int
    -> PerturbationTree2.Symmetry GHC.Types.Int
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 4, Strictness: <L,U><L,U><S(S),1*U(U)><L,U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Types.Int])
                   (w1 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (w2 :: GHC.Types.Int)
                   (w3 :: PerturbationTree2.Symmetry GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 PerturbationTree2.$wgetEpsForest w w1 ww1 w3 }) -}
6c59fce94faa7337e0dbf6abe9ce3ba4
  getEpsForest1 :: PerturbationTree2.AnsatzNode a
  {- Strictness: x -}
3bf89fe02f8ba19eaf7325b0011bbdf0
  getEpsForest2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
12ed925b80133c02ceb7b5d0c2fb5c7d
  getEpsForest3 :: GHC.Prim.Int# -> [PerturbationTree2.AnsatzNode a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
f0cba587dacaadc27ca086b23955c8b7
  getEpsForest_$saddForests ::
    (PerturbationTree2.AnsatzNode GHC.Types.Int -> GHC.Types.Bool)
    -> (PerturbationTree2.AnsatzNode GHC.Types.Int
        -> PerturbationTree2.AnsatzNode GHC.Types.Int
        -> PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 4, Strictness: <L,C(U)><L,C(C1(U))><S,1*U><S,1*U> -}
68c2b42de3ba74221d8fa7349e637fa2
  getEpsForest_$sisElem ::
    [PerturbationTree2.AnsatzNode GHC.Types.Int]
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
5d418acc21609009ab9be15628620aa6
  getEpsForest_$smkForestFromAscList ::
    [PerturbationTree2.AnsatzNode GHC.Types.Int]
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
5d63ec2eacf15806cfa05b2df54ada2a
  getEpsForest_$sreduceAnsatzEps ::
    PerturbationTree2.Symmetry GHC.Types.Int
    -> [[PerturbationTree2.AnsatzNode GHC.Types.Int]]
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U)><S,1*U>,
     Unfolding: (\ (sym :: PerturbationTree2.Symmetry GHC.Types.Int)
                   (ds :: [[PerturbationTree2.AnsatzNode GHC.Types.Int]]) ->
                 {__scc {main:PerturbationTree2.reduceAnsatzEps} True True} case ds of wild {
                                                                              []
                                                                              -> PerturbationTree2.EmptyForest
                                                                                   @ (PerturbationTree2.AnsatzNode
                                                                                        GHC.Types.Int)
                                                                              : ipv ipv1
                                                                              -> let {
                                                                                   k :: [PerturbationTree2.AnsatzNode
                                                                                           GHC.Types.Int]
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                GHC.Types.Int)
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                GHC.Types.Int)
                                                                                   = {__scc {main:PerturbationTree2.reduceAnsatzEps.addOrRem} True False} \ (ans :: [PerturbationTree2.AnsatzNode
                                                                                                                                                                       GHC.Types.Int])
                                                                                                                                                            (f3 :: PerturbationTree2.AnsatzForest
                                                                                                                                                                     (PerturbationTree2.AnsatzNode
                                                                                                                                                                        GHC.Types.Int))[OneShot] ->
                                                                                                                                                          {__scc {main:PerturbationTree2.reduceAnsatzEps.addOrRem} False True} {__scc {main:PerturbationTree2.reduceAnsatzEps.addOrRem.\} True True} case PerturbationTree2.getEpsForest_$sisElem
                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                            f3 of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                                                                                                                                       -> case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                                                                                                                                                                                                                                                                                                          PerturbationTree2.getEpsForest_$saddForests
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.isZeroVar
                                                                                                                                                                                                                                                                                                               @ GHC.Types.Int)
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.addVars
                                                                                                                                                                                                                                                                                                               @ GHC.Types.Int)
                                                                                                                                                                                                                                                                                                            f3
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.$w$ssymAnsatzForestEps
                                                                                                                                                                                                                                                                                                               ww1
                                                                                                                                                                                                                                                                                                               ww2
                                                                                                                                                                                                                                                                                                               ww3
                                                                                                                                                                                                                                                                                                               ww4
                                                                                                                                                                                                                                                                                                               ww5
                                                                                                                                                                                                                                                                                                               (PerturbationTree2.getEpsForest_$smkForestFromAscList
                                                                                                                                                                                                                                                                                                                  ans)) }
                                                                                                                                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                                                                                                                                       -> f3 }
                                                                                 } in
                                                                                 letrec {
                                                                                   go3 :: [[PerturbationTree2.AnsatzNode
                                                                                              GHC.Types.Int]]
                                                                                          -> PerturbationTree2.AnsatzForest
                                                                                               (PerturbationTree2.AnsatzNode
                                                                                                  GHC.Types.Int)
                                                                                     {- Arity: 1,
                                                                                        Strictness: <S,1*U> -}
                                                                                   = \ (ds1 :: [[PerturbationTree2.AnsatzNode
                                                                                                   GHC.Types.Int]]) ->
                                                                                     case ds1 of wild1 {
                                                                                       []
                                                                                       -> PerturbationTree2.EmptyForest
                                                                                            @ (PerturbationTree2.AnsatzNode
                                                                                                 GHC.Types.Int)
                                                                                       : y ys
                                                                                       -> k y
                                                                                            (go3
                                                                                               ys) }
                                                                                 } in
                                                                                 go3 wild }) -}
547b66ce7f24e5e2fb6b251d71dd34f9
  getEpsForest_go2 ::
    [PerturbationTree2.AnsatzNode GHC.Types.Int]
    -> [[GHC.Types.Int]]
    -> [[PerturbationTree2.AnsatzNode GHC.Types.Int]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
3e831b9306795ef141a3098f18acd740
  getEpsilonInds ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> [[GHC.Types.Int]]
  {- Arity: 2, Strictness: <S,U><L,U> -}
b6771dd21de5bb0b93319bb651024995
  getEtaForest ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)]
    -> GHC.Types.Int
    -> PerturbationTree2.Symmetry GHC.Types.Int
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 4, Strictness: <L,1*U><L,U><S(S),1*U(U)><L,U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [GHC.Types.Int])
                   (w1 :: [(GHC.Types.Int, GHC.Types.Int)])
                   (w2 :: GHC.Types.Int)
                   (w3 :: PerturbationTree2.Symmetry GHC.Types.Int) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 PerturbationTree2.$wgetEtaForest w w1 ww1 w3 }) -}
36c98c608415203ec01fc93d116e8e13
  getEtaForest_$sreduceAnsatzEta ::
    PerturbationTree2.Symmetry GHC.Types.Int
    -> [[PerturbationTree2.AnsatzNode GHC.Types.Int]]
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U)><S,1*U>,
     Unfolding: (\ (sym :: PerturbationTree2.Symmetry GHC.Types.Int)
                   (ds :: [[PerturbationTree2.AnsatzNode GHC.Types.Int]]) ->
                 {__scc {main:PerturbationTree2.reduceAnsatzEta} True True} case ds of wild {
                                                                              []
                                                                              -> PerturbationTree2.EmptyForest
                                                                                   @ (PerturbationTree2.AnsatzNode
                                                                                        GHC.Types.Int)
                                                                              : ipv ipv1
                                                                              -> let {
                                                                                   k :: [PerturbationTree2.AnsatzNode
                                                                                           GHC.Types.Int]
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                GHC.Types.Int)
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                GHC.Types.Int)
                                                                                   = {__scc {main:PerturbationTree2.reduceAnsatzEta.addOrRem} True False} \ (ans :: [PerturbationTree2.AnsatzNode
                                                                                                                                                                       GHC.Types.Int])
                                                                                                                                                            (f3 :: PerturbationTree2.AnsatzForest
                                                                                                                                                                     (PerturbationTree2.AnsatzNode
                                                                                                                                                                        GHC.Types.Int))[OneShot] ->
                                                                                                                                                          {__scc {main:PerturbationTree2.reduceAnsatzEta.addOrRem} False True} {__scc {main:PerturbationTree2.reduceAnsatzEta.addOrRem.\} True True} case PerturbationTree2.getEpsForest_$sisElem
                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                            f3 of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                                                                                                                                       -> case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                                                                                                                                                                                                                                                                                                          PerturbationTree2.getEpsForest_$saddForests
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.isZeroVar
                                                                                                                                                                                                                                                                                                               @ GHC.Types.Int)
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.addVars
                                                                                                                                                                                                                                                                                                               @ GHC.Types.Int)
                                                                                                                                                                                                                                                                                                            f3
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.$w$ssymAnsatzForestEta
                                                                                                                                                                                                                                                                                                               ww1
                                                                                                                                                                                                                                                                                                               ww2
                                                                                                                                                                                                                                                                                                               ww3
                                                                                                                                                                                                                                                                                                               ww4
                                                                                                                                                                                                                                                                                                               ww5
                                                                                                                                                                                                                                                                                                               (PerturbationTree2.getEpsForest_$smkForestFromAscList
                                                                                                                                                                                                                                                                                                                  ans)) }
                                                                                                                                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                                                                                                                                       -> f3 }
                                                                                 } in
                                                                                 letrec {
                                                                                   go3 :: [[PerturbationTree2.AnsatzNode
                                                                                              GHC.Types.Int]]
                                                                                          -> PerturbationTree2.AnsatzForest
                                                                                               (PerturbationTree2.AnsatzNode
                                                                                                  GHC.Types.Int)
                                                                                     {- Arity: 1,
                                                                                        Strictness: <S,1*U> -}
                                                                                   = \ (ds1 :: [[PerturbationTree2.AnsatzNode
                                                                                                   GHC.Types.Int]]) ->
                                                                                     case ds1 of wild1 {
                                                                                       []
                                                                                       -> PerturbationTree2.EmptyForest
                                                                                            @ (PerturbationTree2.AnsatzNode
                                                                                                 GHC.Types.Int)
                                                                                       : y ys
                                                                                       -> k y
                                                                                            (go3
                                                                                               ys) }
                                                                                 } in
                                                                                 go3 wild }) -}
263e5630ff4977cc5e8a96ea0d02c010
  getEtaForest_go2 ::
    [PerturbationTree2.AnsatzNode GHC.Types.Int]
    -> [[GHC.Types.Int]]
    -> [[PerturbationTree2.AnsatzNode GHC.Types.Int]]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
53461d402ddb781ac78f936255a8a727
  getEtaInds ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> [[GHC.Types.Int]]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (l :: [GHC.Types.Int])
                   (sym :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 {__scc {main:PerturbationTree2.getEtaInds} True True} GHC.Base.build
                                                                         @ [GHC.Types.Int]
                                                                         (\ @ b
                                                                            (c :: [GHC.Types.Int]
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.Base.foldr
                                                                            @ [GHC.Types.Int]
                                                                            @ b
                                                                            (GHC.List.filterFB
                                                                               @ [GHC.Types.Int]
                                                                               @ b
                                                                               c
                                                                               (\ (x :: [GHC.Types.Int]) ->
                                                                                {__scc {main:PerturbationTree2.getEtaInds.\} True True} PerturbationTree2.getEtaInds2
                                                                                                                                          x
                                                                                                                                          sym)
                                                                                 `cast`
                                                                               (<[GHC.Types.Int]>_R
                                                                                ->_R Data.Semigroup.Internal.N:All[0]))
                                                                            n
                                                                            (PerturbationTree2.getAllIndsEta
                                                                               l))) -}
408bd5869efd719d33ee127eaeed6ca1
  getEtaInds1 :: [[GHC.Types.Int]]
  {- Strictness: x -}
86760bea0891beae4d8a9fbc54f0c1e5
  getEtaInds2 ::
    [GHC.Types.Int]
    -> [(GHC.Types.Int, GHC.Types.Int)] -> Data.Semigroup.Internal.All
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (l :: [GHC.Types.Int])
                   (inds :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                 {__scc {main:PerturbationTree2.filterSym} True True} PerturbationTree2.getEtaInds_go1
                                                                        ({__scc {main:PerturbationTree2.filterSym.boolList} True True} GHC.Base.map
                                                                                                                                         @ (GHC.Types.Int,
                                                                                                                                            GHC.Types.Int)
                                                                                                                                         @ GHC.Types.Bool
                                                                                                                                         (\ (ds :: (GHC.Types.Int,
                                                                                                                                                    GHC.Types.Int)) ->
                                                                                                                                          {__scc {main:PerturbationTree2.filter1Sym} True True} case ds of wild { (,) i j ->
                                                                                                                                                                                                case {__scc {main:PerturbationTree2.filter1Sym.first} True True} letrec {
                                                                                                                                                                                                                                                                   go3 :: [GHC.Types.Int]
                                                                                                                                                                                                                                                                          -> GHC.Base.Maybe
                                                                                                                                                                                                                                                                               GHC.Types.Int
                                                                                                                                                                                                                                                                     <join 1> {- Arity: 1,
                                                                                                                                                                                                                                                                                 Strictness: <S,1*U> -}
                                                                                                                                                                                                                                                                   = \ (ds1 :: [GHC.Types.Int]) ->
                                                                                                                                                                                                                                                                     case ds1 of wild1 {
                                                                                                                                                                                                                                                                       []
                                                                                                                                                                                                                                                                       -> GHC.Base.Nothing
                                                                                                                                                                                                                                                                            @ GHC.Types.Int
                                                                                                                                                                                                                                                                       : y ys
                                                                                                                                                                                                                                                                       -> case {__scc {main:PerturbationTree2.filter1Sym.first.\} True True} GHC.Classes.eqInt
                                                                                                                                                                                                                                                                                                                                               y
                                                                                                                                                                                                                                                                                                                                               i of wild2 {
                                                                                                                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                                                                                                                            -> case {__scc {main:PerturbationTree2.filter1Sym.first.\} False True} GHC.Classes.eqInt
                                                                                                                                                                                                                                                                                                                                                     y
                                                                                                                                                                                                                                                                                                                                                     j of wild3 {
                                                                                                                                                                                                                                                                                 GHC.Types.False
                                                                                                                                                                                                                                                                                 -> go3
                                                                                                                                                                                                                                                                                      ys
                                                                                                                                                                                                                                                                                 GHC.Types.True
                                                                                                                                                                                                                                                                                 -> GHC.Base.Just
                                                                                                                                                                                                                                                                                      @ GHC.Types.Int
                                                                                                                                                                                                                                                                                      y }
                                                                                                                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                                                                                                                            -> GHC.Base.Just
                                                                                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                                                                                 y } }
                                                                                                                                                                                                                                                                 } in
                                                                                                                                                                                                                                                                 go3
                                                                                                                                                                                                                                                                   l of wild1 {
                                                                                                                                                                                                  GHC.Base.Nothing
                                                                                                                                                                                                  -> case Data.Maybe.fromJust1
                                                                                                                                                                                                     ret_ty GHC.Types.Bool
                                                                                                                                                                                                     of {}
                                                                                                                                                                                                  GHC.Base.Just x
                                                                                                                                                                                                  -> case x of wild2 { GHC.Types.I# x1 ->
                                                                                                                                                                                                     case i of wild3 { GHC.Types.I# y ->
                                                                                                                                                                                                     GHC.Prim.tagToEnum#
                                                                                                                                                                                                       @ GHC.Types.Bool
                                                                                                                                                                                                       (GHC.Prim.==#
                                                                                                                                                                                                          x1
                                                                                                                                                                                                          y) } } } })
                                                                                                                                         inds)) -}
a095d7ec72d9b60dc88f203dce4f1e5e
  getEtaInds_go ::
    [([GHC.Types.Int], [GHC.Types.Int])] -> [[GHC.Types.Int]]
  {- Arity: 1, Strictness: <S,1*U> -}
b2467b92bec45db8d9d14413bca1ed1c
  getEtaInds_go1 :: [GHC.Types.Bool] -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e7775689d77726d410b894cd3bb08db5
  getForestLabels ::
    PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ans :: PerturbationTree2.AnsatzForest
                             (PerturbationTree2.AnsatzNode a)) ->
                 {__scc {main:PerturbationTree2.getForestLabels} True True} Data.OldList.nubBy
                                                                              @ GHC.Types.Int
                                                                              GHC.Classes.eqInt
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Int
                                                                                 (\ @ b1
                                                                                    (c :: GHC.Types.Int
                                                                                          -> b1
                                                                                          -> b1)[OneShot]
                                                                                    (n :: b1)[OneShot] ->
                                                                                  GHC.Base.foldr
                                                                                    @ (PerturbationTree2.AnsatzNode
                                                                                         a)
                                                                                    @ b1
                                                                                    (GHC.Base.mapFB
                                                                                       @ GHC.Types.Int
                                                                                       @ b1
                                                                                       @ (PerturbationTree2.AnsatzNode
                                                                                            a)
                                                                                       c
                                                                                       (PerturbationTree2.getVarLabels
                                                                                          @ a))
                                                                                    n
                                                                                    ({__scc {main:PerturbationTree2.getLeafVals} True True} case ans of wild {
                                                                                                                                              PerturbationTree2.Forest m
                                                                                                                                              -> {__scc {main:PerturbationTree2.getLeafVals.rest} True True} PerturbationTree2.getForestLabels2
                                                                                                                                                                                                               @ (PerturbationTree2.AnsatzNode
                                                                                                                                                                                                                    a)
                                                                                                                                                                                                               (GHC.Types.[]
                                                                                                                                                                                                                  @ (PerturbationTree2.AnsatzNode
                                                                                                                                                                                                                       a))
                                                                                                                                                                                                               m
                                                                                                                                              PerturbationTree2.Leaf var
                                                                                                                                              -> GHC.Types.:
                                                                                                                                                   @ (PerturbationTree2.AnsatzNode
                                                                                                                                                        a)
                                                                                                                                                   var
                                                                                                                                                   (GHC.Types.[]
                                                                                                                                                      @ (PerturbationTree2.AnsatzNode
                                                                                                                                                           a))
                                                                                                                                              PerturbationTree2.EmptyForest
                                                                                                                                              -> PerturbationTree2.getForestLabels1
                                                                                                                                                   @ (PerturbationTree2.AnsatzNode
                                                                                                                                                        a) })))) -}
835bc6956ad78fa286a1b90f7722735d
  getForestLabels1 :: [a]
  {- Strictness: x -}
025c24834d9746ced4ee79e613efd60e
  getForestLabels2 ::
    [a]
    -> Data.Map.Internal.Map a (PerturbationTree2.AnsatzForest a)
    -> [a]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
7cbc76f12531a3d959096cd2f0759280
  getForestLabels3 :: GHC.Types.Int
  {- Strictness: x -}
7e20a15f70d850c326d45c910af1b8f4
  getVarLabels :: PerturbationTree2.AnsatzNode a -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.getVarLabels} True True} case ds of wild {
                                                                           DEFAULT
                                                                           -> PerturbationTree2.getForestLabels3
                                                                           PerturbationTree2.Var i j
                                                                           -> j }) -}
469b6fd7f73dbd0a555c43ce50b5cf0a
  isElem ::
    GHC.Classes.Ord a =>
    [PerturbationTree2.AnsatzNode a]
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S,1*U><L,1*U> -}
ea662ba3fd6cccb6f4bb203300f3833a
  isZeroVar :: PerturbationTree2.AnsatzNode a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: PerturbationTree2.AnsatzNode a) ->
                 {__scc {main:PerturbationTree2.isZeroVar} True True} case ds of wild {
                                                                        DEFAULT -> GHC.Types.False
                                                                        PerturbationTree2.Var ds1 x
                                                                        -> case ds1 of wild1 { GHC.Real.:% a1 a2 ->
                                                                           case GHC.Integer.Type.eqInteger#
                                                                                  a1
                                                                                  PerturbationTree2.getEpsForest2 of wild2 {
                                                                             DEFAULT
                                                                             -> GHC.Types.False
                                                                             1#
                                                                             -> case GHC.Integer.Type.eqInteger#
                                                                                       a2
                                                                                       GHC.Real.$fEnumRatio1 of wild3 { DEFAULT ->
                                                                                GHC.Prim.tagToEnum#
                                                                                  @ GHC.Types.Bool
                                                                                  wild3 } } } }) -}
d7099a49b92b9e05ac55944207092ea5
  mapNodes ::
    (GHC.Classes.Ord a, GHC.Classes.Ord b) =>
    (a -> b)
    -> PerturbationTree2.AnsatzForest a
    -> PerturbationTree2.AnsatzForest b
  {- Arity: 4,
     Strictness: <L,A><L,U(A,C(C1(U)),A,A,A,C(C1(U)),A,A)><L,C(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Ord a)
                   (w1 :: GHC.Classes.Ord b)
                   (w2 :: a -> b)
                   (w3 :: PerturbationTree2.AnsatzForest a) ->
                 PerturbationTree2.$wmapNodes @ a @ b w1 w2 w3) -}
3ede8fd939ae2867940891c99345958e
  mapNodes_$smapNodes ::
    (PerturbationTree2.AnsatzNode GHC.Types.Int
     -> PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
    -> PerturbationTree2.AnsatzForest
         (PerturbationTree2.AnsatzNode GHC.Types.Int)
  {- Arity: 2, Strictness: <L,C(U)><S,1*U> -}
567c1212a382df5697b401955f162fe0
  mkAllVars :: GHC.Types.Int -> [PerturbationTree2.AnsatzNode a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m2,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 {__scc {main:PerturbationTree2.mkAllVars} True True} PerturbationTree2.getEpsForest3
                                                                        @ a
                                                                        ww1 }) -}
fa83901601796c3a8b6cbf1de32a1dca
  mkEpsilonList ::
    PerturbationTree2.AnsatzNode a
    -> [a] -> [PerturbationTree2.AnsatzNode a]
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: PerturbationTree2.AnsatzNode a) (w1 :: [a]) ->
                 case PerturbationTree2.$wmkEpsilonList
                        @ a
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (PerturbationTree2.AnsatzNode a) ww1 ww2 }) -}
1b7e40a7cc9f8d320abb3b80e7385715
  mkEpsilonList1 :: (a, a, a, a)
  {- Strictness: x -}
731e09c4ef9d7550964fe8cbd7d766fe
  mkEtaList ::
    PerturbationTree2.AnsatzNode a
    -> [a] -> [PerturbationTree2.AnsatzNode a]
  {- Arity: 2, Strictness: <L,U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: PerturbationTree2.AnsatzNode a) (w1 :: [a]) ->
                 case PerturbationTree2.$wmkEtaList
                        @ a
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ (PerturbationTree2.AnsatzNode a) ww1 ww2 }) -}
34dd799fe2849812812f3f7d63e3eb2f
  mkForestFromAscList ::
    GHC.Classes.Ord a => [a] -> PerturbationTree2.AnsatzForest a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: [a]) ->
                 PerturbationTree2.$wmkForestFromAscList @ a w1) -}
c114f238853826227ebbc2c674ba726e
  printAnsatz ::
    PerturbationTree2.AnsatzForest GHC.Base.String -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
bceeb82b187d7e62cf8ea44d7608c8e5
  reduceAnsatzEps ::
    GHC.Classes.Ord a =>
    PerturbationTree2.Symmetry a
    -> [[PerturbationTree2.AnsatzNode a]]
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,C(C1(U)),A,A,A)><L,U(U,U,U,U,U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (sym :: PerturbationTree2.Symmetry a)
                   (ds :: [[PerturbationTree2.AnsatzNode a]]) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (PerturbationTree2.AnsatzNode a)
                   = PerturbationTree2.$fOrdAnsatzNode @ a $dOrd
                 } in
                 {__scc {main:PerturbationTree2.reduceAnsatzEps} True True} case ds of wild {
                                                                              []
                                                                              -> PerturbationTree2.EmptyForest
                                                                                   @ (PerturbationTree2.AnsatzNode
                                                                                        a)
                                                                              : ipv ipv1
                                                                              -> let {
                                                                                   k :: [PerturbationTree2.AnsatzNode
                                                                                           a]
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                a)
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                a)
                                                                                   = {__scc {main:PerturbationTree2.reduceAnsatzEps.addOrRem} True False} \ (ans :: [PerturbationTree2.AnsatzNode
                                                                                                                                                                       a])
                                                                                                                                                            (f3 :: PerturbationTree2.AnsatzForest
                                                                                                                                                                     (PerturbationTree2.AnsatzNode
                                                                                                                                                                        a))[OneShot] ->
                                                                                                                                                          {__scc {main:PerturbationTree2.reduceAnsatzEps.addOrRem} False True} {__scc {main:PerturbationTree2.reduceAnsatzEps.addOrRem.\} True True} case PerturbationTree2.isElem
                                                                                                                                                                                                                                                                                                            @ a
                                                                                                                                                                                                                                                                                                            $dOrd
                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                            f3 of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                                                                                                                                       -> case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                                                                                                                                                                                                                                                                                                          PerturbationTree2.addForests
                                                                                                                                                                                                                                                                                                            @ (PerturbationTree2.AnsatzNode
                                                                                                                                                                                                                                                                                                                 a)
                                                                                                                                                                                                                                                                                                            $dOrd1
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.isZeroVar
                                                                                                                                                                                                                                                                                                               @ a)
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.addVars
                                                                                                                                                                                                                                                                                                               @ a)
                                                                                                                                                                                                                                                                                                            f3
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.$wsymAnsatzForestEps
                                                                                                                                                                                                                                                                                                               @ a
                                                                                                                                                                                                                                                                                                               $dOrd
                                                                                                                                                                                                                                                                                                               ww1
                                                                                                                                                                                                                                                                                                               ww2
                                                                                                                                                                                                                                                                                                               ww3
                                                                                                                                                                                                                                                                                                               ww4
                                                                                                                                                                                                                                                                                                               ww5
                                                                                                                                                                                                                                                                                                               (PerturbationTree2.$wmkForestFromAscList
                                                                                                                                                                                                                                                                                                                  @ (PerturbationTree2.AnsatzNode
                                                                                                                                                                                                                                                                                                                       a)
                                                                                                                                                                                                                                                                                                                  ans)) }
                                                                                                                                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                                                                                                                                       -> f3 }
                                                                                 } in
                                                                                 letrec {
                                                                                   go3 :: [[PerturbationTree2.AnsatzNode
                                                                                              a]]
                                                                                          -> PerturbationTree2.AnsatzForest
                                                                                               (PerturbationTree2.AnsatzNode
                                                                                                  a)
                                                                                     {- Arity: 1,
                                                                                        Strictness: <S,1*U> -}
                                                                                   = \ (ds1 :: [[PerturbationTree2.AnsatzNode
                                                                                                   a]]) ->
                                                                                     case ds1 of wild1 {
                                                                                       []
                                                                                       -> PerturbationTree2.EmptyForest
                                                                                            @ (PerturbationTree2.AnsatzNode
                                                                                                 a)
                                                                                       : y ys
                                                                                       -> k y
                                                                                            (go3
                                                                                               ys) }
                                                                                 } in
                                                                                 go3 wild }) -}
509ad48af62edc2384966499a2e9f7c4
  reduceAnsatzEta ::
    GHC.Classes.Ord a =>
    PerturbationTree2.Symmetry a
    -> [[PerturbationTree2.AnsatzNode a]]
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><L,U(U,U,U,U,U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (sym :: PerturbationTree2.Symmetry a)
                   (ds :: [[PerturbationTree2.AnsatzNode a]]) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (PerturbationTree2.AnsatzNode a)
                   = PerturbationTree2.$fOrdAnsatzNode @ a $dOrd
                 } in
                 {__scc {main:PerturbationTree2.reduceAnsatzEta} True True} case ds of wild {
                                                                              []
                                                                              -> PerturbationTree2.EmptyForest
                                                                                   @ (PerturbationTree2.AnsatzNode
                                                                                        a)
                                                                              : ipv ipv1
                                                                              -> let {
                                                                                   k :: [PerturbationTree2.AnsatzNode
                                                                                           a]
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                a)
                                                                                        -> PerturbationTree2.AnsatzForest
                                                                                             (PerturbationTree2.AnsatzNode
                                                                                                a)
                                                                                   = {__scc {main:PerturbationTree2.reduceAnsatzEta.addOrRem} True False} \ (ans :: [PerturbationTree2.AnsatzNode
                                                                                                                                                                       a])
                                                                                                                                                            (f3 :: PerturbationTree2.AnsatzForest
                                                                                                                                                                     (PerturbationTree2.AnsatzNode
                                                                                                                                                                        a))[OneShot] ->
                                                                                                                                                          {__scc {main:PerturbationTree2.reduceAnsatzEta.addOrRem} False True} {__scc {main:PerturbationTree2.reduceAnsatzEta.addOrRem.\} True True} case PerturbationTree2.isElem
                                                                                                                                                                                                                                                                                                            @ a
                                                                                                                                                                                                                                                                                                            $dOrd
                                                                                                                                                                                                                                                                                                            ans
                                                                                                                                                                                                                                                                                                            f3 of wild1 {
                                                                                                                                                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                                                                                                                                                       -> case sym of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                                                                                                                                                                                                                                                                                                          PerturbationTree2.addForests
                                                                                                                                                                                                                                                                                                            @ (PerturbationTree2.AnsatzNode
                                                                                                                                                                                                                                                                                                                 a)
                                                                                                                                                                                                                                                                                                            $dOrd1
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.isZeroVar
                                                                                                                                                                                                                                                                                                               @ a)
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.addVars
                                                                                                                                                                                                                                                                                                               @ a)
                                                                                                                                                                                                                                                                                                            f3
                                                                                                                                                                                                                                                                                                            (PerturbationTree2.$wsymAnsatzForestEta
                                                                                                                                                                                                                                                                                                               @ a
                                                                                                                                                                                                                                                                                                               $dOrd
                                                                                                                                                                                                                                                                                                               ww1
                                                                                                                                                                                                                                                                                                               ww2
                                                                                                                                                                                                                                                                                                               ww3
                                                                                                                                                                                                                                                                                                               ww4
                                                                                                                                                                                                                                                                                                               ww5
                                                                                                                                                                                                                                                                                                               (PerturbationTree2.$wmkForestFromAscList
                                                                                                                                                                                                                                                                                                                  @ (PerturbationTree2.AnsatzNode
                                                                                                                                                                                                                                                                                                                       a)
                                                                                                                                                                                                                                                                                                                  ans)) }
                                                                                                                                                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                                                                                                                                                       -> f3 }
                                                                                 } in
                                                                                 letrec {
                                                                                   go3 :: [[PerturbationTree2.AnsatzNode
                                                                                              a]]
                                                                                          -> PerturbationTree2.AnsatzForest
                                                                                               (PerturbationTree2.AnsatzNode
                                                                                                  a)
                                                                                     {- Arity: 1,
                                                                                        Strictness: <S,1*U> -}
                                                                                   = \ (ds1 :: [[PerturbationTree2.AnsatzNode
                                                                                                   a]]) ->
                                                                                     case ds1 of wild1 {
                                                                                       []
                                                                                       -> PerturbationTree2.EmptyForest
                                                                                            @ (PerturbationTree2.AnsatzNode
                                                                                                 a)
                                                                                       : y ys
                                                                                       -> k y
                                                                                            (go3
                                                                                               ys) }
                                                                                 } in
                                                                                 go3 wild }) -}
795340de9fc4fd87022a0b2447562df6
  relabelAnsatzForest ::
    GHC.Classes.Ord a =>
    PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 1,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>,
     Unfolding: (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 let {
                   $dOrd1 :: GHC.Classes.Ord (PerturbationTree2.AnsatzNode a)
                   = PerturbationTree2.$fOrdAnsatzNode @ a $dOrd
                 } in
                 \ (ans :: PerturbationTree2.AnsatzForest
                             (PerturbationTree2.AnsatzNode a)) ->
                 {__scc {main:PerturbationTree2.relabelAnsatzForest} True True} PerturbationTree2.$wmapNodes
                                                                                  @ (PerturbationTree2.AnsatzNode
                                                                                       a)
                                                                                  @ (PerturbationTree2.AnsatzNode
                                                                                       a)
                                                                                  $dOrd1
                                                                                  (let {
                                                                                     relabMap :: Data.IntMap.Internal.IntMap
                                                                                                   GHC.Types.Int
                                                                                     = let {
                                                                                         vars :: [GHC.Types.Int]
                                                                                         = {__scc {main:PerturbationTree2.relabelAnsatzForest.vars} True True} PerturbationTree2.getForestLabels
                                                                                                                                                                 @ a
                                                                                                                                                                 ans
                                                                                       } in
                                                                                       {__scc {main:PerturbationTree2.relabelAnsatzForest.relabMap} True True} Data.IntMap.Strict.fromList1
                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                 (Data.IntMap.Internal.Nil
                                                                                                                                                                    @ GHC.Types.Int)
                                                                                                                                                                 (GHC.List.zip
                                                                                                                                                                    @ GHC.Types.Int
                                                                                                                                                                    @ GHC.Types.Int
                                                                                                                                                                    vars
                                                                                                                                                                    PerturbationTree2.relabelAnsatzForest1)
                                                                                   } in
                                                                                   {__scc {main:PerturbationTree2.relabelAnsatzForest.update} True False} \ (ds :: PerturbationTree2.AnsatzNode
                                                                                                                                                                     a) ->
                                                                                                                                                          {__scc {main:PerturbationTree2.relabelAnsatzForest.update} False True} {__scc {main:PerturbationTree2.relabelVar} True True} case ds of wild {
                                                                                                                                                                                                                                                                                         DEFAULT
                                                                                                                                                                                                                                                                                         -> wild
                                                                                                                                                                                                                                                                                         PerturbationTree2.Var i j
                                                                                                                                                                                                                                                                                         -> PerturbationTree2.Var
                                                                                                                                                                                                                                                                                              @ a
                                                                                                                                                                                                                                                                                              i
                                                                                                                                                                                                                                                                                              (Data.IntMap.Internal.!
                                                                                                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                                                                                                 relabMap
                                                                                                                                                                                                                                                                                                 j) })
                                                                                  ans) -}
3c4f445a161e47dd0a26f526d06ec8c6
  relabelAnsatzForest1 :: [GHC.Types.Int]
  {- Unfolding: ({__scc {main:PerturbationTree2.relabelAnsatzForest} False True} {__scc {main:PerturbationTree2.relabelAnsatzForest.relabMap} False True} GHC.Enum.eftInt
                                                                                                                                                            1#
                                                                                                                                                            9223372036854775807#) -}
daf96d7c053cdf8d9412a39fd9764e3b
  showAnsatzNode ::
    GHC.Show.Show a =>
    PerturbationTree2.AnsatzNode a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: PerturbationTree2.AnsatzNode a) ->
                 case PerturbationTree2.$wshowAnsatzNode
                        @ a
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
779bb0f4c3e98b2d720c546c6a9840b3
  showAnsatzNode1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("x"#) -}
0fb42f4e6aebae89f53280f245045e07
  showAnsatzNode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
5e700fdb819c491aea884d7a7a462a91
  showAnsatzNode3 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1fe37f51130f036b3456414d01336b4f
  symAnsatzForestEps ::
    GHC.Classes.Ord a =>
    PerturbationTree2.Symmetry a
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,C(C1(U)),A,A,A)><S(SSSSS),1*U(1*U,1*U,1*U,1*U,1*U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: PerturbationTree2.Symmetry a)
                   (w2 :: PerturbationTree2.AnsatzForest
                            (PerturbationTree2.AnsatzNode a)) ->
                 case w1 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 PerturbationTree2.$wsymAnsatzForestEps
                   @ a
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   w2 }) -}
44355bf6428227f43ac931e5b984ce00
  symAnsatzForestEta ::
    GHC.Classes.Ord a =>
    PerturbationTree2.Symmetry a
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
    -> PerturbationTree2.AnsatzForest (PerturbationTree2.AnsatzNode a)
  {- Arity: 3,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)><S(SSSSS),1*U(1*U,1*U,1*U,1*U,1*U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: PerturbationTree2.Symmetry a)
                   (w2 :: PerturbationTree2.AnsatzForest
                            (PerturbationTree2.AnsatzNode a)) ->
                 case w1 of ww { (,,,,) ww1 ww2 ww3 ww4 ww5 ->
                 PerturbationTree2.$wsymAnsatzForestEta
                   @ a
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   w2 }) -}
instance [safe] GHC.Classes.Eq [PerturbationTree2.AnsatzForest]
  = PerturbationTree2.$fEqAnsatzForest
instance [safe] GHC.Classes.Eq [PerturbationTree2.AnsatzNode]
  = PerturbationTree2.$fEqAnsatzNode
instance [safe] GHC.Classes.Ord [PerturbationTree2.AnsatzNode]
  = PerturbationTree2.$fOrdAnsatzNode
instance [safe] GHC.Show.Show [PerturbationTree2.AnsatzForest]
  = PerturbationTree2.$fShowAnsatzForest
instance [safe] GHC.Show.Show [PerturbationTree2.AnsatzNode]
  = PerturbationTree2.$fShowAnsatzNode
"SPEC $c/= @ Int" forall ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
  PerturbationTree2.$fEqAnsatzNode_$c/= @ GHC.Types.Int $dEq1
  = PerturbationTree2.$fEqAnsatzNode_$s$c/=
"SPEC $c< @ Int" forall ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$c< @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode_$s$c<
"SPEC $c<= @ Int" forall ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$c<= @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode2
"SPEC $c== @ (AnsatzNode Int)" forall ($dEq1 :: GHC.Classes.Eq
                                                  (PerturbationTree2.AnsatzNode GHC.Types.Int))
  PerturbationTree2.$fEqAnsatzForest_$c== @ (PerturbationTree2.AnsatzNode
                                               GHC.Types.Int)
                                          $dEq1
  = PerturbationTree2.$fEqAnsatzForest_$s$c==
"SPEC $c== @ Int" forall ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
  PerturbationTree2.$fEqAnsatzNode_$c== @ GHC.Types.Int $dEq1
  = PerturbationTree2.$fEqAnsatzNode_$s$c==
"SPEC $c>= @ Int" forall ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$c>= @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode1
"SPEC $ccompare @ Int" forall ($dOrd :: GHC.Classes.Ord
                                          GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$ccompare @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode_$s$ccompare
"SPEC $cmax @ Int" forall ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$cmax @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode_$s$cmax
"SPEC $cmin @ Int" forall ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$cmin @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode_$s$cmin
"SPEC $cp1Ord @ Int" forall ($dOrd :: GHC.Classes.Ord
                                        GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode_$cp1Ord @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fEqAnsatzNode_$s$fEqAnsatzNode
"SPEC $fEqAnsatzNode @ Int" forall ($dEq1 :: GHC.Classes.Eq
                                               GHC.Types.Int)
  PerturbationTree2.$fEqAnsatzNode @ GHC.Types.Int $dEq1
  = PerturbationTree2.$fEqAnsatzNode_$s$fEqAnsatzNode
"SPEC $fOrdAnsatzNode @ Int" forall ($dOrd :: GHC.Classes.Ord
                                                GHC.Types.Int)
  PerturbationTree2.$fOrdAnsatzNode @ GHC.Types.Int $dOrd
  = PerturbationTree2.$fOrdAnsatzNode_$s$fOrdAnsatzNode
"SPEC addForests @ (AnsatzNode Int)" forall ($dOrd :: GHC.Classes.Ord
                                                        (PerturbationTree2.AnsatzNode
                                                           GHC.Types.Int))
  PerturbationTree2.addForests @ (PerturbationTree2.AnsatzNode
                                    GHC.Types.Int)
                               $dOrd
  = PerturbationTree2.getEpsForest_$saddForests
"SPEC isElem @ Int" forall ($dOrd :: GHC.Classes.Ord GHC.Types.Int)
  PerturbationTree2.isElem @ GHC.Types.Int $dOrd
  = PerturbationTree2.getEpsForest_$sisElem
"SPEC mapNodes @ (AnsatzNode Int) @ (AnsatzNode Int)" forall ($dOrd :: GHC.Classes.Ord
                                                                         (PerturbationTree2.AnsatzNode
                                                                            GHC.Types.Int))
                                                             ($dOrd1 :: GHC.Classes.Ord
                                                                          (PerturbationTree2.AnsatzNode
                                                                             GHC.Types.Int))
  PerturbationTree2.mapNodes @ (PerturbationTree2.AnsatzNode
                                  GHC.Types.Int)
                             @ (PerturbationTree2.AnsatzNode GHC.Types.Int)
                             $dOrd1
                             $dOrd
  = PerturbationTree2.mapNodes_$smapNodes
"SPEC mkForestFromAscList @ (AnsatzNode Int)" forall ($dOrd :: GHC.Classes.Ord
                                                                 (PerturbationTree2.AnsatzNode
                                                                    GHC.Types.Int))
  PerturbationTree2.mkForestFromAscList @ (PerturbationTree2.AnsatzNode
                                             GHC.Types.Int)
                                        $dOrd
  = PerturbationTree2.getEpsForest_$smkForestFromAscList
"SPEC reduceAnsatzEps @ Int" forall ($dOrd :: GHC.Classes.Ord
                                                GHC.Types.Int)
  PerturbationTree2.reduceAnsatzEps @ GHC.Types.Int $dOrd
  = PerturbationTree2.getEpsForest_$sreduceAnsatzEps
"SPEC reduceAnsatzEta @ Int" forall ($dOrd :: GHC.Classes.Ord
                                                GHC.Types.Int)
  PerturbationTree2.reduceAnsatzEta @ GHC.Types.Int $dOrd
  = PerturbationTree2.getEtaForest_$sreduceAnsatzEta
"SPEC/PerturbationTree2 fromList @ (AnsatzNode Int) _" forall @ a
                                                              ($dOrd :: GHC.Classes.Ord
                                                                          (PerturbationTree2.AnsatzNode
                                                                             GHC.Types.Int))
  Data.Map.Internal.fromList @ (PerturbationTree2.AnsatzNode
                                  GHC.Types.Int)
                             @ a
                             $dOrd
  = PerturbationTree2.$sfromList2 @ a
"SPEC/PerturbationTree2 fromList @ [Char] _" [orphan] forall @ a
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         [GHC.Types.Char])
  Data.Map.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = PerturbationTree2.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

