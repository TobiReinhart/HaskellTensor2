
==================== FINAL INTERFACE ====================
2019-01-14 15:48:09.735737 UTC

interface main:Tensor [hpc] 8043
  interface hash: ae79dee1263c811780bd700c59486281
  ABI hash: 70d6952dea62d47ab6f2d598c8b571ec
  export-list hash: cc1f578937ee3122bbbb4f8cf3eb8582
  orphan hash: 8f299cbd629f4770134ad51608907381
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tensor.aSymTensor
  Tensor.blockSymTensor
  Tensor.cyclicSymTensor
  Tensor.evalFullTensor
  Tensor.evalTensorVals
  Tensor.getVal
  Tensor.mkTensorfromF
  Tensor.mkTensorfromFZeros
  Tensor.mkTensorfromList
  Tensor.symTensor
  Tensor.tensorAdd
  Tensor.tensorContractWith_19
  Tensor.tensorContractWith_20
  Tensor.tensorContractWith_3
  Tensor.tensorContractWith_9
  Tensor.tensorIndList
  Tensor.tensorProductWith
  Tensor.tensorSMult
  Tensor.tensorSub
  Tensor.tensorTranspose
  Tensor.unsafeGetVal
  Tensor.Tensor{Tensor.Tensor}
module dependencies: Index
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Proxy a80a60a2fdceabfeb4d110d23b808844
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Index e389b597f52dbfefe3745bcba1949c62
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index a01a9190ec51cc115d3358a99c063fe2
  checkInd 6030f3b58bbe7ccf570f387f08862186
  combineIndex 4d31727a687abf8d200a85dd620fa85d
  cyclicSwapIndex 2524d58eb40885945ed6fca5d365532e
  delContractionIndex_19 aecf7e567703f04307b0624fe35e2c62
  delContractionIndex_20 3a417492a0f0c610951c6aedc0061a0e
  delContractionIndex_3 af875375fe71106cf731fd3a4db2f171
  delContractionIndex_9 dc6aeebf47593ddcaf2c5a4fc1be71e3
  delInd 24af7188eb4c12400e5676883d2ece38
  getRangeList bb2e75601febf5d2ff465e171708e972
  isContractionIndex 9f91687ac0d9c9ea9b19d8dd0d72d771
  mkInd 5e4f36c0df3f4b8edd769168b4da8340
  swapBlockPosIndex 37b1704c9558be938715767fc08247b6
  swapPosIndex 1763912bc469f68f00a55c3da2878cd6
6b5aa7fabc304949e9aed286ed95183b
  $fFunctorTensor ::
    GHC.Base.Functor (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat.
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
                  (Tensor.$fFunctorTensor_$cfmap
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8)
                  (Tensor.$fFunctorTensor_$c<$
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8) -}
6b5aa7fabc304949e9aed286ed95183b
  $fFunctorTensor_$c<$ ::
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$w$c<$
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        @ b
                        w
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
6b5aa7fabc304949e9aed286ed95183b
  $fFunctorTensor_$cfmap ::
    (a -> b)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.fmap} True True} case ds of wild { Tensor.Tensor tMap ->
                                                      case Data.Map.Strict.Internal.map
                                                             @ a
                                                             @ b
                                                             @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                                             f
                                                             tMap of dt { DEFAULT ->
                                                      Tensor.Tensor
                                                        @ n1
                                                        @ n2
                                                        @ n3
                                                        @ n4
                                                        @ n5
                                                        @ n6
                                                        @ n7
                                                        @ n8
                                                        @ b
                                                        dt } }) -}
6b5aa7fabc304949e9aed286ed95183b
  $fShowTensor ::
    GHC.Show.Show a =>
    GHC.Show.Show (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat
                      @ a
                      (v :: GHC.Show.Show a).
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                  (Tensor.$fShowTensor_$cshowsPrec
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshow
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshowList
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v) -}
737494dd887cc43ca1e040c11eb4e200
  $fShowTensor1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
22cdd232bf930dc0faa0b6cceff6d68b
  $fShowTensor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Tensor.$fShowTensor3) -}
038bda6e6e33cc813e9b34b169d0a8c8
  $fShowTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor "#) -}
a72a5f70e68005163e9143ab5f662b85
  $fShowTensor4 ::
    GHC.Show.Show
      (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
       Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
       Index.Uinds_3 n7, Index.Linds_3 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Show.$fShow(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$fShowTensor_$s$fShowInd7 @ n1)
                   (Tensor.$fShowTensor_$s$fShowInd6 @ n2)
                   (Tensor.$fShowTensor_$s$fShowInd5 @ n3)
                   (Tensor.$fShowTensor_$s$fShowInd4 @ n4)
                   (Tensor.$fShowTensor_$s$fShowInd3 @ n5)
                   (Tensor.$fShowTensor_$s$fShowInd2 @ n6)
                   (Tensor.$fShowTensor_$s$fShowInd1 @ n7)
                   (Tensor.$fShowTensor_$s$fShowInd @ n8)) -}
6b5aa7fabc304949e9aed286ed95183b
  $fShowTensor_$cshow ::
    GHC.Show.Show a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 {__scc {main:Tensor.showsPrec} True False} {__scc {main:Tensor.showsPrec} False True} GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Tensor.$fShowTensor2
                                                                                                         (Data.Map.Internal.$w$cshowsPrec
                                                                                                            @ (Index.Uinds_20
                                                                                                                 n1,
                                                                                                               Index.Linds_20
                                                                                                                 n2,
                                                                                                               Index.Uinds_19
                                                                                                                 n3,
                                                                                                               Index.Linds_19
                                                                                                                 n4,
                                                                                                               Index.Uinds_9
                                                                                                                 n5,
                                                                                                               Index.Linds_9
                                                                                                                 n6,
                                                                                                               Index.Uinds_3
                                                                                                                 n7,
                                                                                                               Index.Linds_3
                                                                                                                 n8)
                                                                                                            @ a
                                                                                                            (Tensor.$fShowTensor4
                                                                                                               @ n1
                                                                                                               @ n2
                                                                                                               @ n3
                                                                                                               @ n4
                                                                                                               @ n5
                                                                                                               @ n6
                                                                                                               @ n7
                                                                                                               @ n8)
                                                                                                            w
                                                                                                            11#
                                                                                                            ww1
                                                                                                            (GHC.Types.[]
                                                                                                               @ GHC.Types.Char)) }) -}
6b5aa7fabc304949e9aed286ed95183b
  $fShowTensor_$cshowList ::
    GHC.Show.Show a =>
    [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (Tensor.$fShowTensor_$cshowsPrec
                      @ n1
                      @ n2
                      @ n3
                      @ n4
                      @ n5
                      @ n6
                      @ n7
                      @ n8
                      @ a
                      $dShow
                      Tensor.$fShowTensor1)
                   ls
                   s) -}
6b5aa7fabc304949e9aed286ed95183b
  $fShowTensor_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 Tensor.$w$cshowsPrec
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1
                   ww3 } }) -}
c932d821ee9eaa0afc6107020edf50f3
  $fShowTensor_$s$fShowInd ::
    GHC.Show.Show (Index.Ind n Index.Lind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (\ (ls :: [Index.Ind n Index.Lind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_3
                        Index.$fShowLind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
2ea7fa8789266412fe276323184b66b1
  $fShowTensor_$s$fShowInd1 ::
    GHC.Show.Show (Index.Ind n Index.Uind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (\ (ls :: [Index.Ind n Index.Uind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_3
                        Index.$fShowUind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
393071fd36e4be76f09215cb9a29900b
  $fShowTensor_$s$fShowInd2 ::
    GHC.Show.Show (Index.Ind n Index.Lind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (\ (ls :: [Index.Ind n Index.Lind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_9
                        Index.$fShowLind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
da8b6f640f115570c5d52dbc36ddc222
  $fShowTensor_$s$fShowInd3 ::
    GHC.Show.Show (Index.Ind n Index.Uind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (\ (ls :: [Index.Ind n Index.Uind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_9
                        Index.$fShowUind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
bbf6fcc7bcc1f7d0a074e8b9329dd7d0
  $fShowTensor_$s$fShowInd4 ::
    GHC.Show.Show (Index.Ind n Index.Lind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_19
                     Index.$fShowLind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_19 Index.$fShowLind_19)
                  (\ (ls :: [Index.Ind n Index.Lind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_19
                        Index.$fShowLind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
62cb53494f898450e6c3d375368ec0ea
  $fShowTensor_$s$fShowInd5 ::
    GHC.Show.Show (Index.Ind n Index.Uind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_19
                     Index.$fShowUind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_19 Index.$fShowUind_19)
                  (\ (ls :: [Index.Ind n Index.Uind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_19
                        Index.$fShowUind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
a9767ef83eb115e7463186774f722069
  $fShowTensor_$s$fShowInd6 ::
    GHC.Show.Show (Index.Ind n Index.Lind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_20
                     Index.$fShowLind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_20 Index.$fShowLind_20)
                  (\ (ls :: [Index.Ind n Index.Lind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_20
                        Index.$fShowLind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
1116c4db53cc58eef901ead6393e7c3f
  $fShowTensor_$s$fShowInd7 ::
    GHC.Show.Show (Index.Ind n Index.Uind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_20
                     Index.$fShowUind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_20 Index.$fShowUind_20)
                  (\ (ls :: [Index.Ind n Index.Uind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_20
                        Index.$fShowUind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
86d7c1b7051111202eaf4f62235238f7
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Index.$fEqInd_$c== @ n @ Index.Lind_3 Index.$fEqLind_3)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
9c944cfb8ca5298526b973180f069da7
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Index.$fEqInd_$c== @ n @ Index.Uind_3 Index.$fEqUind_3)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
87c495c352f2e176721a0236d358b6d2
  $s$fEqInd2 :: GHC.Classes.Eq (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Index.$fEqInd_$c== @ n @ Index.Lind_9 Index.$fEqLind_9)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n) -}
2ac82725fd53960d6e4824f6871da6ae
  $s$fEqInd3 :: GHC.Classes.Eq (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Index.$fEqInd_$c== @ n @ Index.Uind_9 Index.$fEqUind_9)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n) -}
ae2331efabe2419e4ddc5b330c1f6b93
  $s$fEqInd4 :: GHC.Classes.Eq (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Index.$fEqInd_$c== @ n @ Index.Lind_19 Index.$fEqLind_19)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n) -}
9b918b69c4050e0327cb02f5f818097b
  $s$fEqInd5 :: GHC.Classes.Eq (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Index.$fEqInd_$c== @ n @ Index.Uind_19 Index.$fEqUind_19)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n) -}
7ca72151220a42813551c30f5f310c29
  $s$fEqInd6 :: GHC.Classes.Eq (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Index.$fEqInd_$c== @ n @ Index.Lind_20 Index.$fEqLind_20)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n) -}
12939ed57d463c45e452e5475852fdea
  $s$fEqInd7 :: GHC.Classes.Eq (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Index.$fEqInd_$c== @ n @ Index.Uind_20 Index.$fEqUind_20)
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n) -}
fd3ac47f12e3d5f08293bf7a57e710e3
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
eb985d4b9ddcc6a47f5c2df0cc03ef5f
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4c7ef566e91d661ad617e0e0dcd88d8a
  $s$fEqInd_$s$fEqInd_$c/=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Lind_9
                        Index.$fEqLind_9
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
383f11366f87764999654ec61cd1dbaf
  $s$fEqInd_$s$fEqInd_$c/=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Uind_9
                        Index.$fEqUind_9
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4de4ff081a0a51b2fb1dd1d0083ecca7
  $s$fEqInd_$s$fEqInd_$c/=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Lind_19
                        Index.$fEqLind_19
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d56c7777470a52bcb3d73865be052a18
  $s$fEqInd_$s$fEqInd_$c/=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Uind_19
                        Index.$fEqUind_19
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e99bf295b96409da238c706114a08dba
  $s$fEqInd_$s$fEqInd_$c/=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Lind_20
                        Index.$fEqLind_20
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
90707477fc15488e8fe03b3f7c354e62
  $s$fEqInd_$s$fEqInd_$c/=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case Index.$fEqInd_$c==
                        @ n
                        @ Index.Uind_20
                        Index.$fEqUind_20
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d52c215c0a739da26c57111a9a1c44b3
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Tensor.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_3
                                                            Index.$fOrdLind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_3
                                                      Index.$fOrdLind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_3
                                                                                       Index.$fOrdLind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
e5795a6a48e01234441a88b4e2a296ce
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Tensor.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_3
                                                            Index.$fOrdUind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_3
                                                      Index.$fOrdUind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_3
                                                                                       Index.$fOrdUind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
e34ab865f3b2a908e97fa2d80140eb80
  $s$fOrdInd2 :: GHC.Classes.Ord (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Tensor.$s$fEqInd2 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_9
                                                            Index.$fOrdLind_9
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_9
                                                      Index.$fOrdLind_9
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_9
                                                                                                                                Index.$fOrdLind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_9
                                                                                       Index.$fOrdLind_9
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_9
                                                                                                                                Index.$fOrdLind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_9
                                                                                               Index.$fOrdLind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_9
                                                                                               Index.$fOrdLind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
0f97818da63e81bb634daee24e1b1f32
  $s$fOrdInd3 :: GHC.Classes.Ord (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Tensor.$s$fEqInd3 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_9
                                                            Index.$fOrdUind_9
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_9
                                                      Index.$fOrdUind_9
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_9
                                                                                                                                Index.$fOrdUind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_9
                                                                                       Index.$fOrdUind_9
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_9
                                                                                                                                Index.$fOrdUind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_9
                                                                                               Index.$fOrdUind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_9
                                                                                               Index.$fOrdUind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
60bd371abf1c1b66f2f704da61956d0f
  $s$fOrdInd4 :: GHC.Classes.Ord (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Tensor.$s$fEqInd4 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_19
                                                            Index.$fOrdLind_19
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_19
                                                      Index.$fOrdLind_19
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_19
                                                                                                                                Index.$fOrdLind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_19
                                                                                       Index.$fOrdLind_19
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_19
                                                                                                                                Index.$fOrdLind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_19
                                                                                               Index.$fOrdLind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_19
                                                                                               Index.$fOrdLind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
693930414c48b80807cf284227fc04bd
  $s$fOrdInd5 :: GHC.Classes.Ord (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Tensor.$s$fEqInd5 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_19
                                                            Index.$fOrdUind_19
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_19
                                                      Index.$fOrdUind_19
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_19
                                                                                                                                Index.$fOrdUind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_19
                                                                                       Index.$fOrdUind_19
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_19
                                                                                                                                Index.$fOrdUind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_19
                                                                                               Index.$fOrdUind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_19
                                                                                               Index.$fOrdUind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
8db97be8774e25a991c5561085294fa5
  $s$fOrdInd6 :: GHC.Classes.Ord (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Tensor.$s$fEqInd6 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_20
                                                            Index.$fOrdLind_20
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_20
                                                      Index.$fOrdLind_20
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_20
                                                                                                                                Index.$fOrdLind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_20
                                                                                       Index.$fOrdLind_20
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_20
                                                                                                                                Index.$fOrdLind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_20
                                                                                               Index.$fOrdLind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_20
                                                                                               Index.$fOrdLind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
0c3c286117f111f3f2fb2dc95cd2aff0
  $s$fOrdInd7 :: GHC.Classes.Ord (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Tensor.$s$fEqInd7 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_20
                                                            Index.$fOrdUind_20
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_20
                                                      Index.$fOrdUind_20
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_20
                                                                                                                                Index.$fOrdUind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_20
                                                                                       Index.$fOrdUind_20
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_20
                                                                                                                                Index.$fOrdUind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_20
                                                                                               Index.$fOrdUind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_20
                                                                                               Index.$fOrdUind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
8faccefff846b48c245405a1ef92e065
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_3
                                                    Index.$fOrdLind_3
                                                    a2
                                                    b1 } }) -}
5f2f4670eec341d77e7cc574c66a05eb
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_3
                                                    Index.$fOrdUind_3
                                                    a2
                                                    b1 } }) -}
713049fa6105c05e98d4b9cf87f7beb6
  $s$fOrdInd_$c<2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_9
                                                    Index.$fOrdLind_9
                                                    a2
                                                    b1 } }) -}
759275d9b59334c48190130fa230d48d
  $s$fOrdInd_$c<3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_9
                                                    Index.$fOrdUind_9
                                                    a2
                                                    b1 } }) -}
6cd26eac43ddff8d0c7aaaf2811ce27a
  $s$fOrdInd_$c<4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_19
                                                    Index.$fOrdLind_19
                                                    a2
                                                    b1 } }) -}
48140f878643c3d51a32eeb84520e2a9
  $s$fOrdInd_$c<5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_19
                                                    Index.$fOrdUind_19
                                                    a2
                                                    b1 } }) -}
14f74f5e953badeaf0ad521c6dc6e51d
  $s$fOrdInd_$c<6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_20
                                                    Index.$fOrdLind_20
                                                    a2
                                                    b1 } }) -}
dc9898ec1e6e43aaba5917955a506365
  $s$fOrdInd_$c<7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_20
                                                    Index.$fOrdUind_20
                                                    a2
                                                    b1 } }) -}
2a292f7cb8376ed9b9695796e73aa8bf
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
3149caa094f9664309d70e1786556386
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
09522de670bb565a1ea1dda3e82373a1
  $s$fOrdInd_$c<=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_9
                                                                                                                              Index.$fOrdLind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
3cc5330f7109210a5f9091b246b261a3
  $s$fOrdInd_$c<=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_9
                                                                                                                              Index.$fOrdUind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
2e308458f9ee0bf551743d0020c9cc02
  $s$fOrdInd_$c<=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_19
                                                                                                                              Index.$fOrdLind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
b0d112350963faef5e423948ab7b95bd
  $s$fOrdInd_$c<=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_19
                                                                                                                              Index.$fOrdUind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
dc0217f5a3b29e5d81d32e3b0e4e2a04
  $s$fOrdInd_$c<=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_20
                                                                                                                              Index.$fOrdLind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
7e4062befd97bebe387a9d33dbd8f3d4
  $s$fOrdInd_$c<=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_20
                                                                                                                              Index.$fOrdUind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
5b8b9236a2f02b71b601101a1ff5cbd6
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_3
                                                                                     Index.$fOrdLind_3
                                                                                     a2
                                                                                     b1 } }) -}
205fb3656d8678e1f10a77ac4cf6e046
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_3
                                                                                     Index.$fOrdUind_3
                                                                                     a2
                                                                                     b1 } }) -}
5816fee4ec3dbaa2462a2d16f5ddc158
  $s$fOrdInd_$c>2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_9
                                                                                     Index.$fOrdLind_9
                                                                                     a2
                                                                                     b1 } }) -}
be79470ac2ea237bfd7bcc34b4bd50f0
  $s$fOrdInd_$c>3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_9
                                                                                     Index.$fOrdUind_9
                                                                                     a2
                                                                                     b1 } }) -}
efaa79363c35498a6b0a2e02a15312a7
  $s$fOrdInd_$c>4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_19
                                                                                     Index.$fOrdLind_19
                                                                                     a2
                                                                                     b1 } }) -}
63546a5bbf4263d6e2bd5aa482d3d739
  $s$fOrdInd_$c>5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_19
                                                                                     Index.$fOrdUind_19
                                                                                     a2
                                                                                     b1 } }) -}
557e6a9459a6412eb30c08a14ea77c26
  $s$fOrdInd_$c>6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_20
                                                                                     Index.$fOrdLind_20
                                                                                     a2
                                                                                     b1 } }) -}
bc6b0b1119075609d55cedfda51d7735
  $s$fOrdInd_$c>7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_20
                                                                                     Index.$fOrdUind_20
                                                                                     a2
                                                                                     b1 } }) -}
01a5f3ca0d9a752fb71f3b7b6591f929
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
a6f9a89a966dd5db5c63bbe55a3ecd36
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
bf60529544efdf47df66b2dd26fb0215
  $s$fOrdInd_$c>=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_9
                                                                                                                              Index.$fOrdLind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
2af595270b87281f92c15a27e3375802
  $s$fOrdInd_$c>=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_9
                                                                                                                              Index.$fOrdUind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
7af2bc4f2c73fbeb732476b195265743
  $s$fOrdInd_$c>=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_19
                                                                                                                              Index.$fOrdLind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
5a89a9533b1df70c2a61dbdfae54e912
  $s$fOrdInd_$c>=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_19
                                                                                                                              Index.$fOrdUind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
095f25df4d3fbc75cb81a1118b40c4cc
  $s$fOrdInd_$c>=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_20
                                                                                                                              Index.$fOrdLind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
436c7e7a7f00c050191c38a7865bc0de
  $s$fOrdInd_$c>=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_20
                                                                                                                              Index.$fOrdUind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
f7e8050eef9c0eebff1a5a15835cd638
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_3
                                                          Index.$fOrdLind_3
                                                          a2
                                                          b1 } }) -}
56381c88883dde5800cf75ddab16ce07
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_3
                                                          Index.$fOrdUind_3
                                                          a2
                                                          b1 } }) -}
69de44b366a5cc2598a5b56cd773f13c
  $s$fOrdInd_$ccompare2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_9
                                                          Index.$fOrdLind_9
                                                          a2
                                                          b1 } }) -}
8f3cbf611c9c9c6d2c470da1ca029e3c
  $s$fOrdInd_$ccompare3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_9
                                                          Index.$fOrdUind_9
                                                          a2
                                                          b1 } }) -}
68faa6a7e9b9804447f2f02faa9115bc
  $s$fOrdInd_$ccompare4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_19
                                                          Index.$fOrdLind_19
                                                          a2
                                                          b1 } }) -}
22369466e92b556b2864c00985c9900f
  $s$fOrdInd_$ccompare5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_19
                                                          Index.$fOrdUind_19
                                                          a2
                                                          b1 } }) -}
bc74ec1e481abb88c5265a8ca721c888
  $s$fOrdInd_$ccompare6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_20
                                                          Index.$fOrdLind_20
                                                          a2
                                                          b1 } }) -}
58347444eb89f3403ddce1c37eec4f07
  $s$fOrdInd_$ccompare7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_20
                                                          Index.$fOrdUind_20
                                                          a2
                                                          b1 } }) -}
b0bcc08ddf829dcc9924a12805d14d41
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
edafd1a7bf389ed37b8a9b9975c7d9b3
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
e3c0088962f96bbe3698ded259a46a39
  $s$fOrdInd_$cmax2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_9
                                                                                             Index.$fOrdLind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
f405e3d0d787c3e1e4a5ae4332996e0d
  $s$fOrdInd_$cmax3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_9
                                                                                             Index.$fOrdUind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
05f247d6b57c90e96f25ad948d05f2c8
  $s$fOrdInd_$cmax4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_19
                                                                                             Index.$fOrdLind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
882c11190a32da6d96483dc7301482ce
  $s$fOrdInd_$cmax5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_19
                                                                                             Index.$fOrdUind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
e3299c1f67eb31d3296e28dafb38888a
  $s$fOrdInd_$cmax6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_20
                                                                                             Index.$fOrdLind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
61395c3e83dc934ae42746e9537a3242
  $s$fOrdInd_$cmax7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_20
                                                                                             Index.$fOrdUind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
be6ac2c59d998da512548fdd69770a8d
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
fc1a4312ff24dbd58426482091b02e39
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
9df7896e367329e684183bf04da49a67
  $s$fOrdInd_$cmin2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_9
                                                                                             Index.$fOrdLind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
91ee8e962ec5948182f13f385890b34d
  $s$fOrdInd_$cmin3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_9
                                                                                             Index.$fOrdUind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
d9fd4019a2c9a71be1477f851d298269
  $s$fOrdInd_$cmin4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_19
                                                                                             Index.$fOrdLind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
0941e1af0ff8373386eb1c873c95b687
  $s$fOrdInd_$cmin5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_19
                                                                                             Index.$fOrdUind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
907a7a6b2d2d0707590b090fb296f50e
  $s$fOrdInd_$cmin6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_20
                                                                                             Index.$fOrdLind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
0c36419d38680636850a38552938e9d1
  $s$fOrdInd_$cmin7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_20
                                                                                             Index.$fOrdUind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
bbeb9480048d1f80fe1b5caf606b7ae7
  $s$fShowInd_$cshow :: Index.Ind n Index.Lind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_3 Index.$fShowLind_3 ww1 }) -}
30291387eaff99fdd1f602df00b0c89e
  $s$fShowInd_$cshow1 :: Index.Ind n Index.Uind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_3 Index.$fShowUind_3 ww1 }) -}
4db9e8ccf45adab174c32db9aca9b8d6
  $s$fShowInd_$cshow2 :: Index.Ind n Index.Lind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_9 Index.$fShowLind_9 ww1 }) -}
e5ba2dc72f71b87591b7241b42a6256f
  $s$fShowInd_$cshow3 :: Index.Ind n Index.Uind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_9 Index.$fShowUind_9 ww1 }) -}
70a90dfa35ec28fe190d9213abe1006e
  $s$fShowInd_$cshow4 :: Index.Ind n Index.Lind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_19 Index.$fShowLind_19 ww1 }) -}
9345b5b11697c298e21f790c09bf322f
  $s$fShowInd_$cshow5 :: Index.Ind n Index.Uind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_19 Index.$fShowUind_19 ww1 }) -}
762d17b5b19e9137ad10a7bb5e19b301
  $s$fShowInd_$cshow6 :: Index.Ind n Index.Lind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_20 Index.$fShowLind_20 ww1 }) -}
063506f7ba67933676b78f7364d3e4e4
  $s$fShowInd_$cshow7 :: Index.Ind n Index.Uind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_20 Index.$fShowUind_20 ww1 }) -}
094de678a83dc39a3971e2d6990c3e7b
  $s$fShowInd_$cshowList ::
    [Index.Ind n Index.Lind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_3
                      Index.$fShowLind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
2b2723986a692aa29242accd951dddf7
  $s$fShowInd_$cshowList1 ::
    [Index.Ind n Index.Uind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_3
                      Index.$fShowUind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
aa3e97ffc8b4c970a9369aedd4006f00
  $s$fShowInd_$cshowList2 ::
    [Index.Ind n Index.Lind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_9
                      Index.$fShowLind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
9450fc2e3c099ab387a70920d0021ea4
  $s$fShowInd_$cshowList3 ::
    [Index.Ind n Index.Uind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_9
                      Index.$fShowUind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
543bc618ca6186dfcb84273abb760168
  $s$fShowInd_$cshowList4 ::
    [Index.Ind n Index.Lind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_19
                      Index.$fShowLind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
c604e0962e51dca02ed8dddf6f5d7923
  $s$fShowInd_$cshowList5 ::
    [Index.Ind n Index.Uind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_19
                      Index.$fShowUind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
587fd113b5bac3698db98f45ab52eefc
  $s$fShowInd_$cshowList6 ::
    [Index.Ind n Index.Lind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_20
                      Index.$fShowLind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
d0e2f5b282aa811318cf677a85cfd6d7
  $s$fShowInd_$cshowList7 ::
    [Index.Ind n Index.Uind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_20
                      Index.$fShowUind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
f6ac46f8c2d9905a878012cdbcc691d1
  $s$fShowInd_$cshowsPrec ::
    GHC.Types.Int -> Index.Ind n Index.Lind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_3
                   Index.$fShowLind_3
                   ww1
                   ww3 } }) -}
d38476c533e1ad1d6e95b042a98e2570
  $s$fShowInd_$cshowsPrec1 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_3
                   Index.$fShowUind_3
                   ww1
                   ww3 } }) -}
1990a436653a51019607c670a47d6919
  $s$fShowInd_$cshowsPrec2 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_9
                   Index.$fShowLind_9
                   ww1
                   ww3 } }) -}
9d84b160f80644587d88b5b139764139
  $s$fShowInd_$cshowsPrec3 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_9
                   Index.$fShowUind_9
                   ww1
                   ww3 } }) -}
d2320b6ff07d2eeedfc321fc25ab3692
  $s$fShowInd_$cshowsPrec4 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_19
                   Index.$fShowLind_19
                   ww1
                   ww3 } }) -}
b8bf1a47cc659313a1a14d270e600054
  $s$fShowInd_$cshowsPrec5 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_19
                   Index.$fShowUind_19
                   ww1
                   ww3 } }) -}
6c4c1af7c16ce863abf80ff36a4703e1
  $s$fShowInd_$cshowsPrec6 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_20
                   Index.$fShowLind_20
                   ww1
                   ww3 } }) -}
9e82fd606b31874a9f22b61da2a2247f
  $s$fShowInd_$cshowsPrec7 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_20
                   Index.$fShowUind_20
                   ww1
                   ww3 } }) -}
5f2a1e30d1721568b15c3042721846c7
  $tc'Tensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12818042684598350646##
                   14291769805369570361##
                   Tensor.$trModule
                   Tensor.$tc'Tensor2
                   9#
                   Tensor.$tc'Tensor1) -}
5596a26efcd24c4c9dfe567f1a2f272c
  $tc'Tensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ce00cdfd7748930d095a56929eb9141
  $tc'Tensor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$tc'Tensor3) -}
35bcb15695cfd8740e67fd21fbf81243
  $tc'Tensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tensor"#) -}
df4df1604a6cc32eefb879d8e8963b4f
  $tcTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16721014749436762582##
                   10886807482571654239##
                   Tensor.$trModule
                   Tensor.$trModule1
                   0#
                   Tensor.$tcTensor1) -}
e9a7914fe5cca5a97176b51483defd45
  $tcTensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb58da39157c7dde6e5d9cfc4f8dad63
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tensor.$trModule3
                   Tensor.$trModule1) -}
4999b7020a19b0c26a85ce9c5f0929f1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule2) -}
d5791154d3f1a17af509c3a8e7372c52
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor"#) -}
3aa19db5c63e324ff2d3a70ecc4b28c3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule4) -}
3b60604511356ab7892a3ac039f477e7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6a707ba5a2839187929a0749367329b9
  $w$c<$ ::
    a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b) ->
                 {__scc {main:Tensor.fmap} True False} case {__scc {main:Tensor.fmap} False True} letrec {
                                                                                                    go8 :: Data.Map.Internal.Map
                                                                                                             (Index.Index
                                                                                                                n1
                                                                                                                n2
                                                                                                                n3
                                                                                                                n4
                                                                                                                n5
                                                                                                                n6
                                                                                                                n7
                                                                                                                n8)
                                                                                                             b
                                                                                                           -> Data.Map.Internal.Map
                                                                                                                (Index.Index
                                                                                                                   n1
                                                                                                                   n2
                                                                                                                   n3
                                                                                                                   n4
                                                                                                                   n5
                                                                                                                   n6
                                                                                                                   n7
                                                                                                                   n8)
                                                                                                                a
                                                                                                      {- Arity: 1,
                                                                                                         Strictness: <S,1*U> -}
                                                                                                    = \ (ds :: Data.Map.Internal.Map
                                                                                                                 (Index.Index
                                                                                                                    n1
                                                                                                                    n2
                                                                                                                    n3
                                                                                                                    n4
                                                                                                                    n5
                                                                                                                    n6
                                                                                                                    n7
                                                                                                                    n8)
                                                                                                                 b) ->
                                                                                                      case ds of wild {
                                                                                                        Data.Map.Internal.Bin dt kx x l r
                                                                                                        -> case w of x' { DEFAULT ->
                                                                                                           case go8
                                                                                                                  l of dt1 { DEFAULT ->
                                                                                                           case go8
                                                                                                                  r of dt2 { DEFAULT ->
                                                                                                           Data.Map.Internal.Bin
                                                                                                             @ (Index.Index
                                                                                                                  n1
                                                                                                                  n2
                                                                                                                  n3
                                                                                                                  n4
                                                                                                                  n5
                                                                                                                  n6
                                                                                                                  n7
                                                                                                                  n8)
                                                                                                             @ a
                                                                                                             dt
                                                                                                             kx
                                                                                                             x'
                                                                                                             dt1
                                                                                                             dt2 } } }
                                                                                                        Data.Map.Internal.Tip
                                                                                                        -> Data.Map.Internal.Tip
                                                                                                             @ (Index.Index
                                                                                                                  n1
                                                                                                                  n2
                                                                                                                  n3
                                                                                                                  n4
                                                                                                                  n5
                                                                                                                  n6
                                                                                                                  n7
                                                                                                                  n8)
                                                                                                             @ a }
                                                                                                  } in
                                                                                                  go8
                                                                                                    ww of dt { DEFAULT ->
                                                       (# dt #) }) -}
337c4f247823ecf6155cd98ec90509f1
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.showsPrec} True True} let {
                                                             g :: GHC.Base.String -> GHC.Base.String
                                                             = Data.Map.Internal.$w$cshowsPrec
                                                                 @ (Index.Uinds_20 n1,
                                                                    Index.Linds_20 n2,
                                                                    Index.Uinds_19 n3,
                                                                    Index.Linds_19 n4,
                                                                    Index.Uinds_9 n5,
                                                                    Index.Linds_9 n6,
                                                                    Index.Uinds_3 n7,
                                                                    Index.Linds_3 n8)
                                                                 @ a
                                                                 (Tensor.$fShowTensor4
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8)
                                                                 w
                                                                 11#
                                                                 ww1
                                                           } in
                                                           case GHC.Prim.>=# ww 11# of lwild {
                                                             DEFAULT
                                                             -> \ (x :: GHC.Base.String) ->
                                                                GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Tensor.$fShowTensor2
                                                                  (g x)
                                                             1#
                                                             -> \ (x :: GHC.Base.String) ->
                                                                GHC.Types.:
                                                                  @ GHC.Types.Char
                                                                  GHC.Show.$fShow(,)4
                                                                  (GHC.Base.++
                                                                     @ GHC.Types.Char
                                                                     Tensor.$fShowTensor2
                                                                     (g (GHC.Types.:
                                                                           @ GHC.Types.Char
                                                                           GHC.Show.$fShow(,)2
                                                                           x))) }) -}
3e3f119caf2acf69ed341bad31f885b1
  $w$sfactorial :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
f465fecf56cfe2c82715e20b7fb0129d
  $waSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case {__scc {main:Tensor.aSymTensor} True True} Tensor.$wtensorTranspose
                                                                   @ n1
                                                                   @ n2
                                                                   @ n3
                                                                   @ n4
                                                                   @ n5
                                                                   @ n6
                                                                   @ n7
                                                                   @ n8
                                                                   @ a
                                                                   w1
                                                                   w2
                                                                   ww of ww1 { Unit# ww2 ->
                 case {__scc {main:Tensor.aSymTensor} False True} Tensor.$wtensorSub
                                                                    @ a
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8
                                                                    $dNum
                                                                    ww
                                                                    ww2 of ww3 { Unit# ww4 ->
                 case {__scc {main:Tensor.aSymTensor} False True} let {
                                                                    a1 :: a
                                                                    = GHC.Real./
                                                                        @ a
                                                                        w
                                                                        (GHC.Num.fromInteger
                                                                           @ a
                                                                           $dNum
                                                                           Tensor.aSymTensor2)
                                                                        (GHC.Num.fromInteger
                                                                           @ a
                                                                           $dNum
                                                                           Tensor.aSymTensor1)
                                                                  } in
                                                                  {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} let {
                                                                                                                                                              f :: a
                                                                                                                                                                   -> a
                                                                                                                                                              = GHC.Num.*
                                                                                                                                                                  @ a
                                                                                                                                                                  $dNum
                                                                                                                                                                  a1
                                                                                                                                                            } in
                                                                                                                                                            {__scc {main:Tensor.fmap} True True} case Data.Map.Strict.Internal.map
                                                                                                                                                                                                        @ a
                                                                                                                                                                                                        @ a
                                                                                                                                                                                                        @ (Index.Index
                                                                                                                                                                                                             n1
                                                                                                                                                                                                             n2
                                                                                                                                                                                                             n3
                                                                                                                                                                                                             n4
                                                                                                                                                                                                             n5
                                                                                                                                                                                                             n6
                                                                                                                                                                                                             n7
                                                                                                                                                                                                             n8)
                                                                                                                                                                                                        f
                                                                                                                                                                                                        ww4 of dt { DEFAULT ->
                                                                                                                                                                                                 Tensor.Tensor
                                                                                                                                                                                                   @ n1
                                                                                                                                                                                                   @ n2
                                                                                                                                                                                                   @ n3
                                                                                                                                                                                                   @ n4
                                                                                                                                                                                                   @ n5
                                                                                                                                                                                                   @ n6
                                                                                                                                                                                                   @ n7
                                                                                                                                                                                                   @ n8
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   dt } of ww5 { Tensor.Tensor ww6 ->
                 (# ww6 #) } } }) -}
60a03fd33195518434ac6241549fdd8d
  $wblockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U,U)><S,U>,
     Inline: [0] -}
f3e96f990358921c2df8817b2eb85317
  $wsymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case {__scc {main:Tensor.symTensor} True True} Tensor.$wtensorTranspose
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8
                                                                  @ a
                                                                  w1
                                                                  w2
                                                                  ww of ww1 { Unit# ww2 ->
                 case {__scc {main:Tensor.symTensor} False True} let {
                                                                   lvl19 :: a -> a -> a
                                                                   = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+
                                                                                                                  @ a
                                                                                                                  $dNum
                                                                 } in
                                                                 {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                         @ (Index.Index
                                                                                                                                                              n1
                                                                                                                                                              n2
                                                                                                                                                              n3
                                                                                                                                                              n4
                                                                                                                                                              n5
                                                                                                                                                              n6
                                                                                                                                                              n7
                                                                                                                                                              n8)
                                                                                                                                                         @ a
                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                            @ n1
                                                                                                                                                            @ n2
                                                                                                                                                            @ n3
                                                                                                                                                            @ n4
                                                                                                                                                            @ n5
                                                                                                                                                            @ n6
                                                                                                                                                            @ n7
                                                                                                                                                            @ n8)
                                                                                                                                                         lvl19
                                                                                                                                                         ww
                                                                                                                                                         ww2 of dt { DEFAULT ->
                 case {__scc {main:Tensor.symTensor} False True} let {
                                                                   a1 :: a
                                                                   = GHC.Real./
                                                                       @ a
                                                                       w
                                                                       (GHC.Num.fromInteger
                                                                          @ a
                                                                          $dNum
                                                                          Tensor.aSymTensor2)
                                                                       (GHC.Num.fromInteger
                                                                          @ a
                                                                          $dNum
                                                                          Tensor.aSymTensor1)
                                                                 } in
                                                                 {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} let {
                                                                                                                                                             f :: a
                                                                                                                                                                  -> a
                                                                                                                                                             = GHC.Num.*
                                                                                                                                                                 @ a
                                                                                                                                                                 $dNum
                                                                                                                                                                 a1
                                                                                                                                                           } in
                                                                                                                                                           {__scc {main:Tensor.fmap} True True} case Data.Map.Strict.Internal.map
                                                                                                                                                                                                       @ a
                                                                                                                                                                                                       @ a
                                                                                                                                                                                                       @ (Index.Index
                                                                                                                                                                                                            n1
                                                                                                                                                                                                            n2
                                                                                                                                                                                                            n3
                                                                                                                                                                                                            n4
                                                                                                                                                                                                            n5
                                                                                                                                                                                                            n6
                                                                                                                                                                                                            n7
                                                                                                                                                                                                            n8)
                                                                                                                                                                                                       f
                                                                                                                                                                                                       dt of dt1 { DEFAULT ->
                                                                                                                                                                                                Tensor.Tensor
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  dt1 } of ww3 { Tensor.Tensor ww4 ->
                 (# ww4 #) } } }) -}
0528716ee5e86dfa7685add3f8ba6fd6
  $wtensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_19} True False} case {__scc {main:Tensor.tensorContractWith_19} False True} let {
                                                                                                                                      mapFilt :: Data.Map.Internal.Map
                                                                                                                                                   (Index.Index
                                                                                                                                                      n1
                                                                                                                                                      n2
                                                                                                                                                      (n3
                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                      (n4
                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                      n5
                                                                                                                                                      n6
                                                                                                                                                      n7
                                                                                                                                                      n8)
                                                                                                                                                   a
                                                                                                                                      = {__scc {main:Tensor.tensorContractWith_19.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                        @ (Index.Index
                                                                                                                                                                                                             n1
                                                                                                                                                                                                             n2
                                                                                                                                                                                                             (n3
                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                             (n4
                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                             n5
                                                                                                                                                                                                             n6
                                                                                                                                                                                                             n7
                                                                                                                                                                                                             n8)
                                                                                                                                                                                                        @ a
                                                                                                                                                                                                        (\ (k :: Index.Index
                                                                                                                                                                                                                   n1
                                                                                                                                                                                                                   n2
                                                                                                                                                                                                                   (n3
                                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                                   (n4
                                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                                   n5
                                                                                                                                                                                                                   n6
                                                                                                                                                                                                                   n7
                                                                                                                                                                                                                   n8)
                                                                                                                                                                                                           (ds :: a)[OneShot] ->
                                                                                                                                                                                                         {__scc {main:Tensor.tensorContractWith_19.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                           @ n1
                                                                                                                                                                                                                                                                           @ n2
                                                                                                                                                                                                                                                                           @ (n3
                                                                                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                           @ (n4
                                                                                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                           @ n5
                                                                                                                                                                                                                                                                           @ n6
                                                                                                                                                                                                                                                                           @ n7
                                                                                                                                                                                                                                                                           @ n8
                                                                                                                                                                                                                                                                           Tensor.tensorContractWith_1
                                                                                                                                                                                                                                                                           w2
                                                                                                                                                                                                                                                                           k)
                                                                                                                                                                                                        ww
                                                                                                                                    } in
                                                                                                                                    {__scc {main:Tensor.tensorContractWith_19.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                                 @ (Index.Index
                                                                                                                                                                                                      n1
                                                                                                                                                                                                      n2
                                                                                                                                                                                                      n3
                                                                                                                                                                                                      n4
                                                                                                                                                                                                      n5
                                                                                                                                                                                                      n6
                                                                                                                                                                                                      n7
                                                                                                                                                                                                      n8)
                                                                                                                                                                                                 @ a
                                                                                                                                                                                                 @ (Index.Index
                                                                                                                                                                                                      n1
                                                                                                                                                                                                      n2
                                                                                                                                                                                                      (n3
                                                                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                                                                      (n4
                                                                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                                                                      n5
                                                                                                                                                                                                      n6
                                                                                                                                                                                                      n7
                                                                                                                                                                                                      n8)
                                                                                                                                                                                                 (Tensor.aSymTensor3
                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                    @ n8)
                                                                                                                                                                                                 w3
                                                                                                                                                                                                 (Index.delContractionIndex_19
                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                    @ n8
                                                                                                                                                                                                    w
                                                                                                                                                                                                    w1
                                                                                                                                                                                                    w2)
                                                                                                                                                                                                 mapFilt of dt { DEFAULT ->
                                                                        (# dt #) }) -}
d420a5588498c80bdcdb06a3c7255f4f
  $wtensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_20} True False} case {__scc {main:Tensor.tensorContractWith_20} False True} let {
                                                                                                                                      mapFilt :: Data.Map.Internal.Map
                                                                                                                                                   (Index.Index
                                                                                                                                                      (n1
                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                      (n2
                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                      n3
                                                                                                                                                      n4
                                                                                                                                                      n5
                                                                                                                                                      n6
                                                                                                                                                      n7
                                                                                                                                                      n8)
                                                                                                                                                   a
                                                                                                                                      = {__scc {main:Tensor.tensorContractWith_20.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                        @ (Index.Index
                                                                                                                                                                                                             (n1
                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                             (n2
                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                             n3
                                                                                                                                                                                                             n4
                                                                                                                                                                                                             n5
                                                                                                                                                                                                             n6
                                                                                                                                                                                                             n7
                                                                                                                                                                                                             n8)
                                                                                                                                                                                                        @ a
                                                                                                                                                                                                        (\ (k :: Index.Index
                                                                                                                                                                                                                   (n1
                                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                                   (n2
                                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                                   n3
                                                                                                                                                                                                                   n4
                                                                                                                                                                                                                   n5
                                                                                                                                                                                                                   n6
                                                                                                                                                                                                                   n7
                                                                                                                                                                                                                   n8)
                                                                                                                                                                                                           (ds :: a)[OneShot] ->
                                                                                                                                                                                                         {__scc {main:Tensor.tensorContractWith_20.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                           @ (n1
                                                                                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                           @ (n2
                                                                                                                                                                                                                                                                              GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                           @ n3
                                                                                                                                                                                                                                                                           @ n4
                                                                                                                                                                                                                                                                           @ n5
                                                                                                                                                                                                                                                                           @ n6
                                                                                                                                                                                                                                                                           @ n7
                                                                                                                                                                                                                                                                           @ n8
                                                                                                                                                                                                                                                                           Tensor.tensorContractWith_2
                                                                                                                                                                                                                                                                           w2
                                                                                                                                                                                                                                                                           k)
                                                                                                                                                                                                        ww
                                                                                                                                    } in
                                                                                                                                    {__scc {main:Tensor.tensorContractWith_20.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                                 @ (Index.Index
                                                                                                                                                                                                      n1
                                                                                                                                                                                                      n2
                                                                                                                                                                                                      n3
                                                                                                                                                                                                      n4
                                                                                                                                                                                                      n5
                                                                                                                                                                                                      n6
                                                                                                                                                                                                      n7
                                                                                                                                                                                                      n8)
                                                                                                                                                                                                 @ a
                                                                                                                                                                                                 @ (Index.Index
                                                                                                                                                                                                      (n1
                                                                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                                                                      (n2
                                                                                                                                                                                                       GHC.TypeNats.+ 1)
                                                                                                                                                                                                      n3
                                                                                                                                                                                                      n4
                                                                                                                                                                                                      n5
                                                                                                                                                                                                      n6
                                                                                                                                                                                                      n7
                                                                                                                                                                                                      n8)
                                                                                                                                                                                                 (Tensor.aSymTensor3
                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                    @ n8)
                                                                                                                                                                                                 w3
                                                                                                                                                                                                 (Index.delContractionIndex_20
                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                    @ n8
                                                                                                                                                                                                    w
                                                                                                                                                                                                    w1
                                                                                                                                                                                                    w2)
                                                                                                                                                                                                 mapFilt of dt { DEFAULT ->
                                                                        (# dt #) }) -}
35375454e9a5705aeb9e1e9527d0fb0e
  $wtensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_3} True False} case {__scc {main:Tensor.tensorContractWith_3} False True} let {
                                                                                                                                    mapFilt :: Data.Map.Internal.Map
                                                                                                                                                 (Index.Index
                                                                                                                                                    n1
                                                                                                                                                    n2
                                                                                                                                                    n3
                                                                                                                                                    n4
                                                                                                                                                    n5
                                                                                                                                                    n6
                                                                                                                                                    (n7
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    (n8
                                                                                                                                                     GHC.TypeNats.+ 1))
                                                                                                                                                 a
                                                                                                                                    = {__scc {main:Tensor.tensorContractWith_3.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                          n1
                                                                                                                                                                                                          n2
                                                                                                                                                                                                          n3
                                                                                                                                                                                                          n4
                                                                                                                                                                                                          n5
                                                                                                                                                                                                          n6
                                                                                                                                                                                                          (n7
                                                                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                                                                          (n8
                                                                                                                                                                                                           GHC.TypeNats.+ 1))
                                                                                                                                                                                                     @ a
                                                                                                                                                                                                     (\ (k :: Index.Index
                                                                                                                                                                                                                n1
                                                                                                                                                                                                                n2
                                                                                                                                                                                                                n3
                                                                                                                                                                                                                n4
                                                                                                                                                                                                                n5
                                                                                                                                                                                                                n6
                                                                                                                                                                                                                (n7
                                                                                                                                                                                                                 GHC.TypeNats.+ 1)
                                                                                                                                                                                                                (n8
                                                                                                                                                                                                                 GHC.TypeNats.+ 1))
                                                                                                                                                                                                        (ds :: a)[OneShot] ->
                                                                                                                                                                                                      {__scc {main:Tensor.tensorContractWith_3.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                       @ n1
                                                                                                                                                                                                                                                                       @ n2
                                                                                                                                                                                                                                                                       @ n3
                                                                                                                                                                                                                                                                       @ n4
                                                                                                                                                                                                                                                                       @ n5
                                                                                                                                                                                                                                                                       @ n6
                                                                                                                                                                                                                                                                       @ (n7
                                                                                                                                                                                                                                                                          GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                       @ (n8
                                                                                                                                                                                                                                                                          GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                       Tensor.tensorContractWith_4
                                                                                                                                                                                                                                                                       w2
                                                                                                                                                                                                                                                                       k)
                                                                                                                                                                                                     ww
                                                                                                                                  } in
                                                                                                                                  {__scc {main:Tensor.tensorContractWith_3.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                   n1
                                                                                                                                                                                                   n2
                                                                                                                                                                                                   n3
                                                                                                                                                                                                   n4
                                                                                                                                                                                                   n5
                                                                                                                                                                                                   n6
                                                                                                                                                                                                   n7
                                                                                                                                                                                                   n8)
                                                                                                                                                                                              @ a
                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                   n1
                                                                                                                                                                                                   n2
                                                                                                                                                                                                   n3
                                                                                                                                                                                                   n4
                                                                                                                                                                                                   n5
                                                                                                                                                                                                   n6
                                                                                                                                                                                                   (n7
                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                   (n8
                                                                                                                                                                                                    GHC.TypeNats.+ 1))
                                                                                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                                                                                 @ n1
                                                                                                                                                                                                 @ n2
                                                                                                                                                                                                 @ n3
                                                                                                                                                                                                 @ n4
                                                                                                                                                                                                 @ n5
                                                                                                                                                                                                 @ n6
                                                                                                                                                                                                 @ n7
                                                                                                                                                                                                 @ n8)
                                                                                                                                                                                              w3
                                                                                                                                                                                              (Index.delContractionIndex_3
                                                                                                                                                                                                 @ n7
                                                                                                                                                                                                 @ n8
                                                                                                                                                                                                 @ n1
                                                                                                                                                                                                 @ n2
                                                                                                                                                                                                 @ n3
                                                                                                                                                                                                 @ n4
                                                                                                                                                                                                 @ n5
                                                                                                                                                                                                 @ n6
                                                                                                                                                                                                 w
                                                                                                                                                                                                 w1
                                                                                                                                                                                                 w2)
                                                                                                                                                                                              mapFilt of dt { DEFAULT ->
                                                                       (# dt #) }) -}
107bbc222856f763db63184bd5201603
  $wtensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_9} True False} case {__scc {main:Tensor.tensorContractWith_9} False True} let {
                                                                                                                                    mapFilt :: Data.Map.Internal.Map
                                                                                                                                                 (Index.Index
                                                                                                                                                    n1
                                                                                                                                                    n2
                                                                                                                                                    n3
                                                                                                                                                    n4
                                                                                                                                                    (n5
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    (n6
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    n7
                                                                                                                                                    n8)
                                                                                                                                                 a
                                                                                                                                    = {__scc {main:Tensor.tensorContractWith_9.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                          n1
                                                                                                                                                                                                          n2
                                                                                                                                                                                                          n3
                                                                                                                                                                                                          n4
                                                                                                                                                                                                          (n5
                                                                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                                                                          (n6
                                                                                                                                                                                                           GHC.TypeNats.+ 1)
                                                                                                                                                                                                          n7
                                                                                                                                                                                                          n8)
                                                                                                                                                                                                     @ a
                                                                                                                                                                                                     (\ (k :: Index.Index
                                                                                                                                                                                                                n1
                                                                                                                                                                                                                n2
                                                                                                                                                                                                                n3
                                                                                                                                                                                                                n4
                                                                                                                                                                                                                (n5
                                                                                                                                                                                                                 GHC.TypeNats.+ 1)
                                                                                                                                                                                                                (n6
                                                                                                                                                                                                                 GHC.TypeNats.+ 1)
                                                                                                                                                                                                                n7
                                                                                                                                                                                                                n8)
                                                                                                                                                                                                        (ds :: a)[OneShot] ->
                                                                                                                                                                                                      {__scc {main:Tensor.tensorContractWith_9.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                       @ n1
                                                                                                                                                                                                                                                                       @ n2
                                                                                                                                                                                                                                                                       @ n3
                                                                                                                                                                                                                                                                       @ n4
                                                                                                                                                                                                                                                                       @ (n5
                                                                                                                                                                                                                                                                          GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                       @ (n6
                                                                                                                                                                                                                                                                          GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                       @ n7
                                                                                                                                                                                                                                                                       @ n8
                                                                                                                                                                                                                                                                       Tensor.tensorContractWith_5
                                                                                                                                                                                                                                                                       w2
                                                                                                                                                                                                                                                                       k)
                                                                                                                                                                                                     ww
                                                                                                                                  } in
                                                                                                                                  {__scc {main:Tensor.tensorContractWith_9.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                   n1
                                                                                                                                                                                                   n2
                                                                                                                                                                                                   n3
                                                                                                                                                                                                   n4
                                                                                                                                                                                                   n5
                                                                                                                                                                                                   n6
                                                                                                                                                                                                   n7
                                                                                                                                                                                                   n8)
                                                                                                                                                                                              @ a
                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                   n1
                                                                                                                                                                                                   n2
                                                                                                                                                                                                   n3
                                                                                                                                                                                                   n4
                                                                                                                                                                                                   (n5
                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                   (n6
                                                                                                                                                                                                    GHC.TypeNats.+ 1)
                                                                                                                                                                                                   n7
                                                                                                                                                                                                   n8)
                                                                                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                                                                                 @ n1
                                                                                                                                                                                                 @ n2
                                                                                                                                                                                                 @ n3
                                                                                                                                                                                                 @ n4
                                                                                                                                                                                                 @ n5
                                                                                                                                                                                                 @ n6
                                                                                                                                                                                                 @ n7
                                                                                                                                                                                                 @ n8)
                                                                                                                                                                                              w3
                                                                                                                                                                                              (Index.delContractionIndex_9
                                                                                                                                                                                                 @ n5
                                                                                                                                                                                                 @ n6
                                                                                                                                                                                                 @ n1
                                                                                                                                                                                                 @ n2
                                                                                                                                                                                                 @ n3
                                                                                                                                                                                                 @ n4
                                                                                                                                                                                                 @ n7
                                                                                                                                                                                                 @ n8
                                                                                                                                                                                                 w
                                                                                                                                                                                                 w1
                                                                                                                                                                                                 w2)
                                                                                                                                                                                              mapFilt of dt { DEFAULT ->
                                                                       (# dt #) }) -}
9f62e2f6afcc6ae70186b3aa2add6160
  $wtensorProductWith ::
    (a -> b -> c)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b
    -> (# Data.Map.Internal.Map
            (Index.Index
               (n1 GHC.TypeNats.+ m1)
               (n2 GHC.TypeNats.+ m2)
               (n3 GHC.TypeNats.+ m3)
               (n4 GHC.TypeNats.+ m4)
               (n5 GHC.TypeNats.+ m5)
               (n6 GHC.TypeNats.+ m6)
               (n7 GHC.TypeNats.+ m7)
               (n8 GHC.TypeNats.+ m8))
            c #)
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b) ->
                 {__scc {main:Tensor.tensorProductWith} True False} case {__scc {main:Tensor.tensorProductWith} False True} let {
                                                                                                                              indList :: [Index.Index
                                                                                                                                            m1
                                                                                                                                            m2
                                                                                                                                            m3
                                                                                                                                            m4
                                                                                                                                            m5
                                                                                                                                            m6
                                                                                                                                            m7
                                                                                                                                            m8]
                                                                                                                              = {__scc {main:Tensor.tensorProductWith.indList} True True} Data.Map.Internal.keys_go
                                                                                                                                                                                            @ (Index.Uinds_20
                                                                                                                                                                                                 m1,
                                                                                                                                                                                               Index.Linds_20
                                                                                                                                                                                                 m2,
                                                                                                                                                                                               Index.Uinds_19
                                                                                                                                                                                                 m3,
                                                                                                                                                                                               Index.Linds_19
                                                                                                                                                                                                 m4,
                                                                                                                                                                                               Index.Uinds_9
                                                                                                                                                                                                 m5,
                                                                                                                                                                                               Index.Linds_9
                                                                                                                                                                                                 m6,
                                                                                                                                                                                               Index.Uinds_3
                                                                                                                                                                                                 m7,
                                                                                                                                                                                               Index.Linds_3
                                                                                                                                                                                                 m8)
                                                                                                                                                                                            @ b
                                                                                                                                                                                            (GHC.Types.[]
                                                                                                                                                                                               @ (Index.Uinds_20
                                                                                                                                                                                                    m1,
                                                                                                                                                                                                  Index.Linds_20
                                                                                                                                                                                                    m2,
                                                                                                                                                                                                  Index.Uinds_19
                                                                                                                                                                                                    m3,
                                                                                                                                                                                                  Index.Linds_19
                                                                                                                                                                                                    m4,
                                                                                                                                                                                                  Index.Uinds_9
                                                                                                                                                                                                    m5,
                                                                                                                                                                                                  Index.Linds_9
                                                                                                                                                                                                    m6,
                                                                                                                                                                                                  Index.Uinds_3
                                                                                                                                                                                                    m7,
                                                                                                                                                                                                  Index.Linds_3
                                                                                                                                                                                                    m8))
                                                                                                                                                                                            ww1
                                                                                                                            } in
                                                                                                                            let {
                                                                                                                              mapList :: [Data.Map.Internal.Map
                                                                                                                                            (Index.Index
                                                                                                                                               (n1
                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                               (n2
                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                               (n3
                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                               (n4
                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                               (n5
                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                               (n6
                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                               (n7
                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                               (n8
                                                                                                                                                GHC.TypeNats.+ m8))
                                                                                                                                            c]
                                                                                                                              = {__scc {main:Tensor.tensorProductWith.mapList} True True} GHC.Base.map
                                                                                                                                                                                            @ (Index.Uinds_20
                                                                                                                                                                                                 m1,
                                                                                                                                                                                               Index.Linds_20
                                                                                                                                                                                                 m2,
                                                                                                                                                                                               Index.Uinds_19
                                                                                                                                                                                                 m3,
                                                                                                                                                                                               Index.Linds_19
                                                                                                                                                                                                 m4,
                                                                                                                                                                                               Index.Uinds_9
                                                                                                                                                                                                 m5,
                                                                                                                                                                                               Index.Linds_9
                                                                                                                                                                                                 m6,
                                                                                                                                                                                               Index.Uinds_3
                                                                                                                                                                                                 m7,
                                                                                                                                                                                               Index.Linds_3
                                                                                                                                                                                                 m8)
                                                                                                                                                                                            @ (Data.Map.Internal.Map
                                                                                                                                                                                                 (Index.Index
                                                                                                                                                                                                    (n1
                                                                                                                                                                                                     GHC.TypeNats.+ m1)
                                                                                                                                                                                                    (n2
                                                                                                                                                                                                     GHC.TypeNats.+ m2)
                                                                                                                                                                                                    (n3
                                                                                                                                                                                                     GHC.TypeNats.+ m3)
                                                                                                                                                                                                    (n4
                                                                                                                                                                                                     GHC.TypeNats.+ m4)
                                                                                                                                                                                                    (n5
                                                                                                                                                                                                     GHC.TypeNats.+ m5)
                                                                                                                                                                                                    (n6
                                                                                                                                                                                                     GHC.TypeNats.+ m6)
                                                                                                                                                                                                    (n7
                                                                                                                                                                                                     GHC.TypeNats.+ m7)
                                                                                                                                                                                                    (n8
                                                                                                                                                                                                     GHC.TypeNats.+ m8))
                                                                                                                                                                                                 c)
                                                                                                                                                                                            (\ (index :: Index.Index
                                                                                                                                                                                                           m1
                                                                                                                                                                                                           m2
                                                                                                                                                                                                           m3
                                                                                                                                                                                                           m4
                                                                                                                                                                                                           m5
                                                                                                                                                                                                           m6
                                                                                                                                                                                                           m7
                                                                                                                                                                                                           m8) ->
                                                                                                                                                                                             {__scc {main:Tensor.tensorProductF} True True} let {
                                                                                                                                                                                                                                              val :: b
                                                                                                                                                                                                                                              = {__scc {main:Tensor.tensorProductF.val} True True} Data.Map.Internal.find
                                                                                                                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                                                                                                                          m1
                                                                                                                                                                                                                                                                                                          m2
                                                                                                                                                                                                                                                                                                          m3
                                                                                                                                                                                                                                                                                                          m4
                                                                                                                                                                                                                                                                                                          m5
                                                                                                                                                                                                                                                                                                          m6
                                                                                                                                                                                                                                                                                                          m7
                                                                                                                                                                                                                                                                                                          m8)
                                                                                                                                                                                                                                                                                                     @ b
                                                                                                                                                                                                                                                                                                     (Tensor.aSymTensor4
                                                                                                                                                                                                                                                                                                        @ m8
                                                                                                                                                                                                                                                                                                        @ m7
                                                                                                                                                                                                                                                                                                        @ m6
                                                                                                                                                                                                                                                                                                        @ m5
                                                                                                                                                                                                                                                                                                        @ m4
                                                                                                                                                                                                                                                                                                        @ m3
                                                                                                                                                                                                                                                                                                        @ m2
                                                                                                                                                                                                                                                                                                        @ m1)
                                                                                                                                                                                                                                                                                                     index
                                                                                                                                                                                                                                                                                                     ww1
                                                                                                                                                                                                                                            } in
                                                                                                                                                                                                                                            {__scc {main:Tensor.tensorProductF.map3} True True} letrec {
                                                                                                                                                                                                                                                                                                  go8 :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                           (Index.Index
                                                                                                                                                                                                                                                                                                              (n1
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                              (n2
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                              (n3
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                              (n4
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                              (n5
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                              (n6
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                              (n7
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                              (n8
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                           a
                                                                                                                                                                                                                                                                                                         -> Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                              (Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                              c
                                                                                                                                                                                                                                                                                                    {- Arity: 1,
                                                                                                                                                                                                                                                                                                       Strictness: <S,1*U> -}
                                                                                                                                                                                                                                                                                                  = \ (ds :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                               (Index.Index
                                                                                                                                                                                                                                                                                                                  (n1
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                  (n2
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                  (n3
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                  (n4
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                  (n5
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                  (n6
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                  (n7
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                  (n8
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                               a) ->
                                                                                                                                                                                                                                                                                                    case ds of wild {
                                                                                                                                                                                                                                                                                                      Data.Map.Internal.Bin dt kx x l r
                                                                                                                                                                                                                                                                                                      -> case {__scc {main:Tensor.tensorProductF.map3.\} True True} w x
                                                                                                                                                                                                                                                                                                                                                                      val of x' { DEFAULT ->
                                                                                                                                                                                                                                                                                                         case go8
                                                                                                                                                                                                                                                                                                                l of dt1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                         case go8
                                                                                                                                                                                                                                                                                                                r of dt2 { DEFAULT ->
                                                                                                                                                                                                                                                                                                         Data.Map.Internal.Bin
                                                                                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                                                                                (n1
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                (n2
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                (n3
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                (n4
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                (n5
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                (n6
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                (n7
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                (n8
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                           @ c
                                                                                                                                                                                                                                                                                                           dt
                                                                                                                                                                                                                                                                                                           kx
                                                                                                                                                                                                                                                                                                           x'
                                                                                                                                                                                                                                                                                                           dt1
                                                                                                                                                                                                                                                                                                           dt2 } } }
                                                                                                                                                                                                                                                                                                      Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                      -> Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                                                                                (n1
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                (n2
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                (n3
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                (n4
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                (n5
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                (n6
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                (n7
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                (n8
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                           @ c }
                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                letrec {
                                                                                                                                                                                                                                                                                                  go13 :: [(Index.Index
                                                                                                                                                                                                                                                                                                              (n1
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                              (n2
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                              (n3
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                              (n4
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                              (n5
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                              (n6
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                              (n7
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                              (n8
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                            a)]
                                                                                                                                                                                                                                                                                                          -> Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                               (Index.Index
                                                                                                                                                                                                                                                                                                                  n1
                                                                                                                                                                                                                                                                                                                  n2
                                                                                                                                                                                                                                                                                                                  n3
                                                                                                                                                                                                                                                                                                                  n4
                                                                                                                                                                                                                                                                                                                  n5
                                                                                                                                                                                                                                                                                                                  n6
                                                                                                                                                                                                                                                                                                                  n7
                                                                                                                                                                                                                                                                                                                  n8)
                                                                                                                                                                                                                                                                                                               a
                                                                                                                                                                                                                                                                                                          -> [(Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                               a)]
                                                                                                                                                                                                                                                                                                    {- Arity: 2,
                                                                                                                                                                                                                                                                                                       Strictness: <L,1*U><S,1*U> -}
                                                                                                                                                                                                                                                                                                  = \ (z' :: [(Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                               a)])
                                                                                                                                                                                                                                                                                                      (ds :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                               (Index.Index
                                                                                                                                                                                                                                                                                                                  n1
                                                                                                                                                                                                                                                                                                                  n2
                                                                                                                                                                                                                                                                                                                  n3
                                                                                                                                                                                                                                                                                                                  n4
                                                                                                                                                                                                                                                                                                                  n5
                                                                                                                                                                                                                                                                                                                  n6
                                                                                                                                                                                                                                                                                                                  n7
                                                                                                                                                                                                                                                                                                                  n8)
                                                                                                                                                                                                                                                                                                               a) ->
                                                                                                                                                                                                                                                                                                    case ds of wild {
                                                                                                                                                                                                                                                                                                      Data.Map.Internal.Bin dt kx x l r
                                                                                                                                                                                                                                                                                                      -> go13
                                                                                                                                                                                                                                                                                                           (GHC.Types.:
                                                                                                                                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                                                                                                                                   (n1
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                   (n2
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                   (n3
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                   (n4
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                   (n5
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                   (n6
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                   (n7
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                   (n8
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                                 a)
                                                                                                                                                                                                                                                                                                              ({__scc {main:Tensor.tensorProductF.map3.\} True True} Index.combineIndex
                                                                                                                                                                                                                                                                                                                                                                       @ n1
                                                                                                                                                                                                                                                                                                                                                                       @ n2
                                                                                                                                                                                                                                                                                                                                                                       @ n3
                                                                                                                                                                                                                                                                                                                                                                       @ n4
                                                                                                                                                                                                                                                                                                                                                                       @ n5
                                                                                                                                                                                                                                                                                                                                                                       @ n6
                                                                                                                                                                                                                                                                                                                                                                       @ n7
                                                                                                                                                                                                                                                                                                                                                                       @ n8
                                                                                                                                                                                                                                                                                                                                                                       @ m1
                                                                                                                                                                                                                                                                                                                                                                       @ m2
                                                                                                                                                                                                                                                                                                                                                                       @ m3
                                                                                                                                                                                                                                                                                                                                                                       @ m4
                                                                                                                                                                                                                                                                                                                                                                       @ m5
                                                                                                                                                                                                                                                                                                                                                                       @ m6
                                                                                                                                                                                                                                                                                                                                                                       @ m7
                                                                                                                                                                                                                                                                                                                                                                       @ m8
                                                                                                                                                                                                                                                                                                                                                                       kx
                                                                                                                                                                                                                                                                                                                                                                       index,
                                                                                                                                                                                                                                                                                                               x)
                                                                                                                                                                                                                                                                                                              (go13
                                                                                                                                                                                                                                                                                                                 z'
                                                                                                                                                                                                                                                                                                                 r))
                                                                                                                                                                                                                                                                                                           l
                                                                                                                                                                                                                                                                                                      Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                      -> z' }
                                                                                                                                                                                                                                                                                                } in
                                                                                                                                                                                                                                                                                                go8
                                                                                                                                                                                                                                                                                                  (Data.Map.Internal.fromList
                                                                                                                                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                                                                                                                                          (n1
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                          (n2
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                          (n3
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                          (n4
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                          (n5
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                          (n6
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                          (n7
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                          (n8
                                                                                                                                                                                                                                                                                                           GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                     @ a
                                                                                                                                                                                                                                                                                                     (Tensor.tensorProductWith2
                                                                                                                                                                                                                                                                                                        @ n8
                                                                                                                                                                                                                                                                                                        @ m8
                                                                                                                                                                                                                                                                                                        @ n7
                                                                                                                                                                                                                                                                                                        @ m7
                                                                                                                                                                                                                                                                                                        @ n6
                                                                                                                                                                                                                                                                                                        @ m6
                                                                                                                                                                                                                                                                                                        @ n5
                                                                                                                                                                                                                                                                                                        @ m5
                                                                                                                                                                                                                                                                                                        @ n4
                                                                                                                                                                                                                                                                                                        @ m4
                                                                                                                                                                                                                                                                                                        @ n3
                                                                                                                                                                                                                                                                                                        @ m3
                                                                                                                                                                                                                                                                                                        @ n2
                                                                                                                                                                                                                                                                                                        @ m2
                                                                                                                                                                                                                                                                                                        @ n1
                                                                                                                                                                                                                                                                                                        @ m1)
                                                                                                                                                                                                                                                                                                     (go13
                                                                                                                                                                                                                                                                                                        (GHC.Types.[]
                                                                                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                                                                                (n1
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                (n2
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                (n3
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                (n4
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                (n5
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                (n6
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                (n7
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                (n8
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                              a))
                                                                                                                                                                                                                                                                                                        ww)))
                                                                                                                                                                                            indList
                                                                                                                            } in
                                                                                                                            {__scc {main:Tensor.tensorProductWith.newMap} True True} Tensor.tensorProductWith1
                                                                                                                                                                                       @ n1
                                                                                                                                                                                       @ m1
                                                                                                                                                                                       @ n2
                                                                                                                                                                                       @ m2
                                                                                                                                                                                       @ n3
                                                                                                                                                                                       @ m3
                                                                                                                                                                                       @ n4
                                                                                                                                                                                       @ m4
                                                                                                                                                                                       @ n5
                                                                                                                                                                                       @ m5
                                                                                                                                                                                       @ n6
                                                                                                                                                                                       @ m6
                                                                                                                                                                                       @ n7
                                                                                                                                                                                       @ m7
                                                                                                                                                                                       @ n8
                                                                                                                                                                                       @ m8
                                                                                                                                                                                       @ c
                                                                                                                                                                                       (Data.Map.Internal.Tip
                                                                                                                                                                                          @ (Index.Index
                                                                                                                                                                                               (n1
                                                                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                                                                               (n2
                                                                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                                                                               (n3
                                                                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                                                                               (n4
                                                                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                                                                               (n5
                                                                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                                                                               (n6
                                                                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                                                                               (n7
                                                                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                                                                               (n8
                                                                                                                                                                                                GHC.TypeNats.+ m8))
                                                                                                                                                                                          @ c)
                                                                                                                                                                                       mapList of dt { DEFAULT ->
                                                                    (# dt #) }) -}
3b1495acc44e9117817d61f5577eaa63
  $wtensorSub ::
    GHC.Num.Num a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3,
     Strictness: <L,U(1*C(C1(U)),A,1*C1(C(U)),1*C1(U),A,A,1*C1(U))><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 case {__scc {main:Tensor.tensorSub} True True} let {
                                                                  a1 :: a
                                                                  = GHC.Num.negate
                                                                      @ a
                                                                      w
                                                                      (GHC.Num.fromInteger
                                                                         @ a
                                                                         w
                                                                         Tensor.aSymTensor2)
                                                                } in
                                                                {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} let {
                                                                                                                                                            f :: a
                                                                                                                                                                 -> a
                                                                                                                                                            = GHC.Num.*
                                                                                                                                                                @ a
                                                                                                                                                                w
                                                                                                                                                                a1
                                                                                                                                                          } in
                                                                                                                                                          {__scc {main:Tensor.fmap} True True} case Data.Map.Strict.Internal.map
                                                                                                                                                                                                      @ a
                                                                                                                                                                                                      @ a
                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                           n1
                                                                                                                                                                                                           n2
                                                                                                                                                                                                           n3
                                                                                                                                                                                                           n4
                                                                                                                                                                                                           n5
                                                                                                                                                                                                           n6
                                                                                                                                                                                                           n7
                                                                                                                                                                                                           n8)
                                                                                                                                                                                                      f
                                                                                                                                                                                                      ww1 of dt { DEFAULT ->
                                                                                                                                                                                               Tensor.Tensor
                                                                                                                                                                                                 @ n1
                                                                                                                                                                                                 @ n2
                                                                                                                                                                                                 @ n3
                                                                                                                                                                                                 @ n4
                                                                                                                                                                                                 @ n5
                                                                                                                                                                                                 @ n6
                                                                                                                                                                                                 @ n7
                                                                                                                                                                                                 @ n8
                                                                                                                                                                                                 @ a
                                                                                                                                                                                                 dt } of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Tensor.tensorSub} False True} let {
                                                                   lvl19 :: a -> a -> a
                                                                   = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+
                                                                                                                  @ a
                                                                                                                  w
                                                                 } in
                                                                 {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                         @ (Index.Index
                                                                                                                                                              n1
                                                                                                                                                              n2
                                                                                                                                                              n3
                                                                                                                                                              n4
                                                                                                                                                              n5
                                                                                                                                                              n6
                                                                                                                                                              n7
                                                                                                                                                              n8)
                                                                                                                                                         @ a
                                                                                                                                                         (Tensor.aSymTensor3
                                                                                                                                                            @ n1
                                                                                                                                                            @ n2
                                                                                                                                                            @ n3
                                                                                                                                                            @ n4
                                                                                                                                                            @ n5
                                                                                                                                                            @ n6
                                                                                                                                                            @ n7
                                                                                                                                                            @ n8)
                                                                                                                                                         lvl19
                                                                                                                                                         ww
                                                                                                                                                         ww3 of dt { DEFAULT ->
                 (# dt #) } }) -}
b2e1b9dbf2a99d127b997df53351ecf6
  $wtensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.tensorTranspose} True False} case {__scc {main:Tensor.tensorTranspose} False True} letrec {
                                                                                                                          go13 :: [(Index.Index
                                                                                                                                      n1
                                                                                                                                      n2
                                                                                                                                      n3
                                                                                                                                      n4
                                                                                                                                      n5
                                                                                                                                      n6
                                                                                                                                      n7
                                                                                                                                      n8,
                                                                                                                                    a)]
                                                                                                                                  -> Data.Map.Internal.Map
                                                                                                                                       (Index.Index
                                                                                                                                          n1
                                                                                                                                          n2
                                                                                                                                          n3
                                                                                                                                          n4
                                                                                                                                          n5
                                                                                                                                          n6
                                                                                                                                          n7
                                                                                                                                          n8)
                                                                                                                                       a
                                                                                                                                  -> [(Index.Index
                                                                                                                                         n1
                                                                                                                                         n2
                                                                                                                                         n3
                                                                                                                                         n4
                                                                                                                                         n5
                                                                                                                                         n6
                                                                                                                                         n7
                                                                                                                                         n8,
                                                                                                                                       a)]
                                                                                                                            {- Arity: 2,
                                                                                                                               Strictness: <L,1*U><S,1*U> -}
                                                                                                                          = \ (z' :: [(Index.Index
                                                                                                                                         n1
                                                                                                                                         n2
                                                                                                                                         n3
                                                                                                                                         n4
                                                                                                                                         n5
                                                                                                                                         n6
                                                                                                                                         n7
                                                                                                                                         n8,
                                                                                                                                       a)])
                                                                                                                              (ds :: Data.Map.Internal.Map
                                                                                                                                       (Index.Index
                                                                                                                                          n1
                                                                                                                                          n2
                                                                                                                                          n3
                                                                                                                                          n4
                                                                                                                                          n5
                                                                                                                                          n6
                                                                                                                                          n7
                                                                                                                                          n8)
                                                                                                                                       a) ->
                                                                                                                            case ds of wild {
                                                                                                                              Data.Map.Internal.Bin dt kx x l r
                                                                                                                              -> case kx of ww2 { (,,,,,,,) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                                                                                                                                 go13
                                                                                                                                   (GHC.Types.:
                                                                                                                                      @ (Index.Index
                                                                                                                                           n1
                                                                                                                                           n2
                                                                                                                                           n3
                                                                                                                                           n4
                                                                                                                                           n5
                                                                                                                                           n6
                                                                                                                                           n7
                                                                                                                                           n8,
                                                                                                                                         a)
                                                                                                                                      (case w of ww1 { GHC.Types.I# ww12 ->
                                                                                                                                       {__scc {main:Index.swapPosIndex} True False} case ww12 of wild1 {
                                                                                                                                                                                      DEFAULT
                                                                                                                                                                                      -> case Index.swapPosIndex1
                                                                                                                                                                                         ret_ty (Index.Index
                                                                                                                                                                                                   n1
                                                                                                                                                                                                   n2
                                                                                                                                                                                                   n3
                                                                                                                                                                                                   n4
                                                                                                                                                                                                   n5
                                                                                                                                                                                                   n6
                                                                                                                                                                                                   n7
                                                                                                                                                                                                   n8)
                                                                                                                                                                                         of {}
                                                                                                                                                                                      1#
                                                                                                                                                                                      -> ({__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n1
                                                                                                                                                                                                                                         @ Index.Uind_20
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      2#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n2
                                                                                                                                                                                                                                         @ Index.Lind_20
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      3#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n3
                                                                                                                                                                                                                                         @ Index.Uind_19
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      4#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n4
                                                                                                                                                                                                                                         @ Index.Lind_19
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      5#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n5
                                                                                                                                                                                                                                         @ Index.Uind_9
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      6#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n6
                                                                                                                                                                                                                                         @ Index.Lind_9
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      7#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n7
                                                                                                                                                                                                                                         @ Index.Uind_3
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww9,
                                                                                                                                                                                          ww10)
                                                                                                                                                                                      8#
                                                                                                                                                                                      -> (ww3,
                                                                                                                                                                                          ww4,
                                                                                                                                                                                          ww5,
                                                                                                                                                                                          ww6,
                                                                                                                                                                                          ww7,
                                                                                                                                                                                          ww8,
                                                                                                                                                                                          ww9,
                                                                                                                                                                                          {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                         @ n8
                                                                                                                                                                                                                                         @ Index.Lind_3
                                                                                                                                                                                                                                         w1
                                                                                                                                                                                                                                         ww10) } },
                                                                                                                                       x)
                                                                                                                                      (go13
                                                                                                                                         z'
                                                                                                                                         r))
                                                                                                                                   l }
                                                                                                                              Data.Map.Internal.Tip
                                                                                                                              -> z' }
                                                                                                                        } in
                                                                                                                        Data.Map.Internal.fromList
                                                                                                                          @ (Index.Index
                                                                                                                               n1
                                                                                                                               n2
                                                                                                                               n3
                                                                                                                               n4
                                                                                                                               n5
                                                                                                                               n6
                                                                                                                               n7
                                                                                                                               n8)
                                                                                                                          @ a
                                                                                                                          (Tensor.aSymTensor4
                                                                                                                             @ n8
                                                                                                                             @ n7
                                                                                                                             @ n6
                                                                                                                             @ n5
                                                                                                                             @ n4
                                                                                                                             @ n3
                                                                                                                             @ n2
                                                                                                                             @ n1)
                                                                                                                          (go13
                                                                                                                             (GHC.Types.[]
                                                                                                                                @ (Index.Index
                                                                                                                                     n1
                                                                                                                                     n2
                                                                                                                                     n3
                                                                                                                                     n4
                                                                                                                                     n5
                                                                                                                                     n6
                                                                                                                                     n7
                                                                                                                                     n8,
                                                                                                                                   a))
                                                                                                                             ww) of dt { DEFAULT ->
                                                                  (# dt #) }) -}
3907440065a4b5e56c282f0fba1005c5
  type Rank =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
6b5aa7fabc304949e9aed286ed95183b
  type role Tensor nominal nominal nominal nominal nominal nominal nominal nominal representational
  data Tensor (n1 :: GHC.Types.Nat)
              (n2 :: GHC.Types.Nat)
              (n3 :: GHC.Types.Nat)
              (n4 :: GHC.Types.Nat)
              (n5 :: GHC.Types.Nat)
              (n6 :: GHC.Types.Nat)
              (n7 :: GHC.Types.Nat)
              (n8 :: GHC.Types.Nat)
              a
    = Tensor !(Data.Map.Internal.Map
                 (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
539b4b5b61c557fbcdbe8bd19f48038b
  aSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$waSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
583b6c7a910309ce224966b7f1b018ea
  aSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
66a203de9553546e7e419558a68189fc
  aSymTensor2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
f62fe9f87c88f753b0d8d1f4fe555815
  aSymTensor3 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
39365e8435860d636605fbaf5488207d
  aSymTensor4 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
ca6f6c19cf64908dcec84df0f41948cd
  blockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U,U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wblockSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
9d74f246c8bfba1039d322cfede87f65
  cyclicSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 let {
                   lvl19 :: a -> (a -> a) -> a -> a
                     {- Arity: 3, Strictness: <L,U><C(S),1*C1(U)><L,U>,
                        Unfolding: InlineRule (3, True, False)
                                   (\ (ds :: a) (ds1 :: a -> a)[OneShot] (v :: a)[OneShot] ->
                                    ds1
                                      ({__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.+
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  $dNum
                                                                                                                                                                                                  v
                                                                                                                                                                                                  ds)) -}
                   = \ (ds :: a) (ds1 :: a -> a)[OneShot] (v :: a)[OneShot] ->
                     ds1
                       ({__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.+
                                                                                                                                                                                   @ a
                                                                                                                                                                                   $dNum
                                                                                                                                                                                   v
                                                                                                                                                                                   ds)
                 } in
                 let {
                   lvl20 :: a
                   = {__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.fromInteger
                                                                                                                                                                                @ a
                                                                                                                                                                                $dNum
                                                                                                                                                                                Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl21 :: a
                   = {__scc {main:Tensor.cyclicSymTensor} False True} GHC.Num.fromInteger
                                                                        @ a
                                                                        $dNum
                                                                        Tensor.aSymTensor2
                 } in
                 \ (i :: GHC.Types.Int)
                   (list :: [GHC.Types.Int])
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.cyclicSymTensor} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                 let {
                                                                   g :: Index.Index
                                                                          n1 n2 n3 n4 n5 n6 n7 n8
                                                                        -> a -> a
                                                                   = let {
                                                                       cIndsF :: Index.Index
                                                                                   n1
                                                                                   n2
                                                                                   n3
                                                                                   n4
                                                                                   n5
                                                                                   n6
                                                                                   n7
                                                                                   n8
                                                                                 -> [Index.Index
                                                                                       n1
                                                                                       n2
                                                                                       n3
                                                                                       n4
                                                                                       n5
                                                                                       n6
                                                                                       n7
                                                                                       n8]
                                                                       = {__scc {main:Tensor.cyclicSymTensor.cIndsF} True True} Index.cyclicSwapIndex
                                                                                                                                  @ n1
                                                                                                                                  @ n2
                                                                                                                                  @ n3
                                                                                                                                  @ n4
                                                                                                                                  @ n5
                                                                                                                                  @ n6
                                                                                                                                  @ n7
                                                                                                                                  @ n8
                                                                                                                                  i
                                                                                                                                  list
                                                                     } in
                                                                     letrec {
                                                                       go :: [(Index.Uinds_20 n1,
                                                                               Index.Linds_20 n2,
                                                                               Index.Uinds_19 n3,
                                                                               Index.Linds_19 n4,
                                                                               Index.Uinds_9 n5,
                                                                               Index.Linds_9 n6,
                                                                               Index.Uinds_3 n7,
                                                                               Index.Linds_3 n8)]
                                                                             -> a -> a
                                                                         {- Arity: 1,
                                                                            Strictness: <S,1*U> -}
                                                                       = \ (ds1 :: [(Index.Uinds_20
                                                                                       n1,
                                                                                     Index.Linds_20
                                                                                       n2,
                                                                                     Index.Uinds_19
                                                                                       n3,
                                                                                     Index.Linds_19
                                                                                       n4,
                                                                                     Index.Uinds_9
                                                                                       n5,
                                                                                     Index.Linds_9
                                                                                       n6,
                                                                                     Index.Uinds_3
                                                                                       n7,
                                                                                     Index.Linds_3
                                                                                       n8)]) ->
                                                                         case ds1 of wild1 {
                                                                           [] -> GHC.Base.id @ a
                                                                           : y ys
                                                                           -> ({__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} lvl19)
                                                                                (({__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} Data.Map.Internal.!
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            @ a
                                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8)
                                                                                                                                                                                            map1)
                                                                                   y)
                                                                                (go ys) }
                                                                     } in
                                                                     {__scc {main:Tensor.cyclicSymTensor.g} True False} \ (k :: Index.Index
                                                                                                                                  n1
                                                                                                                                  n2
                                                                                                                                  n3
                                                                                                                                  n4
                                                                                                                                  n5
                                                                                                                                  n6
                                                                                                                                  n7
                                                                                                                                  n8)
                                                                                                                          (a1 :: a)[OneShot] ->
                                                                                                                        {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} True True} go
                                                                                                                                                                                                                                 (cIndsF
                                                                                                                                                                                                                                    k)
                                                                                                                                                                                                                                 lvl20
                                                                 } in
                                                                 case {__scc {main:Tensor.cyclicSymTensor.map2} True True} Data.Map.Strict.Internal.mapWithKey
                                                                                                                             @ (Index.Index
                                                                                                                                  n1
                                                                                                                                  n2
                                                                                                                                  n3
                                                                                                                                  n4
                                                                                                                                  n5
                                                                                                                                  n6
                                                                                                                                  n7
                                                                                                                                  n8)
                                                                                                                             @ a
                                                                                                                             @ a
                                                                                                                             g
                                                                                                                             map1 of dt { DEFAULT ->
                                                                 let {
                                                                   a1 :: a
                                                                   = GHC.Real./
                                                                       @ a
                                                                       $dFractional
                                                                       lvl21
                                                                       ({__scc {main:Tensor.cyclicSymTensor.fac} True True} GHC.Num.fromInteger
                                                                                                                              @ a
                                                                                                                              $dNum
                                                                                                                              (case GHC.List.$wlenAcc
                                                                                                                                      @ GHC.Types.Int
                                                                                                                                      list
                                                                                                                                      0# of ww2 { DEFAULT ->
                                                                                                                               case Tensor.$w$sfactorial
                                                                                                                                      ww2 of ww { DEFAULT ->
                                                                                                                               GHC.Integer.Type.smallInteger
                                                                                                                                 ww } }))
                                                                 } in
                                                                 {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} let {
                                                                                                                                                             f :: a
                                                                                                                                                                  -> a
                                                                                                                                                             = GHC.Num.*
                                                                                                                                                                 @ a
                                                                                                                                                                 $dNum
                                                                                                                                                                 a1
                                                                                                                                                           } in
                                                                                                                                                           {__scc {main:Tensor.fmap} True True} case Data.Map.Strict.Internal.map
                                                                                                                                                                                                       @ a
                                                                                                                                                                                                       @ a
                                                                                                                                                                                                       @ (Index.Index
                                                                                                                                                                                                            n1
                                                                                                                                                                                                            n2
                                                                                                                                                                                                            n3
                                                                                                                                                                                                            n4
                                                                                                                                                                                                            n5
                                                                                                                                                                                                            n6
                                                                                                                                                                                                            n7
                                                                                                                                                                                                            n8)
                                                                                                                                                                                                       f
                                                                                                                                                                                                       dt of dt1 { DEFAULT ->
                                                                                                                                                                                                Tensor.Tensor
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  dt1 } } }) -}
292c410335a6ffc464f1056e5ce9d82a
  cyclicSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
8ae9d2b63a21b84f932ee304bdc410c3
  evalFullTensor ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.evalFullTensor} True True} case ds of wild { Tensor.Tensor m ->
                                                                Data.Map.Internal.$fDataMap_go
                                                                  @ (Index.Uinds_20 n1,
                                                                     Index.Linds_20 n2,
                                                                     Index.Uinds_19 n3,
                                                                     Index.Linds_19 n4,
                                                                     Index.Uinds_9 n5,
                                                                     Index.Linds_9 n6,
                                                                     Index.Uinds_3 n7,
                                                                     Index.Linds_3 n8)
                                                                  @ a
                                                                  (GHC.Types.[]
                                                                     @ ((Index.Uinds_20 n1,
                                                                         Index.Linds_20 n2,
                                                                         Index.Uinds_19 n3,
                                                                         Index.Linds_19 n4,
                                                                         Index.Uinds_9 n5,
                                                                         Index.Linds_9 n6,
                                                                         Index.Uinds_3 n7,
                                                                         Index.Linds_3 n8),
                                                                        a))
                                                                  m }) -}
14734b541d192bc3f2a6f80e399a2e13
  evalTensorVals :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.evalTensorVals} True True} case ds of wild { Tensor.Tensor m ->
                                                                Data.Map.Internal.elems_go
                                                                  @ (Index.Uinds_20 n1,
                                                                     Index.Linds_20 n2,
                                                                     Index.Uinds_19 n3,
                                                                     Index.Linds_19 n4,
                                                                     Index.Uinds_9 n5,
                                                                     Index.Linds_9 n6,
                                                                     Index.Uinds_3 n7,
                                                                     Index.Linds_3 n8)
                                                                  @ a
                                                                  (GHC.Types.[] @ a)
                                                                  m }) -}
298d31713ba8d9e384a4cf7e11b8c688
  getVal ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl19 :: a
                   = {__scc {main:Tensor.getVal} False True} GHC.Num.fromInteger
                                                               @ a
                                                               $dNum
                                                               Tensor.cyclicSymTensor1
                 } in
                 \ (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 {__scc {main:Tensor.getVal} True True} case ds of wild { Tensor.Tensor map1 ->
                                                        case Data.Map.Internal.member
                                                               @ (Index.Index
                                                                    n1 n2 n3 n4 n5 n6 n7 n8)
                                                               @ a
                                                               (Tensor.aSymTensor3
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8)
                                                               ind
                                                               map1 of wild1 {
                                                          GHC.Types.False -> lvl19
                                                          GHC.Types.True
                                                          -> Data.Map.Internal.find
                                                               @ (Index.Index
                                                                    n1 n2 n3 n4 n5 n6 n7 n8)
                                                               @ a
                                                               (Tensor.aSymTensor3
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8)
                                                               ind
                                                               map1 } }) -}
f42fd45324de0a3ca5ece7330e35f855
  mkTensorfromF ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8, GHC.Num.Num a,
     GHC.Classes.Eq a) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U(A,A,A,A,A,A,1*C1(U))><L,U(A,C(C1(U)))>,
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dKnownNat :: GHC.TypeNats.KnownNat n1)
                   ($dKnownNat1 :: GHC.TypeNats.KnownNat n2)
                   ($dKnownNat2 :: GHC.TypeNats.KnownNat n3)
                   ($dKnownNat3 :: GHC.TypeNats.KnownNat n4)
                   ($dKnownNat4 :: GHC.TypeNats.KnownNat n5)
                   ($dKnownNat5 :: GHC.TypeNats.KnownNat n6)
                   ($dKnownNat6 :: GHC.TypeNats.KnownNat n7)
                   ($dKnownNat7 :: GHC.TypeNats.KnownNat n8)
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 let {
                   ds :: a
                   = {__scc {main:Tensor.mkTensorfromF} False True} GHC.Num.fromInteger
                                                                      @ a
                                                                      $dNum
                                                                      Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl19 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds) -}
                   = \ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds
                 } in
                 \ (rank :: Tensor.Rank)
                   (f :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 {__scc {main:Tensor.mkTensorfromF} True True} let {
                                                                 indList :: [Index.Index
                                                                               n1
                                                                               n2
                                                                               n3
                                                                               n4
                                                                               n5
                                                                               n6
                                                                               n7
                                                                               n8]
                                                                 = {__scc {main:Tensor.mkTensorfromF.indList} True True} Tensor.tensorIndList
                                                                                                                           @ n1
                                                                                                                           @ n2
                                                                                                                           @ n3
                                                                                                                           @ n4
                                                                                                                           @ n5
                                                                                                                           @ n6
                                                                                                                           @ n7
                                                                                                                           @ n8
                                                                                                                           $dKnownNat
                                                                                                                           $dKnownNat1
                                                                                                                           $dKnownNat2
                                                                                                                           $dKnownNat3
                                                                                                                           $dKnownNat4
                                                                                                                           $dKnownNat5
                                                                                                                           $dKnownNat6
                                                                                                                           $dKnownNat7
                                                                                                                           rank
                                                               } in
                                                               case Data.Map.Internal.filterWithKey
                                                                      @ (Index.Index
                                                                           n1 n2 n3 n4 n5 n6 n7 n8)
                                                                      @ a
                                                                      lvl19
                                                                      (Data.Map.Strict.Internal.fromList
                                                                         @ (Index.Index
                                                                              n1
                                                                              n2
                                                                              n3
                                                                              n4
                                                                              n5
                                                                              n6
                                                                              n7
                                                                              n8)
                                                                         @ a
                                                                         (Tensor.aSymTensor3
                                                                            @ n1
                                                                            @ n2
                                                                            @ n3
                                                                            @ n4
                                                                            @ n5
                                                                            @ n6
                                                                            @ n7
                                                                            @ n8)
                                                                         (GHC.List.zip
                                                                            @ (Index.Uinds_20 n1,
                                                                               Index.Linds_20 n2,
                                                                               Index.Uinds_19 n3,
                                                                               Index.Linds_19 n4,
                                                                               Index.Uinds_9 n5,
                                                                               Index.Linds_9 n6,
                                                                               Index.Uinds_3 n7,
                                                                               Index.Linds_3 n8)
                                                                            @ a
                                                                            indList
                                                                            ({__scc {main:Tensor.mkTensorfromF.valueList} True True} GHC.Base.map
                                                                                                                                       @ (Index.Uinds_20
                                                                                                                                            n1,
                                                                                                                                          Index.Linds_20
                                                                                                                                            n2,
                                                                                                                                          Index.Uinds_19
                                                                                                                                            n3,
                                                                                                                                          Index.Linds_19
                                                                                                                                            n4,
                                                                                                                                          Index.Uinds_9
                                                                                                                                            n5,
                                                                                                                                          Index.Linds_9
                                                                                                                                            n6,
                                                                                                                                          Index.Uinds_3
                                                                                                                                            n7,
                                                                                                                                          Index.Linds_3
                                                                                                                                            n8)
                                                                                                                                       @ a
                                                                                                                                       f
                                                                                                                                       indList))) of dt { DEFAULT ->
                                                               Tensor.Tensor
                                                                 @ n1
                                                                 @ n2
                                                                 @ n3
                                                                 @ n4
                                                                 @ n5
                                                                 @ n6
                                                                 @ n7
                                                                 @ n8
                                                                 @ a
                                                                 dt }) -}
adebbb015a725c1380b66c8b331e60dc
  mkTensorfromFZeros ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S(S(S)LLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><L,C(U)>m,
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dKnownNat :: GHC.TypeNats.KnownNat n1)
                   ($dKnownNat1 :: GHC.TypeNats.KnownNat n2)
                   ($dKnownNat2 :: GHC.TypeNats.KnownNat n3)
                   ($dKnownNat3 :: GHC.TypeNats.KnownNat n4)
                   ($dKnownNat4 :: GHC.TypeNats.KnownNat n5)
                   ($dKnownNat5 :: GHC.TypeNats.KnownNat n6)
                   ($dKnownNat6 :: GHC.TypeNats.KnownNat n7)
                   ($dKnownNat7 :: GHC.TypeNats.KnownNat n8)
                   (rank :: Tensor.Rank)
                   (f :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 {__scc {main:Tensor.mkTensorfromFZeros} True True} let {
                                                                      indList :: [Index.Index
                                                                                    n1
                                                                                    n2
                                                                                    n3
                                                                                    n4
                                                                                    n5
                                                                                    n6
                                                                                    n7
                                                                                    n8]
                                                                      = {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                     @ n1
                                                                                                                                     @ n2
                                                                                                                                     @ n3
                                                                                                                                     @ n4
                                                                                                                                     @ n5
                                                                                                                                     @ n6
                                                                                                                                     @ n7
                                                                                                                                     @ n8
                                                                                                                                     $dKnownNat
                                                                                                                                     $dKnownNat1
                                                                                                                                     $dKnownNat2
                                                                                                                                     $dKnownNat3
                                                                                                                                     $dKnownNat4
                                                                                                                                     $dKnownNat5
                                                                                                                                     $dKnownNat6
                                                                                                                                     $dKnownNat7
                                                                                                                                     rank
                                                                    } in
                                                                    case Data.Map.Strict.Internal.fromList
                                                                           @ (Index.Index
                                                                                n1
                                                                                n2
                                                                                n3
                                                                                n4
                                                                                n5
                                                                                n6
                                                                                n7
                                                                                n8)
                                                                           @ a
                                                                           (Tensor.aSymTensor3
                                                                              @ n1
                                                                              @ n2
                                                                              @ n3
                                                                              @ n4
                                                                              @ n5
                                                                              @ n6
                                                                              @ n7
                                                                              @ n8)
                                                                           (GHC.List.zip
                                                                              @ (Index.Uinds_20 n1,
                                                                                 Index.Linds_20 n2,
                                                                                 Index.Uinds_19 n3,
                                                                                 Index.Linds_19 n4,
                                                                                 Index.Uinds_9 n5,
                                                                                 Index.Linds_9 n6,
                                                                                 Index.Uinds_3 n7,
                                                                                 Index.Linds_3 n8)
                                                                              @ a
                                                                              indList
                                                                              ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True True} GHC.Base.map
                                                                                                                                              @ (Index.Uinds_20
                                                                                                                                                   n1,
                                                                                                                                                 Index.Linds_20
                                                                                                                                                   n2,
                                                                                                                                                 Index.Uinds_19
                                                                                                                                                   n3,
                                                                                                                                                 Index.Linds_19
                                                                                                                                                   n4,
                                                                                                                                                 Index.Uinds_9
                                                                                                                                                   n5,
                                                                                                                                                 Index.Linds_9
                                                                                                                                                   n6,
                                                                                                                                                 Index.Uinds_3
                                                                                                                                                   n7,
                                                                                                                                                 Index.Linds_3
                                                                                                                                                   n8)
                                                                                                                                              @ a
                                                                                                                                              f
                                                                                                                                              indList)) of dt { DEFAULT ->
                                                                    Tensor.Tensor
                                                                      @ n1
                                                                      @ n2
                                                                      @ n3
                                                                      @ n4
                                                                      @ n5
                                                                      @ n6
                                                                      @ n7
                                                                      @ n8
                                                                      @ a
                                                                      dt }) -}
7244ba1ba180483888df0fda57e08788
  mkTensorfromList ::
    [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (l :: [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]) ->
                 {__scc {main:Tensor.mkTensorfromList} True True} case Data.Map.Strict.Internal.fromList
                                                                         @ (Index.Index
                                                                              n1
                                                                              n2
                                                                              n3
                                                                              n4
                                                                              n5
                                                                              n6
                                                                              n7
                                                                              n8)
                                                                         @ a
                                                                         (Tensor.aSymTensor4
                                                                            @ n8
                                                                            @ n7
                                                                            @ n6
                                                                            @ n5
                                                                            @ n4
                                                                            @ n3
                                                                            @ n2
                                                                            @ n1)
                                                                         l of dt { DEFAULT ->
                                                                  Tensor.Tensor
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8
                                                                    @ a
                                                                    dt }) -}
f98f91795c43ef826e8050da37b475c5
  symTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wsymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
3f2d80707436db7c861987a2763b8ae6
  tensorAdd ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A,A,A,A,A,A)><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 let {
                   lvl19 :: a -> a -> a
                   = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+ @ a w
                 } in
                 {__scc {main:Tensor.tensorAdd} True False} case {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                              @ (Index.Index
                                                                                                                   n1
                                                                                                                   n2
                                                                                                                   n3
                                                                                                                   n4
                                                                                                                   n5
                                                                                                                   n6
                                                                                                                   n7
                                                                                                                   n8)
                                                                                                              @ a
                                                                                                              (Tensor.aSymTensor3
                                                                                                                 @ n1
                                                                                                                 @ n2
                                                                                                                 @ n3
                                                                                                                 @ n4
                                                                                                                 @ n5
                                                                                                                 @ n6
                                                                                                                 @ n7
                                                                                                                 @ n8)
                                                                                                              lvl19
                                                                                                              ww1
                                                                                                              ww3 of dt { DEFAULT ->
                                                            Tensor.Tensor
                                                              @ n1
                                                              @ n2
                                                              @ n3
                                                              @ n4
                                                              @ n5
                                                              @ n6
                                                              @ n7
                                                              @ n8
                                                              @ a
                                                              dt } } }) -}
8e1f794854d89bc2c6d3671575591521
  tensorContractWith_1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
2d884f48984d797ba7d35ce05827e359
  tensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_19
                        @ n3
                        @ n4
                        @ a
                        @ n1
                        @ n2
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
f5b2dabd16345e8ee998f4d55afc7785
  tensorContractWith_2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
0d2a4af00084d1d61ca64810a39ab9ae
  tensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_20
                        @ n1
                        @ n2
                        @ a
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
d4730f4187bd6ebe8b3dd0280edaf514
  tensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_3
                        @ n7
                        @ n8
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
fd53639966fdb5f8804d2e0bc1f03852
  tensorContractWith_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
2b36f7f16c0f3479abe15dbe357bc93b
  tensorContractWith_5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
8930e2e4933f3ae0d2c7678e040aa484
  tensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_9
                        @ n5
                        @ n6
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
462906947ae336bf52593ee8a560828d
  tensorIndList ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank -> [Index.Index n1 n2 n3 n4 n5 n6 n7 n8]
  {- Arity: 9,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S(S(S)LLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))> -}
1110039333b95adaab3b9466e9a23aae
  tensorProductWith ::
    (a -> b -> c)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         c
  {- Arity: 3, Strictness: <L,C(C1(U))><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorProductWith
                        @ a
                        @ b
                        @ c
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ m1
                        @ m2
                        @ m3
                        @ m4
                        @ m5
                        @ m6
                        @ m7
                        @ m8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ (n1 GHC.TypeNats.+ m1)
                   @ (n2 GHC.TypeNats.+ m2)
                   @ (n3 GHC.TypeNats.+ m3)
                   @ (n4 GHC.TypeNats.+ m4)
                   @ (n5 GHC.TypeNats.+ m5)
                   @ (n6 GHC.TypeNats.+ m6)
                   @ (n7 GHC.TypeNats.+ m7)
                   @ (n8 GHC.TypeNats.+ m8)
                   @ c
                   ww5 } } }) -}
3f18643a8542d27b22445a7c18a7d009
  tensorProductWith1 ::
    Data.Map.Internal.Map
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
      c
    -> [Data.Map.Internal.Map
          (Index.Index
             (n1 GHC.TypeNats.+ m1)
             (n2 GHC.TypeNats.+ m2)
             (n3 GHC.TypeNats.+ m3)
             (n4 GHC.TypeNats.+ m4)
             (n5 GHC.TypeNats.+ m5)
             (n6 GHC.TypeNats.+ m6)
             (n7 GHC.TypeNats.+ m7)
             (n8 GHC.TypeNats.+ m8))
          c]
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ m1)
            (n2 GHC.TypeNats.+ m2)
            (n3 GHC.TypeNats.+ m3)
            (n4 GHC.TypeNats.+ m4)
            (n5 GHC.TypeNats.+ m5)
            (n6 GHC.TypeNats.+ m6)
            (n7 GHC.TypeNats.+ m7)
            (n8 GHC.TypeNats.+ m8))
         c
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
a599b76436de84a8bc17037ff58cfed9
  tensorProductWith2 ::
    GHC.Classes.Ord
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fOrdInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fOrdInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fOrdInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fOrdInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fOrdInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fOrdInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fOrdInd @ (n8 GHC.TypeNats.+ m8))) -}
87ac1fc931fedd0d8cbb4f13a3cf68b2
  tensorSMult ::
    GHC.Num.Num a =>
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C(U)),A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   (a1 :: a) ->
                 {__scc {main:Tensor.tensorSMult} True True} let {
                                                               f :: a -> a = GHC.Num.* @ a $dNum a1
                                                             } in
                                                             \ (ds :: Tensor.Tensor
                                                                        n1
                                                                        n2
                                                                        n3
                                                                        n4
                                                                        n5
                                                                        n6
                                                                        n7
                                                                        n8
                                                                        a) ->
                                                             {__scc {main:Tensor.fmap} True True} case ds of wild { Tensor.Tensor tMap ->
                                                                                                  case Data.Map.Strict.Internal.map
                                                                                                         @ a
                                                                                                         @ a
                                                                                                         @ (Index.Index
                                                                                                              n1
                                                                                                              n2
                                                                                                              n3
                                                                                                              n4
                                                                                                              n5
                                                                                                              n6
                                                                                                              n7
                                                                                                              n8)
                                                                                                         f
                                                                                                         tMap of dt { DEFAULT ->
                                                                                                  Tensor.Tensor
                                                                                                    @ n1
                                                                                                    @ n2
                                                                                                    @ n3
                                                                                                    @ n4
                                                                                                    @ n5
                                                                                                    @ n6
                                                                                                    @ n7
                                                                                                    @ n8
                                                                                                    @ a
                                                                                                    dt } }) -}
631c1c57b5264eed0ff22494ec87ff89
  tensorSub ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U))><S(S),1*U(U)><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorSub
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww5 } } }) -}
317a8f2f993e8cc2a39a39388f3629fe
  tensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><S(S),1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w2 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorTranspose
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        w
                        w1
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
3eb191218a4842bebe0af290e4aed9d0
  unsafeGetVal ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 {__scc {main:Tensor.unsafeGetVal} True True} case ds of wild { Tensor.Tensor map1 ->
                                                              Data.Map.Internal.find
                                                                @ (Index.Index
                                                                     n1 n2 n3 n4 n5 n6 n7 n8)
                                                                @ a
                                                                (Tensor.aSymTensor4
                                                                   @ n8
                                                                   @ n7
                                                                   @ n6
                                                                   @ n5
                                                                   @ n4
                                                                   @ n3
                                                                   @ n2
                                                                   @ n1)
                                                                ind
                                                                map1 }) -}
instance [safe] GHC.Base.Functor [Tensor.Tensor]
  = Tensor.$fFunctorTensor
instance [safe] GHC.Show.Show [Tensor.Tensor] = Tensor.$fShowTensor
"SPEC/Tensor $fEqInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd @ n @ Index.Lind_19 v = Tensor.$s$fEqInd4 @ n
"SPEC/Tensor $fEqInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd @ n @ Index.Lind_20 v = Tensor.$s$fEqInd6 @ n
"SPEC/Tensor $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Tensor.$s$fEqInd @ n
"SPEC/Tensor $fEqInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd @ n @ Index.Lind_9 v = Tensor.$s$fEqInd2 @ n
"SPEC/Tensor $fEqInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd @ n @ Index.Uind_19 v = Tensor.$s$fEqInd5 @ n
"SPEC/Tensor $fEqInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd @ n @ Index.Uind_20 v = Tensor.$s$fEqInd7 @ n
"SPEC/Tensor $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Tensor.$s$fEqInd1 @ n
"SPEC/Tensor $fEqInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd @ n @ Index.Uind_9 v = Tensor.$s$fEqInd3 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd_$c/= @ n @ Index.Lind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd_$c/= @ n @ Index.Lind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd_$c/= @ n @ Index.Lind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd_$c/= @ n @ Index.Uind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd_$c/= @ n @ Index.Uind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd_$c/= @ n @ Index.Uind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd @ n @ Index.Lind_19 v = Tensor.$s$fOrdInd4 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd @ n @ Index.Lind_20 v = Tensor.$s$fOrdInd6 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Tensor.$s$fOrdInd @ n
"SPEC/Tensor $fOrdInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd @ n @ Index.Lind_9 v = Tensor.$s$fOrdInd2 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd @ n @ Index.Uind_19 v = Tensor.$s$fOrdInd5 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd @ n @ Index.Uind_20 v = Tensor.$s$fOrdInd7 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Tensor.$s$fOrdInd1 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd @ n @ Index.Uind_9 v = Tensor.$s$fOrdInd3 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c< @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<4 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c< @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<6 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c< @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c< @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<2 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c< @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<5 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c< @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<7 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<1 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c< @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<3 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=4 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=6 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<= @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=2 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=5 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=7 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<=1 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=3 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c> @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>4 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c> @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>6 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c> @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c> @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>2 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c> @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>5 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c> @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>7 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>1 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c> @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>3 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=4 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=6 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>= @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=2 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=5 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=7 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>=1 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=3 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare4 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare6 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare2 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare5 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare7 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare1 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare3 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax4 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax6 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax2 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax5 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax7 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax1 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax3 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin4 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin6 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin2 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin5 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin7 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin1 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin3 @ n
"SPEC/Tensor $fShowInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd @ n @ Index.Lind_19 v
  = Tensor.$fShowTensor_$s$fShowInd4 @ n
"SPEC/Tensor $fShowInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd @ n @ Index.Lind_20 v
  = Tensor.$fShowTensor_$s$fShowInd6 @ n
"SPEC/Tensor $fShowInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd @ n @ Index.Lind_3 v
  = Tensor.$fShowTensor_$s$fShowInd @ n
"SPEC/Tensor $fShowInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd @ n @ Index.Lind_9 v
  = Tensor.$fShowTensor_$s$fShowInd2 @ n
"SPEC/Tensor $fShowInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd @ n @ Index.Uind_19 v
  = Tensor.$fShowTensor_$s$fShowInd5 @ n
"SPEC/Tensor $fShowInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd @ n @ Index.Uind_20 v
  = Tensor.$fShowTensor_$s$fShowInd7 @ n
"SPEC/Tensor $fShowInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd @ n @ Index.Uind_3 v
  = Tensor.$fShowTensor_$s$fShowInd1 @ n
"SPEC/Tensor $fShowInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd @ n @ Index.Uind_9 v
  = Tensor.$fShowTensor_$s$fShowInd3 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd_$cshow @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshow4 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd_$cshow @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshow6 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshow @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshow @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshow @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshow2 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd_$cshow @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshow5 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd_$cshow @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshow7 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshow @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshow1 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshow @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshow3 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList4 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList6 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList2 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList5 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList7 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList1 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList3 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec4 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec6 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec2 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec5 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec7 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec1 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec3 @ n
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

