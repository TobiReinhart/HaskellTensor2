
==================== FINAL INTERFACE ====================
2019-01-31 12:58:08.436772 UTC

interface main:Tensor [hpc] 8043
  interface hash: 699e81ed4224fcd3f64280ea5afc12a9
  ABI hash: a23a73880b2c27c94d4da0de54dee0ec
  export-list hash: 652d5857d480c465fdf5ba71dcde1677
  orphan hash: b2abc101a7c216aad2006025b31da62f
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tensor.aSymTensor
  Tensor.blockSymTensor
  Tensor.cyclicSymTensor
  Tensor.evalFullTensor
  Tensor.evalTensorVals
  Tensor.getVal
  Tensor.mkTensorfromF
  Tensor.mkTensorfromFZeros
  Tensor.mkTensorfromList
  Tensor.symTensor
  Tensor.tensorAdd
  Tensor.tensorContractWith_19
  Tensor.tensorContractWith_20
  Tensor.tensorContractWith_3
  Tensor.tensorContractWith_9
  Tensor.tensorIndList
  Tensor.tensorProductNew
  Tensor.tensorProductNumeric
  Tensor.tensorProductNumeric2
  Tensor.tensorProductWith
  Tensor.tensorProductWith2
  Tensor.tensorSMult
  Tensor.tensorSub
  Tensor.tensorTranspose
  Tensor.unsafeGetVal
  Tensor.Tensor{Tensor.Tensor}
module dependencies: Index
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Proxy a80a60a2fdceabfeb4d110d23b808844
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Index 71b3346044a1d0e00e59251850573a46
  exports: 91057ce0b804927200140466044aa77d
  Index 1f5ddc4679c562a7168aef180062eec5
  checkInd 1ff91580af62a98eb2a3c4822a137b9a
  combineIndex c4f3569d1e955d8bb59e5fdbc945c20b
  cyclicSwapIndex 230ae7eb53547ef0f3bf7e7f77c86485
  delContractionIndex_19 7bf59e980ed67f7c36f9d24adeebf6c4
  delContractionIndex_20 e15dc00ff527f51db9d500ea5d5c1e92
  delContractionIndex_3 e2f67a15a38207e087829f7e9844fca5
  delContractionIndex_9 3f9de34629a73afc619111ae22881f90
  delInd c5d5ccdefe3eefabd03570227bdb0ec8
  getRangeList bb2e75601febf5d2ff465e171708e972
  isContractionIndex 2dfa4addbf8ac6848e107602d9b2823e
  mkInd d77fe9e41748b2911697e97c58ac8022
  swapBlockPosIndex 02cd27f4aaf86a3004fc04fbad7df51a
  swapPosIndex a410e592182ec5a01a8228f8809379b5
ba59d8983dc93fba3a30d24b40148bfb
  $fFunctorTensor ::
    GHC.Base.Functor (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat.
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
                  (Tensor.$fFunctorTensor_$cfmap
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8)
                  (Tensor.$fFunctorTensor_$c<$
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8) -}
ba59d8983dc93fba3a30d24b40148bfb
  $fFunctorTensor_$c<$ ::
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$w$c<$
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        @ b
                        w
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
ba59d8983dc93fba3a30d24b40148bfb
  $fFunctorTensor_$cfmap ::
    (a -> b)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.fmap} True True} case ds of wild { Tensor.Tensor tMap ->
                                                      Tensor.Tensor
                                                        @ n1
                                                        @ n2
                                                        @ n3
                                                        @ n4
                                                        @ n5
                                                        @ n6
                                                        @ n7
                                                        @ n8
                                                        @ b
                                                        (Data.Map.Strict.Internal.map
                                                           @ a
                                                           @ b
                                                           @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                                           f
                                                           tMap) }) -}
ba59d8983dc93fba3a30d24b40148bfb
  $fShowTensor ::
    GHC.Show.Show a =>
    GHC.Show.Show (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat
                      @ a
                      (v :: GHC.Show.Show a).
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                  (Tensor.$fShowTensor_$cshowsPrec
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshow
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshowList
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v) -}
737494dd887cc43ca1e040c11eb4e200
  $fShowTensor1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
22cdd232bf930dc0faa0b6cceff6d68b
  $fShowTensor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Tensor.$fShowTensor3) -}
038bda6e6e33cc813e9b34b169d0a8c8
  $fShowTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor "#) -}
15b14d863525bc762dbb902f938b94d7
  $fShowTensor4 ::
    GHC.Show.Show
      (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
       Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
       Index.Uinds_3 n7, Index.Linds_3 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Show.$fShow(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$fShowTensor_$s$fShowInd7 @ n1)
                   (Tensor.$fShowTensor_$s$fShowInd6 @ n2)
                   (Tensor.$fShowTensor_$s$fShowInd5 @ n3)
                   (Tensor.$fShowTensor_$s$fShowInd4 @ n4)
                   (Tensor.$fShowTensor_$s$fShowInd3 @ n5)
                   (Tensor.$fShowTensor_$s$fShowInd2 @ n6)
                   (Tensor.$fShowTensor_$s$fShowInd1 @ n7)
                   (Tensor.$fShowTensor_$s$fShowInd @ n8)) -}
ba59d8983dc93fba3a30d24b40148bfb
  $fShowTensor_$cshow ::
    GHC.Show.Show a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Tensor.$w$cshow
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1 }) -}
ba59d8983dc93fba3a30d24b40148bfb
  $fShowTensor_$cshowList ::
    GHC.Show.Show a =>
    [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (Tensor.$fShowTensor_$cshowsPrec
                      @ n1
                      @ n2
                      @ n3
                      @ n4
                      @ n5
                      @ n6
                      @ n7
                      @ n8
                      @ a
                      $dShow
                      Tensor.$fShowTensor1)
                   ls
                   s) -}
ba59d8983dc93fba3a30d24b40148bfb
  $fShowTensor_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 Tensor.$w$cshowsPrec
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1
                   ww3 } }) -}
2e6ed3d488e16b01829a7b0809b64e92
  $fShowTensor_$s$fShowInd ::
    GHC.Show.Show (Index.Ind n Index.Lind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (\ (ls :: [Index.Ind n Index.Lind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_3
                        Index.$fShowLind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
f0c387f16ae9eb37d5bd2fe7a6581de3
  $fShowTensor_$s$fShowInd1 ::
    GHC.Show.Show (Index.Ind n Index.Uind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (\ (ls :: [Index.Ind n Index.Uind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_3
                        Index.$fShowUind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
adb20ca384f262a95bb2ad704b2d8ec9
  $fShowTensor_$s$fShowInd2 ::
    GHC.Show.Show (Index.Ind n Index.Lind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (\ (ls :: [Index.Ind n Index.Lind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_9
                        Index.$fShowLind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
c553be242c20f942f40f98f4a4624307
  $fShowTensor_$s$fShowInd3 ::
    GHC.Show.Show (Index.Ind n Index.Uind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (\ (ls :: [Index.Ind n Index.Uind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_9
                        Index.$fShowUind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
7fd4946b3eb6f6401e607055731e51f0
  $fShowTensor_$s$fShowInd4 ::
    GHC.Show.Show (Index.Ind n Index.Lind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_19
                     Index.$fShowLind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_19 Index.$fShowLind_19)
                  (\ (ls :: [Index.Ind n Index.Lind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_19
                        Index.$fShowLind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
df8b0748475ae3b43e6350800c91a989
  $fShowTensor_$s$fShowInd5 ::
    GHC.Show.Show (Index.Ind n Index.Uind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_19
                     Index.$fShowUind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_19 Index.$fShowUind_19)
                  (\ (ls :: [Index.Ind n Index.Uind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_19
                        Index.$fShowUind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
1e9d6e2759851b63230217b273164a3f
  $fShowTensor_$s$fShowInd6 ::
    GHC.Show.Show (Index.Ind n Index.Lind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_20
                     Index.$fShowLind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_20 Index.$fShowLind_20)
                  (\ (ls :: [Index.Ind n Index.Lind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_20
                        Index.$fShowLind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
423aaa358916ca4ba7d7b77f7e2241e1
  $fShowTensor_$s$fShowInd7 ::
    GHC.Show.Show (Index.Ind n Index.Uind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_20
                     Index.$fShowUind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_20 Index.$fShowUind_20)
                  (\ (ls :: [Index.Ind n Index.Uind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_20
                        Index.$fShowUind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
81442e4e447068b0f7247570a6d3593a
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (\ (ds :: Index.Ind n Index.Lind_3)
                     (ds1 :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_3
                                                       Index.$fEqLind_3
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
31fa5237f11ff099e9488055db25f3a4
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (\ (ds :: Index.Ind n Index.Uind_3)
                     (ds1 :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_3
                                                       Index.$fEqUind_3
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
9fd676726b3d3ad69fc105c4d04a9302
  $s$fEqInd2 :: GHC.Classes.Eq (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (\ (ds :: Index.Ind n Index.Lind_9)
                     (ds1 :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_9
                                                       Index.$fEqLind_9
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n) -}
b56c18edaf74cee608e26a736e2f2f12
  $s$fEqInd3 :: GHC.Classes.Eq (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (\ (ds :: Index.Ind n Index.Uind_9)
                     (ds1 :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_9
                                                       Index.$fEqUind_9
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n) -}
3bcddbecf314ef5d9fbd02d1485f757c
  $s$fEqInd4 :: GHC.Classes.Eq (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (\ (ds :: Index.Ind n Index.Lind_19)
                     (ds1 :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_19
                                                       Index.$fEqLind_19
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n) -}
298f4e0b775bc2b1b7c7ccdfeeb0e695
  $s$fEqInd5 :: GHC.Classes.Eq (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (\ (ds :: Index.Ind n Index.Uind_19)
                     (ds1 :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_19
                                                       Index.$fEqUind_19
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n) -}
b35db474b0bbcb37f8bb37bfba2e2047
  $s$fEqInd6 :: GHC.Classes.Eq (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (\ (ds :: Index.Ind n Index.Lind_20)
                     (ds1 :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_20
                                                       Index.$fEqLind_20
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n) -}
1d226ab5510c70ebf95883340d7be800
  $s$fEqInd7 :: GHC.Classes.Eq (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (\ (ds :: Index.Ind n Index.Uind_20)
                     (ds1 :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_20
                                                       Index.$fEqUind_20
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n) -}
a13d72376e6e5dc3f42b7a8163fe5247
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_3
                                                                                              Index.$fEqLind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
d2d2b6c7d1c6dbe80cc91cf2de5e1afd
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_3
                                                                                              Index.$fEqUind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
1c9f4c97ca4ed8b5b77aa97133a1135e
  $s$fEqInd_$s$fEqInd_$c/=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_9
                                                                                              Index.$fEqLind_9
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
c6edd75c3e95181dcc63f9eedfd3e6b1
  $s$fEqInd_$s$fEqInd_$c/=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_9
                                                                                              Index.$fEqUind_9
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
f4d23f4e3103872cc11e908a0720c753
  $s$fEqInd_$s$fEqInd_$c/=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_19
                                                                                              Index.$fEqLind_19
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
fe0aec631ff62558ec0cb1a5f5b1f1ef
  $s$fEqInd_$s$fEqInd_$c/=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_19
                                                                                              Index.$fEqUind_19
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
669d6d000620320e4470b3fca78de668
  $s$fEqInd_$s$fEqInd_$c/=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_20
                                                                                              Index.$fEqLind_20
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
4008704bfb6b15a376460d53c96298bd
  $s$fEqInd_$s$fEqInd_$c/=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_20
                                                                                              Index.$fEqUind_20
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
b40455d7e99a8d5209da4f6d9f23f6b2
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Tensor.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_3
                                                            Index.$fOrdLind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_3
                                                      Index.$fOrdLind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_3
                                                                                       Index.$fOrdLind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
f2101df791f4c94ffabc681025c5e9b4
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Tensor.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_3
                                                            Index.$fOrdUind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_3
                                                      Index.$fOrdUind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_3
                                                                                       Index.$fOrdUind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
72abfbca2cf7b3a1587d3a7dfaea9bb1
  $s$fOrdInd2 :: GHC.Classes.Ord (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Tensor.$s$fEqInd2 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_9
                                                            Index.$fOrdLind_9
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_9
                                                      Index.$fOrdLind_9
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_9
                                                                                                                                Index.$fOrdLind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_9
                                                                                       Index.$fOrdLind_9
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_9
                                                                                                                                Index.$fOrdLind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_9
                                                                                               Index.$fOrdLind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_9
                                                                                               Index.$fOrdLind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
42c77a22068a67d45ab300665ea58f2c
  $s$fOrdInd3 :: GHC.Classes.Ord (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Tensor.$s$fEqInd3 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_9
                                                            Index.$fOrdUind_9
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_9
                                                      Index.$fOrdUind_9
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_9
                                                                                                                                Index.$fOrdUind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_9
                                                                                       Index.$fOrdUind_9
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_9
                                                                                                                                Index.$fOrdUind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_9
                                                                                               Index.$fOrdUind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_9
                                                                                               Index.$fOrdUind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
2673b8ad3fc886e2cc249983a603e148
  $s$fOrdInd4 :: GHC.Classes.Ord (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Tensor.$s$fEqInd4 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_19
                                                            Index.$fOrdLind_19
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_19
                                                      Index.$fOrdLind_19
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_19
                                                                                                                                Index.$fOrdLind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_19
                                                                                       Index.$fOrdLind_19
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_19
                                                                                                                                Index.$fOrdLind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_19
                                                                                               Index.$fOrdLind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_19
                                                                                               Index.$fOrdLind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
7ef88f3b55f25da9315e2f329ec3e156
  $s$fOrdInd5 :: GHC.Classes.Ord (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Tensor.$s$fEqInd5 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_19
                                                            Index.$fOrdUind_19
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_19
                                                      Index.$fOrdUind_19
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_19
                                                                                                                                Index.$fOrdUind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_19
                                                                                       Index.$fOrdUind_19
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_19
                                                                                                                                Index.$fOrdUind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_19
                                                                                               Index.$fOrdUind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_19
                                                                                               Index.$fOrdUind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
d237ff4d038f36759b30ee1dbf6026c4
  $s$fOrdInd6 :: GHC.Classes.Ord (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Tensor.$s$fEqInd6 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_20
                                                            Index.$fOrdLind_20
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_20
                                                      Index.$fOrdLind_20
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_20
                                                                                                                                Index.$fOrdLind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_20
                                                                                       Index.$fOrdLind_20
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_20
                                                                                                                                Index.$fOrdLind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_20
                                                                                               Index.$fOrdLind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_20
                                                                                               Index.$fOrdLind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
26b83c5aba6fd02832e1eb6b24d159af
  $s$fOrdInd7 :: GHC.Classes.Ord (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Tensor.$s$fEqInd7 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_20
                                                            Index.$fOrdUind_20
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_20
                                                      Index.$fOrdUind_20
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_20
                                                                                                                                Index.$fOrdUind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_20
                                                                                       Index.$fOrdUind_20
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_20
                                                                                                                                Index.$fOrdUind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_20
                                                                                               Index.$fOrdUind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_20
                                                                                               Index.$fOrdUind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
611f8e2fc95c5cd04b3d61c7b3903865
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_3
                                                    Index.$fOrdLind_3
                                                    a2
                                                    b1 } }) -}
c97d51b9e2a282dc79c0bb3859acf89b
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_3
                                                    Index.$fOrdUind_3
                                                    a2
                                                    b1 } }) -}
8792ae89cdfae2f22dfdf360b3575cdb
  $s$fOrdInd_$c<2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_9
                                                    Index.$fOrdLind_9
                                                    a2
                                                    b1 } }) -}
428b3854e5e5c7b5295204cd5d3976c2
  $s$fOrdInd_$c<3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_9
                                                    Index.$fOrdUind_9
                                                    a2
                                                    b1 } }) -}
3754d7ebfd2d7c84d30b0ce37be3d4bd
  $s$fOrdInd_$c<4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_19
                                                    Index.$fOrdLind_19
                                                    a2
                                                    b1 } }) -}
46adaf9ff5239ea0951ae43b4ce923ef
  $s$fOrdInd_$c<5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_19
                                                    Index.$fOrdUind_19
                                                    a2
                                                    b1 } }) -}
4c7e0eb55160174f6df0ddaa6a793da6
  $s$fOrdInd_$c<6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_20
                                                    Index.$fOrdLind_20
                                                    a2
                                                    b1 } }) -}
38cc11c350dd066c4143941fe5d4aaa3
  $s$fOrdInd_$c<7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_20
                                                    Index.$fOrdUind_20
                                                    a2
                                                    b1 } }) -}
a167af8cdfdaafd20fad7581fafc03c1
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
d77bc8c2241de54585b1ea5d66bc0f13
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
701c2a026d6436cb597bb77944fd11d8
  $s$fOrdInd_$c<=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_9
                                                                                                                              Index.$fOrdLind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
af9ddb4c48df887dd504f641f108d42e
  $s$fOrdInd_$c<=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_9
                                                                                                                              Index.$fOrdUind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
0546fe0ad1eb7e0ed29a579e8e52d53e
  $s$fOrdInd_$c<=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_19
                                                                                                                              Index.$fOrdLind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
8848026de31955d9a79dc56bf883ebab
  $s$fOrdInd_$c<=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_19
                                                                                                                              Index.$fOrdUind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
edde2f219718610ae9e98205cfed4390
  $s$fOrdInd_$c<=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_20
                                                                                                                              Index.$fOrdLind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
cf5b67105077f82f0aa86628d46c65cc
  $s$fOrdInd_$c<=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_20
                                                                                                                              Index.$fOrdUind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
33dc822b97d44eb23a9ab8af2eff0056
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_3
                                                                                     Index.$fOrdLind_3
                                                                                     a2
                                                                                     b1 } }) -}
0e10d1a03f79732d0d649076dc02d88f
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_3
                                                                                     Index.$fOrdUind_3
                                                                                     a2
                                                                                     b1 } }) -}
1034dd513dfa32ed9060f3a38dc8c74f
  $s$fOrdInd_$c>2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_9
                                                                                     Index.$fOrdLind_9
                                                                                     a2
                                                                                     b1 } }) -}
aa95fda7806eaebb23f5279c02133771
  $s$fOrdInd_$c>3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_9
                                                                                     Index.$fOrdUind_9
                                                                                     a2
                                                                                     b1 } }) -}
65c38d0d1511ae9e7249d6bb03e401d2
  $s$fOrdInd_$c>4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_19
                                                                                     Index.$fOrdLind_19
                                                                                     a2
                                                                                     b1 } }) -}
83d31e645b431e3ed20cc66a900caddc
  $s$fOrdInd_$c>5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_19
                                                                                     Index.$fOrdUind_19
                                                                                     a2
                                                                                     b1 } }) -}
1872deefa36811821ef52d0f9c48b5d0
  $s$fOrdInd_$c>6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_20
                                                                                     Index.$fOrdLind_20
                                                                                     a2
                                                                                     b1 } }) -}
989a1cd74335d8ed049c047e156b7be8
  $s$fOrdInd_$c>7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_20
                                                                                     Index.$fOrdUind_20
                                                                                     a2
                                                                                     b1 } }) -}
755394b1192c69bf42d0b9ced81a550f
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
58c52fdf41240920c88fa0757bf385a7
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
c79fd25cc4052e3d90265f50b1256c2a
  $s$fOrdInd_$c>=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_9
                                                                                                                              Index.$fOrdLind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
b3fc72c81c3c9b5255571008ac43258f
  $s$fOrdInd_$c>=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_9
                                                                                                                              Index.$fOrdUind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
fc03e6650229da38ced505ed0f28b259
  $s$fOrdInd_$c>=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_19
                                                                                                                              Index.$fOrdLind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
e81af416b074ed89dafb9e0f4f9cf3b8
  $s$fOrdInd_$c>=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_19
                                                                                                                              Index.$fOrdUind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
a18c56ea4f769ec9742c045d97211802
  $s$fOrdInd_$c>=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_20
                                                                                                                              Index.$fOrdLind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
f2713e97b793d6fcdef529146c6ba590
  $s$fOrdInd_$c>=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_20
                                                                                                                              Index.$fOrdUind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
c772a61d638368917a1f2b25b06cbb18
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_3
                                                          Index.$fOrdLind_3
                                                          a2
                                                          b1 } }) -}
9cb08cb17acba246e1bd483d2a99d8dc
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_3
                                                          Index.$fOrdUind_3
                                                          a2
                                                          b1 } }) -}
d76631fb70fe1f26c8ac23ddd6f6345d
  $s$fOrdInd_$ccompare2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_9
                                                          Index.$fOrdLind_9
                                                          a2
                                                          b1 } }) -}
667d586e6d4155f5362ceeb3206f7d43
  $s$fOrdInd_$ccompare3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_9
                                                          Index.$fOrdUind_9
                                                          a2
                                                          b1 } }) -}
9e20b5a40e2b1bfcae8eded36064100f
  $s$fOrdInd_$ccompare4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_19
                                                          Index.$fOrdLind_19
                                                          a2
                                                          b1 } }) -}
90dd7b390d42f3298a551f01af3979c3
  $s$fOrdInd_$ccompare5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_19
                                                          Index.$fOrdUind_19
                                                          a2
                                                          b1 } }) -}
cf9825acf72df66bd8b9bdd68b8fae3b
  $s$fOrdInd_$ccompare6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_20
                                                          Index.$fOrdLind_20
                                                          a2
                                                          b1 } }) -}
77ab29c78ca7d48f84dee84c95d63e2d
  $s$fOrdInd_$ccompare7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_20
                                                          Index.$fOrdUind_20
                                                          a2
                                                          b1 } }) -}
aea6e4537c31ad60728d4c93d6669ba6
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
6e820735419bcfae1823b6a22c5ac21a
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
03f5fd5b4e597c359e204b25f861d9c5
  $s$fOrdInd_$cmax2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_9
                                                                                             Index.$fOrdLind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
8a1c798a7353f14cdc9a290a3856ec30
  $s$fOrdInd_$cmax3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_9
                                                                                             Index.$fOrdUind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
d132f71ae4c007c8efdc1aa6fbdda74b
  $s$fOrdInd_$cmax4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_19
                                                                                             Index.$fOrdLind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
0b609b524d174cefeea0b5eb53d9adf9
  $s$fOrdInd_$cmax5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_19
                                                                                             Index.$fOrdUind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
2e522b32a6e176c1fd607e9f42c94349
  $s$fOrdInd_$cmax6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_20
                                                                                             Index.$fOrdLind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
da8872e22463133d5d6cd28d6c965b01
  $s$fOrdInd_$cmax7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_20
                                                                                             Index.$fOrdUind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
bc699288ec6bdbe72659ef08005d1d79
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
b3c35c6b59257985ca4265a8f492fbe4
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
9951e9aa29182f594a19f43945f3fb8e
  $s$fOrdInd_$cmin2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_9
                                                                                             Index.$fOrdLind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
d0f44d43dc743cf2a03c559935b0fe2a
  $s$fOrdInd_$cmin3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_9
                                                                                             Index.$fOrdUind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
2e11e21d47f8263e5b27034346bafeed
  $s$fOrdInd_$cmin4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_19
                                                                                             Index.$fOrdLind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
b8929f072ad7a297d1dfedd15f0df34b
  $s$fOrdInd_$cmin5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_19
                                                                                             Index.$fOrdUind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
425af3ce4636c1587702439f54036196
  $s$fOrdInd_$cmin6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_20
                                                                                             Index.$fOrdLind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
ff9a7543e1123deb4ea101c0d0b9235b
  $s$fOrdInd_$cmin7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_20
                                                                                             Index.$fOrdUind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
019a1b47665dcc9780abcb3971fc90e4
  $s$fShowInd_$cshow :: Index.Ind n Index.Lind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_3 Index.$fShowLind_3 ww1 }) -}
d0acd57e2327c08950dc4c0f707c5c66
  $s$fShowInd_$cshow1 :: Index.Ind n Index.Uind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_3 Index.$fShowUind_3 ww1 }) -}
bf1934da3ad6281826fe4a7fee54d900
  $s$fShowInd_$cshow2 :: Index.Ind n Index.Lind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_9 Index.$fShowLind_9 ww1 }) -}
6177d1dc204c8167895b5aea1a89eb80
  $s$fShowInd_$cshow3 :: Index.Ind n Index.Uind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_9 Index.$fShowUind_9 ww1 }) -}
e162e585c46ee73e7d86d40357699041
  $s$fShowInd_$cshow4 :: Index.Ind n Index.Lind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_19 Index.$fShowLind_19 ww1 }) -}
aabe6a4b644caafc3ce0cba857b3acdf
  $s$fShowInd_$cshow5 :: Index.Ind n Index.Uind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_19 Index.$fShowUind_19 ww1 }) -}
8e9d1c1e829e741a5205199bd900084a
  $s$fShowInd_$cshow6 :: Index.Ind n Index.Lind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_20 Index.$fShowLind_20 ww1 }) -}
561b12114d72ed77a6e40c97016bd7c4
  $s$fShowInd_$cshow7 :: Index.Ind n Index.Uind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_20 Index.$fShowUind_20 ww1 }) -}
f92892d0a6e2b4025e6e59bb5f9095c2
  $s$fShowInd_$cshowList ::
    [Index.Ind n Index.Lind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_3
                      Index.$fShowLind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
660272803cd1aa0cdb44835fd36c2455
  $s$fShowInd_$cshowList1 ::
    [Index.Ind n Index.Uind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_3
                      Index.$fShowUind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
19e6584bc5d2b5aa535c6b0f1d4557a8
  $s$fShowInd_$cshowList2 ::
    [Index.Ind n Index.Lind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_9
                      Index.$fShowLind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
2b4b9d170f1f68cee1265458fe1171a2
  $s$fShowInd_$cshowList3 ::
    [Index.Ind n Index.Uind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_9
                      Index.$fShowUind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
1135129e4f4652c9f23b775d952d9717
  $s$fShowInd_$cshowList4 ::
    [Index.Ind n Index.Lind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_19
                      Index.$fShowLind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
91fe0be71d452e5c78dfc4f27d6d9cea
  $s$fShowInd_$cshowList5 ::
    [Index.Ind n Index.Uind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_19
                      Index.$fShowUind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
64f54c71d883bbf8b8414e34b1019a07
  $s$fShowInd_$cshowList6 ::
    [Index.Ind n Index.Lind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_20
                      Index.$fShowLind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
a9a178b6f29b272703683e8f7682d3b1
  $s$fShowInd_$cshowList7 ::
    [Index.Ind n Index.Uind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_20
                      Index.$fShowUind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
69c5ae42553a2de8df41bb340538e066
  $s$fShowInd_$cshowsPrec ::
    GHC.Types.Int -> Index.Ind n Index.Lind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_3
                   Index.$fShowLind_3
                   ww1
                   ww3 } }) -}
8668b63d24e9a8e546e0176dab8e36ca
  $s$fShowInd_$cshowsPrec1 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_3
                   Index.$fShowUind_3
                   ww1
                   ww3 } }) -}
54ac73e2fb85a6ae3d379e8d971f5dc2
  $s$fShowInd_$cshowsPrec2 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_9
                   Index.$fShowLind_9
                   ww1
                   ww3 } }) -}
de40aa944982616d640ebeaa3b083c62
  $s$fShowInd_$cshowsPrec3 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_9
                   Index.$fShowUind_9
                   ww1
                   ww3 } }) -}
cc9b3748de8d9ec348411afe1f108921
  $s$fShowInd_$cshowsPrec4 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_19
                   Index.$fShowLind_19
                   ww1
                   ww3 } }) -}
15e6d19714a0632984a2ba423dc9fd2d
  $s$fShowInd_$cshowsPrec5 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_19
                   Index.$fShowUind_19
                   ww1
                   ww3 } }) -}
b5238527d0e80ac55326d0f03fa1e1c5
  $s$fShowInd_$cshowsPrec6 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_20
                   Index.$fShowLind_20
                   ww1
                   ww3 } }) -}
4aa8b57a3c7b77627c9c9c29720663ee
  $s$fShowInd_$cshowsPrec7 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_20
                   Index.$fShowUind_20
                   ww1
                   ww3 } }) -}
5f2a1e30d1721568b15c3042721846c7
  $tc'Tensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12818042684598350646##
                   14291769805369570361##
                   Tensor.$trModule
                   Tensor.$tc'Tensor2
                   9#
                   Tensor.$tc'Tensor1) -}
5596a26efcd24c4c9dfe567f1a2f272c
  $tc'Tensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ce00cdfd7748930d095a56929eb9141
  $tc'Tensor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$tc'Tensor3) -}
35bcb15695cfd8740e67fd21fbf81243
  $tc'Tensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tensor"#) -}
df4df1604a6cc32eefb879d8e8963b4f
  $tcTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16721014749436762582##
                   10886807482571654239##
                   Tensor.$trModule
                   Tensor.$trModule1
                   0#
                   Tensor.$tcTensor1) -}
e9a7914fe5cca5a97176b51483defd45
  $tcTensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb58da39157c7dde6e5d9cfc4f8dad63
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tensor.$trModule3
                   Tensor.$trModule1) -}
4999b7020a19b0c26a85ce9c5f0929f1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule2) -}
d5791154d3f1a17af509c3a8e7372c52
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor"#) -}
3aa19db5c63e324ff2d3a70ecc4b28c3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule4) -}
3b60604511356ab7892a3ac039f477e7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
1ce7c88a468865bfe07d0dc9ed5063d9
  $w$c<$ ::
    a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b) ->
                 {__scc {main:Tensor.fmap} True False} (# {__scc {main:Tensor.fmap} False True} letrec {
                                                                                                  go8 :: Data.Map.Internal.Map
                                                                                                           (Index.Index
                                                                                                              n1
                                                                                                              n2
                                                                                                              n3
                                                                                                              n4
                                                                                                              n5
                                                                                                              n6
                                                                                                              n7
                                                                                                              n8)
                                                                                                           b
                                                                                                         -> Data.Map.Internal.Map
                                                                                                              (Index.Index
                                                                                                                 n1
                                                                                                                 n2
                                                                                                                 n3
                                                                                                                 n4
                                                                                                                 n5
                                                                                                                 n6
                                                                                                                 n7
                                                                                                                 n8)
                                                                                                              a
                                                                                                    {- Arity: 1,
                                                                                                       Strictness: <S,1*U> -}
                                                                                                  = \ (ds :: Data.Map.Internal.Map
                                                                                                               (Index.Index
                                                                                                                  n1
                                                                                                                  n2
                                                                                                                  n3
                                                                                                                  n4
                                                                                                                  n5
                                                                                                                  n6
                                                                                                                  n7
                                                                                                                  n8)
                                                                                                               b) ->
                                                                                                    case ds of wild {
                                                                                                      Data.Map.Internal.Bin dt kx x l r
                                                                                                      -> case w of x' { DEFAULT ->
                                                                                                         case go8
                                                                                                                l of dt1 { DEFAULT ->
                                                                                                         case go8
                                                                                                                r of dt2 { DEFAULT ->
                                                                                                         Data.Map.Internal.Bin
                                                                                                           @ (Index.Index
                                                                                                                n1
                                                                                                                n2
                                                                                                                n3
                                                                                                                n4
                                                                                                                n5
                                                                                                                n6
                                                                                                                n7
                                                                                                                n8)
                                                                                                           @ a
                                                                                                           dt
                                                                                                           kx
                                                                                                           x'
                                                                                                           dt1
                                                                                                           dt2 } } }
                                                                                                      Data.Map.Internal.Tip
                                                                                                      -> Data.Map.Internal.Tip
                                                                                                           @ (Index.Index
                                                                                                                n1
                                                                                                                n2
                                                                                                                n3
                                                                                                                n4
                                                                                                                n5
                                                                                                                n6
                                                                                                                n7
                                                                                                                n8)
                                                                                                           @ a }
                                                                                                } in
                                                                                                go8
                                                                                                  ww #)) -}
6c2c200f60fb460da5e1a98c6ffe3aaf
  $w$cshow ::
    GHC.Show.Show a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.showsPrec} True False} {__scc {main:Tensor.showsPrec} False True} GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Tensor.$fShowTensor2
                                                                                                         (Data.Map.Internal.$w$cshowsPrec
                                                                                                            @ (Index.Uinds_20
                                                                                                                 n1,
                                                                                                               Index.Linds_20
                                                                                                                 n2,
                                                                                                               Index.Uinds_19
                                                                                                                 n3,
                                                                                                               Index.Linds_19
                                                                                                                 n4,
                                                                                                               Index.Uinds_9
                                                                                                                 n5,
                                                                                                               Index.Linds_9
                                                                                                                 n6,
                                                                                                               Index.Uinds_3
                                                                                                                 n7,
                                                                                                               Index.Linds_3
                                                                                                                 n8)
                                                                                                            @ a
                                                                                                            (Tensor.$fShowTensor4
                                                                                                               @ n1
                                                                                                               @ n2
                                                                                                               @ n3
                                                                                                               @ n4
                                                                                                               @ n5
                                                                                                               @ n6
                                                                                                               @ n7
                                                                                                               @ n8)
                                                                                                            w
                                                                                                            11#
                                                                                                            ww
                                                                                                            (GHC.Types.[]
                                                                                                               @ GHC.Types.Char))) -}
81c654ce6c9322e09ea1f6392213721f
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.showsPrec} True True} let {
                                                             g :: GHC.Base.String -> GHC.Base.String
                                                             = Data.Map.Internal.$w$cshowsPrec
                                                                 @ (Index.Uinds_20 n1,
                                                                    Index.Linds_20 n2,
                                                                    Index.Uinds_19 n3,
                                                                    Index.Linds_19 n4,
                                                                    Index.Uinds_9 n5,
                                                                    Index.Linds_9 n6,
                                                                    Index.Uinds_3 n7,
                                                                    Index.Linds_3 n8)
                                                                 @ a
                                                                 (Tensor.$fShowTensor4
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8)
                                                                 w
                                                                 11#
                                                                 ww1
                                                           } in
                                                           case GHC.Prim.>=# ww 11# of lwild {
                                                             DEFAULT
                                                             -> \ (x :: GHC.Base.String) ->
                                                                GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Tensor.$fShowTensor2
                                                                  (g x)
                                                             1#
                                                             -> \ (x :: GHC.Base.String) ->
                                                                GHC.Types.:
                                                                  @ GHC.Types.Char
                                                                  GHC.Show.$fShow(,)4
                                                                  (GHC.Base.++
                                                                     @ GHC.Types.Char
                                                                     Tensor.$fShowTensor2
                                                                     (g (GHC.Types.:
                                                                           @ GHC.Types.Char
                                                                           GHC.Show.$fShow(,)2
                                                                           x))) }) -}
3e3f119caf2acf69ed341bad31f885b1
  $w$sfactorial :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
529386e4d1ed1f90121da9e530efa84a
  $waSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case {__scc {main:Tensor.aSymTensor} True True} Tensor.$wtensorTranspose
                                                                   @ n1
                                                                   @ n2
                                                                   @ n3
                                                                   @ n4
                                                                   @ n5
                                                                   @ n6
                                                                   @ n7
                                                                   @ n8
                                                                   @ a
                                                                   w1
                                                                   w2
                                                                   ww of ww1 { Unit# ww2 ->
                 case {__scc {main:Tensor.aSymTensor} False True} Tensor.$wtensorSub
                                                                    @ a
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8
                                                                    $dNum
                                                                    ww
                                                                    ww2 of ww3 { Unit# ww4 ->
                 case {__scc {main:Tensor.aSymTensor} False True} let {
                                                                    a1 :: a
                                                                    = GHC.Real./
                                                                        @ a
                                                                        w
                                                                        (GHC.Num.fromInteger
                                                                           @ a
                                                                           $dNum
                                                                           Tensor.aSymTensor2)
                                                                        (GHC.Num.fromInteger
                                                                           @ a
                                                                           $dNum
                                                                           Tensor.aSymTensor1)
                                                                  } in
                                                                  {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                    @ n8
                                                                                                                                                                                                    @ a
                                                                                                                                                                                                    (let {
                                                                                                                                                                                                       f :: a
                                                                                                                                                                                                            -> a
                                                                                                                                                                                                       = GHC.Num.*
                                                                                                                                                                                                           @ a
                                                                                                                                                                                                           $dNum
                                                                                                                                                                                                           a1
                                                                                                                                                                                                     } in
                                                                                                                                                                                                     {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                                             @ (Index.Index
                                                                                                                                                                                                                                                  n1
                                                                                                                                                                                                                                                  n2
                                                                                                                                                                                                                                                  n3
                                                                                                                                                                                                                                                  n4
                                                                                                                                                                                                                                                  n5
                                                                                                                                                                                                                                                  n6
                                                                                                                                                                                                                                                  n7
                                                                                                                                                                                                                                                  n8)
                                                                                                                                                                                                                                             f
                                                                                                                                                                                                                                             ww4) of ww5 { Tensor.Tensor ww6 ->
                 (# ww6 #) } } }) -}
fc45b6b0e0f9d4f2f8286d7d325fbfb2
  $wblockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U,U)><L,U>,
     Inline: [0] -}
6c52a5dca2a7837a0c86c616226f3768
  $wsymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case {__scc {main:Tensor.symTensor} True True} Tensor.$wtensorTranspose
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8
                                                                  @ a
                                                                  w1
                                                                  w2
                                                                  ww of ww1 { Unit# ww2 ->
                 case {__scc {main:Tensor.symTensor} False True} let {
                                                                   ds :: Data.Map.Internal.Map
                                                                           (Index.Index
                                                                              n1
                                                                              n2
                                                                              n3
                                                                              n4
                                                                              n5
                                                                              n6
                                                                              n7
                                                                              n8)
                                                                           a
                                                                   = let {
                                                                       lvl19 :: a -> a -> a
                                                                       = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+
                                                                                                                      @ a
                                                                                                                      $dNum
                                                                     } in
                                                                     {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                  @ (Index.Index
                                                                                                                       n1
                                                                                                                       n2
                                                                                                                       n3
                                                                                                                       n4
                                                                                                                       n5
                                                                                                                       n6
                                                                                                                       n7
                                                                                                                       n8)
                                                                                                                  @ a
                                                                                                                  (Tensor.aSymTensor3
                                                                                                                     @ n1
                                                                                                                     @ n2
                                                                                                                     @ n3
                                                                                                                     @ n4
                                                                                                                     @ n5
                                                                                                                     @ n6
                                                                                                                     @ n7
                                                                                                                     @ n8)
                                                                                                                  lvl19
                                                                                                                  ww
                                                                                                                  ww2
                                                                 } in
                                                                 let {
                                                                   a1 :: a
                                                                   = GHC.Real./
                                                                       @ a
                                                                       w
                                                                       (GHC.Num.fromInteger
                                                                          @ a
                                                                          $dNum
                                                                          Tensor.aSymTensor2)
                                                                       (GHC.Num.fromInteger
                                                                          @ a
                                                                          $dNum
                                                                          Tensor.aSymTensor1)
                                                                 } in
                                                                 {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                              @ n1
                                                                                                                                                                                                                                              @ n2
                                                                                                                                                                                                                                              @ n3
                                                                                                                                                                                                                                              @ n4
                                                                                                                                                                                                                                              @ n5
                                                                                                                                                                                                                                              @ n6
                                                                                                                                                                                                                                              @ n7
                                                                                                                                                                                                                                              @ n8
                                                                                                                                                                                                                                              @ a
                                                                                                                                                                                                                                              (let {
                                                                                                                                                                                                                                                 f :: a
                                                                                                                                                                                                                                                      -> a
                                                                                                                                                                                                                                                 = GHC.Num.*
                                                                                                                                                                                                                                                     @ a
                                                                                                                                                                                                                                                     $dNum
                                                                                                                                                                                                                                                     a1
                                                                                                                                                                                                                                               } in
                                                                                                                                                                                                                                               {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                                                                       @ a
                                                                                                                                                                                                                                                                                       @ a
                                                                                                                                                                                                                                                                                       @ (Index.Index
                                                                                                                                                                                                                                                                                            n1
                                                                                                                                                                                                                                                                                            n2
                                                                                                                                                                                                                                                                                            n3
                                                                                                                                                                                                                                                                                            n4
                                                                                                                                                                                                                                                                                            n5
                                                                                                                                                                                                                                                                                            n6
                                                                                                                                                                                                                                                                                            n7
                                                                                                                                                                                                                                                                                            n8)
                                                                                                                                                                                                                                                                                       f
                                                                                                                                                                                                                                                                                       ds) of ww3 { Tensor.Tensor ww4 ->
                 (# ww4 #) } }) -}
33ca51f8122f803cfb43c7aec70eb7a1
  $wtensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_19} True False} (# {__scc {main:Tensor.tensorContractWith_19} False True} let {
                                                                                                                                    mapFilt :: Data.Map.Internal.Map
                                                                                                                                                 (Index.Index
                                                                                                                                                    n1
                                                                                                                                                    n2
                                                                                                                                                    (n3
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    (n4
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    n5
                                                                                                                                                    n6
                                                                                                                                                    n7
                                                                                                                                                    n8)
                                                                                                                                                 a
                                                                                                                                    = {__scc {main:Tensor.tensorContractWith_19.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                           n1
                                                                                                                                                                                                           n2
                                                                                                                                                                                                           (n3
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           (n4
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           n5
                                                                                                                                                                                                           n6
                                                                                                                                                                                                           n7
                                                                                                                                                                                                           n8)
                                                                                                                                                                                                      @ a
                                                                                                                                                                                                      (\ (k :: Index.Index
                                                                                                                                                                                                                 n1
                                                                                                                                                                                                                 n2
                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 n5
                                                                                                                                                                                                                 n6
                                                                                                                                                                                                                 n7
                                                                                                                                                                                                                 n8)
                                                                                                                                                                                                         (ds :: a)[OneShot] ->
                                                                                                                                                                                                       {__scc {main:Tensor.tensorContractWith_19.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                         @ n1
                                                                                                                                                                                                                                                                         @ n2
                                                                                                                                                                                                                                                                         @ (n3
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ (n4
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ n5
                                                                                                                                                                                                                                                                         @ n6
                                                                                                                                                                                                                                                                         @ n7
                                                                                                                                                                                                                                                                         @ n8
                                                                                                                                                                                                                                                                         Tensor.tensorContractWith_1
                                                                                                                                                                                                                                                                         w2
                                                                                                                                                                                                                                                                         k)
                                                                                                                                                                                                      ww
                                                                                                                                  } in
                                                                                                                                  {__scc {main:Tensor.tensorContractWith_19.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               @ a
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    (n3
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    (n4
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               (Tensor.aSymTensor3
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8)
                                                                                                                                                                                               w3
                                                                                                                                                                                               (Index.delContractionIndex_19
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  w
                                                                                                                                                                                                  w1
                                                                                                                                                                                                  w2)
                                                                                                                                                                                               mapFilt #)) -}
ab0e6870c784f43b380da4b84c7d463e
  $wtensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_20} True False} (# {__scc {main:Tensor.tensorContractWith_20} False True} let {
                                                                                                                                    mapFilt :: Data.Map.Internal.Map
                                                                                                                                                 (Index.Index
                                                                                                                                                    (n1
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    (n2
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    n3
                                                                                                                                                    n4
                                                                                                                                                    n5
                                                                                                                                                    n6
                                                                                                                                                    n7
                                                                                                                                                    n8)
                                                                                                                                                 a
                                                                                                                                    = {__scc {main:Tensor.tensorContractWith_20.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                           (n1
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           (n2
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           n3
                                                                                                                                                                                                           n4
                                                                                                                                                                                                           n5
                                                                                                                                                                                                           n6
                                                                                                                                                                                                           n7
                                                                                                                                                                                                           n8)
                                                                                                                                                                                                      @ a
                                                                                                                                                                                                      (\ (k :: Index.Index
                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 n3
                                                                                                                                                                                                                 n4
                                                                                                                                                                                                                 n5
                                                                                                                                                                                                                 n6
                                                                                                                                                                                                                 n7
                                                                                                                                                                                                                 n8)
                                                                                                                                                                                                         (ds :: a)[OneShot] ->
                                                                                                                                                                                                       {__scc {main:Tensor.tensorContractWith_20.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                         @ (n1
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ (n2
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ n3
                                                                                                                                                                                                                                                                         @ n4
                                                                                                                                                                                                                                                                         @ n5
                                                                                                                                                                                                                                                                         @ n6
                                                                                                                                                                                                                                                                         @ n7
                                                                                                                                                                                                                                                                         @ n8
                                                                                                                                                                                                                                                                         Tensor.tensorContractWith_2
                                                                                                                                                                                                                                                                         w2
                                                                                                                                                                                                                                                                         k)
                                                                                                                                                                                                      ww
                                                                                                                                  } in
                                                                                                                                  {__scc {main:Tensor.tensorContractWith_20.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               @ a
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    (n1
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    (n2
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               (Tensor.aSymTensor3
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8)
                                                                                                                                                                                               w3
                                                                                                                                                                                               (Index.delContractionIndex_20
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  w
                                                                                                                                                                                                  w1
                                                                                                                                                                                                  w2)
                                                                                                                                                                                               mapFilt #)) -}
80198be9a4645d1cf679098cb95be394
  $wtensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_3} True False} (# {__scc {main:Tensor.tensorContractWith_3} False True} let {
                                                                                                                                  mapFilt :: Data.Map.Internal.Map
                                                                                                                                               (Index.Index
                                                                                                                                                  n1
                                                                                                                                                  n2
                                                                                                                                                  n3
                                                                                                                                                  n4
                                                                                                                                                  n5
                                                                                                                                                  n6
                                                                                                                                                  (n7
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  (n8
                                                                                                                                                   GHC.TypeNats.+ 1))
                                                                                                                                               a
                                                                                                                                  = {__scc {main:Tensor.tensorContractWith_3.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                        n1
                                                                                                                                                                                                        n2
                                                                                                                                                                                                        n3
                                                                                                                                                                                                        n4
                                                                                                                                                                                                        n5
                                                                                                                                                                                                        n6
                                                                                                                                                                                                        (n7
                                                                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                                                                        (n8
                                                                                                                                                                                                         GHC.TypeNats.+ 1))
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   (\ (k :: Index.Index
                                                                                                                                                                                                              n1
                                                                                                                                                                                                              n2
                                                                                                                                                                                                              n3
                                                                                                                                                                                                              n4
                                                                                                                                                                                                              n5
                                                                                                                                                                                                              n6
                                                                                                                                                                                                              (n7
                                                                                                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                                                                                                              (n8
                                                                                                                                                                                                               GHC.TypeNats.+ 1))
                                                                                                                                                                                                      (ds :: a)[OneShot] ->
                                                                                                                                                                                                    {__scc {main:Tensor.tensorContractWith_3.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                     @ n1
                                                                                                                                                                                                                                                                     @ n2
                                                                                                                                                                                                                                                                     @ n3
                                                                                                                                                                                                                                                                     @ n4
                                                                                                                                                                                                                                                                     @ n5
                                                                                                                                                                                                                                                                     @ n6
                                                                                                                                                                                                                                                                     @ (n7
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     @ (n8
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     Tensor.tensorContractWith_4
                                                                                                                                                                                                                                                                     w2
                                                                                                                                                                                                                                                                     k)
                                                                                                                                                                                                   ww
                                                                                                                                } in
                                                                                                                                {__scc {main:Tensor.tensorContractWith_3.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            @ a
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 (n7
                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                 (n8
                                                                                                                                                                                                  GHC.TypeNats.+ 1))
                                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8)
                                                                                                                                                                                            w3
                                                                                                                                                                                            (Index.delContractionIndex_3
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               w
                                                                                                                                                                                               w1
                                                                                                                                                                                               w2)
                                                                                                                                                                                            mapFilt #)) -}
2dd6ca3f7cefc34a3813fa0d16db452c
  $wtensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_9} True False} (# {__scc {main:Tensor.tensorContractWith_9} False True} let {
                                                                                                                                  mapFilt :: Data.Map.Internal.Map
                                                                                                                                               (Index.Index
                                                                                                                                                  n1
                                                                                                                                                  n2
                                                                                                                                                  n3
                                                                                                                                                  n4
                                                                                                                                                  (n5
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  (n6
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  n7
                                                                                                                                                  n8)
                                                                                                                                               a
                                                                                                                                  = {__scc {main:Tensor.tensorContractWith_9.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                        n1
                                                                                                                                                                                                        n2
                                                                                                                                                                                                        n3
                                                                                                                                                                                                        n4
                                                                                                                                                                                                        (n5
                                                                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                                                                        (n6
                                                                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                                                                        n7
                                                                                                                                                                                                        n8)
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   (\ (k :: Index.Index
                                                                                                                                                                                                              n1
                                                                                                                                                                                                              n2
                                                                                                                                                                                                              n3
                                                                                                                                                                                                              n4
                                                                                                                                                                                                              (n5
                                                                                                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                                                                                                              (n6
                                                                                                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                                                                                                              n7
                                                                                                                                                                                                              n8)
                                                                                                                                                                                                      (ds :: a)[OneShot] ->
                                                                                                                                                                                                    {__scc {main:Tensor.tensorContractWith_9.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                     @ n1
                                                                                                                                                                                                                                                                     @ n2
                                                                                                                                                                                                                                                                     @ n3
                                                                                                                                                                                                                                                                     @ n4
                                                                                                                                                                                                                                                                     @ (n5
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     @ (n6
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     @ n7
                                                                                                                                                                                                                                                                     @ n8
                                                                                                                                                                                                                                                                     Tensor.tensorContractWith_5
                                                                                                                                                                                                                                                                     w2
                                                                                                                                                                                                                                                                     k)
                                                                                                                                                                                                   ww
                                                                                                                                } in
                                                                                                                                {__scc {main:Tensor.tensorContractWith_9.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            @ a
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 (n5
                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                 (n6
                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8)
                                                                                                                                                                                            w3
                                                                                                                                                                                            (Index.delContractionIndex_9
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8
                                                                                                                                                                                               w
                                                                                                                                                                                               w1
                                                                                                                                                                                               w2)
                                                                                                                                                                                            mapFilt #)) -}
830ebb814ff46a573e7248368ede2bd7
  $wtensorProductWith ::
    (a -> b -> c)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b
    -> (# Data.Map.Internal.Map
            (Index.Index
               (n1 GHC.TypeNats.+ m1)
               (n2 GHC.TypeNats.+ m2)
               (n3 GHC.TypeNats.+ m3)
               (n4 GHC.TypeNats.+ m4)
               (n5 GHC.TypeNats.+ m5)
               (n6 GHC.TypeNats.+ m6)
               (n7 GHC.TypeNats.+ m7)
               (n8 GHC.TypeNats.+ m8))
            c #)
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b) ->
                 {__scc {main:Tensor.tensorProductWith} True False} (# {__scc {main:Tensor.tensorProductWith} False True} let {
                                                                                                                            combineF :: (Index.Index
                                                                                                                                           n1
                                                                                                                                           n2
                                                                                                                                           n3
                                                                                                                                           n4
                                                                                                                                           n5
                                                                                                                                           n6
                                                                                                                                           n7
                                                                                                                                           n8,
                                                                                                                                         a)
                                                                                                                                        -> (Index.Index
                                                                                                                                              m1
                                                                                                                                              m2
                                                                                                                                              m3
                                                                                                                                              m4
                                                                                                                                              m5
                                                                                                                                              m6
                                                                                                                                              m7
                                                                                                                                              m8,
                                                                                                                                            b)
                                                                                                                                        -> (Index.Index
                                                                                                                                              (n1
                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                              (n2
                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                              (n3
                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                              (n4
                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                              (n5
                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                              (n6
                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                              (n7
                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                              (n8
                                                                                                                                               GHC.TypeNats.+ m8),
                                                                                                                                            c)
                                                                                                                            = {__scc {main:Tensor.tensorProductWith.combineF} True False} \ (ds :: (Index.Index
                                                                                                                                                                                                      n1
                                                                                                                                                                                                      n2
                                                                                                                                                                                                      n3
                                                                                                                                                                                                      n4
                                                                                                                                                                                                      n5
                                                                                                                                                                                                      n6
                                                                                                                                                                                                      n7
                                                                                                                                                                                                      n8,
                                                                                                                                                                                                    a))
                                                                                                                                                                                            (ds1 :: (Index.Index
                                                                                                                                                                                                       m1
                                                                                                                                                                                                       m2
                                                                                                                                                                                                       m3
                                                                                                                                                                                                       m4
                                                                                                                                                                                                       m5
                                                                                                                                                                                                       m6
                                                                                                                                                                                                       m7
                                                                                                                                                                                                       m8,
                                                                                                                                                                                                     b)) ->
                                                                                                                                                                                          {__scc {main:Tensor.tensorProductWith.combineF} False True} case ds of wild { (,) a1 b1 ->
                                                                                                                                                                                                                                                      case ds1 of wild1 { (,) c1 d ->
                                                                                                                                                                                                                                                      {__scc {main:Tensor.tensorProductWith.combineF.\} True False} ({__scc {main:Tensor.tensorProductWith.combineF.\} False True} Index.combineIndex
                                                                                                                                                                                                                                                                                                                                                                                     @ n1
                                                                                                                                                                                                                                                                                                                                                                                     @ n2
                                                                                                                                                                                                                                                                                                                                                                                     @ n3
                                                                                                                                                                                                                                                                                                                                                                                     @ n4
                                                                                                                                                                                                                                                                                                                                                                                     @ n5
                                                                                                                                                                                                                                                                                                                                                                                     @ n6
                                                                                                                                                                                                                                                                                                                                                                                     @ n7
                                                                                                                                                                                                                                                                                                                                                                                     @ n8
                                                                                                                                                                                                                                                                                                                                                                                     @ m1
                                                                                                                                                                                                                                                                                                                                                                                     @ m2
                                                                                                                                                                                                                                                                                                                                                                                     @ m3
                                                                                                                                                                                                                                                                                                                                                                                     @ m4
                                                                                                                                                                                                                                                                                                                                                                                     @ m5
                                                                                                                                                                                                                                                                                                                                                                                     @ m6
                                                                                                                                                                                                                                                                                                                                                                                     @ m7
                                                                                                                                                                                                                                                                                                                                                                                     @ m8
                                                                                                                                                                                                                                                                                                                                                                                     a1
                                                                                                                                                                                                                                                                                                                                                                                     c1,
                                                                                                                                                                                                                                                                                                                     {__scc {main:Tensor.tensorProductWith.combineF.\} False True} w b1
                                                                                                                                                                                                                                                                                                                                                                                     d) } }
                                                                                                                          } in
                                                                                                                          let {
                                                                                                                            pairs2 :: [(Index.Index
                                                                                                                                          m1
                                                                                                                                          m2
                                                                                                                                          m3
                                                                                                                                          m4
                                                                                                                                          m5
                                                                                                                                          m6
                                                                                                                                          m7
                                                                                                                                          m8,
                                                                                                                                        b)]
                                                                                                                            = {__scc {main:Tensor.tensorProductWith.pairs2} True True} Data.Map.Internal.assocs
                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                              m1
                                                                                                                                                                                              m2
                                                                                                                                                                                              m3
                                                                                                                                                                                              m4
                                                                                                                                                                                              m5
                                                                                                                                                                                              m6
                                                                                                                                                                                              m7
                                                                                                                                                                                              m8)
                                                                                                                                                                                         @ b
                                                                                                                                                                                         ww1
                                                                                                                          } in
                                                                                                                          let {
                                                                                                                            pairs1 :: [(Index.Index
                                                                                                                                          n1
                                                                                                                                          n2
                                                                                                                                          n3
                                                                                                                                          n4
                                                                                                                                          n5
                                                                                                                                          n6
                                                                                                                                          n7
                                                                                                                                          n8,
                                                                                                                                        a)]
                                                                                                                            = {__scc {main:Tensor.tensorProductWith.pairs1} True True} Data.Map.Internal.assocs
                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                              n1
                                                                                                                                                                                              n2
                                                                                                                                                                                              n3
                                                                                                                                                                                              n4
                                                                                                                                                                                              n5
                                                                                                                                                                                              n6
                                                                                                                                                                                              n7
                                                                                                                                                                                              n8)
                                                                                                                                                                                         @ a
                                                                                                                                                                                         ww
                                                                                                                          } in
                                                                                                                          {__scc {main:Tensor.tensorProductWith.newMap} True True} letrec {
                                                                                                                                                                                     go :: [(Index.Index
                                                                                                                                                                                               n1
                                                                                                                                                                                               n2
                                                                                                                                                                                               n3
                                                                                                                                                                                               n4
                                                                                                                                                                                               n5
                                                                                                                                                                                               n6
                                                                                                                                                                                               n7
                                                                                                                                                                                               n8,
                                                                                                                                                                                             a)]
                                                                                                                                                                                           -> [(Index.Index
                                                                                                                                                                                                  (n1
                                                                                                                                                                                                   GHC.TypeNats.+ m1)
                                                                                                                                                                                                  (n2
                                                                                                                                                                                                   GHC.TypeNats.+ m2)
                                                                                                                                                                                                  (n3
                                                                                                                                                                                                   GHC.TypeNats.+ m3)
                                                                                                                                                                                                  (n4
                                                                                                                                                                                                   GHC.TypeNats.+ m4)
                                                                                                                                                                                                  (n5
                                                                                                                                                                                                   GHC.TypeNats.+ m5)
                                                                                                                                                                                                  (n6
                                                                                                                                                                                                   GHC.TypeNats.+ m6)
                                                                                                                                                                                                  (n7
                                                                                                                                                                                                   GHC.TypeNats.+ m7)
                                                                                                                                                                                                  (n8
                                                                                                                                                                                                   GHC.TypeNats.+ m8),
                                                                                                                                                                                                c)]
                                                                                                                                                                                       {- Arity: 1,
                                                                                                                                                                                          Strictness: <S,1*U> -}
                                                                                                                                                                                     = \ (ds :: [(Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8,
                                                                                                                                                                                                  a)]) ->
                                                                                                                                                                                       case ds of wild {
                                                                                                                                                                                         []
                                                                                                                                                                                         -> GHC.Types.[]
                                                                                                                                                                                              @ (Index.Index
                                                                                                                                                                                                   (n1
                                                                                                                                                                                                    GHC.TypeNats.+ m1)
                                                                                                                                                                                                   (n2
                                                                                                                                                                                                    GHC.TypeNats.+ m2)
                                                                                                                                                                                                   (n3
                                                                                                                                                                                                    GHC.TypeNats.+ m3)
                                                                                                                                                                                                   (n4
                                                                                                                                                                                                    GHC.TypeNats.+ m4)
                                                                                                                                                                                                   (n5
                                                                                                                                                                                                    GHC.TypeNats.+ m5)
                                                                                                                                                                                                   (n6
                                                                                                                                                                                                    GHC.TypeNats.+ m6)
                                                                                                                                                                                                   (n7
                                                                                                                                                                                                    GHC.TypeNats.+ m7)
                                                                                                                                                                                                   (n8
                                                                                                                                                                                                    GHC.TypeNats.+ m8),
                                                                                                                                                                                                 c)
                                                                                                                                                                                         : y ys
                                                                                                                                                                                         -> let {
                                                                                                                                                                                              ys1 :: [(Index.Index
                                                                                                                                                                                                         (n1
                                                                                                                                                                                                          GHC.TypeNats.+ m1)
                                                                                                                                                                                                         (n2
                                                                                                                                                                                                          GHC.TypeNats.+ m2)
                                                                                                                                                                                                         (n3
                                                                                                                                                                                                          GHC.TypeNats.+ m3)
                                                                                                                                                                                                         (n4
                                                                                                                                                                                                          GHC.TypeNats.+ m4)
                                                                                                                                                                                                         (n5
                                                                                                                                                                                                          GHC.TypeNats.+ m5)
                                                                                                                                                                                                         (n6
                                                                                                                                                                                                          GHC.TypeNats.+ m6)
                                                                                                                                                                                                         (n7
                                                                                                                                                                                                          GHC.TypeNats.+ m7)
                                                                                                                                                                                                         (n8
                                                                                                                                                                                                          GHC.TypeNats.+ m8),
                                                                                                                                                                                                       c)]
                                                                                                                                                                                              = go
                                                                                                                                                                                                  ys
                                                                                                                                                                                            } in
                                                                                                                                                                                            let {
                                                                                                                                                                                              ds1 :: (Index.Index
                                                                                                                                                                                                        m1
                                                                                                                                                                                                        m2
                                                                                                                                                                                                        m3
                                                                                                                                                                                                        m4
                                                                                                                                                                                                        m5
                                                                                                                                                                                                        m6
                                                                                                                                                                                                        m7
                                                                                                                                                                                                        m8,
                                                                                                                                                                                                      b)
                                                                                                                                                                                                     -> (Index.Index
                                                                                                                                                                                                           (n1
                                                                                                                                                                                                            GHC.TypeNats.+ m1)
                                                                                                                                                                                                           (n2
                                                                                                                                                                                                            GHC.TypeNats.+ m2)
                                                                                                                                                                                                           (n3
                                                                                                                                                                                                            GHC.TypeNats.+ m3)
                                                                                                                                                                                                           (n4
                                                                                                                                                                                                            GHC.TypeNats.+ m4)
                                                                                                                                                                                                           (n5
                                                                                                                                                                                                            GHC.TypeNats.+ m5)
                                                                                                                                                                                                           (n6
                                                                                                                                                                                                            GHC.TypeNats.+ m6)
                                                                                                                                                                                                           (n7
                                                                                                                                                                                                            GHC.TypeNats.+ m7)
                                                                                                                                                                                                           (n8
                                                                                                                                                                                                            GHC.TypeNats.+ m8),
                                                                                                                                                                                                         c)
                                                                                                                                                                                              = combineF
                                                                                                                                                                                                  y
                                                                                                                                                                                            } in
                                                                                                                                                                                            letrec {
                                                                                                                                                                                              go1 :: [(Index.Index
                                                                                                                                                                                                         m1
                                                                                                                                                                                                         m2
                                                                                                                                                                                                         m3
                                                                                                                                                                                                         m4
                                                                                                                                                                                                         m5
                                                                                                                                                                                                         m6
                                                                                                                                                                                                         m7
                                                                                                                                                                                                         m8,
                                                                                                                                                                                                       b)]
                                                                                                                                                                                                     -> [(Index.Index
                                                                                                                                                                                                            (n1
                                                                                                                                                                                                             GHC.TypeNats.+ m1)
                                                                                                                                                                                                            (n2
                                                                                                                                                                                                             GHC.TypeNats.+ m2)
                                                                                                                                                                                                            (n3
                                                                                                                                                                                                             GHC.TypeNats.+ m3)
                                                                                                                                                                                                            (n4
                                                                                                                                                                                                             GHC.TypeNats.+ m4)
                                                                                                                                                                                                            (n5
                                                                                                                                                                                                             GHC.TypeNats.+ m5)
                                                                                                                                                                                                            (n6
                                                                                                                                                                                                             GHC.TypeNats.+ m6)
                                                                                                                                                                                                            (n7
                                                                                                                                                                                                             GHC.TypeNats.+ m7)
                                                                                                                                                                                                            (n8
                                                                                                                                                                                                             GHC.TypeNats.+ m8),
                                                                                                                                                                                                          c)]
                                                                                                                                                                                                {- Arity: 1,
                                                                                                                                                                                                   Strictness: <S,1*U> -}
                                                                                                                                                                                              = \ (ds2 :: [(Index.Index
                                                                                                                                                                                                              m1
                                                                                                                                                                                                              m2
                                                                                                                                                                                                              m3
                                                                                                                                                                                                              m4
                                                                                                                                                                                                              m5
                                                                                                                                                                                                              m6
                                                                                                                                                                                                              m7
                                                                                                                                                                                                              m8,
                                                                                                                                                                                                            b)]) ->
                                                                                                                                                                                                case ds2 of wild1 {
                                                                                                                                                                                                  []
                                                                                                                                                                                                  -> ys1
                                                                                                                                                                                                  : y1 ys2
                                                                                                                                                                                                  -> GHC.Types.:
                                                                                                                                                                                                       @ (Index.Index
                                                                                                                                                                                                            (n1
                                                                                                                                                                                                             GHC.TypeNats.+ m1)
                                                                                                                                                                                                            (n2
                                                                                                                                                                                                             GHC.TypeNats.+ m2)
                                                                                                                                                                                                            (n3
                                                                                                                                                                                                             GHC.TypeNats.+ m3)
                                                                                                                                                                                                            (n4
                                                                                                                                                                                                             GHC.TypeNats.+ m4)
                                                                                                                                                                                                            (n5
                                                                                                                                                                                                             GHC.TypeNats.+ m5)
                                                                                                                                                                                                            (n6
                                                                                                                                                                                                             GHC.TypeNats.+ m6)
                                                                                                                                                                                                            (n7
                                                                                                                                                                                                             GHC.TypeNats.+ m7)
                                                                                                                                                                                                            (n8
                                                                                                                                                                                                             GHC.TypeNats.+ m8),
                                                                                                                                                                                                          c)
                                                                                                                                                                                                       (ds1
                                                                                                                                                                                                          y1)
                                                                                                                                                                                                       (go1
                                                                                                                                                                                                          ys2) }
                                                                                                                                                                                            } in
                                                                                                                                                                                            go1
                                                                                                                                                                                              pairs2 }
                                                                                                                                                                                   } in
                                                                                                                                                                                   Data.Map.Strict.Internal.fromAscListWithKey
                                                                                                                                                                                     @ (Index.Index
                                                                                                                                                                                          (n1
                                                                                                                                                                                           GHC.TypeNats.+ m1)
                                                                                                                                                                                          (n2
                                                                                                                                                                                           GHC.TypeNats.+ m2)
                                                                                                                                                                                          (n3
                                                                                                                                                                                           GHC.TypeNats.+ m3)
                                                                                                                                                                                          (n4
                                                                                                                                                                                           GHC.TypeNats.+ m4)
                                                                                                                                                                                          (n5
                                                                                                                                                                                           GHC.TypeNats.+ m5)
                                                                                                                                                                                          (n6
                                                                                                                                                                                           GHC.TypeNats.+ m6)
                                                                                                                                                                                          (n7
                                                                                                                                                                                           GHC.TypeNats.+ m7)
                                                                                                                                                                                          (n8
                                                                                                                                                                                           GHC.TypeNats.+ m8))
                                                                                                                                                                                     @ c
                                                                                                                                                                                     (Tensor.tensorProductWith1
                                                                                                                                                                                        @ n8
                                                                                                                                                                                        @ m8
                                                                                                                                                                                        @ n7
                                                                                                                                                                                        @ m7
                                                                                                                                                                                        @ n6
                                                                                                                                                                                        @ m6
                                                                                                                                                                                        @ n5
                                                                                                                                                                                        @ m5
                                                                                                                                                                                        @ n4
                                                                                                                                                                                        @ m4
                                                                                                                                                                                        @ n3
                                                                                                                                                                                        @ m3
                                                                                                                                                                                        @ n2
                                                                                                                                                                                        @ m2
                                                                                                                                                                                        @ n1
                                                                                                                                                                                        @ m1)
                                                                                                                                                                                     (Tensor.tensorProductNumeric1
                                                                                                                                                                                        @ n1
                                                                                                                                                                                        @ m1
                                                                                                                                                                                        @ n2
                                                                                                                                                                                        @ m2
                                                                                                                                                                                        @ n3
                                                                                                                                                                                        @ m3
                                                                                                                                                                                        @ n4
                                                                                                                                                                                        @ m4
                                                                                                                                                                                        @ n5
                                                                                                                                                                                        @ m5
                                                                                                                                                                                        @ n6
                                                                                                                                                                                        @ m6
                                                                                                                                                                                        @ n7
                                                                                                                                                                                        @ m7
                                                                                                                                                                                        @ n8
                                                                                                                                                                                        @ m8
                                                                                                                                                                                        @ c)
                                                                                                                                                                                     (go
                                                                                                                                                                                        pairs1) #)) -}
b6bfd62617e5717ac1903240cb10a6e3
  $wtensorProductWith2 ::
    (a -> b -> c)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b
    -> (# Data.Map.Internal.Map
            (Index.Index
               (n1 GHC.TypeNats.+ m1)
               (n2 GHC.TypeNats.+ m2)
               (n3 GHC.TypeNats.+ m3)
               (n4 GHC.TypeNats.+ m4)
               (n5 GHC.TypeNats.+ m5)
               (n6 GHC.TypeNats.+ m6)
               (n7 GHC.TypeNats.+ m7)
               (n8 GHC.TypeNats.+ m8))
            c #)
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b) ->
                 {__scc {main:Tensor.tensorProductWith2} True False} (# {__scc {main:Tensor.tensorProductWith2} False True} let {
                                                                                                                              indList :: [Index.Index
                                                                                                                                            m1
                                                                                                                                            m2
                                                                                                                                            m3
                                                                                                                                            m4
                                                                                                                                            m5
                                                                                                                                            m6
                                                                                                                                            m7
                                                                                                                                            m8]
                                                                                                                              = {__scc {main:Tensor.tensorProductWith2.indList} True True} Data.Map.Internal.keys_go
                                                                                                                                                                                             @ (Index.Uinds_20
                                                                                                                                                                                                  m1,
                                                                                                                                                                                                Index.Linds_20
                                                                                                                                                                                                  m2,
                                                                                                                                                                                                Index.Uinds_19
                                                                                                                                                                                                  m3,
                                                                                                                                                                                                Index.Linds_19
                                                                                                                                                                                                  m4,
                                                                                                                                                                                                Index.Uinds_9
                                                                                                                                                                                                  m5,
                                                                                                                                                                                                Index.Linds_9
                                                                                                                                                                                                  m6,
                                                                                                                                                                                                Index.Uinds_3
                                                                                                                                                                                                  m7,
                                                                                                                                                                                                Index.Linds_3
                                                                                                                                                                                                  m8)
                                                                                                                                                                                             @ b
                                                                                                                                                                                             (GHC.Types.[]
                                                                                                                                                                                                @ (Index.Uinds_20
                                                                                                                                                                                                     m1,
                                                                                                                                                                                                   Index.Linds_20
                                                                                                                                                                                                     m2,
                                                                                                                                                                                                   Index.Uinds_19
                                                                                                                                                                                                     m3,
                                                                                                                                                                                                   Index.Linds_19
                                                                                                                                                                                                     m4,
                                                                                                                                                                                                   Index.Uinds_9
                                                                                                                                                                                                     m5,
                                                                                                                                                                                                   Index.Linds_9
                                                                                                                                                                                                     m6,
                                                                                                                                                                                                   Index.Uinds_3
                                                                                                                                                                                                     m7,
                                                                                                                                                                                                   Index.Linds_3
                                                                                                                                                                                                     m8))
                                                                                                                                                                                             ww1
                                                                                                                            } in
                                                                                                                            let {
                                                                                                                              mapList :: [Data.Map.Internal.Map
                                                                                                                                            (Index.Index
                                                                                                                                               (n1
                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                               (n2
                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                               (n3
                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                               (n4
                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                               (n5
                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                               (n6
                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                               (n7
                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                               (n8
                                                                                                                                                GHC.TypeNats.+ m8))
                                                                                                                                            c]
                                                                                                                              = {__scc {main:Tensor.tensorProductWith2.mapList} True True} GHC.Base.map
                                                                                                                                                                                             @ (Index.Uinds_20
                                                                                                                                                                                                  m1,
                                                                                                                                                                                                Index.Linds_20
                                                                                                                                                                                                  m2,
                                                                                                                                                                                                Index.Uinds_19
                                                                                                                                                                                                  m3,
                                                                                                                                                                                                Index.Linds_19
                                                                                                                                                                                                  m4,
                                                                                                                                                                                                Index.Uinds_9
                                                                                                                                                                                                  m5,
                                                                                                                                                                                                Index.Linds_9
                                                                                                                                                                                                  m6,
                                                                                                                                                                                                Index.Uinds_3
                                                                                                                                                                                                  m7,
                                                                                                                                                                                                Index.Linds_3
                                                                                                                                                                                                  m8)
                                                                                                                                                                                             @ (Data.Map.Internal.Map
                                                                                                                                                                                                  (Index.Index
                                                                                                                                                                                                     (n1
                                                                                                                                                                                                      GHC.TypeNats.+ m1)
                                                                                                                                                                                                     (n2
                                                                                                                                                                                                      GHC.TypeNats.+ m2)
                                                                                                                                                                                                     (n3
                                                                                                                                                                                                      GHC.TypeNats.+ m3)
                                                                                                                                                                                                     (n4
                                                                                                                                                                                                      GHC.TypeNats.+ m4)
                                                                                                                                                                                                     (n5
                                                                                                                                                                                                      GHC.TypeNats.+ m5)
                                                                                                                                                                                                     (n6
                                                                                                                                                                                                      GHC.TypeNats.+ m6)
                                                                                                                                                                                                     (n7
                                                                                                                                                                                                      GHC.TypeNats.+ m7)
                                                                                                                                                                                                     (n8
                                                                                                                                                                                                      GHC.TypeNats.+ m8))
                                                                                                                                                                                                  c)
                                                                                                                                                                                             (\ (index :: Index.Index
                                                                                                                                                                                                            m1
                                                                                                                                                                                                            m2
                                                                                                                                                                                                            m3
                                                                                                                                                                                                            m4
                                                                                                                                                                                                            m5
                                                                                                                                                                                                            m6
                                                                                                                                                                                                            m7
                                                                                                                                                                                                            m8) ->
                                                                                                                                                                                              {__scc {main:Tensor.tensorProductF} True True} let {
                                                                                                                                                                                                                                               val :: b
                                                                                                                                                                                                                                               = {__scc {main:Tensor.tensorProductF.val} True True} Data.Map.Internal.find
                                                                                                                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                                                                                                                           m1
                                                                                                                                                                                                                                                                                                           m2
                                                                                                                                                                                                                                                                                                           m3
                                                                                                                                                                                                                                                                                                           m4
                                                                                                                                                                                                                                                                                                           m5
                                                                                                                                                                                                                                                                                                           m6
                                                                                                                                                                                                                                                                                                           m7
                                                                                                                                                                                                                                                                                                           m8)
                                                                                                                                                                                                                                                                                                      @ b
                                                                                                                                                                                                                                                                                                      (Tensor.aSymTensor4
                                                                                                                                                                                                                                                                                                         @ m8
                                                                                                                                                                                                                                                                                                         @ m7
                                                                                                                                                                                                                                                                                                         @ m6
                                                                                                                                                                                                                                                                                                         @ m5
                                                                                                                                                                                                                                                                                                         @ m4
                                                                                                                                                                                                                                                                                                         @ m3
                                                                                                                                                                                                                                                                                                         @ m2
                                                                                                                                                                                                                                                                                                         @ m1)
                                                                                                                                                                                                                                                                                                      index
                                                                                                                                                                                                                                                                                                      ww1
                                                                                                                                                                                                                                             } in
                                                                                                                                                                                                                                             {__scc {main:Tensor.tensorProductF.map3} True True} letrec {
                                                                                                                                                                                                                                                                                                   go8 :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                            (Index.Index
                                                                                                                                                                                                                                                                                                               (n1
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                               (n2
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                               (n3
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                               (n4
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                               (n5
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                               (n6
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                               (n7
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                               (n8
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                            a
                                                                                                                                                                                                                                                                                                          -> Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                               (Index.Index
                                                                                                                                                                                                                                                                                                                  (n1
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                  (n2
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                  (n3
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                  (n4
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                  (n5
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                  (n6
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                  (n7
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                  (n8
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                               c
                                                                                                                                                                                                                                                                                                     {- Arity: 1,
                                                                                                                                                                                                                                                                                                        Strictness: <S,1*U> -}
                                                                                                                                                                                                                                                                                                   = \ (ds :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                                (Index.Index
                                                                                                                                                                                                                                                                                                                   (n1
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                   (n2
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                   (n3
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                   (n4
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                   (n5
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                   (n6
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                   (n7
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                   (n8
                                                                                                                                                                                                                                                                                                                    GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                                a) ->
                                                                                                                                                                                                                                                                                                     case ds of wild {
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Bin dt kx x l r
                                                                                                                                                                                                                                                                                                       -> case {__scc {main:Tensor.tensorProductF.map3.\} True True} w x
                                                                                                                                                                                                                                                                                                                                                                       val of x' { DEFAULT ->
                                                                                                                                                                                                                                                                                                          case go8
                                                                                                                                                                                                                                                                                                                 l of dt1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                          case go8
                                                                                                                                                                                                                                                                                                                 r of dt2 { DEFAULT ->
                                                                                                                                                                                                                                                                                                          Data.Map.Internal.Bin
                                                                                                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                            @ c
                                                                                                                                                                                                                                                                                                            dt
                                                                                                                                                                                                                                                                                                            kx
                                                                                                                                                                                                                                                                                                            x'
                                                                                                                                                                                                                                                                                                            dt1
                                                                                                                                                                                                                                                                                                            dt2 } } }
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                       -> Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                            @ c }
                                                                                                                                                                                                                                                                                                 } in
                                                                                                                                                                                                                                                                                                 letrec {
                                                                                                                                                                                                                                                                                                   go13 :: [(Index.Index
                                                                                                                                                                                                                                                                                                               (n1
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                               (n2
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                               (n3
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                               (n4
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                               (n5
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                               (n6
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                               (n7
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                               (n8
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                             a)]
                                                                                                                                                                                                                                                                                                           -> Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                                (Index.Index
                                                                                                                                                                                                                                                                                                                   n1
                                                                                                                                                                                                                                                                                                                   n2
                                                                                                                                                                                                                                                                                                                   n3
                                                                                                                                                                                                                                                                                                                   n4
                                                                                                                                                                                                                                                                                                                   n5
                                                                                                                                                                                                                                                                                                                   n6
                                                                                                                                                                                                                                                                                                                   n7
                                                                                                                                                                                                                                                                                                                   n8)
                                                                                                                                                                                                                                                                                                                a
                                                                                                                                                                                                                                                                                                           -> [(Index.Index
                                                                                                                                                                                                                                                                                                                  (n1
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                  (n2
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                  (n3
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                  (n4
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                  (n5
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                  (n6
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                  (n7
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                  (n8
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                                a)]
                                                                                                                                                                                                                                                                                                     {- Arity: 2,
                                                                                                                                                                                                                                                                                                        Strictness: <L,1*U><S,1*U> -}
                                                                                                                                                                                                                                                                                                   = \ (z' :: [(Index.Index
                                                                                                                                                                                                                                                                                                                  (n1
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                  (n2
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                  (n3
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                  (n4
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                  (n5
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                  (n6
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                  (n7
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                  (n8
                                                                                                                                                                                                                                                                                                                   GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                                a)])
                                                                                                                                                                                                                                                                                                       (ds :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                                (Index.Index
                                                                                                                                                                                                                                                                                                                   n1
                                                                                                                                                                                                                                                                                                                   n2
                                                                                                                                                                                                                                                                                                                   n3
                                                                                                                                                                                                                                                                                                                   n4
                                                                                                                                                                                                                                                                                                                   n5
                                                                                                                                                                                                                                                                                                                   n6
                                                                                                                                                                                                                                                                                                                   n7
                                                                                                                                                                                                                                                                                                                   n8)
                                                                                                                                                                                                                                                                                                                a) ->
                                                                                                                                                                                                                                                                                                     case ds of wild {
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Bin dt kx x l r
                                                                                                                                                                                                                                                                                                       -> go13
                                                                                                                                                                                                                                                                                                            (GHC.Types.:
                                                                                                                                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                                                                                                                                    (n1
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                    (n2
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                    (n3
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                    (n4
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                    (n5
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                    (n6
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                    (n7
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                    (n8
                                                                                                                                                                                                                                                                                                                     GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                                  a)
                                                                                                                                                                                                                                                                                                               ({__scc {main:Tensor.tensorProductF.map3.\} True True} Index.combineIndex
                                                                                                                                                                                                                                                                                                                                                                        @ n1
                                                                                                                                                                                                                                                                                                                                                                        @ n2
                                                                                                                                                                                                                                                                                                                                                                        @ n3
                                                                                                                                                                                                                                                                                                                                                                        @ n4
                                                                                                                                                                                                                                                                                                                                                                        @ n5
                                                                                                                                                                                                                                                                                                                                                                        @ n6
                                                                                                                                                                                                                                                                                                                                                                        @ n7
                                                                                                                                                                                                                                                                                                                                                                        @ n8
                                                                                                                                                                                                                                                                                                                                                                        @ m1
                                                                                                                                                                                                                                                                                                                                                                        @ m2
                                                                                                                                                                                                                                                                                                                                                                        @ m3
                                                                                                                                                                                                                                                                                                                                                                        @ m4
                                                                                                                                                                                                                                                                                                                                                                        @ m5
                                                                                                                                                                                                                                                                                                                                                                        @ m6
                                                                                                                                                                                                                                                                                                                                                                        @ m7
                                                                                                                                                                                                                                                                                                                                                                        @ m8
                                                                                                                                                                                                                                                                                                                                                                        kx
                                                                                                                                                                                                                                                                                                                                                                        index,
                                                                                                                                                                                                                                                                                                                x)
                                                                                                                                                                                                                                                                                                               (go13
                                                                                                                                                                                                                                                                                                                  z'
                                                                                                                                                                                                                                                                                                                  r))
                                                                                                                                                                                                                                                                                                            l
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                       -> z' }
                                                                                                                                                                                                                                                                                                 } in
                                                                                                                                                                                                                                                                                                 go8
                                                                                                                                                                                                                                                                                                   (Data.Map.Internal.fromList
                                                                                                                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                                                                                                                           (n1
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                           (n2
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                           (n3
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                           (n4
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                           (n5
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                           (n6
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                           (n7
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                           (n8
                                                                                                                                                                                                                                                                                                            GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                      @ a
                                                                                                                                                                                                                                                                                                      (Tensor.tensorProductWith4
                                                                                                                                                                                                                                                                                                         @ n8
                                                                                                                                                                                                                                                                                                         @ m8
                                                                                                                                                                                                                                                                                                         @ n7
                                                                                                                                                                                                                                                                                                         @ m7
                                                                                                                                                                                                                                                                                                         @ n6
                                                                                                                                                                                                                                                                                                         @ m6
                                                                                                                                                                                                                                                                                                         @ n5
                                                                                                                                                                                                                                                                                                         @ m5
                                                                                                                                                                                                                                                                                                         @ n4
                                                                                                                                                                                                                                                                                                         @ m4
                                                                                                                                                                                                                                                                                                         @ n3
                                                                                                                                                                                                                                                                                                         @ m3
                                                                                                                                                                                                                                                                                                         @ n2
                                                                                                                                                                                                                                                                                                         @ m2
                                                                                                                                                                                                                                                                                                         @ n1
                                                                                                                                                                                                                                                                                                         @ m1)
                                                                                                                                                                                                                                                                                                      (go13
                                                                                                                                                                                                                                                                                                         (GHC.Types.[]
                                                                                                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                               a))
                                                                                                                                                                                                                                                                                                         ww)))
                                                                                                                                                                                             indList
                                                                                                                            } in
                                                                                                                            {__scc {main:Tensor.tensorProductWith2.newMap} True True} Tensor.tensorProductWith3
                                                                                                                                                                                        @ n1
                                                                                                                                                                                        @ m1
                                                                                                                                                                                        @ n2
                                                                                                                                                                                        @ m2
                                                                                                                                                                                        @ n3
                                                                                                                                                                                        @ m3
                                                                                                                                                                                        @ n4
                                                                                                                                                                                        @ m4
                                                                                                                                                                                        @ n5
                                                                                                                                                                                        @ m5
                                                                                                                                                                                        @ n6
                                                                                                                                                                                        @ m6
                                                                                                                                                                                        @ n7
                                                                                                                                                                                        @ m7
                                                                                                                                                                                        @ n8
                                                                                                                                                                                        @ m8
                                                                                                                                                                                        @ c
                                                                                                                                                                                        (Data.Map.Internal.Tip
                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                (n1
                                                                                                                                                                                                 GHC.TypeNats.+ m1)
                                                                                                                                                                                                (n2
                                                                                                                                                                                                 GHC.TypeNats.+ m2)
                                                                                                                                                                                                (n3
                                                                                                                                                                                                 GHC.TypeNats.+ m3)
                                                                                                                                                                                                (n4
                                                                                                                                                                                                 GHC.TypeNats.+ m4)
                                                                                                                                                                                                (n5
                                                                                                                                                                                                 GHC.TypeNats.+ m5)
                                                                                                                                                                                                (n6
                                                                                                                                                                                                 GHC.TypeNats.+ m6)
                                                                                                                                                                                                (n7
                                                                                                                                                                                                 GHC.TypeNats.+ m7)
                                                                                                                                                                                                (n8
                                                                                                                                                                                                 GHC.TypeNats.+ m8))
                                                                                                                                                                                           @ c)
                                                                                                                                                                                        mapList #)) -}
3928a2feacebefe1cb996ba9af3a6634
  $wtensorSub ::
    GHC.Num.Num a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3,
     Strictness: <L,U(1*C(C1(U)),A,1*C1(C(U)),1*C1(U),A,A,1*C1(U))><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 case {__scc {main:Tensor.tensorSub} True True} let {
                                                                  a1 :: a
                                                                  = GHC.Num.negate
                                                                      @ a
                                                                      w
                                                                      (GHC.Num.fromInteger
                                                                         @ a
                                                                         w
                                                                         Tensor.aSymTensor2)
                                                                } in
                                                                {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  (let {
                                                                                                                                                                                                     f :: a
                                                                                                                                                                                                          -> a
                                                                                                                                                                                                     = GHC.Num.*
                                                                                                                                                                                                         @ a
                                                                                                                                                                                                         w
                                                                                                                                                                                                         a1
                                                                                                                                                                                                   } in
                                                                                                                                                                                                   {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                           @ a
                                                                                                                                                                                                                                           @ a
                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                n1
                                                                                                                                                                                                                                                n2
                                                                                                                                                                                                                                                n3
                                                                                                                                                                                                                                                n4
                                                                                                                                                                                                                                                n5
                                                                                                                                                                                                                                                n6
                                                                                                                                                                                                                                                n7
                                                                                                                                                                                                                                                n8)
                                                                                                                                                                                                                                           f
                                                                                                                                                                                                                                           ww1) of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                              @ n1
                                                                                                              @ n2
                                                                                                              @ n3
                                                                                                              @ n4
                                                                                                              @ n5
                                                                                                              @ n6
                                                                                                              @ n7
                                                                                                              @ n8
                                                                                                              @ a
                                                                                                              (let {
                                                                                                                 lvl19 :: a
                                                                                                                          -> a
                                                                                                                          -> a
                                                                                                                 = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+
                                                                                                                                                                @ a
                                                                                                                                                                w
                                                                                                               } in
                                                                                                               {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                            @ (Index.Index
                                                                                                                                                                 n1
                                                                                                                                                                 n2
                                                                                                                                                                 n3
                                                                                                                                                                 n4
                                                                                                                                                                 n5
                                                                                                                                                                 n6
                                                                                                                                                                 n7
                                                                                                                                                                 n8)
                                                                                                                                                            @ a
                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                               @ n1
                                                                                                                                                               @ n2
                                                                                                                                                               @ n3
                                                                                                                                                               @ n4
                                                                                                                                                               @ n5
                                                                                                                                                               @ n6
                                                                                                                                                               @ n7
                                                                                                                                                               @ n8)
                                                                                                                                                            lvl19
                                                                                                                                                            ww
                                                                                                                                                            ww3) of ww4 { Tensor.Tensor ww5 ->
                 (# ww5 #) } }) -}
272c76712f5f819901b25502ce259f60
  $wtensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.tensorTranspose} True False} (# {__scc {main:Tensor.tensorTranspose} False True} letrec {
                                                                                                                        go13 :: [(Index.Index
                                                                                                                                    n1
                                                                                                                                    n2
                                                                                                                                    n3
                                                                                                                                    n4
                                                                                                                                    n5
                                                                                                                                    n6
                                                                                                                                    n7
                                                                                                                                    n8,
                                                                                                                                  a)]
                                                                                                                                -> Data.Map.Internal.Map
                                                                                                                                     (Index.Index
                                                                                                                                        n1
                                                                                                                                        n2
                                                                                                                                        n3
                                                                                                                                        n4
                                                                                                                                        n5
                                                                                                                                        n6
                                                                                                                                        n7
                                                                                                                                        n8)
                                                                                                                                     a
                                                                                                                                -> [(Index.Index
                                                                                                                                       n1
                                                                                                                                       n2
                                                                                                                                       n3
                                                                                                                                       n4
                                                                                                                                       n5
                                                                                                                                       n6
                                                                                                                                       n7
                                                                                                                                       n8,
                                                                                                                                     a)]
                                                                                                                          {- Arity: 2,
                                                                                                                             Strictness: <L,1*U><S,1*U> -}
                                                                                                                        = \ (z' :: [(Index.Index
                                                                                                                                       n1
                                                                                                                                       n2
                                                                                                                                       n3
                                                                                                                                       n4
                                                                                                                                       n5
                                                                                                                                       n6
                                                                                                                                       n7
                                                                                                                                       n8,
                                                                                                                                     a)])
                                                                                                                            (ds :: Data.Map.Internal.Map
                                                                                                                                     (Index.Index
                                                                                                                                        n1
                                                                                                                                        n2
                                                                                                                                        n3
                                                                                                                                        n4
                                                                                                                                        n5
                                                                                                                                        n6
                                                                                                                                        n7
                                                                                                                                        n8)
                                                                                                                                     a) ->
                                                                                                                          case ds of wild {
                                                                                                                            Data.Map.Internal.Bin dt kx x l r
                                                                                                                            -> case kx of ww2 { (,,,,,,,) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                                                                                                                               go13
                                                                                                                                 (GHC.Types.:
                                                                                                                                    @ (Index.Index
                                                                                                                                         n1
                                                                                                                                         n2
                                                                                                                                         n3
                                                                                                                                         n4
                                                                                                                                         n5
                                                                                                                                         n6
                                                                                                                                         n7
                                                                                                                                         n8,
                                                                                                                                       a)
                                                                                                                                    (case w of ww1 { GHC.Types.I# ww12 ->
                                                                                                                                     {__scc {main:Index.swapPosIndex} True False} case ww12 of wild1 {
                                                                                                                                                                                    DEFAULT
                                                                                                                                                                                    -> case Index.swapPosIndex1
                                                                                                                                                                                       ret_ty (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                       of {}
                                                                                                                                                                                    1#
                                                                                                                                                                                    -> ({__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n1
                                                                                                                                                                                                                                       @ Index.Uind_20
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    2#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n2
                                                                                                                                                                                                                                       @ Index.Lind_20
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    3#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n3
                                                                                                                                                                                                                                       @ Index.Uind_19
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    4#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n4
                                                                                                                                                                                                                                       @ Index.Lind_19
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    5#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n5
                                                                                                                                                                                                                                       @ Index.Uind_9
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    6#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n6
                                                                                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    7#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n7
                                                                                                                                                                                                                                       @ Index.Uind_3
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    8#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n8
                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww10) } },
                                                                                                                                     x)
                                                                                                                                    (go13
                                                                                                                                       z'
                                                                                                                                       r))
                                                                                                                                 l }
                                                                                                                            Data.Map.Internal.Tip
                                                                                                                            -> z' }
                                                                                                                      } in
                                                                                                                      Data.Map.Internal.fromList
                                                                                                                        @ (Index.Index
                                                                                                                             n1
                                                                                                                             n2
                                                                                                                             n3
                                                                                                                             n4
                                                                                                                             n5
                                                                                                                             n6
                                                                                                                             n7
                                                                                                                             n8)
                                                                                                                        @ a
                                                                                                                        (Tensor.aSymTensor4
                                                                                                                           @ n8
                                                                                                                           @ n7
                                                                                                                           @ n6
                                                                                                                           @ n5
                                                                                                                           @ n4
                                                                                                                           @ n3
                                                                                                                           @ n2
                                                                                                                           @ n1)
                                                                                                                        (go13
                                                                                                                           (GHC.Types.[]
                                                                                                                              @ (Index.Index
                                                                                                                                   n1
                                                                                                                                   n2
                                                                                                                                   n3
                                                                                                                                   n4
                                                                                                                                   n5
                                                                                                                                   n6
                                                                                                                                   n7
                                                                                                                                   n8,
                                                                                                                                 a))
                                                                                                                           ww) #)) -}
3907440065a4b5e56c282f0fba1005c5
  type Rank =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
ba59d8983dc93fba3a30d24b40148bfb
  type role Tensor nominal nominal nominal nominal nominal nominal nominal nominal representational
  data Tensor (n1 :: GHC.Types.Nat)
              (n2 :: GHC.Types.Nat)
              (n3 :: GHC.Types.Nat)
              (n4 :: GHC.Types.Nat)
              (n5 :: GHC.Types.Nat)
              (n6 :: GHC.Types.Nat)
              (n7 :: GHC.Types.Nat)
              (n8 :: GHC.Types.Nat)
              a
    = Tensor (Data.Map.Internal.Map
                (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
f1917acd44f3acdb58fa73f4c6e2a198
  aSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$waSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
583b6c7a910309ce224966b7f1b018ea
  aSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
66a203de9553546e7e419558a68189fc
  aSymTensor2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
c924876cac60357229a10a22ef80de34
  aSymTensor3 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
359e87e07a1ffd6830c5f417c17d20e9
  aSymTensor4 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
79b7386f8758e6b9d5855dc55e571666
  blockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U,U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wblockSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
05e3f745e02398eea41447425ac4ca46
  cyclicSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 let {
                   lvl19 :: a -> (a -> a) -> a -> a
                     {- Arity: 3, Strictness: <L,U><C(S),1*C1(U)><L,U>,
                        Unfolding: InlineRule (3, True, False)
                                   (\ (ds :: a) (ds1 :: a -> a)[OneShot] (v :: a)[OneShot] ->
                                    ds1
                                      ({__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.+
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  $dNum
                                                                                                                                                                                                  v
                                                                                                                                                                                                  ds)) -}
                   = \ (ds :: a) (ds1 :: a -> a)[OneShot] (v :: a)[OneShot] ->
                     ds1
                       ({__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.+
                                                                                                                                                                                   @ a
                                                                                                                                                                                   $dNum
                                                                                                                                                                                   v
                                                                                                                                                                                   ds)
                 } in
                 let {
                   lvl20 :: a
                   = {__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.fromInteger
                                                                                                                                                                                @ a
                                                                                                                                                                                $dNum
                                                                                                                                                                                Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl21 :: a
                   = {__scc {main:Tensor.cyclicSymTensor} False True} GHC.Num.fromInteger
                                                                        @ a
                                                                        $dNum
                                                                        Tensor.aSymTensor2
                 } in
                 \ (i :: GHC.Types.Int)
                   (list :: [GHC.Types.Int])
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.cyclicSymTensor} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                 let {
                                                                   ds1 :: Data.Map.Internal.Map
                                                                            (Index.Index
                                                                               n1
                                                                               n2
                                                                               n3
                                                                               n4
                                                                               n5
                                                                               n6
                                                                               n7
                                                                               n8)
                                                                            a
                                                                   = let {
                                                                       g :: Index.Index
                                                                              n1
                                                                              n2
                                                                              n3
                                                                              n4
                                                                              n5
                                                                              n6
                                                                              n7
                                                                              n8
                                                                            -> a -> a
                                                                       = let {
                                                                           cIndsF :: Index.Index
                                                                                       n1
                                                                                       n2
                                                                                       n3
                                                                                       n4
                                                                                       n5
                                                                                       n6
                                                                                       n7
                                                                                       n8
                                                                                     -> [Index.Index
                                                                                           n1
                                                                                           n2
                                                                                           n3
                                                                                           n4
                                                                                           n5
                                                                                           n6
                                                                                           n7
                                                                                           n8]
                                                                           = {__scc {main:Tensor.cyclicSymTensor.cIndsF} True True} Index.cyclicSwapIndex
                                                                                                                                      @ n1
                                                                                                                                      @ n2
                                                                                                                                      @ n3
                                                                                                                                      @ n4
                                                                                                                                      @ n5
                                                                                                                                      @ n6
                                                                                                                                      @ n7
                                                                                                                                      @ n8
                                                                                                                                      i
                                                                                                                                      list
                                                                         } in
                                                                         letrec {
                                                                           go :: [(Index.Uinds_20
                                                                                     n1,
                                                                                   Index.Linds_20
                                                                                     n2,
                                                                                   Index.Uinds_19
                                                                                     n3,
                                                                                   Index.Linds_19
                                                                                     n4,
                                                                                   Index.Uinds_9 n5,
                                                                                   Index.Linds_9 n6,
                                                                                   Index.Uinds_3 n7,
                                                                                   Index.Linds_3
                                                                                     n8)]
                                                                                 -> a -> a
                                                                             {- Arity: 1,
                                                                                Strictness: <S,1*U> -}
                                                                           = \ (ds2 :: [(Index.Uinds_20
                                                                                           n1,
                                                                                         Index.Linds_20
                                                                                           n2,
                                                                                         Index.Uinds_19
                                                                                           n3,
                                                                                         Index.Linds_19
                                                                                           n4,
                                                                                         Index.Uinds_9
                                                                                           n5,
                                                                                         Index.Linds_9
                                                                                           n6,
                                                                                         Index.Uinds_3
                                                                                           n7,
                                                                                         Index.Linds_3
                                                                                           n8)]) ->
                                                                             case ds2 of wild1 {
                                                                               [] -> GHC.Base.id @ a
                                                                               : y ys
                                                                               -> ({__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} lvl19)
                                                                                    (({__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} Data.Map.Internal.!
                                                                                                                                                                                                @ (Index.Index
                                                                                                                                                                                                     n1
                                                                                                                                                                                                     n2
                                                                                                                                                                                                     n3
                                                                                                                                                                                                     n4
                                                                                                                                                                                                     n5
                                                                                                                                                                                                     n6
                                                                                                                                                                                                     n7
                                                                                                                                                                                                     n8)
                                                                                                                                                                                                @ a
                                                                                                                                                                                                (Tensor.aSymTensor3
                                                                                                                                                                                                   @ n1
                                                                                                                                                                                                   @ n2
                                                                                                                                                                                                   @ n3
                                                                                                                                                                                                   @ n4
                                                                                                                                                                                                   @ n5
                                                                                                                                                                                                   @ n6
                                                                                                                                                                                                   @ n7
                                                                                                                                                                                                   @ n8)
                                                                                                                                                                                                map1)
                                                                                       y)
                                                                                    (go ys) }
                                                                         } in
                                                                         {__scc {main:Tensor.cyclicSymTensor.g} True False} \ (k :: Index.Index
                                                                                                                                      n1
                                                                                                                                      n2
                                                                                                                                      n3
                                                                                                                                      n4
                                                                                                                                      n5
                                                                                                                                      n6
                                                                                                                                      n7
                                                                                                                                      n8)
                                                                                                                              (a1 :: a)[OneShot] ->
                                                                                                                            {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} True True} go
                                                                                                                                                                                                                                     (cIndsF
                                                                                                                                                                                                                                        k)
                                                                                                                                                                                                                                     lvl20
                                                                     } in
                                                                     {__scc {main:Tensor.cyclicSymTensor.map2} True True} Data.Map.Strict.Internal.mapWithKey
                                                                                                                            @ (Index.Index
                                                                                                                                 n1
                                                                                                                                 n2
                                                                                                                                 n3
                                                                                                                                 n4
                                                                                                                                 n5
                                                                                                                                 n6
                                                                                                                                 n7
                                                                                                                                 n8)
                                                                                                                            @ a
                                                                                                                            @ a
                                                                                                                            g
                                                                                                                            map1
                                                                 } in
                                                                 let {
                                                                   a1 :: a
                                                                   = GHC.Real./
                                                                       @ a
                                                                       $dFractional
                                                                       lvl21
                                                                       ({__scc {main:Tensor.cyclicSymTensor.fac} True True} GHC.Num.fromInteger
                                                                                                                              @ a
                                                                                                                              $dNum
                                                                                                                              (case GHC.List.$wlenAcc
                                                                                                                                      @ GHC.Types.Int
                                                                                                                                      list
                                                                                                                                      0# of ww2 { DEFAULT ->
                                                                                                                               case Tensor.$w$sfactorial
                                                                                                                                      ww2 of ww { DEFAULT ->
                                                                                                                               GHC.Integer.Type.smallInteger
                                                                                                                                 ww } }))
                                                                 } in
                                                                 {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                   @ n1
                                                                                                                                                                                                   @ n2
                                                                                                                                                                                                   @ n3
                                                                                                                                                                                                   @ n4
                                                                                                                                                                                                   @ n5
                                                                                                                                                                                                   @ n6
                                                                                                                                                                                                   @ n7
                                                                                                                                                                                                   @ n8
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   (let {
                                                                                                                                                                                                      f :: a
                                                                                                                                                                                                           -> a
                                                                                                                                                                                                      = GHC.Num.*
                                                                                                                                                                                                          @ a
                                                                                                                                                                                                          $dNum
                                                                                                                                                                                                          a1
                                                                                                                                                                                                    } in
                                                                                                                                                                                                    {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                            @ a
                                                                                                                                                                                                                                            @ a
                                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                                 n1
                                                                                                                                                                                                                                                 n2
                                                                                                                                                                                                                                                 n3
                                                                                                                                                                                                                                                 n4
                                                                                                                                                                                                                                                 n5
                                                                                                                                                                                                                                                 n6
                                                                                                                                                                                                                                                 n7
                                                                                                                                                                                                                                                 n8)
                                                                                                                                                                                                                                            f
                                                                                                                                                                                                                                            ds1) }) -}
292c410335a6ffc464f1056e5ce9d82a
  cyclicSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0379f22af9aa12ee05e7aed7c7bd5a81
  evalFullTensor ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.evalFullTensor} True True} case ds of wild { Tensor.Tensor m ->
                                                                Data.Map.Internal.assocs
                                                                  @ (Index.Index
                                                                       n1 n2 n3 n4 n5 n6 n7 n8)
                                                                  @ a
                                                                  m }) -}
2f36a2ff81f7604c027f06fc146e24a8
  evalTensorVals :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.evalTensorVals} True True} case ds of wild { Tensor.Tensor m ->
                                                                Data.Map.Internal.elems_go
                                                                  @ (Index.Uinds_20 n1,
                                                                     Index.Linds_20 n2,
                                                                     Index.Uinds_19 n3,
                                                                     Index.Linds_19 n4,
                                                                     Index.Uinds_9 n5,
                                                                     Index.Linds_9 n6,
                                                                     Index.Uinds_3 n7,
                                                                     Index.Linds_3 n8)
                                                                  @ a
                                                                  (GHC.Types.[] @ a)
                                                                  m }) -}
5d7717b9dfac2753999b3872ccb2f237
  getVal ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl19 :: a
                   = {__scc {main:Tensor.getVal} False True} GHC.Num.fromInteger
                                                               @ a
                                                               $dNum
                                                               Tensor.cyclicSymTensor1
                 } in
                 \ (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 {__scc {main:Tensor.getVal} True True} case ds of wild { Tensor.Tensor map1 ->
                                                        case Data.Map.Internal.member
                                                               @ (Index.Index
                                                                    n1 n2 n3 n4 n5 n6 n7 n8)
                                                               @ a
                                                               (Tensor.aSymTensor3
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8)
                                                               ind
                                                               map1 of wild1 {
                                                          GHC.Types.False -> lvl19
                                                          GHC.Types.True
                                                          -> Data.Map.Internal.find
                                                               @ (Index.Index
                                                                    n1 n2 n3 n4 n5 n6 n7 n8)
                                                               @ a
                                                               (Tensor.aSymTensor3
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8)
                                                               ind
                                                               map1 } }) -}
c00fbf3ab3d5e4cdb06572a3b1d6edbc
  mkTensorfromF ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8, GHC.Num.Num a,
     GHC.Classes.Eq a) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U(A,A,A,A,A,A,1*C1(U))><L,U(A,C(C1(U)))>,
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dKnownNat :: GHC.TypeNats.KnownNat n1)
                   ($dKnownNat1 :: GHC.TypeNats.KnownNat n2)
                   ($dKnownNat2 :: GHC.TypeNats.KnownNat n3)
                   ($dKnownNat3 :: GHC.TypeNats.KnownNat n4)
                   ($dKnownNat4 :: GHC.TypeNats.KnownNat n5)
                   ($dKnownNat5 :: GHC.TypeNats.KnownNat n6)
                   ($dKnownNat6 :: GHC.TypeNats.KnownNat n7)
                   ($dKnownNat7 :: GHC.TypeNats.KnownNat n8)
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 let {
                   ds :: a
                   = {__scc {main:Tensor.mkTensorfromF} False True} GHC.Num.fromInteger
                                                                      @ a
                                                                      $dNum
                                                                      Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl19 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds) -}
                   = \ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds
                 } in
                 \ (rank :: Tensor.Rank)
                   (f :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 {__scc {main:Tensor.mkTensorfromF} True False} Tensor.Tensor
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8
                                                                  @ a
                                                                  ({__scc {main:Tensor.mkTensorfromF} False True} let {
                                                                                                                    indList :: [Index.Index
                                                                                                                                  n1
                                                                                                                                  n2
                                                                                                                                  n3
                                                                                                                                  n4
                                                                                                                                  n5
                                                                                                                                  n6
                                                                                                                                  n7
                                                                                                                                  n8]
                                                                                                                    = {__scc {main:Tensor.mkTensorfromF.indList} True True} Tensor.tensorIndList
                                                                                                                                                                              @ n1
                                                                                                                                                                              @ n2
                                                                                                                                                                              @ n3
                                                                                                                                                                              @ n4
                                                                                                                                                                              @ n5
                                                                                                                                                                              @ n6
                                                                                                                                                                              @ n7
                                                                                                                                                                              @ n8
                                                                                                                                                                              $dKnownNat
                                                                                                                                                                              $dKnownNat1
                                                                                                                                                                              $dKnownNat2
                                                                                                                                                                              $dKnownNat3
                                                                                                                                                                              $dKnownNat4
                                                                                                                                                                              $dKnownNat5
                                                                                                                                                                              $dKnownNat6
                                                                                                                                                                              $dKnownNat7
                                                                                                                                                                              rank
                                                                                                                  } in
                                                                                                                  Data.Map.Internal.filterWithKey
                                                                                                                    @ (Index.Index
                                                                                                                         n1
                                                                                                                         n2
                                                                                                                         n3
                                                                                                                         n4
                                                                                                                         n5
                                                                                                                         n6
                                                                                                                         n7
                                                                                                                         n8)
                                                                                                                    @ a
                                                                                                                    lvl19
                                                                                                                    (Data.Map.Strict.Internal.fromList
                                                                                                                       @ (Index.Index
                                                                                                                            n1
                                                                                                                            n2
                                                                                                                            n3
                                                                                                                            n4
                                                                                                                            n5
                                                                                                                            n6
                                                                                                                            n7
                                                                                                                            n8)
                                                                                                                       @ a
                                                                                                                       (Tensor.aSymTensor3
                                                                                                                          @ n1
                                                                                                                          @ n2
                                                                                                                          @ n3
                                                                                                                          @ n4
                                                                                                                          @ n5
                                                                                                                          @ n6
                                                                                                                          @ n7
                                                                                                                          @ n8)
                                                                                                                       (GHC.List.zip
                                                                                                                          @ (Index.Uinds_20
                                                                                                                               n1,
                                                                                                                             Index.Linds_20
                                                                                                                               n2,
                                                                                                                             Index.Uinds_19
                                                                                                                               n3,
                                                                                                                             Index.Linds_19
                                                                                                                               n4,
                                                                                                                             Index.Uinds_9
                                                                                                                               n5,
                                                                                                                             Index.Linds_9
                                                                                                                               n6,
                                                                                                                             Index.Uinds_3
                                                                                                                               n7,
                                                                                                                             Index.Linds_3
                                                                                                                               n8)
                                                                                                                          @ a
                                                                                                                          indList
                                                                                                                          ({__scc {main:Tensor.mkTensorfromF.valueList} True True} GHC.Base.map
                                                                                                                                                                                     @ (Index.Uinds_20
                                                                                                                                                                                          n1,
                                                                                                                                                                                        Index.Linds_20
                                                                                                                                                                                          n2,
                                                                                                                                                                                        Index.Uinds_19
                                                                                                                                                                                          n3,
                                                                                                                                                                                        Index.Linds_19
                                                                                                                                                                                          n4,
                                                                                                                                                                                        Index.Uinds_9
                                                                                                                                                                                          n5,
                                                                                                                                                                                        Index.Linds_9
                                                                                                                                                                                          n6,
                                                                                                                                                                                        Index.Uinds_3
                                                                                                                                                                                          n7,
                                                                                                                                                                                        Index.Linds_3
                                                                                                                                                                                          n8)
                                                                                                                                                                                     @ a
                                                                                                                                                                                     f
                                                                                                                                                                                     indList))))) -}
3907a554d713afd9f3a77638649cd8df
  mkTensorfromFZeros ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (10, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: GHC.TypeNats.KnownNat n3)
                   (w3 :: GHC.TypeNats.KnownNat n4)
                   (w4 :: GHC.TypeNats.KnownNat n5)
                   (w5 :: GHC.TypeNats.KnownNat n6)
                   (w6 :: GHC.TypeNats.KnownNat n7)
                   (w7 :: GHC.TypeNats.KnownNat n8)
                   (w8 :: Tensor.Rank)
                   (w9 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                       @ n1
                                                                       @ n2
                                                                       @ n3
                                                                       @ n4
                                                                       @ n5
                                                                       @ n6
                                                                       @ n7
                                                                       @ n8
                                                                       @ a
                                                                       ({__scc {main:Tensor.mkTensorfromFZeros} False True} let {
                                                                                                                              indList :: [Index.Index
                                                                                                                                            n1
                                                                                                                                            n2
                                                                                                                                            n3
                                                                                                                                            n4
                                                                                                                                            n5
                                                                                                                                            n6
                                                                                                                                            n7
                                                                                                                                            n8]
                                                                                                                              = {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                                             @ n1
                                                                                                                                                                                             @ n2
                                                                                                                                                                                             @ n3
                                                                                                                                                                                             @ n4
                                                                                                                                                                                             @ n5
                                                                                                                                                                                             @ n6
                                                                                                                                                                                             @ n7
                                                                                                                                                                                             @ n8
                                                                                                                                                                                             w
                                                                                                                                                                                             w1
                                                                                                                                                                                             w2
                                                                                                                                                                                             w3
                                                                                                                                                                                             w4
                                                                                                                                                                                             w5
                                                                                                                                                                                             w6
                                                                                                                                                                                             w7
                                                                                                                                                                                             w8
                                                                                                                            } in
                                                                                                                            Data.Map.Strict.Internal.fromList
                                                                                                                              @ (Index.Index
                                                                                                                                   n1
                                                                                                                                   n2
                                                                                                                                   n3
                                                                                                                                   n4
                                                                                                                                   n5
                                                                                                                                   n6
                                                                                                                                   n7
                                                                                                                                   n8)
                                                                                                                              @ a
                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                 @ n1
                                                                                                                                 @ n2
                                                                                                                                 @ n3
                                                                                                                                 @ n4
                                                                                                                                 @ n5
                                                                                                                                 @ n6
                                                                                                                                 @ n7
                                                                                                                                 @ n8)
                                                                                                                              (GHC.List.zip
                                                                                                                                 @ (Index.Uinds_20
                                                                                                                                      n1,
                                                                                                                                    Index.Linds_20
                                                                                                                                      n2,
                                                                                                                                    Index.Uinds_19
                                                                                                                                      n3,
                                                                                                                                    Index.Linds_19
                                                                                                                                      n4,
                                                                                                                                    Index.Uinds_9
                                                                                                                                      n5,
                                                                                                                                    Index.Linds_9
                                                                                                                                      n6,
                                                                                                                                    Index.Uinds_3
                                                                                                                                      n7,
                                                                                                                                    Index.Linds_3
                                                                                                                                      n8)
                                                                                                                                 @ a
                                                                                                                                 indList
                                                                                                                                 ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True True} GHC.Base.map
                                                                                                                                                                                                 @ (Index.Uinds_20
                                                                                                                                                                                                      n1,
                                                                                                                                                                                                    Index.Linds_20
                                                                                                                                                                                                      n2,
                                                                                                                                                                                                    Index.Uinds_19
                                                                                                                                                                                                      n3,
                                                                                                                                                                                                    Index.Linds_19
                                                                                                                                                                                                      n4,
                                                                                                                                                                                                    Index.Uinds_9
                                                                                                                                                                                                      n5,
                                                                                                                                                                                                    Index.Linds_9
                                                                                                                                                                                                      n6,
                                                                                                                                                                                                    Index.Uinds_3
                                                                                                                                                                                                      n7,
                                                                                                                                                                                                    Index.Linds_3
                                                                                                                                                                                                      n8)
                                                                                                                                                                                                 @ a
                                                                                                                                                                                                 w9
                                                                                                                                                                                                 indList)))) -}
a809d5f6237d18a8daa7cd4ba268fa77
  mkTensorfromList ::
    [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (l :: [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]) ->
                 {__scc {main:Tensor.mkTensorfromList} True False} Tensor.Tensor
                                                                     @ n1
                                                                     @ n2
                                                                     @ n3
                                                                     @ n4
                                                                     @ n5
                                                                     @ n6
                                                                     @ n7
                                                                     @ n8
                                                                     @ a
                                                                     ({__scc {main:Tensor.mkTensorfromList} False True} Data.Map.Strict.Internal.fromList
                                                                                                                          @ (Index.Index
                                                                                                                               n1
                                                                                                                               n2
                                                                                                                               n3
                                                                                                                               n4
                                                                                                                               n5
                                                                                                                               n6
                                                                                                                               n7
                                                                                                                               n8)
                                                                                                                          @ a
                                                                                                                          (Tensor.aSymTensor4
                                                                                                                             @ n8
                                                                                                                             @ n7
                                                                                                                             @ n6
                                                                                                                             @ n5
                                                                                                                             @ n4
                                                                                                                             @ n3
                                                                                                                             @ n2
                                                                                                                             @ n1)
                                                                                                                          l)) -}
ae3ed25c63d2361d985a1bdb6f08f15a
  symTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wsymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
ffa73e4d3d0d9f351f17926e90320c54
  tensorAdd ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A,A,A,A,A,A)><S,1*U(1*U)><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 let {
                   lvl19 :: a -> a -> a
                   = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+ @ a w
                 } in
                 {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                              @ n1
                                                              @ n2
                                                              @ n3
                                                              @ n4
                                                              @ n5
                                                              @ n6
                                                              @ n7
                                                              @ n8
                                                              @ a
                                                              ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                            @ (Index.Index
                                                                                                                 n1
                                                                                                                 n2
                                                                                                                 n3
                                                                                                                 n4
                                                                                                                 n5
                                                                                                                 n6
                                                                                                                 n7
                                                                                                                 n8)
                                                                                                            @ a
                                                                                                            (Tensor.aSymTensor3
                                                                                                               @ n1
                                                                                                               @ n2
                                                                                                               @ n3
                                                                                                               @ n4
                                                                                                               @ n5
                                                                                                               @ n6
                                                                                                               @ n7
                                                                                                               @ n8)
                                                                                                            lvl19
                                                                                                            ww1
                                                                                                            ww3) } }) -}
8e1f794854d89bc2c6d3671575591521
  tensorContractWith_1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
0983c655582f1f0e64bde1a557500f84
  tensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_19
                        @ n3
                        @ n4
                        @ a
                        @ n1
                        @ n2
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
f5b2dabd16345e8ee998f4d55afc7785
  tensorContractWith_2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
a25204e5f61a8dd7bfafd0d945b634e9
  tensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_20
                        @ n1
                        @ n2
                        @ a
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
60512091e70a83c1aec3d9e0e69c4150
  tensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_3
                        @ n7
                        @ n8
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
fd53639966fdb5f8804d2e0bc1f03852
  tensorContractWith_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
2b36f7f16c0f3479abe15dbe357bc93b
  tensorContractWith_5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
17704f82cb10b47cfa0e901d1235c311
  tensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_9
                        @ n5
                        @ n6
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
23a3d620356d1f45f9dfcb6a9f600aa5
  tensorIndList ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank -> [Index.Index n1 n2 n3 n4 n5 n6 n7 n8]
  {- Arity: 9,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S(S(S)LLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))> -}
548434962972d37edcccd79688b96ede
  tensorProductNew ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 a
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         a
  {- Arity: 2,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,C(U))><L,U(A,C(C1(U)))>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 let {
                   ds :: a
                   = {__scc {main:Tensor.tensorProductNew} False True} {__scc {main:Tensor.tensorProductNew.l2} False True} GHC.Num.fromInteger
                                                                                                                              @ a
                                                                                                                              $dNum
                                                                                                                              Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl19 :: Index.Index m1 m2 m3 m4 m5 m6 m7 m8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds1 :: Index.Index m1 m2 m3 m4 m5 m6 m7 m8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds) -}
                   = \ (ds1 :: Index.Index m1 m2 m3 m4 m5 m6 m7 m8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds
                 } in
                 let {
                   ds1 :: a
                   = {__scc {main:Tensor.tensorProductNew} False True} {__scc {main:Tensor.tensorProductNew.l1} False True} GHC.Num.fromInteger
                                                                                                                              @ a
                                                                                                                              $dNum
                                                                                                                              Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl20 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds2 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds1) -}
                   = \ (ds2 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds1
                 } in
                 \ (ds2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ds3 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 a) ->
                 {__scc {main:Tensor.tensorProductNew} True True} case ds2 of wild { Tensor.Tensor map1 ->
                                                                  case ds3 of wild1 { Tensor.Tensor map2 ->
                                                                  Tensor.Tensor
                                                                    @ (n1 GHC.TypeNats.+ m1)
                                                                    @ (n2 GHC.TypeNats.+ m2)
                                                                    @ (n3 GHC.TypeNats.+ m3)
                                                                    @ (n4 GHC.TypeNats.+ m4)
                                                                    @ (n5 GHC.TypeNats.+ m5)
                                                                    @ (n6 GHC.TypeNats.+ m6)
                                                                    @ (n7 GHC.TypeNats.+ m7)
                                                                    @ (n8 GHC.TypeNats.+ m8)
                                                                    @ a
                                                                    (let {
                                                                       l2 :: [(Index.Index
                                                                                 m1
                                                                                 m2
                                                                                 m3
                                                                                 m4
                                                                                 m5
                                                                                 m6
                                                                                 m7
                                                                                 m8,
                                                                               a)]
                                                                       = {__scc {main:Tensor.tensorProductNew.l2} True True} Data.Map.Internal.$fDataMap_go
                                                                                                                               @ (Index.Uinds_20
                                                                                                                                    m1,
                                                                                                                                  Index.Linds_20
                                                                                                                                    m2,
                                                                                                                                  Index.Uinds_19
                                                                                                                                    m3,
                                                                                                                                  Index.Linds_19
                                                                                                                                    m4,
                                                                                                                                  Index.Uinds_9
                                                                                                                                    m5,
                                                                                                                                  Index.Linds_9
                                                                                                                                    m6,
                                                                                                                                  Index.Uinds_3
                                                                                                                                    m7,
                                                                                                                                  Index.Linds_3
                                                                                                                                    m8)
                                                                                                                               @ a
                                                                                                                               (GHC.Types.[]
                                                                                                                                  @ ((Index.Uinds_20
                                                                                                                                        m1,
                                                                                                                                      Index.Linds_20
                                                                                                                                        m2,
                                                                                                                                      Index.Uinds_19
                                                                                                                                        m3,
                                                                                                                                      Index.Linds_19
                                                                                                                                        m4,
                                                                                                                                      Index.Uinds_9
                                                                                                                                        m5,
                                                                                                                                      Index.Linds_9
                                                                                                                                        m6,
                                                                                                                                      Index.Uinds_3
                                                                                                                                        m7,
                                                                                                                                      Index.Linds_3
                                                                                                                                        m8),
                                                                                                                                     a))
                                                                                                                               (Data.Map.Internal.filterWithKey
                                                                                                                                  @ (Index.Index
                                                                                                                                       m1
                                                                                                                                       m2
                                                                                                                                       m3
                                                                                                                                       m4
                                                                                                                                       m5
                                                                                                                                       m6
                                                                                                                                       m7
                                                                                                                                       m8)
                                                                                                                                  @ a
                                                                                                                                  lvl19
                                                                                                                                  map2)
                                                                     } in
                                                                     let {
                                                                       l1 :: [(Index.Index
                                                                                 n1
                                                                                 n2
                                                                                 n3
                                                                                 n4
                                                                                 n5
                                                                                 n6
                                                                                 n7
                                                                                 n8,
                                                                               a)]
                                                                       = {__scc {main:Tensor.tensorProductNew.l1} True True} Data.Map.Internal.$fDataMap_go
                                                                                                                               @ (Index.Uinds_20
                                                                                                                                    n1,
                                                                                                                                  Index.Linds_20
                                                                                                                                    n2,
                                                                                                                                  Index.Uinds_19
                                                                                                                                    n3,
                                                                                                                                  Index.Linds_19
                                                                                                                                    n4,
                                                                                                                                  Index.Uinds_9
                                                                                                                                    n5,
                                                                                                                                  Index.Linds_9
                                                                                                                                    n6,
                                                                                                                                  Index.Uinds_3
                                                                                                                                    n7,
                                                                                                                                  Index.Linds_3
                                                                                                                                    n8)
                                                                                                                               @ a
                                                                                                                               (GHC.Types.[]
                                                                                                                                  @ ((Index.Uinds_20
                                                                                                                                        n1,
                                                                                                                                      Index.Linds_20
                                                                                                                                        n2,
                                                                                                                                      Index.Uinds_19
                                                                                                                                        n3,
                                                                                                                                      Index.Linds_19
                                                                                                                                        n4,
                                                                                                                                      Index.Uinds_9
                                                                                                                                        n5,
                                                                                                                                      Index.Linds_9
                                                                                                                                        n6,
                                                                                                                                      Index.Uinds_3
                                                                                                                                        n7,
                                                                                                                                      Index.Linds_3
                                                                                                                                        n8),
                                                                                                                                     a))
                                                                                                                               (Data.Map.Internal.filterWithKey
                                                                                                                                  @ (Index.Index
                                                                                                                                       n1
                                                                                                                                       n2
                                                                                                                                       n3
                                                                                                                                       n4
                                                                                                                                       n5
                                                                                                                                       n6
                                                                                                                                       n7
                                                                                                                                       n8)
                                                                                                                                  @ a
                                                                                                                                  lvl20
                                                                                                                                  map1)
                                                                     } in
                                                                     Data.Map.Strict.Internal.fromList
                                                                       @ (Index.Index
                                                                            (n1 GHC.TypeNats.+ m1)
                                                                            (n2 GHC.TypeNats.+ m2)
                                                                            (n3 GHC.TypeNats.+ m3)
                                                                            (n4 GHC.TypeNats.+ m4)
                                                                            (n5 GHC.TypeNats.+ m5)
                                                                            (n6 GHC.TypeNats.+ m6)
                                                                            (n7 GHC.TypeNats.+ m7)
                                                                            (n8 GHC.TypeNats.+ m8))
                                                                       @ a
                                                                       (Tensor.tensorProductNew1
                                                                          @ n1
                                                                          @ m1
                                                                          @ n2
                                                                          @ m2
                                                                          @ n3
                                                                          @ m3
                                                                          @ n4
                                                                          @ m4
                                                                          @ n5
                                                                          @ m5
                                                                          @ n6
                                                                          @ m6
                                                                          @ n7
                                                                          @ m7
                                                                          @ n8
                                                                          @ m8)
                                                                       ({__scc {main:Tensor.tensorProductNew.newList} True True} letrec {
                                                                                                                                   go :: [(Index.Index
                                                                                                                                             n1
                                                                                                                                             n2
                                                                                                                                             n3
                                                                                                                                             n4
                                                                                                                                             n5
                                                                                                                                             n6
                                                                                                                                             n7
                                                                                                                                             n8,
                                                                                                                                           a)]
                                                                                                                                         -> [(Index.Index
                                                                                                                                                (n1
                                                                                                                                                 GHC.TypeNats.+ m1)
                                                                                                                                                (n2
                                                                                                                                                 GHC.TypeNats.+ m2)
                                                                                                                                                (n3
                                                                                                                                                 GHC.TypeNats.+ m3)
                                                                                                                                                (n4
                                                                                                                                                 GHC.TypeNats.+ m4)
                                                                                                                                                (n5
                                                                                                                                                 GHC.TypeNats.+ m5)
                                                                                                                                                (n6
                                                                                                                                                 GHC.TypeNats.+ m6)
                                                                                                                                                (n7
                                                                                                                                                 GHC.TypeNats.+ m7)
                                                                                                                                                (n8
                                                                                                                                                 GHC.TypeNats.+ m8),
                                                                                                                                              a)]
                                                                                                                                     {- Arity: 1,
                                                                                                                                        Strictness: <S,1*U> -}
                                                                                                                                   = \ (ds4 :: [(Index.Index
                                                                                                                                                   n1
                                                                                                                                                   n2
                                                                                                                                                   n3
                                                                                                                                                   n4
                                                                                                                                                   n5
                                                                                                                                                   n6
                                                                                                                                                   n7
                                                                                                                                                   n8,
                                                                                                                                                 a)]) ->
                                                                                                                                     case ds4 of wild2 {
                                                                                                                                       []
                                                                                                                                       -> GHC.Types.[]
                                                                                                                                            @ (Index.Index
                                                                                                                                                 (n1
                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                 (n2
                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                 (n3
                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                 (n4
                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                 (n5
                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                 (n6
                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                 (n7
                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                 (n8
                                                                                                                                                  GHC.TypeNats.+ m8),
                                                                                                                                               a)
                                                                                                                                       : y ys
                                                                                                                                       -> let {
                                                                                                                                            ys1 :: [(Index.Index
                                                                                                                                                       (n1
                                                                                                                                                        GHC.TypeNats.+ m1)
                                                                                                                                                       (n2
                                                                                                                                                        GHC.TypeNats.+ m2)
                                                                                                                                                       (n3
                                                                                                                                                        GHC.TypeNats.+ m3)
                                                                                                                                                       (n4
                                                                                                                                                        GHC.TypeNats.+ m4)
                                                                                                                                                       (n5
                                                                                                                                                        GHC.TypeNats.+ m5)
                                                                                                                                                       (n6
                                                                                                                                                        GHC.TypeNats.+ m6)
                                                                                                                                                       (n7
                                                                                                                                                        GHC.TypeNats.+ m7)
                                                                                                                                                       (n8
                                                                                                                                                        GHC.TypeNats.+ m8),
                                                                                                                                                     a)]
                                                                                                                                            = go
                                                                                                                                                ys
                                                                                                                                          } in
                                                                                                                                          let {
                                                                                                                                            ds5 :: (Index.Index
                                                                                                                                                      m1
                                                                                                                                                      m2
                                                                                                                                                      m3
                                                                                                                                                      m4
                                                                                                                                                      m5
                                                                                                                                                      m6
                                                                                                                                                      m7
                                                                                                                                                      m8,
                                                                                                                                                    a)
                                                                                                                                                   -> (Index.Index
                                                                                                                                                         (n1
                                                                                                                                                          GHC.TypeNats.+ m1)
                                                                                                                                                         (n2
                                                                                                                                                          GHC.TypeNats.+ m2)
                                                                                                                                                         (n3
                                                                                                                                                          GHC.TypeNats.+ m3)
                                                                                                                                                         (n4
                                                                                                                                                          GHC.TypeNats.+ m4)
                                                                                                                                                         (n5
                                                                                                                                                          GHC.TypeNats.+ m5)
                                                                                                                                                         (n6
                                                                                                                                                          GHC.TypeNats.+ m6)
                                                                                                                                                         (n7
                                                                                                                                                          GHC.TypeNats.+ m7)
                                                                                                                                                         (n8
                                                                                                                                                          GHC.TypeNats.+ m8),
                                                                                                                                                       a)
                                                                                                                                            = {__scc {main:Tensor.tensorProductNew.newList.\} True False} \ (ds6 :: (Index.Index
                                                                                                                                                                                                                       m1
                                                                                                                                                                                                                       m2
                                                                                                                                                                                                                       m3
                                                                                                                                                                                                                       m4
                                                                                                                                                                                                                       m5
                                                                                                                                                                                                                       m6
                                                                                                                                                                                                                       m7
                                                                                                                                                                                                                       m8,
                                                                                                                                                                                                                     a)) ->
                                                                                                                                                                                                          {__scc {main:Tensor.tensorProductNew.newList.\} False True} {__scc {main:Tensor.tensorProductFNew} True True} case y of wild3 { (,) ind1 val1 ->
                                                                                                                                                                                                                                                                                                                        case ds6 of wild4 { (,) ind2 val2 ->
                                                                                                                                                                                                                                                                                                                        ({__scc {main:Tensor.tensorProductFNew.newInd} True True} Index.combineIndex
                                                                                                                                                                                                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                                                                                                                                                                                                    @ n8
                                                                                                                                                                                                                                                                                                                                                                                    @ m1
                                                                                                                                                                                                                                                                                                                                                                                    @ m2
                                                                                                                                                                                                                                                                                                                                                                                    @ m3
                                                                                                                                                                                                                                                                                                                                                                                    @ m4
                                                                                                                                                                                                                                                                                                                                                                                    @ m5
                                                                                                                                                                                                                                                                                                                                                                                    @ m6
                                                                                                                                                                                                                                                                                                                                                                                    @ m7
                                                                                                                                                                                                                                                                                                                                                                                    @ m8
                                                                                                                                                                                                                                                                                                                                                                                    ind1
                                                                                                                                                                                                                                                                                                                                                                                    ind2,
                                                                                                                                                                                                                                                                                                                         {__scc {main:Tensor.tensorProductFNew.newVal} True True} GHC.Num.*
                                                                                                                                                                                                                                                                                                                                                                                    @ a
                                                                                                                                                                                                                                                                                                                                                                                    $dNum
                                                                                                                                                                                                                                                                                                                                                                                    val1
                                                                                                                                                                                                                                                                                                                                                                                    val2) } }
                                                                                                                                          } in
                                                                                                                                          letrec {
                                                                                                                                            go1 :: [(Index.Index
                                                                                                                                                       m1
                                                                                                                                                       m2
                                                                                                                                                       m3
                                                                                                                                                       m4
                                                                                                                                                       m5
                                                                                                                                                       m6
                                                                                                                                                       m7
                                                                                                                                                       m8,
                                                                                                                                                     a)]
                                                                                                                                                   -> [(Index.Index
                                                                                                                                                          (n1
                                                                                                                                                           GHC.TypeNats.+ m1)
                                                                                                                                                          (n2
                                                                                                                                                           GHC.TypeNats.+ m2)
                                                                                                                                                          (n3
                                                                                                                                                           GHC.TypeNats.+ m3)
                                                                                                                                                          (n4
                                                                                                                                                           GHC.TypeNats.+ m4)
                                                                                                                                                          (n5
                                                                                                                                                           GHC.TypeNats.+ m5)
                                                                                                                                                          (n6
                                                                                                                                                           GHC.TypeNats.+ m6)
                                                                                                                                                          (n7
                                                                                                                                                           GHC.TypeNats.+ m7)
                                                                                                                                                          (n8
                                                                                                                                                           GHC.TypeNats.+ m8),
                                                                                                                                                        a)]
                                                                                                                                              {- Arity: 1,
                                                                                                                                                 Strictness: <S,1*U> -}
                                                                                                                                            = \ (ds6 :: [(Index.Index
                                                                                                                                                            m1
                                                                                                                                                            m2
                                                                                                                                                            m3
                                                                                                                                                            m4
                                                                                                                                                            m5
                                                                                                                                                            m6
                                                                                                                                                            m7
                                                                                                                                                            m8,
                                                                                                                                                          a)]) ->
                                                                                                                                              case ds6 of wild3 {
                                                                                                                                                []
                                                                                                                                                -> ys1
                                                                                                                                                : y1 ys2
                                                                                                                                                -> GHC.Types.:
                                                                                                                                                     @ (Index.Index
                                                                                                                                                          (n1
                                                                                                                                                           GHC.TypeNats.+ m1)
                                                                                                                                                          (n2
                                                                                                                                                           GHC.TypeNats.+ m2)
                                                                                                                                                          (n3
                                                                                                                                                           GHC.TypeNats.+ m3)
                                                                                                                                                          (n4
                                                                                                                                                           GHC.TypeNats.+ m4)
                                                                                                                                                          (n5
                                                                                                                                                           GHC.TypeNats.+ m5)
                                                                                                                                                          (n6
                                                                                                                                                           GHC.TypeNats.+ m6)
                                                                                                                                                          (n7
                                                                                                                                                           GHC.TypeNats.+ m7)
                                                                                                                                                          (n8
                                                                                                                                                           GHC.TypeNats.+ m8),
                                                                                                                                                        a)
                                                                                                                                                     (ds5
                                                                                                                                                        y1)
                                                                                                                                                     (go1
                                                                                                                                                        ys2) }
                                                                                                                                          } in
                                                                                                                                          go1
                                                                                                                                            l2 }
                                                                                                                                 } in
                                                                                                                                 go
                                                                                                                                   l1)) } }) -}
e1892f048c5ce6dc396ae8249cb81bce
  tensorProductNew1 ::
    GHC.Classes.Ord
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fOrdInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fOrdInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fOrdInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fOrdInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fOrdInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fOrdInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fOrdInd @ (n8 GHC.TypeNats.+ m8))) -}
3ceb169d18bc856c3b8ab815fcf92212
  tensorProductNumeric ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 a
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         a
  {- Arity: 2,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,C(U))><L,U(A,C(C1(U)))>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 let {
                   combineF :: forall (n11 :: GHC.Types.Nat) (n12 :: GHC.Types.Nat) (n13 :: GHC.Types.Nat) (n14 :: GHC.Types.Nat) (n15 :: GHC.Types.Nat) (n16 :: GHC.Types.Nat) (n17 :: GHC.Types.Nat) (n18 :: GHC.Types.Nat) (m11 :: GHC.Types.Nat) (m12 :: GHC.Types.Nat) (m13 :: GHC.Types.Nat) (m14 :: GHC.Types.Nat) (m15 :: GHC.Types.Nat) (m16 :: GHC.Types.Nat) (m17 :: GHC.Types.Nat) (m18 :: GHC.Types.Nat).
                               (Index.Index n11 n12 n13 n14 n15 n16 n17 n18, a)
                               -> (Index.Index m11 m12 m13 m14 m15 m16 m17 m18, a)
                               -> (Index.Index
                                     (n11 GHC.TypeNats.+ m11)
                                     (n12 GHC.TypeNats.+ m12)
                                     (n13 GHC.TypeNats.+ m13)
                                     (n14 GHC.TypeNats.+ m14)
                                     (n15 GHC.TypeNats.+ m15)
                                     (n16 GHC.TypeNats.+ m16)
                                     (n17 GHC.TypeNats.+ m17)
                                     (n18 GHC.TypeNats.+ m18),
                                   a)
                   = \ @ n11 :: GHC.Types.Nat
                       @ n12 :: GHC.Types.Nat
                       @ n13 :: GHC.Types.Nat
                       @ n14 :: GHC.Types.Nat
                       @ n15 :: GHC.Types.Nat
                       @ n16 :: GHC.Types.Nat
                       @ n17 :: GHC.Types.Nat
                       @ n18 :: GHC.Types.Nat
                       @ m11 :: GHC.Types.Nat
                       @ m12 :: GHC.Types.Nat
                       @ m13 :: GHC.Types.Nat
                       @ m14 :: GHC.Types.Nat
                       @ m15 :: GHC.Types.Nat
                       @ m16 :: GHC.Types.Nat
                       @ m17 :: GHC.Types.Nat
                       @ m18 :: GHC.Types.Nat ->
                     {__scc {main:Tensor.tensorProductNumeric} False True} {__scc {main:Tensor.tensorProductNumeric.combineF} True False} \ (ds :: (Index.Index
                                                                                                                                                      n11
                                                                                                                                                      n12
                                                                                                                                                      n13
                                                                                                                                                      n14
                                                                                                                                                      n15
                                                                                                                                                      n16
                                                                                                                                                      n17
                                                                                                                                                      n18,
                                                                                                                                                    a))
                                                                                                                                            (ds1 :: (Index.Index
                                                                                                                                                       m11
                                                                                                                                                       m12
                                                                                                                                                       m13
                                                                                                                                                       m14
                                                                                                                                                       m15
                                                                                                                                                       m16
                                                                                                                                                       m17
                                                                                                                                                       m18,
                                                                                                                                                     a)) ->
                                                                                                                                          {__scc {main:Tensor.tensorProductNumeric.combineF} False True} case ds of wild { (,) a1 b ->
                                                                                                                                                                                                         case ds1 of wild1 { (,) c d ->
                                                                                                                                                                                                         {__scc {main:Tensor.tensorProductNumeric.combineF.\} True False} ({__scc {main:Tensor.tensorProductNumeric.combineF.\} False True} Index.combineIndex
                                                                                                                                                                                                                                                                                                                                              @ n11
                                                                                                                                                                                                                                                                                                                                              @ n12
                                                                                                                                                                                                                                                                                                                                              @ n13
                                                                                                                                                                                                                                                                                                                                              @ n14
                                                                                                                                                                                                                                                                                                                                              @ n15
                                                                                                                                                                                                                                                                                                                                              @ n16
                                                                                                                                                                                                                                                                                                                                              @ n17
                                                                                                                                                                                                                                                                                                                                              @ n18
                                                                                                                                                                                                                                                                                                                                              @ m11
                                                                                                                                                                                                                                                                                                                                              @ m12
                                                                                                                                                                                                                                                                                                                                              @ m13
                                                                                                                                                                                                                                                                                                                                              @ m14
                                                                                                                                                                                                                                                                                                                                              @ m15
                                                                                                                                                                                                                                                                                                                                              @ m16
                                                                                                                                                                                                                                                                                                                                              @ m17
                                                                                                                                                                                                                                                                                                                                              @ m18
                                                                                                                                                                                                                                                                                                                                              a1
                                                                                                                                                                                                                                                                                                                                              c,
                                                                                                                                                                                                                                                                           {__scc {main:Tensor.tensorProductNumeric.combineF.\} False True} GHC.Num.*
                                                                                                                                                                                                                                                                                                                                              @ a
                                                                                                                                                                                                                                                                                                                                              $dNum
                                                                                                                                                                                                                                                                                                                                              b
                                                                                                                                                                                                                                                                                                                                              d) } }
                 } in
                 let {
                   ds :: a
                   = {__scc {main:Tensor.tensorProductNumeric} False True} {__scc {main:Tensor.tensorProductNumeric.pairs2} False True} GHC.Num.fromInteger
                                                                                                                                          @ a
                                                                                                                                          $dNum
                                                                                                                                          Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl19 :: Index.Index m1 m2 m3 m4 m5 m6 m7 m8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds1 :: Index.Index m1 m2 m3 m4 m5 m6 m7 m8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds) -}
                   = \ (ds1 :: Index.Index m1 m2 m3 m4 m5 m6 m7 m8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds
                 } in
                 let {
                   ds1 :: a
                   = {__scc {main:Tensor.tensorProductNumeric} False True} {__scc {main:Tensor.tensorProductNumeric.pairs1} False True} GHC.Num.fromInteger
                                                                                                                                          @ a
                                                                                                                                          $dNum
                                                                                                                                          Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl20 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds2 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds1) -}
                   = \ (ds2 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds1
                 } in
                 \ (ds2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ds3 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 a) ->
                 {__scc {main:Tensor.tensorProductNumeric} True True} case ds2 of wild { Tensor.Tensor map1 ->
                                                                      case ds3 of wild1 { Tensor.Tensor map2 ->
                                                                      Tensor.Tensor
                                                                        @ (n1 GHC.TypeNats.+ m1)
                                                                        @ (n2 GHC.TypeNats.+ m2)
                                                                        @ (n3 GHC.TypeNats.+ m3)
                                                                        @ (n4 GHC.TypeNats.+ m4)
                                                                        @ (n5 GHC.TypeNats.+ m5)
                                                                        @ (n6 GHC.TypeNats.+ m6)
                                                                        @ (n7 GHC.TypeNats.+ m7)
                                                                        @ (n8 GHC.TypeNats.+ m8)
                                                                        @ a
                                                                        (let {
                                                                           pairs2 :: [(Index.Index
                                                                                         m1
                                                                                         m2
                                                                                         m3
                                                                                         m4
                                                                                         m5
                                                                                         m6
                                                                                         m7
                                                                                         m8,
                                                                                       a)]
                                                                           = {__scc {main:Tensor.tensorProductNumeric.pairs2} True True} Data.Map.Internal.$fDataMap_go
                                                                                                                                           @ (Index.Uinds_20
                                                                                                                                                m1,
                                                                                                                                              Index.Linds_20
                                                                                                                                                m2,
                                                                                                                                              Index.Uinds_19
                                                                                                                                                m3,
                                                                                                                                              Index.Linds_19
                                                                                                                                                m4,
                                                                                                                                              Index.Uinds_9
                                                                                                                                                m5,
                                                                                                                                              Index.Linds_9
                                                                                                                                                m6,
                                                                                                                                              Index.Uinds_3
                                                                                                                                                m7,
                                                                                                                                              Index.Linds_3
                                                                                                                                                m8)
                                                                                                                                           @ a
                                                                                                                                           (GHC.Types.[]
                                                                                                                                              @ ((Index.Uinds_20
                                                                                                                                                    m1,
                                                                                                                                                  Index.Linds_20
                                                                                                                                                    m2,
                                                                                                                                                  Index.Uinds_19
                                                                                                                                                    m3,
                                                                                                                                                  Index.Linds_19
                                                                                                                                                    m4,
                                                                                                                                                  Index.Uinds_9
                                                                                                                                                    m5,
                                                                                                                                                  Index.Linds_9
                                                                                                                                                    m6,
                                                                                                                                                  Index.Uinds_3
                                                                                                                                                    m7,
                                                                                                                                                  Index.Linds_3
                                                                                                                                                    m8),
                                                                                                                                                 a))
                                                                                                                                           (Data.Map.Internal.filterWithKey
                                                                                                                                              @ (Index.Index
                                                                                                                                                   m1
                                                                                                                                                   m2
                                                                                                                                                   m3
                                                                                                                                                   m4
                                                                                                                                                   m5
                                                                                                                                                   m6
                                                                                                                                                   m7
                                                                                                                                                   m8)
                                                                                                                                              @ a
                                                                                                                                              lvl19
                                                                                                                                              map2)
                                                                         } in
                                                                         let {
                                                                           pairs1 :: [(Index.Index
                                                                                         n1
                                                                                         n2
                                                                                         n3
                                                                                         n4
                                                                                         n5
                                                                                         n6
                                                                                         n7
                                                                                         n8,
                                                                                       a)]
                                                                           = {__scc {main:Tensor.tensorProductNumeric.pairs1} True True} Data.Map.Internal.$fDataMap_go
                                                                                                                                           @ (Index.Uinds_20
                                                                                                                                                n1,
                                                                                                                                              Index.Linds_20
                                                                                                                                                n2,
                                                                                                                                              Index.Uinds_19
                                                                                                                                                n3,
                                                                                                                                              Index.Linds_19
                                                                                                                                                n4,
                                                                                                                                              Index.Uinds_9
                                                                                                                                                n5,
                                                                                                                                              Index.Linds_9
                                                                                                                                                n6,
                                                                                                                                              Index.Uinds_3
                                                                                                                                                n7,
                                                                                                                                              Index.Linds_3
                                                                                                                                                n8)
                                                                                                                                           @ a
                                                                                                                                           (GHC.Types.[]
                                                                                                                                              @ ((Index.Uinds_20
                                                                                                                                                    n1,
                                                                                                                                                  Index.Linds_20
                                                                                                                                                    n2,
                                                                                                                                                  Index.Uinds_19
                                                                                                                                                    n3,
                                                                                                                                                  Index.Linds_19
                                                                                                                                                    n4,
                                                                                                                                                  Index.Uinds_9
                                                                                                                                                    n5,
                                                                                                                                                  Index.Linds_9
                                                                                                                                                    n6,
                                                                                                                                                  Index.Uinds_3
                                                                                                                                                    n7,
                                                                                                                                                  Index.Linds_3
                                                                                                                                                    n8),
                                                                                                                                                 a))
                                                                                                                                           (Data.Map.Internal.filterWithKey
                                                                                                                                              @ (Index.Index
                                                                                                                                                   n1
                                                                                                                                                   n2
                                                                                                                                                   n3
                                                                                                                                                   n4
                                                                                                                                                   n5
                                                                                                                                                   n6
                                                                                                                                                   n7
                                                                                                                                                   n8)
                                                                                                                                              @ a
                                                                                                                                              lvl20
                                                                                                                                              map1)
                                                                         } in
                                                                         {__scc {main:Tensor.tensorProductNumeric.newMap} True True} letrec {
                                                                                                                                       go :: [(Index.Index
                                                                                                                                                 n1
                                                                                                                                                 n2
                                                                                                                                                 n3
                                                                                                                                                 n4
                                                                                                                                                 n5
                                                                                                                                                 n6
                                                                                                                                                 n7
                                                                                                                                                 n8,
                                                                                                                                               a)]
                                                                                                                                             -> [(Index.Index
                                                                                                                                                    (n1
                                                                                                                                                     GHC.TypeNats.+ m1)
                                                                                                                                                    (n2
                                                                                                                                                     GHC.TypeNats.+ m2)
                                                                                                                                                    (n3
                                                                                                                                                     GHC.TypeNats.+ m3)
                                                                                                                                                    (n4
                                                                                                                                                     GHC.TypeNats.+ m4)
                                                                                                                                                    (n5
                                                                                                                                                     GHC.TypeNats.+ m5)
                                                                                                                                                    (n6
                                                                                                                                                     GHC.TypeNats.+ m6)
                                                                                                                                                    (n7
                                                                                                                                                     GHC.TypeNats.+ m7)
                                                                                                                                                    (n8
                                                                                                                                                     GHC.TypeNats.+ m8),
                                                                                                                                                  a)]
                                                                                                                                         {- Arity: 1,
                                                                                                                                            Strictness: <S,1*U> -}
                                                                                                                                       = \ (ds4 :: [(Index.Index
                                                                                                                                                       n1
                                                                                                                                                       n2
                                                                                                                                                       n3
                                                                                                                                                       n4
                                                                                                                                                       n5
                                                                                                                                                       n6
                                                                                                                                                       n7
                                                                                                                                                       n8,
                                                                                                                                                     a)]) ->
                                                                                                                                         case ds4 of wild2 {
                                                                                                                                           []
                                                                                                                                           -> GHC.Types.[]
                                                                                                                                                @ (Index.Index
                                                                                                                                                     (n1
                                                                                                                                                      GHC.TypeNats.+ m1)
                                                                                                                                                     (n2
                                                                                                                                                      GHC.TypeNats.+ m2)
                                                                                                                                                     (n3
                                                                                                                                                      GHC.TypeNats.+ m3)
                                                                                                                                                     (n4
                                                                                                                                                      GHC.TypeNats.+ m4)
                                                                                                                                                     (n5
                                                                                                                                                      GHC.TypeNats.+ m5)
                                                                                                                                                     (n6
                                                                                                                                                      GHC.TypeNats.+ m6)
                                                                                                                                                     (n7
                                                                                                                                                      GHC.TypeNats.+ m7)
                                                                                                                                                     (n8
                                                                                                                                                      GHC.TypeNats.+ m8),
                                                                                                                                                   a)
                                                                                                                                           : y ys
                                                                                                                                           -> let {
                                                                                                                                                ys1 :: [(Index.Index
                                                                                                                                                           (n1
                                                                                                                                                            GHC.TypeNats.+ m1)
                                                                                                                                                           (n2
                                                                                                                                                            GHC.TypeNats.+ m2)
                                                                                                                                                           (n3
                                                                                                                                                            GHC.TypeNats.+ m3)
                                                                                                                                                           (n4
                                                                                                                                                            GHC.TypeNats.+ m4)
                                                                                                                                                           (n5
                                                                                                                                                            GHC.TypeNats.+ m5)
                                                                                                                                                           (n6
                                                                                                                                                            GHC.TypeNats.+ m6)
                                                                                                                                                           (n7
                                                                                                                                                            GHC.TypeNats.+ m7)
                                                                                                                                                           (n8
                                                                                                                                                            GHC.TypeNats.+ m8),
                                                                                                                                                         a)]
                                                                                                                                                = go
                                                                                                                                                    ys
                                                                                                                                              } in
                                                                                                                                              let {
                                                                                                                                                ds5 :: (Index.Index
                                                                                                                                                          m1
                                                                                                                                                          m2
                                                                                                                                                          m3
                                                                                                                                                          m4
                                                                                                                                                          m5
                                                                                                                                                          m6
                                                                                                                                                          m7
                                                                                                                                                          m8,
                                                                                                                                                        a)
                                                                                                                                                       -> (Index.Index
                                                                                                                                                             (n1
                                                                                                                                                              GHC.TypeNats.+ m1)
                                                                                                                                                             (n2
                                                                                                                                                              GHC.TypeNats.+ m2)
                                                                                                                                                             (n3
                                                                                                                                                              GHC.TypeNats.+ m3)
                                                                                                                                                             (n4
                                                                                                                                                              GHC.TypeNats.+ m4)
                                                                                                                                                             (n5
                                                                                                                                                              GHC.TypeNats.+ m5)
                                                                                                                                                             (n6
                                                                                                                                                              GHC.TypeNats.+ m6)
                                                                                                                                                             (n7
                                                                                                                                                              GHC.TypeNats.+ m7)
                                                                                                                                                             (n8
                                                                                                                                                              GHC.TypeNats.+ m8),
                                                                                                                                                           a)
                                                                                                                                                = combineF
                                                                                                                                                    @ n1
                                                                                                                                                    @ n2
                                                                                                                                                    @ n3
                                                                                                                                                    @ n4
                                                                                                                                                    @ n5
                                                                                                                                                    @ n6
                                                                                                                                                    @ n7
                                                                                                                                                    @ n8
                                                                                                                                                    @ m1
                                                                                                                                                    @ m2
                                                                                                                                                    @ m3
                                                                                                                                                    @ m4
                                                                                                                                                    @ m5
                                                                                                                                                    @ m6
                                                                                                                                                    @ m7
                                                                                                                                                    @ m8
                                                                                                                                                    y
                                                                                                                                              } in
                                                                                                                                              letrec {
                                                                                                                                                go1 :: [(Index.Index
                                                                                                                                                           m1
                                                                                                                                                           m2
                                                                                                                                                           m3
                                                                                                                                                           m4
                                                                                                                                                           m5
                                                                                                                                                           m6
                                                                                                                                                           m7
                                                                                                                                                           m8,
                                                                                                                                                         a)]
                                                                                                                                                       -> [(Index.Index
                                                                                                                                                              (n1
                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                              (n2
                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                              (n3
                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                              (n4
                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                              (n5
                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                              (n6
                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                              (n7
                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                              (n8
                                                                                                                                                               GHC.TypeNats.+ m8),
                                                                                                                                                            a)]
                                                                                                                                                  {- Arity: 1,
                                                                                                                                                     Strictness: <S,1*U> -}
                                                                                                                                                = \ (ds6 :: [(Index.Index
                                                                                                                                                                m1
                                                                                                                                                                m2
                                                                                                                                                                m3
                                                                                                                                                                m4
                                                                                                                                                                m5
                                                                                                                                                                m6
                                                                                                                                                                m7
                                                                                                                                                                m8,
                                                                                                                                                              a)]) ->
                                                                                                                                                  case ds6 of wild3 {
                                                                                                                                                    []
                                                                                                                                                    -> ys1
                                                                                                                                                    : y1 ys2
                                                                                                                                                    -> GHC.Types.:
                                                                                                                                                         @ (Index.Index
                                                                                                                                                              (n1
                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                              (n2
                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                              (n3
                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                              (n4
                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                              (n5
                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                              (n6
                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                              (n7
                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                              (n8
                                                                                                                                                               GHC.TypeNats.+ m8),
                                                                                                                                                            a)
                                                                                                                                                         (ds5
                                                                                                                                                            y1)
                                                                                                                                                         (go1
                                                                                                                                                            ys2) }
                                                                                                                                              } in
                                                                                                                                              go1
                                                                                                                                                pairs2 }
                                                                                                                                     } in
                                                                                                                                     Data.Map.Strict.Internal.fromAscListWithKey
                                                                                                                                       @ (Index.Index
                                                                                                                                            (n1
                                                                                                                                             GHC.TypeNats.+ m1)
                                                                                                                                            (n2
                                                                                                                                             GHC.TypeNats.+ m2)
                                                                                                                                            (n3
                                                                                                                                             GHC.TypeNats.+ m3)
                                                                                                                                            (n4
                                                                                                                                             GHC.TypeNats.+ m4)
                                                                                                                                            (n5
                                                                                                                                             GHC.TypeNats.+ m5)
                                                                                                                                            (n6
                                                                                                                                             GHC.TypeNats.+ m6)
                                                                                                                                            (n7
                                                                                                                                             GHC.TypeNats.+ m7)
                                                                                                                                            (n8
                                                                                                                                             GHC.TypeNats.+ m8))
                                                                                                                                       @ a
                                                                                                                                       (Tensor.tensorProductNumeric3
                                                                                                                                          @ n1
                                                                                                                                          @ m1
                                                                                                                                          @ n2
                                                                                                                                          @ m2
                                                                                                                                          @ n3
                                                                                                                                          @ m3
                                                                                                                                          @ n4
                                                                                                                                          @ m4
                                                                                                                                          @ n5
                                                                                                                                          @ m5
                                                                                                                                          @ n6
                                                                                                                                          @ m6
                                                                                                                                          @ n7
                                                                                                                                          @ m7
                                                                                                                                          @ n8
                                                                                                                                          @ m8)
                                                                                                                                       (Tensor.tensorProductNumeric1
                                                                                                                                          @ n1
                                                                                                                                          @ m1
                                                                                                                                          @ n2
                                                                                                                                          @ m2
                                                                                                                                          @ n3
                                                                                                                                          @ m3
                                                                                                                                          @ n4
                                                                                                                                          @ m4
                                                                                                                                          @ n5
                                                                                                                                          @ m5
                                                                                                                                          @ n6
                                                                                                                                          @ m6
                                                                                                                                          @ n7
                                                                                                                                          @ m7
                                                                                                                                          @ n8
                                                                                                                                          @ m8
                                                                                                                                          @ a)
                                                                                                                                       (go
                                                                                                                                          pairs1)) } }) -}
ea28d809b7b09ff35e2ea3f127a506c8
  tensorProductNumeric1 ::
    Index.Index
      (n1 GHC.TypeNats.+ m1)
      (n2 GHC.TypeNats.+ m2)
      (n3 GHC.TypeNats.+ m3)
      (n4 GHC.TypeNats.+ m4)
      (n5 GHC.TypeNats.+ m5)
      (n6 GHC.TypeNats.+ m6)
      (n7 GHC.TypeNats.+ m7)
      (n8 GHC.TypeNats.+ m8)
    -> a -> a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*U><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   @ a
                   (ds :: Index.Index
                            (n1 GHC.TypeNats.+ m1)
                            (n2 GHC.TypeNats.+ m2)
                            (n3 GHC.TypeNats.+ m3)
                            (n4 GHC.TypeNats.+ m4)
                            (n5 GHC.TypeNats.+ m5)
                            (n6 GHC.TypeNats.+ m6)
                            (n7 GHC.TypeNats.+ m7)
                            (n8 GHC.TypeNats.+ m8))
                   (x :: a)[OneShot]
                   (ds1 :: a)[OneShot] ->
                 x) -}
3e9b287c9d2e41c21f6c4f7a0012fb1c
  tensorProductNumeric2 ::
    (GHC.Num.Num a, GHC.Classes.Eq a) =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 a
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         a
  {- Arity: 2,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,C(U))><L,U(A,C(C1(U)))> -}
7bec261b8145143de1fe9050162e8792
  tensorProductNumeric3 ::
    GHC.Classes.Eq
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat ->
                 GHC.Classes.$fEq(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fEqInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fEqInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fEqInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fEqInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fEqInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fEqInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fEqInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fEqInd @ (n8 GHC.TypeNats.+ m8))) -}
ba6be009bb6b7b464027f29968945a62
  tensorProductWith ::
    (a -> b -> c)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         c
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U(U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorProductWith
                        @ a
                        @ b
                        @ c
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ m1
                        @ m2
                        @ m3
                        @ m4
                        @ m5
                        @ m6
                        @ m7
                        @ m8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ (n1 GHC.TypeNats.+ m1)
                   @ (n2 GHC.TypeNats.+ m2)
                   @ (n3 GHC.TypeNats.+ m3)
                   @ (n4 GHC.TypeNats.+ m4)
                   @ (n5 GHC.TypeNats.+ m5)
                   @ (n6 GHC.TypeNats.+ m6)
                   @ (n7 GHC.TypeNats.+ m7)
                   @ (n8 GHC.TypeNats.+ m8)
                   @ c
                   ww5 } } }) -}
31bfd45190e2fc49c42ad8666021262b
  tensorProductWith1 ::
    GHC.Classes.Eq
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat ->
                 GHC.Classes.$fEq(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fEqInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fEqInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fEqInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fEqInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fEqInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fEqInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fEqInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fEqInd @ (n8 GHC.TypeNats.+ m8))) -}
e424c0cee1e7c778fe86b3ac8e484fda
  tensorProductWith2 ::
    (a -> b -> c)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         c
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U(U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorProductWith2
                        @ a
                        @ b
                        @ c
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ m1
                        @ m2
                        @ m3
                        @ m4
                        @ m5
                        @ m6
                        @ m7
                        @ m8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ (n1 GHC.TypeNats.+ m1)
                   @ (n2 GHC.TypeNats.+ m2)
                   @ (n3 GHC.TypeNats.+ m3)
                   @ (n4 GHC.TypeNats.+ m4)
                   @ (n5 GHC.TypeNats.+ m5)
                   @ (n6 GHC.TypeNats.+ m6)
                   @ (n7 GHC.TypeNats.+ m7)
                   @ (n8 GHC.TypeNats.+ m8)
                   @ c
                   ww5 } } }) -}
b8e461b6fc8a496672aeb8c73b807dc2
  tensorProductWith3 ::
    Data.Map.Internal.Map
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
      c
    -> [Data.Map.Internal.Map
          (Index.Index
             (n1 GHC.TypeNats.+ m1)
             (n2 GHC.TypeNats.+ m2)
             (n3 GHC.TypeNats.+ m3)
             (n4 GHC.TypeNats.+ m4)
             (n5 GHC.TypeNats.+ m5)
             (n6 GHC.TypeNats.+ m6)
             (n7 GHC.TypeNats.+ m7)
             (n8 GHC.TypeNats.+ m8))
          c]
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ m1)
            (n2 GHC.TypeNats.+ m2)
            (n3 GHC.TypeNats.+ m3)
            (n4 GHC.TypeNats.+ m4)
            (n5 GHC.TypeNats.+ m5)
            (n6 GHC.TypeNats.+ m6)
            (n7 GHC.TypeNats.+ m7)
            (n8 GHC.TypeNats.+ m8))
         c
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
9b3755a8f72a1cd09c7c6f6064345f3d
  tensorProductWith4 ::
    GHC.Classes.Ord
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fOrdInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fOrdInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fOrdInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fOrdInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fOrdInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fOrdInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fOrdInd @ (n8 GHC.TypeNats.+ m8))) -}
bfa8fcd594144d440178a5eefd4492fb
  tensorSMult ::
    GHC.Num.Num a =>
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C(U)),A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   (a1 :: a) ->
                 {__scc {main:Tensor.tensorSMult} True True} let {
                                                               f :: a -> a = GHC.Num.* @ a $dNum a1
                                                             } in
                                                             \ (ds :: Tensor.Tensor
                                                                        n1
                                                                        n2
                                                                        n3
                                                                        n4
                                                                        n5
                                                                        n6
                                                                        n7
                                                                        n8
                                                                        a) ->
                                                             {__scc {main:Tensor.fmap} True True} case ds of wild { Tensor.Tensor tMap ->
                                                                                                  Tensor.Tensor
                                                                                                    @ n1
                                                                                                    @ n2
                                                                                                    @ n3
                                                                                                    @ n4
                                                                                                    @ n5
                                                                                                    @ n6
                                                                                                    @ n7
                                                                                                    @ n8
                                                                                                    @ a
                                                                                                    (Data.Map.Strict.Internal.map
                                                                                                       @ a
                                                                                                       @ a
                                                                                                       @ (Index.Index
                                                                                                            n1
                                                                                                            n2
                                                                                                            n3
                                                                                                            n4
                                                                                                            n5
                                                                                                            n6
                                                                                                            n7
                                                                                                            n8)
                                                                                                       f
                                                                                                       tMap) }) -}
fa755c70900c56cb9228bd5f8e3cb8d5
  tensorSub ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U))><S,1*U(1*U)><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorSub
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww5 } } }) -}
5419f653b93e8002279716673d331d33
  tensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w2 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorTranspose
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        w
                        w1
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
e9bc017440e011191acc0939b376df6d
  unsafeGetVal ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 {__scc {main:Tensor.unsafeGetVal} True True} case ds of wild { Tensor.Tensor map1 ->
                                                              Data.Map.Internal.find
                                                                @ (Index.Index
                                                                     n1 n2 n3 n4 n5 n6 n7 n8)
                                                                @ a
                                                                (Tensor.aSymTensor4
                                                                   @ n8
                                                                   @ n7
                                                                   @ n6
                                                                   @ n5
                                                                   @ n4
                                                                   @ n3
                                                                   @ n2
                                                                   @ n1)
                                                                ind
                                                                map1 }) -}
instance [safe] GHC.Base.Functor [Tensor.Tensor]
  = Tensor.$fFunctorTensor
instance [safe] GHC.Show.Show [Tensor.Tensor] = Tensor.$fShowTensor
"SPEC/Tensor $fEqInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd @ n @ Index.Lind_19 v = Tensor.$s$fEqInd4 @ n
"SPEC/Tensor $fEqInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd @ n @ Index.Lind_20 v = Tensor.$s$fEqInd6 @ n
"SPEC/Tensor $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Tensor.$s$fEqInd @ n
"SPEC/Tensor $fEqInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd @ n @ Index.Lind_9 v = Tensor.$s$fEqInd2 @ n
"SPEC/Tensor $fEqInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd @ n @ Index.Uind_19 v = Tensor.$s$fEqInd5 @ n
"SPEC/Tensor $fEqInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd @ n @ Index.Uind_20 v = Tensor.$s$fEqInd7 @ n
"SPEC/Tensor $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Tensor.$s$fEqInd1 @ n
"SPEC/Tensor $fEqInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd @ n @ Index.Uind_9 v = Tensor.$s$fEqInd3 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd_$c/= @ n @ Index.Lind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd_$c/= @ n @ Index.Lind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd_$c/= @ n @ Index.Lind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd_$c/= @ n @ Index.Uind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd_$c/= @ n @ Index.Uind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd_$c/= @ n @ Index.Uind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd @ n @ Index.Lind_19 v = Tensor.$s$fOrdInd4 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd @ n @ Index.Lind_20 v = Tensor.$s$fOrdInd6 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Tensor.$s$fOrdInd @ n
"SPEC/Tensor $fOrdInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd @ n @ Index.Lind_9 v = Tensor.$s$fOrdInd2 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd @ n @ Index.Uind_19 v = Tensor.$s$fOrdInd5 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd @ n @ Index.Uind_20 v = Tensor.$s$fOrdInd7 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Tensor.$s$fOrdInd1 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd @ n @ Index.Uind_9 v = Tensor.$s$fOrdInd3 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c< @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<4 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c< @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<6 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c< @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c< @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<2 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c< @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<5 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c< @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<7 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<1 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c< @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<3 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=4 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=6 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<= @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=2 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=5 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=7 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<=1 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=3 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c> @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>4 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c> @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>6 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c> @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c> @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>2 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c> @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>5 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c> @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>7 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>1 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c> @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>3 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=4 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=6 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>= @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=2 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=5 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=7 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>=1 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=3 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare4 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare6 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare2 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare5 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare7 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare1 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare3 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax4 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax6 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax2 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax5 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax7 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax1 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax3 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin4 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin6 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin2 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin5 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin7 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin1 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin3 @ n
"SPEC/Tensor $fShowInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd @ n @ Index.Lind_19 v
  = Tensor.$fShowTensor_$s$fShowInd4 @ n
"SPEC/Tensor $fShowInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd @ n @ Index.Lind_20 v
  = Tensor.$fShowTensor_$s$fShowInd6 @ n
"SPEC/Tensor $fShowInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd @ n @ Index.Lind_3 v
  = Tensor.$fShowTensor_$s$fShowInd @ n
"SPEC/Tensor $fShowInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd @ n @ Index.Lind_9 v
  = Tensor.$fShowTensor_$s$fShowInd2 @ n
"SPEC/Tensor $fShowInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd @ n @ Index.Uind_19 v
  = Tensor.$fShowTensor_$s$fShowInd5 @ n
"SPEC/Tensor $fShowInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd @ n @ Index.Uind_20 v
  = Tensor.$fShowTensor_$s$fShowInd7 @ n
"SPEC/Tensor $fShowInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd @ n @ Index.Uind_3 v
  = Tensor.$fShowTensor_$s$fShowInd1 @ n
"SPEC/Tensor $fShowInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd @ n @ Index.Uind_9 v
  = Tensor.$fShowTensor_$s$fShowInd3 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd_$cshow @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshow4 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd_$cshow @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshow6 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshow @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshow @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshow @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshow2 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd_$cshow @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshow5 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd_$cshow @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshow7 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshow @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshow1 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshow @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshow3 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList4 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList6 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList2 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList5 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList7 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList1 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList3 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec4 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec6 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec2 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec5 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec7 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec1 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec3 @ n
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

