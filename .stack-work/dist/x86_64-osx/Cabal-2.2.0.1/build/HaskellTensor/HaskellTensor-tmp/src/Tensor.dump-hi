
==================== FINAL INTERFACE ====================
2019-01-14 11:31:14.418112 UTC

interface main:Tensor [hpc] 8043
  interface hash: 3a04b2e483ec44e84cdfe955a4721e09
  ABI hash: 88b99fd1b88cbea55a626a90a73dd2b2
  export-list hash: 1f9546fa9c961086005dc0c53843135a
  orphan hash: 1579d5a39d61238a281c717d243651c3
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tensor.aSymTensor
  Tensor.blockSymTensor
  Tensor.cyclicSymTensor
  Tensor.evalFullTensor
  Tensor.evalTensorVals
  Tensor.getVal
  Tensor.mkTensorfromF
  Tensor.mkTensorfromFZeros
  Tensor.mkTensorfromList
  Tensor.symTensor
  Tensor.tensorAdd
  Tensor.tensorContractWith_19
  Tensor.tensorContractWith_20
  Tensor.tensorContractWith_3
  Tensor.tensorContractWith_9
  Tensor.tensorIndList
  Tensor.tensorProductWith
  Tensor.tensorSMult
  Tensor.tensorSub
  Tensor.tensorTranspose
  Tensor.unsafeGetVal
  Tensor.Tensor{Tensor.Tensor}
module dependencies: Index
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Proxy a80a60a2fdceabfeb4d110d23b808844
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Index 4e45ffe97a9e3350beda6ba6fddd508e
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index 20ea1ce731123e1c4a29c95a066e5a72
  checkInd 1d2eee49e68bf48b7d2be8171fd7de6b
  combineIndex 7ff65fb69bfa89ad56f614dad3c07e52
  cyclicSwapIndex 6441b9ccfecfa33f40d12d8523b37304
  delContractionIndex_19 edfc08c7e9091adbddd921baafe6281d
  delContractionIndex_20 e160ee179747bc04e2512daeb627eaf1
  delContractionIndex_3 362996b25129899089b023a62383a620
  delContractionIndex_9 bb7f9dee660d8128b9a4e8b27fbd4209
  delInd 4992ecdb92897e12c853960fae447049
  getRangeList bb2e75601febf5d2ff465e171708e972
  isContractionIndex b28c66cec12901b9e2fb46b1dedbcd03
  mkInd 0b3b6e2c21e3978a80c74568b36cedc1
  swapBlockPosIndex 8800b20cdcfda50bb3382658640b0f7c
  swapPosIndex 03560aeadebe082fbbfe512ddc265f6f
3ab1a6a46c1592b826cacc18b7d3183c
  $fFunctorTensor ::
    GHC.Base.Functor (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat.
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
                  (Tensor.$fFunctorTensor_$cfmap
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8)
                  (Tensor.$fFunctorTensor_$c<$
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8) -}
3ab1a6a46c1592b826cacc18b7d3183c
  $fFunctorTensor_$c<$ ::
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$w$c<$
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        @ b
                        w
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
3ab1a6a46c1592b826cacc18b7d3183c
  $fFunctorTensor_$cfmap ::
    (a -> b)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.fmap} True True} case ds of wild { Tensor.Tensor tMap ->
                                                      Tensor.Tensor
                                                        @ n1
                                                        @ n2
                                                        @ n3
                                                        @ n4
                                                        @ n5
                                                        @ n6
                                                        @ n7
                                                        @ n8
                                                        @ b
                                                        (Data.Map.Strict.Internal.map
                                                           @ a
                                                           @ b
                                                           @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                                           f
                                                           tMap) }) -}
3ab1a6a46c1592b826cacc18b7d3183c
  $fShowTensor ::
    GHC.Show.Show a =>
    GHC.Show.Show (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat
                      @ a
                      (v :: GHC.Show.Show a).
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                  (Tensor.$fShowTensor_$cshowsPrec
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshow
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshowList
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v) -}
737494dd887cc43ca1e040c11eb4e200
  $fShowTensor1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
22cdd232bf930dc0faa0b6cceff6d68b
  $fShowTensor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Tensor.$fShowTensor3) -}
038bda6e6e33cc813e9b34b169d0a8c8
  $fShowTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor "#) -}
36731a1b3bcef6dd8046a3917e36b0df
  $fShowTensor4 ::
    GHC.Show.Show
      (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
       Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
       Index.Uinds_3 n7, Index.Linds_3 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Show.$fShow(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$fShowTensor_$s$fShowInd7 @ n1)
                   (Tensor.$fShowTensor_$s$fShowInd6 @ n2)
                   (Tensor.$fShowTensor_$s$fShowInd5 @ n3)
                   (Tensor.$fShowTensor_$s$fShowInd4 @ n4)
                   (Tensor.$fShowTensor_$s$fShowInd3 @ n5)
                   (Tensor.$fShowTensor_$s$fShowInd2 @ n6)
                   (Tensor.$fShowTensor_$s$fShowInd1 @ n7)
                   (Tensor.$fShowTensor_$s$fShowInd @ n8)) -}
3ab1a6a46c1592b826cacc18b7d3183c
  $fShowTensor_$cshow ::
    GHC.Show.Show a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Tensor.$w$cshow
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1 }) -}
3ab1a6a46c1592b826cacc18b7d3183c
  $fShowTensor_$cshowList ::
    GHC.Show.Show a =>
    [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (Tensor.$fShowTensor_$cshowsPrec
                      @ n1
                      @ n2
                      @ n3
                      @ n4
                      @ n5
                      @ n6
                      @ n7
                      @ n8
                      @ a
                      $dShow
                      Tensor.$fShowTensor1)
                   ls
                   s) -}
3ab1a6a46c1592b826cacc18b7d3183c
  $fShowTensor_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 Tensor.$w$cshowsPrec
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1
                   ww3 } }) -}
280fd3559636ed7fab79a5beddd35cec
  $fShowTensor_$s$fShowInd ::
    GHC.Show.Show (Index.Ind n Index.Lind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (\ (ls :: [Index.Ind n Index.Lind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_3
                        Index.$fShowLind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
f8418fef5858a9ef1b93baebc25f13af
  $fShowTensor_$s$fShowInd1 ::
    GHC.Show.Show (Index.Ind n Index.Uind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (\ (ls :: [Index.Ind n Index.Uind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_3
                        Index.$fShowUind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
e5cabf176c9ce67e55da6116b8a4a4ee
  $fShowTensor_$s$fShowInd2 ::
    GHC.Show.Show (Index.Ind n Index.Lind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (\ (ls :: [Index.Ind n Index.Lind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_9
                        Index.$fShowLind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
3e6f76b069e2a04146f64ae20e853c95
  $fShowTensor_$s$fShowInd3 ::
    GHC.Show.Show (Index.Ind n Index.Uind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (\ (ls :: [Index.Ind n Index.Uind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_9
                        Index.$fShowUind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
f0092c6cf2a42faba2da03893d8d374b
  $fShowTensor_$s$fShowInd4 ::
    GHC.Show.Show (Index.Ind n Index.Lind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_19
                     Index.$fShowLind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_19 Index.$fShowLind_19)
                  (\ (ls :: [Index.Ind n Index.Lind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_19
                        Index.$fShowLind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
100c65bffa08a4dbd8fa01f724ce99e8
  $fShowTensor_$s$fShowInd5 ::
    GHC.Show.Show (Index.Ind n Index.Uind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_19
                     Index.$fShowUind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_19 Index.$fShowUind_19)
                  (\ (ls :: [Index.Ind n Index.Uind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_19
                        Index.$fShowUind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
ea127737bfa5b137922215284cb711ae
  $fShowTensor_$s$fShowInd6 ::
    GHC.Show.Show (Index.Ind n Index.Lind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_20
                     Index.$fShowLind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_20 Index.$fShowLind_20)
                  (\ (ls :: [Index.Ind n Index.Lind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_20
                        Index.$fShowLind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
9b92c489e55b6bf6899edc42eda68028
  $fShowTensor_$s$fShowInd7 ::
    GHC.Show.Show (Index.Ind n Index.Uind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_20
                     Index.$fShowUind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_20 Index.$fShowUind_20)
                  (\ (ls :: [Index.Ind n Index.Uind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_20
                        Index.$fShowUind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
0de136cefa649a019c84338e2d94fa59
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (\ (ds :: Index.Ind n Index.Lind_3)
                     (ds1 :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_3
                                                       Index.$fEqLind_3
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
6aa01b32545c44f238ecd3e495c0e0d0
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (\ (ds :: Index.Ind n Index.Uind_3)
                     (ds1 :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_3
                                                       Index.$fEqUind_3
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
3d8089bba4e253c36a04636976477ba0
  $s$fEqInd2 :: GHC.Classes.Eq (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (\ (ds :: Index.Ind n Index.Lind_9)
                     (ds1 :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_9
                                                       Index.$fEqLind_9
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n) -}
e48b6b4122e6427ceab052ced57c275b
  $s$fEqInd3 :: GHC.Classes.Eq (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (\ (ds :: Index.Ind n Index.Uind_9)
                     (ds1 :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_9
                                                       Index.$fEqUind_9
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n) -}
40d230b0d53392d7aa9e8bef2738aaa6
  $s$fEqInd4 :: GHC.Classes.Eq (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (\ (ds :: Index.Ind n Index.Lind_19)
                     (ds1 :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_19
                                                       Index.$fEqLind_19
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n) -}
a5eae7dfd2f84d48161ffb70817e9834
  $s$fEqInd5 :: GHC.Classes.Eq (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (\ (ds :: Index.Ind n Index.Uind_19)
                     (ds1 :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_19
                                                       Index.$fEqUind_19
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n) -}
cbb716afaa619d5dd2b6269290d1e567
  $s$fEqInd6 :: GHC.Classes.Eq (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (\ (ds :: Index.Ind n Index.Lind_20)
                     (ds1 :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Lind_20
                                                       Index.$fEqLind_20
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n) -}
c01f335515466d8fa0b0e61ceb74456f
  $s$fEqInd7 :: GHC.Classes.Eq (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (\ (ds :: Index.Ind n Index.Uind_20)
                     (ds1 :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.==} True True} case ds of wild { Index.UnsafemkInd a1 ->
                                                     case ds1 of wild1 { Index.UnsafemkInd b1 ->
                                                     Data.Sequence.Internal.$fEqSeq_$c==
                                                       @ Index.Uind_20
                                                       Index.$fEqUind_20
                                                       a1
                                                       b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n) -}
a9165c77a46743e6735f483c56e88b87
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_3
                                                                                              Index.$fEqLind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
aed5b7a319edd8edd5bf484fe2307e08
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_3
                                                                                              Index.$fEqUind_3
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
c7eec0dedad522b397293e0d65db520b
  $s$fEqInd_$s$fEqInd_$c/=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_9
                                                                                              Index.$fEqLind_9
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
75b4540ed03e8791c3197689d18c0d59
  $s$fEqInd_$s$fEqInd_$c/=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_9
                                                                                              Index.$fEqUind_9
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
fb6ac161ca41f0eeb8560cde7265aa4b
  $s$fEqInd_$s$fEqInd_$c/=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_19
                                                                                              Index.$fEqLind_19
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
18db49e865760df5547450f7317f4e14
  $s$fEqInd_$s$fEqInd_$c/=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_19
                                                                                              Index.$fEqUind_19
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
875d8db2c2ba4e464f771a26dd3ee778
  $s$fEqInd_$s$fEqInd_$c/=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Lind_20
                                                                                              Index.$fEqLind_20
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
fd9b379f0f290ff8537debb646273a9b
  $s$fEqInd_$s$fEqInd_$c/=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.==} True False} case x of wild { Index.UnsafemkInd a1 ->
                                                    case y of wild1 { Index.UnsafemkInd b1 ->
                                                    case {__scc {main:Index.==} False True} Data.Sequence.Internal.$fEqSeq_$c==
                                                                                              @ Index.Uind_20
                                                                                              Index.$fEqUind_20
                                                                                              a1
                                                                                              b1 of wild2 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True -> GHC.Types.False } } }) -}
43b245b31946f594bde4099e7682ed7f
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Tensor.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_3
                                                            Index.$fOrdLind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_3
                                                      Index.$fOrdLind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_3
                                                                                       Index.$fOrdLind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_3
                                                                                                                                Index.$fOrdLind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_3
                                                                                               Index.$fOrdLind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
6e609df3570687447c665025832ff6f8
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Tensor.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_3
                                                            Index.$fOrdUind_3
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_3
                                                      Index.$fOrdUind_3
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_3
                                                                                       Index.$fOrdUind_3
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_3
                                                                                                                                Index.$fOrdUind_3
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_3
                                                                                               Index.$fOrdUind_3
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
eccfa7eb8a45f987cd7f6a9ab58634f2
  $s$fOrdInd2 :: GHC.Classes.Ord (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Tensor.$s$fEqInd2 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_9
                                                            Index.$fOrdLind_9
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_9
                                                      Index.$fOrdLind_9
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_9
                                                                                                                                Index.$fOrdLind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_9
                                                                                       Index.$fOrdLind_9
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_9
                                                                                                                                Index.$fOrdLind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_9
                                                                                               Index.$fOrdLind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_9
                                                                                               Index.$fOrdLind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
8611709ffc5f39f8efff69a8dcec84b7
  $s$fOrdInd3 :: GHC.Classes.Ord (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Tensor.$s$fEqInd3 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_9
                                                            Index.$fOrdUind_9
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_9
                                                      Index.$fOrdUind_9
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_9
                                                                                                                                Index.$fOrdUind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_9
                                                                                       Index.$fOrdUind_9
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_9
                                                                                                                                Index.$fOrdUind_9
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_9
                                                                                               Index.$fOrdUind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_9
                                                                                               Index.$fOrdUind_9
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
d7ecac60fc4b3654e3fc4c6f1a976fd1
  $s$fOrdInd4 :: GHC.Classes.Ord (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Tensor.$s$fEqInd4 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_19
                                                            Index.$fOrdLind_19
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_19
                                                      Index.$fOrdLind_19
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_19
                                                                                                                                Index.$fOrdLind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_19
                                                                                       Index.$fOrdLind_19
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_19
                                                                                                                                Index.$fOrdLind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_19
                                                                                               Index.$fOrdLind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_19
                                                                                               Index.$fOrdLind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
8fe12c7e2c8ae85426bc6091f005a8c8
  $s$fOrdInd5 :: GHC.Classes.Ord (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Tensor.$s$fEqInd5 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_19
                                                            Index.$fOrdUind_19
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_19
                                                      Index.$fOrdUind_19
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_19
                                                                                                                                Index.$fOrdUind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_19
                                                                                       Index.$fOrdUind_19
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_19
                                                                                                                                Index.$fOrdUind_19
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_19
                                                                                               Index.$fOrdUind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_19
                                                                                               Index.$fOrdUind_19
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
80b07a1fd28e604b2f2e67ec46911f83
  $s$fOrdInd6 :: GHC.Classes.Ord (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Tensor.$s$fEqInd6 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Lind_20
                                                            Index.$fOrdLind_20
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Lind_20
                                                      Index.$fOrdLind_20
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_20
                                                                                                                                Index.$fOrdLind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Lind_20
                                                                                       Index.$fOrdLind_20
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Lind_20
                                                                                                                                Index.$fOrdLind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_20
                                                                                               Index.$fOrdLind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Lind_20
                                                                                               Index.$fOrdLind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
ef4094163e41061eb5cef974b0c19c7d
  $s$fOrdInd7 :: GHC.Classes.Ord (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Tensor.$s$fEqInd7 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                          case b of wild1 { Index.UnsafemkInd b1 ->
                                                          Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                            @ Index.Uind_20
                                                            Index.$fOrdUind_20
                                                            a2
                                                            b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                    case b of wild1 { Index.UnsafemkInd b1 ->
                                                    Data.Sequence.Internal.$fOrdSeq_$c<
                                                      @ Index.Uind_20
                                                      Index.$fOrdUind_20
                                                      a2
                                                      b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                       case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_20
                                                                                                                                Index.$fOrdUind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                       @ Index.Uind_20
                                                                                       Index.$fOrdUind_20
                                                                                       a2
                                                                                       b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                       case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                       case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                                @ Index.Uind_20
                                                                                                                                Index.$fOrdUind_20
                                                                                                                                a2
                                                                                                                                b1 of wild2 {
                                                                                         GHC.Types.False
                                                                                         -> GHC.Types.True
                                                                                         GHC.Types.True
                                                                                         -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_20
                                                                                               Index.$fOrdUind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                               @ Index.Uind_20
                                                                                               Index.$fOrdUind_20
                                                                                               a1
                                                                                               b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
e0ecde1b554a9af6363615f0db5d9c02
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_3
                                                    Index.$fOrdLind_3
                                                    a2
                                                    b1 } }) -}
957073539b32e0f35af2f1108e181040
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_3
                                                    Index.$fOrdUind_3
                                                    a2
                                                    b1 } }) -}
e7b8311c49dd866d2c62f3929d3db30c
  $s$fOrdInd_$c<2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_9
                                                    Index.$fOrdLind_9
                                                    a2
                                                    b1 } }) -}
281579a351ae9831c862eb3e49abd0b0
  $s$fOrdInd_$c<3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_9
                                                    Index.$fOrdUind_9
                                                    a2
                                                    b1 } }) -}
064296d5ce840664cb0703f72bddcd65
  $s$fOrdInd_$c<4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_19
                                                    Index.$fOrdLind_19
                                                    a2
                                                    b1 } }) -}
c53e79da06a9f7ae9c0d18ab2187963d
  $s$fOrdInd_$c<5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_19
                                                    Index.$fOrdUind_19
                                                    a2
                                                    b1 } }) -}
376acfd882c0992f59756b8ac17fd7f1
  $s$fOrdInd_$c<6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Lind_20
                                                    Index.$fOrdLind_20
                                                    a2
                                                    b1 } }) -}
2457dedb5938a7086d683d5c59c72e2a
  $s$fOrdInd_$c<7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.<} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                  case b of wild1 { Index.UnsafemkInd b1 ->
                                                  Data.Sequence.Internal.$fOrdSeq_$c<
                                                    @ Index.Uind_20
                                                    Index.$fOrdUind_20
                                                    a2
                                                    b1 } }) -}
679bd2919dab81e43437991b7d30ff68
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
e0d077c4e9416c739d45db850464e6bf
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
be85adf8e14fbc89acee26fe9b5da540
  $s$fOrdInd_$c<=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_9
                                                                                                                              Index.$fOrdLind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
b2cf2b07068740ff18ba274d5ab509b6
  $s$fOrdInd_$c<=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_9
                                                                                                                              Index.$fOrdUind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
b38de59477eb535375cdcd0f22f25748
  $s$fOrdInd_$c<=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_19
                                                                                                                              Index.$fOrdLind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
44fecb75e94c8e50d5de0de90d302846
  $s$fOrdInd_$c<=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_19
                                                                                                                              Index.$fOrdUind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
2f555519da8162c39ffd70619e57fcb2
  $s$fOrdInd_$c<=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_20
                                                                                                                              Index.$fOrdLind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
68da1fdeabf4317bc6e6f2334e1c804d
  $s$fOrdInd_$c<=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} case b of wild { Index.UnsafemkInd a2 ->
                                                                                     case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_20
                                                                                                                              Index.$fOrdUind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
c28c9430c4a7a370807e0ee3f4ce2c8c
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_3
                                                                                     Index.$fOrdLind_3
                                                                                     a2
                                                                                     b1 } }) -}
fd8796060c29aaac91da8ac626633151
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_3
                                                                                     Index.$fOrdUind_3
                                                                                     a2
                                                                                     b1 } }) -}
10ac3d96c7a8c9c2418c053c5fada9f5
  $s$fOrdInd_$c>2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_9
                                                                                     Index.$fOrdLind_9
                                                                                     a2
                                                                                     b1 } }) -}
86ab1d057d99f02552c91e886fcbe046
  $s$fOrdInd_$c>3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_9
                                                                                     Index.$fOrdUind_9
                                                                                     a2
                                                                                     b1 } }) -}
3944c217aceae0ab0c67e5acb628444a
  $s$fOrdInd_$c>4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_19
                                                                                     Index.$fOrdLind_19
                                                                                     a2
                                                                                     b1 } }) -}
8adc5b0c34fcc0ec86cb224ed9d26cec
  $s$fOrdInd_$c>5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_19
                                                                                     Index.$fOrdUind_19
                                                                                     a2
                                                                                     b1 } }) -}
b2785282706f35e37e3bee5a5cb73087
  $s$fOrdInd_$c>6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Lind_20
                                                                                     Index.$fOrdLind_20
                                                                                     a2
                                                                                     b1 } }) -}
62c3d624b8547530b223e69ad59baa5d
  $s$fOrdInd_$c>7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.>} True True} {__scc {main:Index.<} True True} case b of wild { Index.UnsafemkInd a2 ->
                                                                                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                                                                                   Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                     @ Index.Uind_20
                                                                                     Index.$fOrdUind_20
                                                                                     a2
                                                                                     b1 } }) -}
867de6ea688f223863144e5dabefcae0
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_3
                                                                                                                              Index.$fOrdLind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
2377c519235963adf4a36a8d070f024c
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_3
                                                                                                                              Index.$fOrdUind_3
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
d33c56e77faebd1be4edb30dbd330650
  $s$fOrdInd_$c>=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_9
                                                                                                                              Index.$fOrdLind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
ba3d9e568b991c4819a60d7a2155fcb4
  $s$fOrdInd_$c>=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_9
                                                                                                                              Index.$fOrdUind_9
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
f57f77e06b23dd6fc4a9b9e2f77fadc6
  $s$fOrdInd_$c>=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_19
                                                                                                                              Index.$fOrdLind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
da424d4e3d7b227ae2fabf6cbef05410
  $s$fOrdInd_$c>=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_19
                                                                                                                              Index.$fOrdUind_19
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
12fb97c236a674b12a0976c2f4f89b99
  $s$fOrdInd_$c>=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Lind_20
                                                                                                                              Index.$fOrdLind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
edcfdd4a59425b3f0a4c3e5f9542f579
  $s$fOrdInd_$c>=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.>=} True True} {__scc {main:Index.<} True False} case a1 of wild { Index.UnsafemkInd a2 ->
                                                                                     case b of wild1 { Index.UnsafemkInd b1 ->
                                                                                     case {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                                                              @ Index.Uind_20
                                                                                                                              Index.$fOrdUind_20
                                                                                                                              a2
                                                                                                                              b1 of wild2 {
                                                                                       GHC.Types.False
                                                                                       -> GHC.Types.True
                                                                                       GHC.Types.True
                                                                                       -> GHC.Types.False } } }) -}
93f86e3b0ee159f3f33d9471a2b930f3
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_3
                                                          Index.$fOrdLind_3
                                                          a2
                                                          b1 } }) -}
9d943a62711c476d1245416385fb03b9
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_3
                                                          Index.$fOrdUind_3
                                                          a2
                                                          b1 } }) -}
ddacc8af6733d375257012a901aff5fb
  $s$fOrdInd_$ccompare2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_9
                                                          Index.$fOrdLind_9
                                                          a2
                                                          b1 } }) -}
fe00296a2f542ecff706e2de0d58ef25
  $s$fOrdInd_$ccompare3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_9
                                                          Index.$fOrdUind_9
                                                          a2
                                                          b1 } }) -}
3bc95644d48a03d2c8f3e2d55b0927f7
  $s$fOrdInd_$ccompare4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_19
                                                          Index.$fOrdLind_19
                                                          a2
                                                          b1 } }) -}
12c516b4c4276de85b3dd92e5713ddef
  $s$fOrdInd_$ccompare5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_19
                                                          Index.$fOrdUind_19
                                                          a2
                                                          b1 } }) -}
ed7977c215bb694649932c4fb4abd30d
  $s$fOrdInd_$ccompare6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Lind_20
                                                          Index.$fOrdLind_20
                                                          a2
                                                          b1 } }) -}
510f176456a80a27eb4ed2d50a75a75d
  $s$fOrdInd_$ccompare7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 {__scc {main:Index.compare} True True} case a1 of wild { Index.UnsafemkInd a2 ->
                                                        case b of wild1 { Index.UnsafemkInd b1 ->
                                                        Data.Sequence.Internal.$fOrdSeq_$ccompare
                                                          @ Index.Uind_20
                                                          Index.$fOrdUind_20
                                                          a2
                                                          b1 } }) -}
ae1459d80d13d042076951cfec40373b
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
9e435bcf79e6921d261a7916b51184bf
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
f12c13827bd338b8052e99e4bb3f23bd
  $s$fOrdInd_$cmax2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_9
                                                                                             Index.$fOrdLind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
f69b18efe13fedaf38dd09d386596739
  $s$fOrdInd_$cmax3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_9
                                                                                             Index.$fOrdUind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
66a256c0fcb871a94d59db743a88b263
  $s$fOrdInd_$cmax4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_19
                                                                                             Index.$fOrdLind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
9ecee479bb94542372e2e30727fd8679
  $s$fOrdInd_$cmax5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_19
                                                                                             Index.$fOrdUind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
09a88e2fed57c0e6e11e05fa5e7428fa
  $s$fOrdInd_$cmax6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_20
                                                                                             Index.$fOrdLind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
bd6b4227f90ebc26bacdfe9c99bd3a59
  $s$fOrdInd_$cmax7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_20
                                                                                             Index.$fOrdUind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
3b8e4f69c86311598de18cbfaae55c6d
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_3
                                                                                             Index.$fOrdLind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
f28eb429ef52e6a4dfc9d39b8fc59f97
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_3
                                                                                             Index.$fOrdUind_3
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
150e6d7f84c89055fc27dc704b963b02
  $s$fOrdInd_$cmin2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_9
                                                                                             Index.$fOrdLind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
b1840832aa1111e5da208dc42d3f09cd
  $s$fOrdInd_$cmin3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_9
                                                                                             Index.$fOrdUind_9
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
dc9d8687d0a4647ab5cf177fdacf05f0
  $s$fOrdInd_$cmin4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_19
                                                                                             Index.$fOrdLind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
2a02c03d8b1b172af4177b4f2376f404
  $s$fOrdInd_$cmin5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_19
                                                                                             Index.$fOrdUind_19
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
c37a0c59aaeee27f9d5fa5b8d2eb4db2
  $s$fOrdInd_$cmin6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Lind_20
                                                                                             Index.$fOrdLind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
835b8b1697c1d4d9da5eb4fc6709036c
  $s$fOrdInd_$cmin7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case {__scc {main:Index.<=} True True} {__scc {main:Index.<} True False} y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case {__scc {main:Index.<=} False True} {__scc {main:Index.<} False True} Data.Sequence.Internal.$fOrdSeq_$c<
                                                                                             @ Index.Uind_20
                                                                                             Index.$fOrdUind_20
                                                                                             a1
                                                                                             b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
7a260ea465d6da67f17a780cfc6133fd
  $s$fShowInd_$cshow :: Index.Ind n Index.Lind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_3 Index.$fShowLind_3 ww1 }) -}
51306e078aca3c3e37b665ea1e3d673d
  $s$fShowInd_$cshow1 :: Index.Ind n Index.Uind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_3 Index.$fShowUind_3 ww1 }) -}
a0f49922548e2d0029b41129fb460313
  $s$fShowInd_$cshow2 :: Index.Ind n Index.Lind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_9 Index.$fShowLind_9 ww1 }) -}
dd273f86abda08f160e5938f78868b29
  $s$fShowInd_$cshow3 :: Index.Ind n Index.Uind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_9 Index.$fShowUind_9 ww1 }) -}
0af483c21aeed923b14b771fa49d54d4
  $s$fShowInd_$cshow4 :: Index.Ind n Index.Lind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_19 Index.$fShowLind_19 ww1 }) -}
00d7218da21d4825476d6ec9d754e344
  $s$fShowInd_$cshow5 :: Index.Ind n Index.Uind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_19 Index.$fShowUind_19 ww1 }) -}
6e8dd8cf66f3bd927e1225c6bf479818
  $s$fShowInd_$cshow6 :: Index.Ind n Index.Lind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_20 Index.$fShowLind_20 ww1 }) -}
7fc8aa59469b405bed137d465fb38c6f
  $s$fShowInd_$cshow7 :: Index.Ind n Index.Uind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_20 Index.$fShowUind_20 ww1 }) -}
bdc5c1f6b9fd8098f514b28a753171f5
  $s$fShowInd_$cshowList ::
    [Index.Ind n Index.Lind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_3
                      Index.$fShowLind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
eaf29ebc9b549f6498fdfad3b57d412c
  $s$fShowInd_$cshowList1 ::
    [Index.Ind n Index.Uind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_3
                      Index.$fShowUind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
126bfc930e5efba26fd5a8ea1cef4438
  $s$fShowInd_$cshowList2 ::
    [Index.Ind n Index.Lind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_9
                      Index.$fShowLind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
c94af2ca7b0c78e76eb069bde5658359
  $s$fShowInd_$cshowList3 ::
    [Index.Ind n Index.Uind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_9
                      Index.$fShowUind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
221dffa667468d482e24538900f72e36
  $s$fShowInd_$cshowList4 ::
    [Index.Ind n Index.Lind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_19
                      Index.$fShowLind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
70386c9be31aaa28fce89a0975a32df1
  $s$fShowInd_$cshowList5 ::
    [Index.Ind n Index.Uind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_19
                      Index.$fShowUind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
6de742d5f7d2ae71fd5dacd978fc0e82
  $s$fShowInd_$cshowList6 ::
    [Index.Ind n Index.Lind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_20
                      Index.$fShowLind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
c8ac29647cb8630abbbe0d9e57f652f9
  $s$fShowInd_$cshowList7 ::
    [Index.Ind n Index.Uind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_20
                      Index.$fShowUind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
ce7e38a02d688952151c05dd54a13dc4
  $s$fShowInd_$cshowsPrec ::
    GHC.Types.Int -> Index.Ind n Index.Lind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_3
                   Index.$fShowLind_3
                   ww1
                   ww3 } }) -}
10634ae3972289189597ed0221ef112e
  $s$fShowInd_$cshowsPrec1 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_3
                   Index.$fShowUind_3
                   ww1
                   ww3 } }) -}
508c51dd7dda037f65af1609025a6dfe
  $s$fShowInd_$cshowsPrec2 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_9
                   Index.$fShowLind_9
                   ww1
                   ww3 } }) -}
d2912b0e327db4c4019dbf95e6fa1140
  $s$fShowInd_$cshowsPrec3 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_9
                   Index.$fShowUind_9
                   ww1
                   ww3 } }) -}
6484a0fa5322423ab13e5fc553bbb88a
  $s$fShowInd_$cshowsPrec4 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_19
                   Index.$fShowLind_19
                   ww1
                   ww3 } }) -}
c880860771caabdfdf75ad8504a6a965
  $s$fShowInd_$cshowsPrec5 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_19
                   Index.$fShowUind_19
                   ww1
                   ww3 } }) -}
a80884ed6f3d70b8ad9dec27ebc1aef8
  $s$fShowInd_$cshowsPrec6 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_20
                   Index.$fShowLind_20
                   ww1
                   ww3 } }) -}
9c13ece2a8708fe9e7bf2ac36072998e
  $s$fShowInd_$cshowsPrec7 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_20
                   Index.$fShowUind_20
                   ww1
                   ww3 } }) -}
5f2a1e30d1721568b15c3042721846c7
  $tc'Tensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12818042684598350646##
                   14291769805369570361##
                   Tensor.$trModule
                   Tensor.$tc'Tensor2
                   9#
                   Tensor.$tc'Tensor1) -}
5596a26efcd24c4c9dfe567f1a2f272c
  $tc'Tensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ce00cdfd7748930d095a56929eb9141
  $tc'Tensor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$tc'Tensor3) -}
35bcb15695cfd8740e67fd21fbf81243
  $tc'Tensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tensor"#) -}
df4df1604a6cc32eefb879d8e8963b4f
  $tcTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16721014749436762582##
                   10886807482571654239##
                   Tensor.$trModule
                   Tensor.$trModule1
                   0#
                   Tensor.$tcTensor1) -}
e9a7914fe5cca5a97176b51483defd45
  $tcTensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb58da39157c7dde6e5d9cfc4f8dad63
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tensor.$trModule3
                   Tensor.$trModule1) -}
4999b7020a19b0c26a85ce9c5f0929f1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule2) -}
d5791154d3f1a17af509c3a8e7372c52
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor"#) -}
3aa19db5c63e324ff2d3a70ecc4b28c3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule4) -}
3b60604511356ab7892a3ac039f477e7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
7d8631558dec3ee180ff69a138a11795
  $w$c<$ ::
    a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b) ->
                 {__scc {main:Tensor.fmap} True False} (# {__scc {main:Tensor.fmap} False True} letrec {
                                                                                                  go8 :: Data.Map.Internal.Map
                                                                                                           (Index.Index
                                                                                                              n1
                                                                                                              n2
                                                                                                              n3
                                                                                                              n4
                                                                                                              n5
                                                                                                              n6
                                                                                                              n7
                                                                                                              n8)
                                                                                                           b
                                                                                                         -> Data.Map.Internal.Map
                                                                                                              (Index.Index
                                                                                                                 n1
                                                                                                                 n2
                                                                                                                 n3
                                                                                                                 n4
                                                                                                                 n5
                                                                                                                 n6
                                                                                                                 n7
                                                                                                                 n8)
                                                                                                              a
                                                                                                    {- Arity: 1,
                                                                                                       Strictness: <S,1*U> -}
                                                                                                  = \ (ds :: Data.Map.Internal.Map
                                                                                                               (Index.Index
                                                                                                                  n1
                                                                                                                  n2
                                                                                                                  n3
                                                                                                                  n4
                                                                                                                  n5
                                                                                                                  n6
                                                                                                                  n7
                                                                                                                  n8)
                                                                                                               b) ->
                                                                                                    case ds of wild {
                                                                                                      Data.Map.Internal.Bin dt kx x l r
                                                                                                      -> case w of x' { DEFAULT ->
                                                                                                         case go8
                                                                                                                l of dt1 { DEFAULT ->
                                                                                                         case go8
                                                                                                                r of dt2 { DEFAULT ->
                                                                                                         Data.Map.Internal.Bin
                                                                                                           @ (Index.Index
                                                                                                                n1
                                                                                                                n2
                                                                                                                n3
                                                                                                                n4
                                                                                                                n5
                                                                                                                n6
                                                                                                                n7
                                                                                                                n8)
                                                                                                           @ a
                                                                                                           dt
                                                                                                           kx
                                                                                                           x'
                                                                                                           dt1
                                                                                                           dt2 } } }
                                                                                                      Data.Map.Internal.Tip
                                                                                                      -> Data.Map.Internal.Tip
                                                                                                           @ (Index.Index
                                                                                                                n1
                                                                                                                n2
                                                                                                                n3
                                                                                                                n4
                                                                                                                n5
                                                                                                                n6
                                                                                                                n7
                                                                                                                n8)
                                                                                                           @ a }
                                                                                                } in
                                                                                                go8
                                                                                                  ww #)) -}
13741634dcf2d543d46cb5a40a0c37b0
  $w$cshow ::
    GHC.Show.Show a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.showsPrec} True False} {__scc {main:Tensor.showsPrec} False True} GHC.Base.++
                                                                                                         @ GHC.Types.Char
                                                                                                         Tensor.$fShowTensor2
                                                                                                         (Data.Map.Internal.$w$cshowsPrec
                                                                                                            @ (Index.Uinds_20
                                                                                                                 n1,
                                                                                                               Index.Linds_20
                                                                                                                 n2,
                                                                                                               Index.Uinds_19
                                                                                                                 n3,
                                                                                                               Index.Linds_19
                                                                                                                 n4,
                                                                                                               Index.Uinds_9
                                                                                                                 n5,
                                                                                                               Index.Linds_9
                                                                                                                 n6,
                                                                                                               Index.Uinds_3
                                                                                                                 n7,
                                                                                                               Index.Linds_3
                                                                                                                 n8)
                                                                                                            @ a
                                                                                                            (Tensor.$fShowTensor4
                                                                                                               @ n1
                                                                                                               @ n2
                                                                                                               @ n3
                                                                                                               @ n4
                                                                                                               @ n5
                                                                                                               @ n6
                                                                                                               @ n7
                                                                                                               @ n8)
                                                                                                            w
                                                                                                            11#
                                                                                                            ww
                                                                                                            (GHC.Types.[]
                                                                                                               @ GHC.Types.Char))) -}
d39e79fd512fba1d02f60a72addb9502
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.showsPrec} True True} let {
                                                             g :: GHC.Base.String -> GHC.Base.String
                                                             = Data.Map.Internal.$w$cshowsPrec
                                                                 @ (Index.Uinds_20 n1,
                                                                    Index.Linds_20 n2,
                                                                    Index.Uinds_19 n3,
                                                                    Index.Linds_19 n4,
                                                                    Index.Uinds_9 n5,
                                                                    Index.Linds_9 n6,
                                                                    Index.Uinds_3 n7,
                                                                    Index.Linds_3 n8)
                                                                 @ a
                                                                 (Tensor.$fShowTensor4
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8)
                                                                 w
                                                                 11#
                                                                 ww1
                                                           } in
                                                           case GHC.Prim.>=# ww 11# of lwild {
                                                             DEFAULT
                                                             -> \ (x :: GHC.Base.String) ->
                                                                GHC.Base.++
                                                                  @ GHC.Types.Char
                                                                  Tensor.$fShowTensor2
                                                                  (g x)
                                                             1#
                                                             -> \ (x :: GHC.Base.String) ->
                                                                GHC.Types.:
                                                                  @ GHC.Types.Char
                                                                  GHC.Show.$fShow(,)4
                                                                  (GHC.Base.++
                                                                     @ GHC.Types.Char
                                                                     Tensor.$fShowTensor2
                                                                     (g (GHC.Types.:
                                                                           @ GHC.Types.Char
                                                                           GHC.Show.$fShow(,)2
                                                                           x))) }) -}
3e3f119caf2acf69ed341bad31f885b1
  $w$sfactorial :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
3cd789d954e3d37bcaeddd77abd5d979
  $waSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case {__scc {main:Tensor.aSymTensor} True True} Tensor.$wtensorTranspose
                                                                   @ n1
                                                                   @ n2
                                                                   @ n3
                                                                   @ n4
                                                                   @ n5
                                                                   @ n6
                                                                   @ n7
                                                                   @ n8
                                                                   @ a
                                                                   w1
                                                                   w2
                                                                   ww of ww1 { Unit# ww2 ->
                 case {__scc {main:Tensor.aSymTensor} False True} Tensor.$wtensorSub
                                                                    @ a
                                                                    @ n1
                                                                    @ n2
                                                                    @ n3
                                                                    @ n4
                                                                    @ n5
                                                                    @ n6
                                                                    @ n7
                                                                    @ n8
                                                                    $dNum
                                                                    ww
                                                                    ww2 of ww3 { Unit# ww4 ->
                 case {__scc {main:Tensor.aSymTensor} False True} let {
                                                                    a1 :: a
                                                                    = GHC.Real./
                                                                        @ a
                                                                        w
                                                                        (GHC.Num.fromInteger
                                                                           @ a
                                                                           $dNum
                                                                           Tensor.aSymTensor2)
                                                                        (GHC.Num.fromInteger
                                                                           @ a
                                                                           $dNum
                                                                           Tensor.aSymTensor1)
                                                                  } in
                                                                  {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                    @ n1
                                                                                                                                                                                                    @ n2
                                                                                                                                                                                                    @ n3
                                                                                                                                                                                                    @ n4
                                                                                                                                                                                                    @ n5
                                                                                                                                                                                                    @ n6
                                                                                                                                                                                                    @ n7
                                                                                                                                                                                                    @ n8
                                                                                                                                                                                                    @ a
                                                                                                                                                                                                    (let {
                                                                                                                                                                                                       f :: a
                                                                                                                                                                                                            -> a
                                                                                                                                                                                                       = GHC.Num.*
                                                                                                                                                                                                           @ a
                                                                                                                                                                                                           $dNum
                                                                                                                                                                                                           a1
                                                                                                                                                                                                     } in
                                                                                                                                                                                                     {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                                             @ (Index.Index
                                                                                                                                                                                                                                                  n1
                                                                                                                                                                                                                                                  n2
                                                                                                                                                                                                                                                  n3
                                                                                                                                                                                                                                                  n4
                                                                                                                                                                                                                                                  n5
                                                                                                                                                                                                                                                  n6
                                                                                                                                                                                                                                                  n7
                                                                                                                                                                                                                                                  n8)
                                                                                                                                                                                                                                             f
                                                                                                                                                                                                                                             ww4) of ww5 { Tensor.Tensor ww6 ->
                 (# ww6 #) } } }) -}
654a6cb14d8e5b84576687c50c6a53a8
  $wblockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U,U)><L,U>,
     Inline: [0] -}
61b2284cbf2bd9b9c7e7cfab52cc7035
  $wsymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case {__scc {main:Tensor.symTensor} True True} Tensor.$wtensorTranspose
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8
                                                                  @ a
                                                                  w1
                                                                  w2
                                                                  ww of ww1 { Unit# ww2 ->
                 case {__scc {main:Tensor.symTensor} False True} let {
                                                                   ds :: Data.Map.Internal.Map
                                                                           (Index.Index
                                                                              n1
                                                                              n2
                                                                              n3
                                                                              n4
                                                                              n5
                                                                              n6
                                                                              n7
                                                                              n8)
                                                                           a
                                                                   = let {
                                                                       lvl19 :: a -> a -> a
                                                                       = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+
                                                                                                                      @ a
                                                                                                                      $dNum
                                                                     } in
                                                                     {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                  @ (Index.Index
                                                                                                                       n1
                                                                                                                       n2
                                                                                                                       n3
                                                                                                                       n4
                                                                                                                       n5
                                                                                                                       n6
                                                                                                                       n7
                                                                                                                       n8)
                                                                                                                  @ a
                                                                                                                  (Tensor.aSymTensor3
                                                                                                                     @ n1
                                                                                                                     @ n2
                                                                                                                     @ n3
                                                                                                                     @ n4
                                                                                                                     @ n5
                                                                                                                     @ n6
                                                                                                                     @ n7
                                                                                                                     @ n8)
                                                                                                                  lvl19
                                                                                                                  ww
                                                                                                                  ww2
                                                                 } in
                                                                 let {
                                                                   a1 :: a
                                                                   = GHC.Real./
                                                                       @ a
                                                                       w
                                                                       (GHC.Num.fromInteger
                                                                          @ a
                                                                          $dNum
                                                                          Tensor.aSymTensor2)
                                                                       (GHC.Num.fromInteger
                                                                          @ a
                                                                          $dNum
                                                                          Tensor.aSymTensor1)
                                                                 } in
                                                                 {__scc {main:Tensor.tensorAdd} True False} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                              @ n1
                                                                                                                                                                                                                                              @ n2
                                                                                                                                                                                                                                              @ n3
                                                                                                                                                                                                                                              @ n4
                                                                                                                                                                                                                                              @ n5
                                                                                                                                                                                                                                              @ n6
                                                                                                                                                                                                                                              @ n7
                                                                                                                                                                                                                                              @ n8
                                                                                                                                                                                                                                              @ a
                                                                                                                                                                                                                                              (let {
                                                                                                                                                                                                                                                 f :: a
                                                                                                                                                                                                                                                      -> a
                                                                                                                                                                                                                                                 = GHC.Num.*
                                                                                                                                                                                                                                                     @ a
                                                                                                                                                                                                                                                     $dNum
                                                                                                                                                                                                                                                     a1
                                                                                                                                                                                                                                               } in
                                                                                                                                                                                                                                               {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                                                                       @ a
                                                                                                                                                                                                                                                                                       @ a
                                                                                                                                                                                                                                                                                       @ (Index.Index
                                                                                                                                                                                                                                                                                            n1
                                                                                                                                                                                                                                                                                            n2
                                                                                                                                                                                                                                                                                            n3
                                                                                                                                                                                                                                                                                            n4
                                                                                                                                                                                                                                                                                            n5
                                                                                                                                                                                                                                                                                            n6
                                                                                                                                                                                                                                                                                            n7
                                                                                                                                                                                                                                                                                            n8)
                                                                                                                                                                                                                                                                                       f
                                                                                                                                                                                                                                                                                       ds) of ww3 { Tensor.Tensor ww4 ->
                 (# ww4 #) } }) -}
a3111c53c7705cd50c367d4009d6f441
  $wtensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_19} True False} (# {__scc {main:Tensor.tensorContractWith_19} False True} let {
                                                                                                                                    mapFilt :: Data.Map.Internal.Map
                                                                                                                                                 (Index.Index
                                                                                                                                                    n1
                                                                                                                                                    n2
                                                                                                                                                    (n3
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    (n4
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    n5
                                                                                                                                                    n6
                                                                                                                                                    n7
                                                                                                                                                    n8)
                                                                                                                                                 a
                                                                                                                                    = {__scc {main:Tensor.tensorContractWith_19.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                           n1
                                                                                                                                                                                                           n2
                                                                                                                                                                                                           (n3
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           (n4
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           n5
                                                                                                                                                                                                           n6
                                                                                                                                                                                                           n7
                                                                                                                                                                                                           n8)
                                                                                                                                                                                                      @ a
                                                                                                                                                                                                      (\ (k :: Index.Index
                                                                                                                                                                                                                 n1
                                                                                                                                                                                                                 n2
                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 n5
                                                                                                                                                                                                                 n6
                                                                                                                                                                                                                 n7
                                                                                                                                                                                                                 n8)
                                                                                                                                                                                                         (ds :: a)[OneShot] ->
                                                                                                                                                                                                       {__scc {main:Tensor.tensorContractWith_19.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                         @ n1
                                                                                                                                                                                                                                                                         @ n2
                                                                                                                                                                                                                                                                         @ (n3
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ (n4
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ n5
                                                                                                                                                                                                                                                                         @ n6
                                                                                                                                                                                                                                                                         @ n7
                                                                                                                                                                                                                                                                         @ n8
                                                                                                                                                                                                                                                                         Tensor.tensorContractWith_1
                                                                                                                                                                                                                                                                         w2
                                                                                                                                                                                                                                                                         k)
                                                                                                                                                                                                      ww
                                                                                                                                  } in
                                                                                                                                  {__scc {main:Tensor.tensorContractWith_19.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               @ a
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    (n3
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    (n4
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               (Tensor.aSymTensor3
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8)
                                                                                                                                                                                               w3
                                                                                                                                                                                               (Index.delContractionIndex_19
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  w
                                                                                                                                                                                                  w1
                                                                                                                                                                                                  w2)
                                                                                                                                                                                               mapFilt #)) -}
785cf5d5c8800c6329ba580031f0b44a
  $wtensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_20} True False} (# {__scc {main:Tensor.tensorContractWith_20} False True} let {
                                                                                                                                    mapFilt :: Data.Map.Internal.Map
                                                                                                                                                 (Index.Index
                                                                                                                                                    (n1
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    (n2
                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                    n3
                                                                                                                                                    n4
                                                                                                                                                    n5
                                                                                                                                                    n6
                                                                                                                                                    n7
                                                                                                                                                    n8)
                                                                                                                                                 a
                                                                                                                                    = {__scc {main:Tensor.tensorContractWith_20.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                      @ (Index.Index
                                                                                                                                                                                                           (n1
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           (n2
                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                           n3
                                                                                                                                                                                                           n4
                                                                                                                                                                                                           n5
                                                                                                                                                                                                           n6
                                                                                                                                                                                                           n7
                                                                                                                                                                                                           n8)
                                                                                                                                                                                                      @ a
                                                                                                                                                                                                      (\ (k :: Index.Index
                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                                 n3
                                                                                                                                                                                                                 n4
                                                                                                                                                                                                                 n5
                                                                                                                                                                                                                 n6
                                                                                                                                                                                                                 n7
                                                                                                                                                                                                                 n8)
                                                                                                                                                                                                         (ds :: a)[OneShot] ->
                                                                                                                                                                                                       {__scc {main:Tensor.tensorContractWith_20.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                         @ (n1
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ (n2
                                                                                                                                                                                                                                                                            GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                         @ n3
                                                                                                                                                                                                                                                                         @ n4
                                                                                                                                                                                                                                                                         @ n5
                                                                                                                                                                                                                                                                         @ n6
                                                                                                                                                                                                                                                                         @ n7
                                                                                                                                                                                                                                                                         @ n8
                                                                                                                                                                                                                                                                         Tensor.tensorContractWith_2
                                                                                                                                                                                                                                                                         w2
                                                                                                                                                                                                                                                                         k)
                                                                                                                                                                                                      ww
                                                                                                                                  } in
                                                                                                                                  {__scc {main:Tensor.tensorContractWith_20.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    n1
                                                                                                                                                                                                    n2
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               @ a
                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                    (n1
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    (n2
                                                                                                                                                                                                     GHC.TypeNats.+ 1)
                                                                                                                                                                                                    n3
                                                                                                                                                                                                    n4
                                                                                                                                                                                                    n5
                                                                                                                                                                                                    n6
                                                                                                                                                                                                    n7
                                                                                                                                                                                                    n8)
                                                                                                                                                                                               (Tensor.aSymTensor3
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8)
                                                                                                                                                                                               w3
                                                                                                                                                                                               (Index.delContractionIndex_20
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  w
                                                                                                                                                                                                  w1
                                                                                                                                                                                                  w2)
                                                                                                                                                                                               mapFilt #)) -}
097d7f8d0ce788da2a56af7a4decb4d3
  $wtensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_3} True False} (# {__scc {main:Tensor.tensorContractWith_3} False True} let {
                                                                                                                                  mapFilt :: Data.Map.Internal.Map
                                                                                                                                               (Index.Index
                                                                                                                                                  n1
                                                                                                                                                  n2
                                                                                                                                                  n3
                                                                                                                                                  n4
                                                                                                                                                  n5
                                                                                                                                                  n6
                                                                                                                                                  (n7
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  (n8
                                                                                                                                                   GHC.TypeNats.+ 1))
                                                                                                                                               a
                                                                                                                                  = {__scc {main:Tensor.tensorContractWith_3.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                        n1
                                                                                                                                                                                                        n2
                                                                                                                                                                                                        n3
                                                                                                                                                                                                        n4
                                                                                                                                                                                                        n5
                                                                                                                                                                                                        n6
                                                                                                                                                                                                        (n7
                                                                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                                                                        (n8
                                                                                                                                                                                                         GHC.TypeNats.+ 1))
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   (\ (k :: Index.Index
                                                                                                                                                                                                              n1
                                                                                                                                                                                                              n2
                                                                                                                                                                                                              n3
                                                                                                                                                                                                              n4
                                                                                                                                                                                                              n5
                                                                                                                                                                                                              n6
                                                                                                                                                                                                              (n7
                                                                                                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                                                                                                              (n8
                                                                                                                                                                                                               GHC.TypeNats.+ 1))
                                                                                                                                                                                                      (ds :: a)[OneShot] ->
                                                                                                                                                                                                    {__scc {main:Tensor.tensorContractWith_3.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                     @ n1
                                                                                                                                                                                                                                                                     @ n2
                                                                                                                                                                                                                                                                     @ n3
                                                                                                                                                                                                                                                                     @ n4
                                                                                                                                                                                                                                                                     @ n5
                                                                                                                                                                                                                                                                     @ n6
                                                                                                                                                                                                                                                                     @ (n7
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     @ (n8
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     Tensor.tensorContractWith_4
                                                                                                                                                                                                                                                                     w2
                                                                                                                                                                                                                                                                     k)
                                                                                                                                                                                                   ww
                                                                                                                                } in
                                                                                                                                {__scc {main:Tensor.tensorContractWith_3.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            @ a
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 (n7
                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                 (n8
                                                                                                                                                                                                  GHC.TypeNats.+ 1))
                                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8)
                                                                                                                                                                                            w3
                                                                                                                                                                                            (Index.delContractionIndex_3
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               w
                                                                                                                                                                                               w1
                                                                                                                                                                                               w2)
                                                                                                                                                                                            mapFilt #)) -}
edc25ed129982084a40b9f6197722358
  $wtensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                            a) ->
                 {__scc {main:Tensor.tensorContractWith_9} True False} (# {__scc {main:Tensor.tensorContractWith_9} False True} let {
                                                                                                                                  mapFilt :: Data.Map.Internal.Map
                                                                                                                                               (Index.Index
                                                                                                                                                  n1
                                                                                                                                                  n2
                                                                                                                                                  n3
                                                                                                                                                  n4
                                                                                                                                                  (n5
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  (n6
                                                                                                                                                   GHC.TypeNats.+ 1)
                                                                                                                                                  n7
                                                                                                                                                  n8)
                                                                                                                                               a
                                                                                                                                  = {__scc {main:Tensor.tensorContractWith_9.mapFilt} True True} Data.Map.Internal.filterWithKey
                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                        n1
                                                                                                                                                                                                        n2
                                                                                                                                                                                                        n3
                                                                                                                                                                                                        n4
                                                                                                                                                                                                        (n5
                                                                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                                                                        (n6
                                                                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                                                                        n7
                                                                                                                                                                                                        n8)
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   (\ (k :: Index.Index
                                                                                                                                                                                                              n1
                                                                                                                                                                                                              n2
                                                                                                                                                                                                              n3
                                                                                                                                                                                                              n4
                                                                                                                                                                                                              (n5
                                                                                                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                                                                                                              (n6
                                                                                                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                                                                                                              n7
                                                                                                                                                                                                              n8)
                                                                                                                                                                                                      (ds :: a)[OneShot] ->
                                                                                                                                                                                                    {__scc {main:Tensor.tensorContractWith_9.mapFilt.\} True True} Index.isContractionIndex
                                                                                                                                                                                                                                                                     @ n1
                                                                                                                                                                                                                                                                     @ n2
                                                                                                                                                                                                                                                                     @ n3
                                                                                                                                                                                                                                                                     @ n4
                                                                                                                                                                                                                                                                     @ (n5
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     @ (n6
                                                                                                                                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                                                                                                                                     @ n7
                                                                                                                                                                                                                                                                     @ n8
                                                                                                                                                                                                                                                                     Tensor.tensorContractWith_5
                                                                                                                                                                                                                                                                     w2
                                                                                                                                                                                                                                                                     k)
                                                                                                                                                                                                   ww
                                                                                                                                } in
                                                                                                                                {__scc {main:Tensor.tensorContractWith_9.map2} True True} Data.Map.Strict.Internal.mapKeysWith
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            @ a
                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 (n5
                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                 (n6
                                                                                                                                                                                                  GHC.TypeNats.+ 1)
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8)
                                                                                                                                                                                            w3
                                                                                                                                                                                            (Index.delContractionIndex_9
                                                                                                                                                                                               @ n5
                                                                                                                                                                                               @ n6
                                                                                                                                                                                               @ n1
                                                                                                                                                                                               @ n2
                                                                                                                                                                                               @ n3
                                                                                                                                                                                               @ n4
                                                                                                                                                                                               @ n7
                                                                                                                                                                                               @ n8
                                                                                                                                                                                               w
                                                                                                                                                                                               w1
                                                                                                                                                                                               w2)
                                                                                                                                                                                            mapFilt #)) -}
9646ab6c5d071ddd5682af56cfbfabbf
  $wtensorProductWith ::
    (a -> b -> c)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b
    -> (# Data.Map.Internal.Map
            (Index.Index
               (n1 GHC.TypeNats.+ m1)
               (n2 GHC.TypeNats.+ m2)
               (n3 GHC.TypeNats.+ m3)
               (n4 GHC.TypeNats.+ m4)
               (n5 GHC.TypeNats.+ m5)
               (n6 GHC.TypeNats.+ m6)
               (n7 GHC.TypeNats.+ m7)
               (n8 GHC.TypeNats.+ m8))
            c #)
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b) ->
                 {__scc {main:Tensor.tensorProductWith} True False} (# {__scc {main:Tensor.tensorProductWith} False True} let {
                                                                                                                            indList :: [Index.Index
                                                                                                                                          m1
                                                                                                                                          m2
                                                                                                                                          m3
                                                                                                                                          m4
                                                                                                                                          m5
                                                                                                                                          m6
                                                                                                                                          m7
                                                                                                                                          m8]
                                                                                                                            = {__scc {main:Tensor.tensorProductWith.indList} True True} Data.Map.Internal.keys_go
                                                                                                                                                                                          @ (Index.Uinds_20
                                                                                                                                                                                               m1,
                                                                                                                                                                                             Index.Linds_20
                                                                                                                                                                                               m2,
                                                                                                                                                                                             Index.Uinds_19
                                                                                                                                                                                               m3,
                                                                                                                                                                                             Index.Linds_19
                                                                                                                                                                                               m4,
                                                                                                                                                                                             Index.Uinds_9
                                                                                                                                                                                               m5,
                                                                                                                                                                                             Index.Linds_9
                                                                                                                                                                                               m6,
                                                                                                                                                                                             Index.Uinds_3
                                                                                                                                                                                               m7,
                                                                                                                                                                                             Index.Linds_3
                                                                                                                                                                                               m8)
                                                                                                                                                                                          @ b
                                                                                                                                                                                          (GHC.Types.[]
                                                                                                                                                                                             @ (Index.Uinds_20
                                                                                                                                                                                                  m1,
                                                                                                                                                                                                Index.Linds_20
                                                                                                                                                                                                  m2,
                                                                                                                                                                                                Index.Uinds_19
                                                                                                                                                                                                  m3,
                                                                                                                                                                                                Index.Linds_19
                                                                                                                                                                                                  m4,
                                                                                                                                                                                                Index.Uinds_9
                                                                                                                                                                                                  m5,
                                                                                                                                                                                                Index.Linds_9
                                                                                                                                                                                                  m6,
                                                                                                                                                                                                Index.Uinds_3
                                                                                                                                                                                                  m7,
                                                                                                                                                                                                Index.Linds_3
                                                                                                                                                                                                  m8))
                                                                                                                                                                                          ww1
                                                                                                                          } in
                                                                                                                          let {
                                                                                                                            mapList :: [Data.Map.Internal.Map
                                                                                                                                          (Index.Index
                                                                                                                                             (n1
                                                                                                                                              GHC.TypeNats.+ m1)
                                                                                                                                             (n2
                                                                                                                                              GHC.TypeNats.+ m2)
                                                                                                                                             (n3
                                                                                                                                              GHC.TypeNats.+ m3)
                                                                                                                                             (n4
                                                                                                                                              GHC.TypeNats.+ m4)
                                                                                                                                             (n5
                                                                                                                                              GHC.TypeNats.+ m5)
                                                                                                                                             (n6
                                                                                                                                              GHC.TypeNats.+ m6)
                                                                                                                                             (n7
                                                                                                                                              GHC.TypeNats.+ m7)
                                                                                                                                             (n8
                                                                                                                                              GHC.TypeNats.+ m8))
                                                                                                                                          c]
                                                                                                                            = {__scc {main:Tensor.tensorProductWith.mapList} True True} GHC.Base.map
                                                                                                                                                                                          @ (Index.Uinds_20
                                                                                                                                                                                               m1,
                                                                                                                                                                                             Index.Linds_20
                                                                                                                                                                                               m2,
                                                                                                                                                                                             Index.Uinds_19
                                                                                                                                                                                               m3,
                                                                                                                                                                                             Index.Linds_19
                                                                                                                                                                                               m4,
                                                                                                                                                                                             Index.Uinds_9
                                                                                                                                                                                               m5,
                                                                                                                                                                                             Index.Linds_9
                                                                                                                                                                                               m6,
                                                                                                                                                                                             Index.Uinds_3
                                                                                                                                                                                               m7,
                                                                                                                                                                                             Index.Linds_3
                                                                                                                                                                                               m8)
                                                                                                                                                                                          @ (Data.Map.Internal.Map
                                                                                                                                                                                               (Index.Index
                                                                                                                                                                                                  (n1
                                                                                                                                                                                                   GHC.TypeNats.+ m1)
                                                                                                                                                                                                  (n2
                                                                                                                                                                                                   GHC.TypeNats.+ m2)
                                                                                                                                                                                                  (n3
                                                                                                                                                                                                   GHC.TypeNats.+ m3)
                                                                                                                                                                                                  (n4
                                                                                                                                                                                                   GHC.TypeNats.+ m4)
                                                                                                                                                                                                  (n5
                                                                                                                                                                                                   GHC.TypeNats.+ m5)
                                                                                                                                                                                                  (n6
                                                                                                                                                                                                   GHC.TypeNats.+ m6)
                                                                                                                                                                                                  (n7
                                                                                                                                                                                                   GHC.TypeNats.+ m7)
                                                                                                                                                                                                  (n8
                                                                                                                                                                                                   GHC.TypeNats.+ m8))
                                                                                                                                                                                               c)
                                                                                                                                                                                          (\ (index :: Index.Index
                                                                                                                                                                                                         m1
                                                                                                                                                                                                         m2
                                                                                                                                                                                                         m3
                                                                                                                                                                                                         m4
                                                                                                                                                                                                         m5
                                                                                                                                                                                                         m6
                                                                                                                                                                                                         m7
                                                                                                                                                                                                         m8) ->
                                                                                                                                                                                           {__scc {main:Tensor.tensorProductF} True True} let {
                                                                                                                                                                                                                                            val :: b
                                                                                                                                                                                                                                            = {__scc {main:Tensor.tensorProductF.val} True True} Data.Map.Internal.find
                                                                                                                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                                                                                                                        m1
                                                                                                                                                                                                                                                                                                        m2
                                                                                                                                                                                                                                                                                                        m3
                                                                                                                                                                                                                                                                                                        m4
                                                                                                                                                                                                                                                                                                        m5
                                                                                                                                                                                                                                                                                                        m6
                                                                                                                                                                                                                                                                                                        m7
                                                                                                                                                                                                                                                                                                        m8)
                                                                                                                                                                                                                                                                                                   @ b
                                                                                                                                                                                                                                                                                                   (Tensor.aSymTensor4
                                                                                                                                                                                                                                                                                                      @ m8
                                                                                                                                                                                                                                                                                                      @ m7
                                                                                                                                                                                                                                                                                                      @ m6
                                                                                                                                                                                                                                                                                                      @ m5
                                                                                                                                                                                                                                                                                                      @ m4
                                                                                                                                                                                                                                                                                                      @ m3
                                                                                                                                                                                                                                                                                                      @ m2
                                                                                                                                                                                                                                                                                                      @ m1)
                                                                                                                                                                                                                                                                                                   index
                                                                                                                                                                                                                                                                                                   ww1
                                                                                                                                                                                                                                          } in
                                                                                                                                                                                                                                          {__scc {main:Tensor.tensorProductF.map3} True True} letrec {
                                                                                                                                                                                                                                                                                                go8 :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                         (Index.Index
                                                                                                                                                                                                                                                                                                            (n1
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                            (n2
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                            (n3
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                            (n4
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                            (n5
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                            (n6
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                            (n7
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                            (n8
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                         a
                                                                                                                                                                                                                                                                                                       -> Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                            (Index.Index
                                                                                                                                                                                                                                                                                                               (n1
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                               (n2
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                               (n3
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                               (n4
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                               (n5
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                               (n6
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                               (n7
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                               (n8
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                            c
                                                                                                                                                                                                                                                                                                  {- Arity: 1,
                                                                                                                                                                                                                                                                                                     Strictness: <S,1*U> -}
                                                                                                                                                                                                                                                                                                = \ (ds :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                             (Index.Index
                                                                                                                                                                                                                                                                                                                (n1
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                (n2
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                (n3
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                (n4
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                (n5
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                (n6
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                (n7
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                (n8
                                                                                                                                                                                                                                                                                                                 GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                             a) ->
                                                                                                                                                                                                                                                                                                  case ds of wild {
                                                                                                                                                                                                                                                                                                    Data.Map.Internal.Bin dt kx x l r
                                                                                                                                                                                                                                                                                                    -> case {__scc {main:Tensor.tensorProductF.map3.\} True True} w x
                                                                                                                                                                                                                                                                                                                                                                    val of x' { DEFAULT ->
                                                                                                                                                                                                                                                                                                       case go8
                                                                                                                                                                                                                                                                                                              l of dt1 { DEFAULT ->
                                                                                                                                                                                                                                                                                                       case go8
                                                                                                                                                                                                                                                                                                              r of dt2 { DEFAULT ->
                                                                                                                                                                                                                                                                                                       Data.Map.Internal.Bin
                                                                                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                                                                                              (n1
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                              (n2
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                              (n3
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                              (n4
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                              (n5
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                              (n6
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                              (n7
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                              (n8
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                         @ c
                                                                                                                                                                                                                                                                                                         dt
                                                                                                                                                                                                                                                                                                         kx
                                                                                                                                                                                                                                                                                                         x'
                                                                                                                                                                                                                                                                                                         dt1
                                                                                                                                                                                                                                                                                                         dt2 } } }
                                                                                                                                                                                                                                                                                                    Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                    -> Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                                                                                              (n1
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                              (n2
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                              (n3
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                              (n4
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                              (n5
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                              (n6
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                              (n7
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                              (n8
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                         @ c }
                                                                                                                                                                                                                                                                                              } in
                                                                                                                                                                                                                                                                                              letrec {
                                                                                                                                                                                                                                                                                                go13 :: [(Index.Index
                                                                                                                                                                                                                                                                                                            (n1
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                            (n2
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                            (n3
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                            (n4
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                            (n5
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                            (n6
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                            (n7
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                            (n8
                                                                                                                                                                                                                                                                                                             GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                          a)]
                                                                                                                                                                                                                                                                                                        -> Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                             (Index.Index
                                                                                                                                                                                                                                                                                                                n1
                                                                                                                                                                                                                                                                                                                n2
                                                                                                                                                                                                                                                                                                                n3
                                                                                                                                                                                                                                                                                                                n4
                                                                                                                                                                                                                                                                                                                n5
                                                                                                                                                                                                                                                                                                                n6
                                                                                                                                                                                                                                                                                                                n7
                                                                                                                                                                                                                                                                                                                n8)
                                                                                                                                                                                                                                                                                                             a
                                                                                                                                                                                                                                                                                                        -> [(Index.Index
                                                                                                                                                                                                                                                                                                               (n1
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                               (n2
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                               (n3
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                               (n4
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                               (n5
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                               (n6
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                               (n7
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                               (n8
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                             a)]
                                                                                                                                                                                                                                                                                                  {- Arity: 2,
                                                                                                                                                                                                                                                                                                     Strictness: <L,1*U><S,1*U> -}
                                                                                                                                                                                                                                                                                                = \ (z' :: [(Index.Index
                                                                                                                                                                                                                                                                                                               (n1
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                               (n2
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                               (n3
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                               (n4
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                               (n5
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                               (n6
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                               (n7
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                               (n8
                                                                                                                                                                                                                                                                                                                GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                             a)])
                                                                                                                                                                                                                                                                                                    (ds :: Data.Map.Internal.Map
                                                                                                                                                                                                                                                                                                             (Index.Index
                                                                                                                                                                                                                                                                                                                n1
                                                                                                                                                                                                                                                                                                                n2
                                                                                                                                                                                                                                                                                                                n3
                                                                                                                                                                                                                                                                                                                n4
                                                                                                                                                                                                                                                                                                                n5
                                                                                                                                                                                                                                                                                                                n6
                                                                                                                                                                                                                                                                                                                n7
                                                                                                                                                                                                                                                                                                                n8)
                                                                                                                                                                                                                                                                                                             a) ->
                                                                                                                                                                                                                                                                                                  case ds of wild {
                                                                                                                                                                                                                                                                                                    Data.Map.Internal.Bin dt kx x l r
                                                                                                                                                                                                                                                                                                    -> go13
                                                                                                                                                                                                                                                                                                         (GHC.Types.:
                                                                                                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                                                                                                 (n1
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                                 (n2
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                                 (n3
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                                 (n4
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                                 (n5
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                                 (n6
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                                 (n7
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                                 (n8
                                                                                                                                                                                                                                                                                                                  GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                               a)
                                                                                                                                                                                                                                                                                                            ({__scc {main:Tensor.tensorProductF.map3.\} True True} Index.combineIndex
                                                                                                                                                                                                                                                                                                                                                                     @ n1
                                                                                                                                                                                                                                                                                                                                                                     @ n2
                                                                                                                                                                                                                                                                                                                                                                     @ n3
                                                                                                                                                                                                                                                                                                                                                                     @ n4
                                                                                                                                                                                                                                                                                                                                                                     @ n5
                                                                                                                                                                                                                                                                                                                                                                     @ n6
                                                                                                                                                                                                                                                                                                                                                                     @ n7
                                                                                                                                                                                                                                                                                                                                                                     @ n8
                                                                                                                                                                                                                                                                                                                                                                     @ m1
                                                                                                                                                                                                                                                                                                                                                                     @ m2
                                                                                                                                                                                                                                                                                                                                                                     @ m3
                                                                                                                                                                                                                                                                                                                                                                     @ m4
                                                                                                                                                                                                                                                                                                                                                                     @ m5
                                                                                                                                                                                                                                                                                                                                                                     @ m6
                                                                                                                                                                                                                                                                                                                                                                     @ m7
                                                                                                                                                                                                                                                                                                                                                                     @ m8
                                                                                                                                                                                                                                                                                                                                                                     kx
                                                                                                                                                                                                                                                                                                                                                                     index,
                                                                                                                                                                                                                                                                                                             x)
                                                                                                                                                                                                                                                                                                            (go13
                                                                                                                                                                                                                                                                                                               z'
                                                                                                                                                                                                                                                                                                               r))
                                                                                                                                                                                                                                                                                                         l
                                                                                                                                                                                                                                                                                                    Data.Map.Internal.Tip
                                                                                                                                                                                                                                                                                                    -> z' }
                                                                                                                                                                                                                                                                                              } in
                                                                                                                                                                                                                                                                                              go8
                                                                                                                                                                                                                                                                                                (Data.Map.Internal.fromList
                                                                                                                                                                                                                                                                                                   @ (Index.Index
                                                                                                                                                                                                                                                                                                        (n1
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                        (n2
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                        (n3
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                        (n4
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                        (n5
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                        (n6
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                        (n7
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                        (n8
                                                                                                                                                                                                                                                                                                         GHC.TypeNats.+ m8))
                                                                                                                                                                                                                                                                                                   @ a
                                                                                                                                                                                                                                                                                                   (Tensor.tensorProductWith2
                                                                                                                                                                                                                                                                                                      @ n8
                                                                                                                                                                                                                                                                                                      @ m8
                                                                                                                                                                                                                                                                                                      @ n7
                                                                                                                                                                                                                                                                                                      @ m7
                                                                                                                                                                                                                                                                                                      @ n6
                                                                                                                                                                                                                                                                                                      @ m6
                                                                                                                                                                                                                                                                                                      @ n5
                                                                                                                                                                                                                                                                                                      @ m5
                                                                                                                                                                                                                                                                                                      @ n4
                                                                                                                                                                                                                                                                                                      @ m4
                                                                                                                                                                                                                                                                                                      @ n3
                                                                                                                                                                                                                                                                                                      @ m3
                                                                                                                                                                                                                                                                                                      @ n2
                                                                                                                                                                                                                                                                                                      @ m2
                                                                                                                                                                                                                                                                                                      @ n1
                                                                                                                                                                                                                                                                                                      @ m1)
                                                                                                                                                                                                                                                                                                   (go13
                                                                                                                                                                                                                                                                                                      (GHC.Types.[]
                                                                                                                                                                                                                                                                                                         @ (Index.Index
                                                                                                                                                                                                                                                                                                              (n1
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m1)
                                                                                                                                                                                                                                                                                                              (n2
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m2)
                                                                                                                                                                                                                                                                                                              (n3
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m3)
                                                                                                                                                                                                                                                                                                              (n4
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m4)
                                                                                                                                                                                                                                                                                                              (n5
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m5)
                                                                                                                                                                                                                                                                                                              (n6
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m6)
                                                                                                                                                                                                                                                                                                              (n7
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m7)
                                                                                                                                                                                                                                                                                                              (n8
                                                                                                                                                                                                                                                                                                               GHC.TypeNats.+ m8),
                                                                                                                                                                                                                                                                                                            a))
                                                                                                                                                                                                                                                                                                      ww)))
                                                                                                                                                                                          indList
                                                                                                                          } in
                                                                                                                          {__scc {main:Tensor.tensorProductWith.newMap} True True} Tensor.tensorProductWith1
                                                                                                                                                                                     @ n1
                                                                                                                                                                                     @ m1
                                                                                                                                                                                     @ n2
                                                                                                                                                                                     @ m2
                                                                                                                                                                                     @ n3
                                                                                                                                                                                     @ m3
                                                                                                                                                                                     @ n4
                                                                                                                                                                                     @ m4
                                                                                                                                                                                     @ n5
                                                                                                                                                                                     @ m5
                                                                                                                                                                                     @ n6
                                                                                                                                                                                     @ m6
                                                                                                                                                                                     @ n7
                                                                                                                                                                                     @ m7
                                                                                                                                                                                     @ n8
                                                                                                                                                                                     @ m8
                                                                                                                                                                                     @ c
                                                                                                                                                                                     (Data.Map.Internal.Tip
                                                                                                                                                                                        @ (Index.Index
                                                                                                                                                                                             (n1
                                                                                                                                                                                              GHC.TypeNats.+ m1)
                                                                                                                                                                                             (n2
                                                                                                                                                                                              GHC.TypeNats.+ m2)
                                                                                                                                                                                             (n3
                                                                                                                                                                                              GHC.TypeNats.+ m3)
                                                                                                                                                                                             (n4
                                                                                                                                                                                              GHC.TypeNats.+ m4)
                                                                                                                                                                                             (n5
                                                                                                                                                                                              GHC.TypeNats.+ m5)
                                                                                                                                                                                             (n6
                                                                                                                                                                                              GHC.TypeNats.+ m6)
                                                                                                                                                                                             (n7
                                                                                                                                                                                              GHC.TypeNats.+ m7)
                                                                                                                                                                                             (n8
                                                                                                                                                                                              GHC.TypeNats.+ m8))
                                                                                                                                                                                        @ c)
                                                                                                                                                                                     mapList #)) -}
ea44d21b24bc8b1b349342d05baba983
  $wtensorSub ::
    GHC.Num.Num a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3,
     Strictness: <L,U(1*C(C1(U)),A,1*C1(C(U)),1*C1(U),A,A,1*C1(U))><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 case {__scc {main:Tensor.tensorSub} True True} let {
                                                                  a1 :: a
                                                                  = GHC.Num.negate
                                                                      @ a
                                                                      w
                                                                      (GHC.Num.fromInteger
                                                                         @ a
                                                                         w
                                                                         Tensor.aSymTensor2)
                                                                } in
                                                                {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                  @ n1
                                                                                                                                                                                                  @ n2
                                                                                                                                                                                                  @ n3
                                                                                                                                                                                                  @ n4
                                                                                                                                                                                                  @ n5
                                                                                                                                                                                                  @ n6
                                                                                                                                                                                                  @ n7
                                                                                                                                                                                                  @ n8
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  (let {
                                                                                                                                                                                                     f :: a
                                                                                                                                                                                                          -> a
                                                                                                                                                                                                     = GHC.Num.*
                                                                                                                                                                                                         @ a
                                                                                                                                                                                                         w
                                                                                                                                                                                                         a1
                                                                                                                                                                                                   } in
                                                                                                                                                                                                   {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                           @ a
                                                                                                                                                                                                                                           @ a
                                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                                n1
                                                                                                                                                                                                                                                n2
                                                                                                                                                                                                                                                n3
                                                                                                                                                                                                                                                n4
                                                                                                                                                                                                                                                n5
                                                                                                                                                                                                                                                n6
                                                                                                                                                                                                                                                n7
                                                                                                                                                                                                                                                n8)
                                                                                                                                                                                                                                           f
                                                                                                                                                                                                                                           ww1) of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                              @ n1
                                                                                                              @ n2
                                                                                                              @ n3
                                                                                                              @ n4
                                                                                                              @ n5
                                                                                                              @ n6
                                                                                                              @ n7
                                                                                                              @ n8
                                                                                                              @ a
                                                                                                              (let {
                                                                                                                 lvl19 :: a
                                                                                                                          -> a
                                                                                                                          -> a
                                                                                                                 = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+
                                                                                                                                                                @ a
                                                                                                                                                                w
                                                                                                               } in
                                                                                                               {__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                            @ (Index.Index
                                                                                                                                                                 n1
                                                                                                                                                                 n2
                                                                                                                                                                 n3
                                                                                                                                                                 n4
                                                                                                                                                                 n5
                                                                                                                                                                 n6
                                                                                                                                                                 n7
                                                                                                                                                                 n8)
                                                                                                                                                            @ a
                                                                                                                                                            (Tensor.aSymTensor3
                                                                                                                                                               @ n1
                                                                                                                                                               @ n2
                                                                                                                                                               @ n3
                                                                                                                                                               @ n4
                                                                                                                                                               @ n5
                                                                                                                                                               @ n6
                                                                                                                                                               @ n7
                                                                                                                                                               @ n8)
                                                                                                                                                            lvl19
                                                                                                                                                            ww
                                                                                                                                                            ww3) of ww4 { Tensor.Tensor ww5 ->
                 (# ww5 #) } }) -}
d304f1a362eed096b08202e69ca21b93
  $wtensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 {__scc {main:Tensor.tensorTranspose} True False} (# {__scc {main:Tensor.tensorTranspose} False True} letrec {
                                                                                                                        go13 :: [(Index.Index
                                                                                                                                    n1
                                                                                                                                    n2
                                                                                                                                    n3
                                                                                                                                    n4
                                                                                                                                    n5
                                                                                                                                    n6
                                                                                                                                    n7
                                                                                                                                    n8,
                                                                                                                                  a)]
                                                                                                                                -> Data.Map.Internal.Map
                                                                                                                                     (Index.Index
                                                                                                                                        n1
                                                                                                                                        n2
                                                                                                                                        n3
                                                                                                                                        n4
                                                                                                                                        n5
                                                                                                                                        n6
                                                                                                                                        n7
                                                                                                                                        n8)
                                                                                                                                     a
                                                                                                                                -> [(Index.Index
                                                                                                                                       n1
                                                                                                                                       n2
                                                                                                                                       n3
                                                                                                                                       n4
                                                                                                                                       n5
                                                                                                                                       n6
                                                                                                                                       n7
                                                                                                                                       n8,
                                                                                                                                     a)]
                                                                                                                          {- Arity: 2,
                                                                                                                             Strictness: <L,1*U><S,1*U> -}
                                                                                                                        = \ (z' :: [(Index.Index
                                                                                                                                       n1
                                                                                                                                       n2
                                                                                                                                       n3
                                                                                                                                       n4
                                                                                                                                       n5
                                                                                                                                       n6
                                                                                                                                       n7
                                                                                                                                       n8,
                                                                                                                                     a)])
                                                                                                                            (ds :: Data.Map.Internal.Map
                                                                                                                                     (Index.Index
                                                                                                                                        n1
                                                                                                                                        n2
                                                                                                                                        n3
                                                                                                                                        n4
                                                                                                                                        n5
                                                                                                                                        n6
                                                                                                                                        n7
                                                                                                                                        n8)
                                                                                                                                     a) ->
                                                                                                                          case ds of wild {
                                                                                                                            Data.Map.Internal.Bin dt kx x l r
                                                                                                                            -> case kx of ww2 { (,,,,,,,) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                                                                                                                               go13
                                                                                                                                 (GHC.Types.:
                                                                                                                                    @ (Index.Index
                                                                                                                                         n1
                                                                                                                                         n2
                                                                                                                                         n3
                                                                                                                                         n4
                                                                                                                                         n5
                                                                                                                                         n6
                                                                                                                                         n7
                                                                                                                                         n8,
                                                                                                                                       a)
                                                                                                                                    (case w of ww1 { GHC.Types.I# ww12 ->
                                                                                                                                     {__scc {main:Index.swapPosIndex} True False} case ww12 of wild1 {
                                                                                                                                                                                    DEFAULT
                                                                                                                                                                                    -> case Index.swapPosIndex1
                                                                                                                                                                                       ret_ty (Index.Index
                                                                                                                                                                                                 n1
                                                                                                                                                                                                 n2
                                                                                                                                                                                                 n3
                                                                                                                                                                                                 n4
                                                                                                                                                                                                 n5
                                                                                                                                                                                                 n6
                                                                                                                                                                                                 n7
                                                                                                                                                                                                 n8)
                                                                                                                                                                                       of {}
                                                                                                                                                                                    1#
                                                                                                                                                                                    -> ({__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n1
                                                                                                                                                                                                                                       @ Index.Uind_20
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    2#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n2
                                                                                                                                                                                                                                       @ Index.Lind_20
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    3#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n3
                                                                                                                                                                                                                                       @ Index.Uind_19
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    4#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n4
                                                                                                                                                                                                                                       @ Index.Lind_19
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    5#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n5
                                                                                                                                                                                                                                       @ Index.Uind_9
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    6#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n6
                                                                                                                                                                                                                                       @ Index.Lind_9
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    7#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n7
                                                                                                                                                                                                                                       @ Index.Uind_3
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww9,
                                                                                                                                                                                        ww10)
                                                                                                                                                                                    8#
                                                                                                                                                                                    -> (ww3,
                                                                                                                                                                                        ww4,
                                                                                                                                                                                        ww5,
                                                                                                                                                                                        ww6,
                                                                                                                                                                                        ww7,
                                                                                                                                                                                        ww8,
                                                                                                                                                                                        ww9,
                                                                                                                                                                                        {__scc {main:Index.swapPosIndex} False True} Index.swapPosInd
                                                                                                                                                                                                                                       @ n8
                                                                                                                                                                                                                                       @ Index.Lind_3
                                                                                                                                                                                                                                       w1
                                                                                                                                                                                                                                       ww10) } },
                                                                                                                                     x)
                                                                                                                                    (go13
                                                                                                                                       z'
                                                                                                                                       r))
                                                                                                                                 l }
                                                                                                                            Data.Map.Internal.Tip
                                                                                                                            -> z' }
                                                                                                                      } in
                                                                                                                      Data.Map.Internal.fromList
                                                                                                                        @ (Index.Index
                                                                                                                             n1
                                                                                                                             n2
                                                                                                                             n3
                                                                                                                             n4
                                                                                                                             n5
                                                                                                                             n6
                                                                                                                             n7
                                                                                                                             n8)
                                                                                                                        @ a
                                                                                                                        (Tensor.aSymTensor4
                                                                                                                           @ n8
                                                                                                                           @ n7
                                                                                                                           @ n6
                                                                                                                           @ n5
                                                                                                                           @ n4
                                                                                                                           @ n3
                                                                                                                           @ n2
                                                                                                                           @ n1)
                                                                                                                        (go13
                                                                                                                           (GHC.Types.[]
                                                                                                                              @ (Index.Index
                                                                                                                                   n1
                                                                                                                                   n2
                                                                                                                                   n3
                                                                                                                                   n4
                                                                                                                                   n5
                                                                                                                                   n6
                                                                                                                                   n7
                                                                                                                                   n8,
                                                                                                                                 a))
                                                                                                                           ww) #)) -}
3907440065a4b5e56c282f0fba1005c5
  type Rank =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
3ab1a6a46c1592b826cacc18b7d3183c
  type role Tensor nominal nominal nominal nominal nominal nominal nominal nominal representational
  data Tensor (n1 :: GHC.Types.Nat)
              (n2 :: GHC.Types.Nat)
              (n3 :: GHC.Types.Nat)
              (n4 :: GHC.Types.Nat)
              (n5 :: GHC.Types.Nat)
              (n6 :: GHC.Types.Nat)
              (n7 :: GHC.Types.Nat)
              (n8 :: GHC.Types.Nat)
              a
    = Tensor (Data.Map.Internal.Map
                (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
7c6f550d10cd5c54aa8ee388c64266b9
  aSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$waSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
583b6c7a910309ce224966b7f1b018ea
  aSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
66a203de9553546e7e419558a68189fc
  aSymTensor2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
d9940a129bfdec8f4d5a9cb8f2b1934c
  aSymTensor3 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
baf627660237622d5a5a99cd2f37c815
  aSymTensor4 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
87cce858d8288ccbaaa3bd4d18766f96
  blockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U,U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wblockSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
555f6eb327a21716470ee652550f8c54
  cyclicSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 let {
                   lvl19 :: a -> (a -> a) -> a -> a
                     {- Arity: 3, Strictness: <L,U><C(S),1*C1(U)><L,U>,
                        Unfolding: InlineRule (3, True, False)
                                   (\ (ds :: a) (ds1 :: a -> a)[OneShot] (v :: a)[OneShot] ->
                                    ds1
                                      ({__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.+
                                                                                                                                                                                                  @ a
                                                                                                                                                                                                  $dNum
                                                                                                                                                                                                  v
                                                                                                                                                                                                  ds)) -}
                   = \ (ds :: a) (ds1 :: a -> a)[OneShot] (v :: a)[OneShot] ->
                     ds1
                       ({__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.+
                                                                                                                                                                                   @ a
                                                                                                                                                                                   $dNum
                                                                                                                                                                                   v
                                                                                                                                                                                   ds)
                 } in
                 let {
                   lvl20 :: a
                   = {__scc {main:Tensor.cyclicSymTensor} False True} {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} GHC.Num.fromInteger
                                                                                                                                                                                @ a
                                                                                                                                                                                $dNum
                                                                                                                                                                                Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl21 :: a
                   = {__scc {main:Tensor.cyclicSymTensor} False True} GHC.Num.fromInteger
                                                                        @ a
                                                                        $dNum
                                                                        Tensor.aSymTensor2
                 } in
                 \ (i :: GHC.Types.Int)
                   (list :: [GHC.Types.Int])
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.cyclicSymTensor} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                 let {
                                                                   ds1 :: Data.Map.Internal.Map
                                                                            (Index.Index
                                                                               n1
                                                                               n2
                                                                               n3
                                                                               n4
                                                                               n5
                                                                               n6
                                                                               n7
                                                                               n8)
                                                                            a
                                                                   = let {
                                                                       g :: Index.Index
                                                                              n1
                                                                              n2
                                                                              n3
                                                                              n4
                                                                              n5
                                                                              n6
                                                                              n7
                                                                              n8
                                                                            -> a -> a
                                                                       = let {
                                                                           cIndsF :: Index.Index
                                                                                       n1
                                                                                       n2
                                                                                       n3
                                                                                       n4
                                                                                       n5
                                                                                       n6
                                                                                       n7
                                                                                       n8
                                                                                     -> [Index.Index
                                                                                           n1
                                                                                           n2
                                                                                           n3
                                                                                           n4
                                                                                           n5
                                                                                           n6
                                                                                           n7
                                                                                           n8]
                                                                           = {__scc {main:Tensor.cyclicSymTensor.cIndsF} True True} Index.cyclicSwapIndex
                                                                                                                                      @ n1
                                                                                                                                      @ n2
                                                                                                                                      @ n3
                                                                                                                                      @ n4
                                                                                                                                      @ n5
                                                                                                                                      @ n6
                                                                                                                                      @ n7
                                                                                                                                      @ n8
                                                                                                                                      i
                                                                                                                                      list
                                                                         } in
                                                                         letrec {
                                                                           go :: [(Index.Uinds_20
                                                                                     n1,
                                                                                   Index.Linds_20
                                                                                     n2,
                                                                                   Index.Uinds_19
                                                                                     n3,
                                                                                   Index.Linds_19
                                                                                     n4,
                                                                                   Index.Uinds_9 n5,
                                                                                   Index.Linds_9 n6,
                                                                                   Index.Uinds_3 n7,
                                                                                   Index.Linds_3
                                                                                     n8)]
                                                                                 -> a -> a
                                                                             {- Arity: 1,
                                                                                Strictness: <S,1*U> -}
                                                                           = \ (ds2 :: [(Index.Uinds_20
                                                                                           n1,
                                                                                         Index.Linds_20
                                                                                           n2,
                                                                                         Index.Uinds_19
                                                                                           n3,
                                                                                         Index.Linds_19
                                                                                           n4,
                                                                                         Index.Uinds_9
                                                                                           n5,
                                                                                         Index.Linds_9
                                                                                           n6,
                                                                                         Index.Uinds_3
                                                                                           n7,
                                                                                         Index.Linds_3
                                                                                           n8)]) ->
                                                                             case ds2 of wild1 {
                                                                               [] -> GHC.Base.id @ a
                                                                               : y ys
                                                                               -> ({__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} lvl19)
                                                                                    (({__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} False True} Data.Map.Internal.!
                                                                                                                                                                                                @ (Index.Index
                                                                                                                                                                                                     n1
                                                                                                                                                                                                     n2
                                                                                                                                                                                                     n3
                                                                                                                                                                                                     n4
                                                                                                                                                                                                     n5
                                                                                                                                                                                                     n6
                                                                                                                                                                                                     n7
                                                                                                                                                                                                     n8)
                                                                                                                                                                                                @ a
                                                                                                                                                                                                (Tensor.aSymTensor3
                                                                                                                                                                                                   @ n1
                                                                                                                                                                                                   @ n2
                                                                                                                                                                                                   @ n3
                                                                                                                                                                                                   @ n4
                                                                                                                                                                                                   @ n5
                                                                                                                                                                                                   @ n6
                                                                                                                                                                                                   @ n7
                                                                                                                                                                                                   @ n8)
                                                                                                                                                                                                map1)
                                                                                       y)
                                                                                    (go ys) }
                                                                         } in
                                                                         {__scc {main:Tensor.cyclicSymTensor.g} True False} \ (k :: Index.Index
                                                                                                                                      n1
                                                                                                                                      n2
                                                                                                                                      n3
                                                                                                                                      n4
                                                                                                                                      n5
                                                                                                                                      n6
                                                                                                                                      n7
                                                                                                                                      n8)
                                                                                                                              (a1 :: a)[OneShot] ->
                                                                                                                            {__scc {main:Tensor.cyclicSymTensor.g} False True} {__scc {main:Tensor.cyclicSymTensor.g.\} True True} go
                                                                                                                                                                                                                                     (cIndsF
                                                                                                                                                                                                                                        k)
                                                                                                                                                                                                                                     lvl20
                                                                     } in
                                                                     {__scc {main:Tensor.cyclicSymTensor.map2} True True} Data.Map.Strict.Internal.mapWithKey
                                                                                                                            @ (Index.Index
                                                                                                                                 n1
                                                                                                                                 n2
                                                                                                                                 n3
                                                                                                                                 n4
                                                                                                                                 n5
                                                                                                                                 n6
                                                                                                                                 n7
                                                                                                                                 n8)
                                                                                                                            @ a
                                                                                                                            @ a
                                                                                                                            g
                                                                                                                            map1
                                                                 } in
                                                                 let {
                                                                   a1 :: a
                                                                   = GHC.Real./
                                                                       @ a
                                                                       $dFractional
                                                                       lvl21
                                                                       ({__scc {main:Tensor.cyclicSymTensor.fac} True True} GHC.Num.fromInteger
                                                                                                                              @ a
                                                                                                                              $dNum
                                                                                                                              (case GHC.List.$wlenAcc
                                                                                                                                      @ GHC.Types.Int
                                                                                                                                      list
                                                                                                                                      0# of ww2 { DEFAULT ->
                                                                                                                               case Tensor.$w$sfactorial
                                                                                                                                      ww2 of ww { DEFAULT ->
                                                                                                                               GHC.Integer.Type.smallInteger
                                                                                                                                 ww } }))
                                                                 } in
                                                                 {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                   @ n1
                                                                                                                                                                                                   @ n2
                                                                                                                                                                                                   @ n3
                                                                                                                                                                                                   @ n4
                                                                                                                                                                                                   @ n5
                                                                                                                                                                                                   @ n6
                                                                                                                                                                                                   @ n7
                                                                                                                                                                                                   @ n8
                                                                                                                                                                                                   @ a
                                                                                                                                                                                                   (let {
                                                                                                                                                                                                      f :: a
                                                                                                                                                                                                           -> a
                                                                                                                                                                                                      = GHC.Num.*
                                                                                                                                                                                                          @ a
                                                                                                                                                                                                          $dNum
                                                                                                                                                                                                          a1
                                                                                                                                                                                                    } in
                                                                                                                                                                                                    {__scc {main:Tensor.fmap} False True} Data.Map.Strict.Internal.map
                                                                                                                                                                                                                                            @ a
                                                                                                                                                                                                                                            @ a
                                                                                                                                                                                                                                            @ (Index.Index
                                                                                                                                                                                                                                                 n1
                                                                                                                                                                                                                                                 n2
                                                                                                                                                                                                                                                 n3
                                                                                                                                                                                                                                                 n4
                                                                                                                                                                                                                                                 n5
                                                                                                                                                                                                                                                 n6
                                                                                                                                                                                                                                                 n7
                                                                                                                                                                                                                                                 n8)
                                                                                                                                                                                                                                            f
                                                                                                                                                                                                                                            ds1) }) -}
292c410335a6ffc464f1056e5ce9d82a
  cyclicSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
20526dd2faabb4fc4d24f5a19dfe0b1d
  evalFullTensor ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.evalFullTensor} True True} case ds of wild { Tensor.Tensor m ->
                                                                Data.Map.Internal.assocs
                                                                  @ (Index.Index
                                                                       n1 n2 n3 n4 n5 n6 n7 n8)
                                                                  @ a
                                                                  m }) -}
d93c93bc8bd5eea5ee1951188e264168
  evalTensorVals :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 {__scc {main:Tensor.evalTensorVals} True True} case ds of wild { Tensor.Tensor m ->
                                                                Data.Map.Internal.elems_go
                                                                  @ (Index.Uinds_20 n1,
                                                                     Index.Linds_20 n2,
                                                                     Index.Uinds_19 n3,
                                                                     Index.Linds_19 n4,
                                                                     Index.Uinds_9 n5,
                                                                     Index.Linds_9 n6,
                                                                     Index.Uinds_3 n7,
                                                                     Index.Linds_3 n8)
                                                                  @ a
                                                                  (GHC.Types.[] @ a)
                                                                  m }) -}
91cec5942745f98455a0519a37147e19
  getVal ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl19 :: a
                   = {__scc {main:Tensor.getVal} False True} GHC.Num.fromInteger
                                                               @ a
                                                               $dNum
                                                               Tensor.cyclicSymTensor1
                 } in
                 \ (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 {__scc {main:Tensor.getVal} True True} case ds of wild { Tensor.Tensor map1 ->
                                                        case Data.Map.Internal.member
                                                               @ (Index.Index
                                                                    n1 n2 n3 n4 n5 n6 n7 n8)
                                                               @ a
                                                               (Tensor.aSymTensor3
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8)
                                                               ind
                                                               map1 of wild1 {
                                                          GHC.Types.False -> lvl19
                                                          GHC.Types.True
                                                          -> Data.Map.Internal.find
                                                               @ (Index.Index
                                                                    n1 n2 n3 n4 n5 n6 n7 n8)
                                                               @ a
                                                               (Tensor.aSymTensor3
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8)
                                                               ind
                                                               map1 } }) -}
30d4cba469685a4254ece298743bbab6
  mkTensorfromF ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8, GHC.Num.Num a,
     GHC.Classes.Eq a) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U(A,A,A,A,A,A,1*C1(U))><L,U(A,C(C1(U)))>,
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dKnownNat :: GHC.TypeNats.KnownNat n1)
                   ($dKnownNat1 :: GHC.TypeNats.KnownNat n2)
                   ($dKnownNat2 :: GHC.TypeNats.KnownNat n3)
                   ($dKnownNat3 :: GHC.TypeNats.KnownNat n4)
                   ($dKnownNat4 :: GHC.TypeNats.KnownNat n5)
                   ($dKnownNat5 :: GHC.TypeNats.KnownNat n6)
                   ($dKnownNat6 :: GHC.TypeNats.KnownNat n7)
                   ($dKnownNat7 :: GHC.TypeNats.KnownNat n8)
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 let {
                   ds :: a
                   = {__scc {main:Tensor.mkTensorfromF} False True} GHC.Num.fromInteger
                                                                      @ a
                                                                      $dNum
                                                                      Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl19 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds) -}
                   = \ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds
                 } in
                 \ (rank :: Tensor.Rank)
                   (f :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 {__scc {main:Tensor.mkTensorfromF} True False} Tensor.Tensor
                                                                  @ n1
                                                                  @ n2
                                                                  @ n3
                                                                  @ n4
                                                                  @ n5
                                                                  @ n6
                                                                  @ n7
                                                                  @ n8
                                                                  @ a
                                                                  ({__scc {main:Tensor.mkTensorfromF} False True} let {
                                                                                                                    indList :: [Index.Index
                                                                                                                                  n1
                                                                                                                                  n2
                                                                                                                                  n3
                                                                                                                                  n4
                                                                                                                                  n5
                                                                                                                                  n6
                                                                                                                                  n7
                                                                                                                                  n8]
                                                                                                                    = {__scc {main:Tensor.mkTensorfromF.indList} True True} Tensor.tensorIndList
                                                                                                                                                                              @ n1
                                                                                                                                                                              @ n2
                                                                                                                                                                              @ n3
                                                                                                                                                                              @ n4
                                                                                                                                                                              @ n5
                                                                                                                                                                              @ n6
                                                                                                                                                                              @ n7
                                                                                                                                                                              @ n8
                                                                                                                                                                              $dKnownNat
                                                                                                                                                                              $dKnownNat1
                                                                                                                                                                              $dKnownNat2
                                                                                                                                                                              $dKnownNat3
                                                                                                                                                                              $dKnownNat4
                                                                                                                                                                              $dKnownNat5
                                                                                                                                                                              $dKnownNat6
                                                                                                                                                                              $dKnownNat7
                                                                                                                                                                              rank
                                                                                                                  } in
                                                                                                                  Data.Map.Internal.filterWithKey
                                                                                                                    @ (Index.Index
                                                                                                                         n1
                                                                                                                         n2
                                                                                                                         n3
                                                                                                                         n4
                                                                                                                         n5
                                                                                                                         n6
                                                                                                                         n7
                                                                                                                         n8)
                                                                                                                    @ a
                                                                                                                    lvl19
                                                                                                                    (Data.Map.Strict.Internal.fromList
                                                                                                                       @ (Index.Index
                                                                                                                            n1
                                                                                                                            n2
                                                                                                                            n3
                                                                                                                            n4
                                                                                                                            n5
                                                                                                                            n6
                                                                                                                            n7
                                                                                                                            n8)
                                                                                                                       @ a
                                                                                                                       (Tensor.aSymTensor3
                                                                                                                          @ n1
                                                                                                                          @ n2
                                                                                                                          @ n3
                                                                                                                          @ n4
                                                                                                                          @ n5
                                                                                                                          @ n6
                                                                                                                          @ n7
                                                                                                                          @ n8)
                                                                                                                       (GHC.List.zip
                                                                                                                          @ (Index.Uinds_20
                                                                                                                               n1,
                                                                                                                             Index.Linds_20
                                                                                                                               n2,
                                                                                                                             Index.Uinds_19
                                                                                                                               n3,
                                                                                                                             Index.Linds_19
                                                                                                                               n4,
                                                                                                                             Index.Uinds_9
                                                                                                                               n5,
                                                                                                                             Index.Linds_9
                                                                                                                               n6,
                                                                                                                             Index.Uinds_3
                                                                                                                               n7,
                                                                                                                             Index.Linds_3
                                                                                                                               n8)
                                                                                                                          @ a
                                                                                                                          indList
                                                                                                                          ({__scc {main:Tensor.mkTensorfromF.valueList} True True} GHC.Base.map
                                                                                                                                                                                     @ (Index.Uinds_20
                                                                                                                                                                                          n1,
                                                                                                                                                                                        Index.Linds_20
                                                                                                                                                                                          n2,
                                                                                                                                                                                        Index.Uinds_19
                                                                                                                                                                                          n3,
                                                                                                                                                                                        Index.Linds_19
                                                                                                                                                                                          n4,
                                                                                                                                                                                        Index.Uinds_9
                                                                                                                                                                                          n5,
                                                                                                                                                                                        Index.Linds_9
                                                                                                                                                                                          n6,
                                                                                                                                                                                        Index.Uinds_3
                                                                                                                                                                                          n7,
                                                                                                                                                                                        Index.Linds_3
                                                                                                                                                                                          n8)
                                                                                                                                                                                     @ a
                                                                                                                                                                                     f
                                                                                                                                                                                     indList))))) -}
86ed37d074ab3bb9c4458955027c04ff
  mkTensorfromFZeros ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (10, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: GHC.TypeNats.KnownNat n3)
                   (w3 :: GHC.TypeNats.KnownNat n4)
                   (w4 :: GHC.TypeNats.KnownNat n5)
                   (w5 :: GHC.TypeNats.KnownNat n6)
                   (w6 :: GHC.TypeNats.KnownNat n7)
                   (w7 :: GHC.TypeNats.KnownNat n8)
                   (w8 :: Tensor.Rank)
                   (w9 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 {__scc {main:Tensor.mkTensorfromFZeros} True False} Tensor.Tensor
                                                                       @ n1
                                                                       @ n2
                                                                       @ n3
                                                                       @ n4
                                                                       @ n5
                                                                       @ n6
                                                                       @ n7
                                                                       @ n8
                                                                       @ a
                                                                       ({__scc {main:Tensor.mkTensorfromFZeros} False True} let {
                                                                                                                              indList :: [Index.Index
                                                                                                                                            n1
                                                                                                                                            n2
                                                                                                                                            n3
                                                                                                                                            n4
                                                                                                                                            n5
                                                                                                                                            n6
                                                                                                                                            n7
                                                                                                                                            n8]
                                                                                                                              = {__scc {main:Tensor.mkTensorfromFZeros.indList} True True} Tensor.tensorIndList
                                                                                                                                                                                             @ n1
                                                                                                                                                                                             @ n2
                                                                                                                                                                                             @ n3
                                                                                                                                                                                             @ n4
                                                                                                                                                                                             @ n5
                                                                                                                                                                                             @ n6
                                                                                                                                                                                             @ n7
                                                                                                                                                                                             @ n8
                                                                                                                                                                                             w
                                                                                                                                                                                             w1
                                                                                                                                                                                             w2
                                                                                                                                                                                             w3
                                                                                                                                                                                             w4
                                                                                                                                                                                             w5
                                                                                                                                                                                             w6
                                                                                                                                                                                             w7
                                                                                                                                                                                             w8
                                                                                                                            } in
                                                                                                                            Data.Map.Strict.Internal.fromList
                                                                                                                              @ (Index.Index
                                                                                                                                   n1
                                                                                                                                   n2
                                                                                                                                   n3
                                                                                                                                   n4
                                                                                                                                   n5
                                                                                                                                   n6
                                                                                                                                   n7
                                                                                                                                   n8)
                                                                                                                              @ a
                                                                                                                              (Tensor.aSymTensor3
                                                                                                                                 @ n1
                                                                                                                                 @ n2
                                                                                                                                 @ n3
                                                                                                                                 @ n4
                                                                                                                                 @ n5
                                                                                                                                 @ n6
                                                                                                                                 @ n7
                                                                                                                                 @ n8)
                                                                                                                              (GHC.List.zip
                                                                                                                                 @ (Index.Uinds_20
                                                                                                                                      n1,
                                                                                                                                    Index.Linds_20
                                                                                                                                      n2,
                                                                                                                                    Index.Uinds_19
                                                                                                                                      n3,
                                                                                                                                    Index.Linds_19
                                                                                                                                      n4,
                                                                                                                                    Index.Uinds_9
                                                                                                                                      n5,
                                                                                                                                    Index.Linds_9
                                                                                                                                      n6,
                                                                                                                                    Index.Uinds_3
                                                                                                                                      n7,
                                                                                                                                    Index.Linds_3
                                                                                                                                      n8)
                                                                                                                                 @ a
                                                                                                                                 indList
                                                                                                                                 ({__scc {main:Tensor.mkTensorfromFZeros.valueList} True True} GHC.Base.map
                                                                                                                                                                                                 @ (Index.Uinds_20
                                                                                                                                                                                                      n1,
                                                                                                                                                                                                    Index.Linds_20
                                                                                                                                                                                                      n2,
                                                                                                                                                                                                    Index.Uinds_19
                                                                                                                                                                                                      n3,
                                                                                                                                                                                                    Index.Linds_19
                                                                                                                                                                                                      n4,
                                                                                                                                                                                                    Index.Uinds_9
                                                                                                                                                                                                      n5,
                                                                                                                                                                                                    Index.Linds_9
                                                                                                                                                                                                      n6,
                                                                                                                                                                                                    Index.Uinds_3
                                                                                                                                                                                                      n7,
                                                                                                                                                                                                    Index.Linds_3
                                                                                                                                                                                                      n8)
                                                                                                                                                                                                 @ a
                                                                                                                                                                                                 w9
                                                                                                                                                                                                 indList)))) -}
609a45f0f24878f1d967d98dad1935f1
  mkTensorfromList ::
    [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (l :: [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]) ->
                 {__scc {main:Tensor.mkTensorfromList} True False} Tensor.Tensor
                                                                     @ n1
                                                                     @ n2
                                                                     @ n3
                                                                     @ n4
                                                                     @ n5
                                                                     @ n6
                                                                     @ n7
                                                                     @ n8
                                                                     @ a
                                                                     ({__scc {main:Tensor.mkTensorfromList} False True} Data.Map.Strict.Internal.fromList
                                                                                                                          @ (Index.Index
                                                                                                                               n1
                                                                                                                               n2
                                                                                                                               n3
                                                                                                                               n4
                                                                                                                               n5
                                                                                                                               n6
                                                                                                                               n7
                                                                                                                               n8)
                                                                                                                          @ a
                                                                                                                          (Tensor.aSymTensor4
                                                                                                                             @ n8
                                                                                                                             @ n7
                                                                                                                             @ n6
                                                                                                                             @ n5
                                                                                                                             @ n4
                                                                                                                             @ n3
                                                                                                                             @ n2
                                                                                                                             @ n1)
                                                                                                                          l)) -}
35b077706a157c07302cca0f1cfdac5f
  symTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wsymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
4349b34508e930ef1dea91c900812cb6
  tensorAdd ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A,A,A,A,A,A)><S,1*U(1*U)><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 let {
                   lvl19 :: a -> a -> a
                   = {__scc {main:Tensor.tensorAdd} False True} GHC.Num.+ @ a w
                 } in
                 {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                              @ n1
                                                              @ n2
                                                              @ n3
                                                              @ n4
                                                              @ n5
                                                              @ n6
                                                              @ n7
                                                              @ n8
                                                              @ a
                                                              ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                            @ (Index.Index
                                                                                                                 n1
                                                                                                                 n2
                                                                                                                 n3
                                                                                                                 n4
                                                                                                                 n5
                                                                                                                 n6
                                                                                                                 n7
                                                                                                                 n8)
                                                                                                            @ a
                                                                                                            (Tensor.aSymTensor3
                                                                                                               @ n1
                                                                                                               @ n2
                                                                                                               @ n3
                                                                                                               @ n4
                                                                                                               @ n5
                                                                                                               @ n6
                                                                                                               @ n7
                                                                                                               @ n8)
                                                                                                            lvl19
                                                                                                            ww1
                                                                                                            ww3) } }) -}
8e1f794854d89bc2c6d3671575591521
  tensorContractWith_1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
bf80f25edc66426be3df6d599f68c7f8
  tensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_19
                        @ n3
                        @ n4
                        @ a
                        @ n1
                        @ n2
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
f5b2dabd16345e8ee998f4d55afc7785
  tensorContractWith_2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
0ed633e005cddd886e47ee44a729ae97
  tensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_20
                        @ n1
                        @ n2
                        @ a
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
32b1524ea23a0fe2397cbf4893bf7082
  tensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_3
                        @ n7
                        @ n8
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
fd53639966fdb5f8804d2e0bc1f03852
  tensorContractWith_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
2b36f7f16c0f3479abe15dbe357bc93b
  tensorContractWith_5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
50d1dc79c4d8b26159393b0de556f618
  tensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_9
                        @ n5
                        @ n6
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
dc9c326bb6a5dd4f2a15e8d431e5000b
  tensorIndList ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank -> [Index.Index n1 n2 n3 n4 n5 n6 n7 n8]
  {- Arity: 9,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S(S(S)LLLLLLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U),1*U(U))> -}
cffa20a3309e88d9f99b616ada68e984
  tensorProductWith ::
    (a -> b -> c)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         c
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U(U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorProductWith
                        @ a
                        @ b
                        @ c
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ m1
                        @ m2
                        @ m3
                        @ m4
                        @ m5
                        @ m6
                        @ m7
                        @ m8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ (n1 GHC.TypeNats.+ m1)
                   @ (n2 GHC.TypeNats.+ m2)
                   @ (n3 GHC.TypeNats.+ m3)
                   @ (n4 GHC.TypeNats.+ m4)
                   @ (n5 GHC.TypeNats.+ m5)
                   @ (n6 GHC.TypeNats.+ m6)
                   @ (n7 GHC.TypeNats.+ m7)
                   @ (n8 GHC.TypeNats.+ m8)
                   @ c
                   ww5 } } }) -}
eec6fc3785197adbe4eda74a44e975f6
  tensorProductWith1 ::
    Data.Map.Internal.Map
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
      c
    -> [Data.Map.Internal.Map
          (Index.Index
             (n1 GHC.TypeNats.+ m1)
             (n2 GHC.TypeNats.+ m2)
             (n3 GHC.TypeNats.+ m3)
             (n4 GHC.TypeNats.+ m4)
             (n5 GHC.TypeNats.+ m5)
             (n6 GHC.TypeNats.+ m6)
             (n7 GHC.TypeNats.+ m7)
             (n8 GHC.TypeNats.+ m8))
          c]
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ m1)
            (n2 GHC.TypeNats.+ m2)
            (n3 GHC.TypeNats.+ m3)
            (n4 GHC.TypeNats.+ m4)
            (n5 GHC.TypeNats.+ m5)
            (n6 GHC.TypeNats.+ m6)
            (n7 GHC.TypeNats.+ m7)
            (n8 GHC.TypeNats.+ m8))
         c
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
3caaa010506c48f09673b4f3aa8d585d
  tensorProductWith2 ::
    GHC.Classes.Ord
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fOrdInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fOrdInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fOrdInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fOrdInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fOrdInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fOrdInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fOrdInd @ (n8 GHC.TypeNats.+ m8))) -}
9dff6de0dd0a75bddc7cc8f0cd7eca2d
  tensorSMult ::
    GHC.Num.Num a =>
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C(U)),A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   (a1 :: a) ->
                 {__scc {main:Tensor.tensorSMult} True True} let {
                                                               f :: a -> a = GHC.Num.* @ a $dNum a1
                                                             } in
                                                             \ (ds :: Tensor.Tensor
                                                                        n1
                                                                        n2
                                                                        n3
                                                                        n4
                                                                        n5
                                                                        n6
                                                                        n7
                                                                        n8
                                                                        a) ->
                                                             {__scc {main:Tensor.fmap} True True} case ds of wild { Tensor.Tensor tMap ->
                                                                                                  Tensor.Tensor
                                                                                                    @ n1
                                                                                                    @ n2
                                                                                                    @ n3
                                                                                                    @ n4
                                                                                                    @ n5
                                                                                                    @ n6
                                                                                                    @ n7
                                                                                                    @ n8
                                                                                                    @ a
                                                                                                    (Data.Map.Strict.Internal.map
                                                                                                       @ a
                                                                                                       @ a
                                                                                                       @ (Index.Index
                                                                                                            n1
                                                                                                            n2
                                                                                                            n3
                                                                                                            n4
                                                                                                            n5
                                                                                                            n6
                                                                                                            n7
                                                                                                            n8)
                                                                                                       f
                                                                                                       tMap) }) -}
b3ba3aa7428b7472f46218743de635c8
  tensorSub ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U))><S,1*U(1*U)><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorSub
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww5 } } }) -}
abf7043c548be68c6d28ead296b47924
  tensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w2 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorTranspose
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        w
                        w1
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
5c896ec29beddbc4f95bc18a93882ef1
  unsafeGetVal ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 {__scc {main:Tensor.unsafeGetVal} True True} case ds of wild { Tensor.Tensor map1 ->
                                                              Data.Map.Internal.find
                                                                @ (Index.Index
                                                                     n1 n2 n3 n4 n5 n6 n7 n8)
                                                                @ a
                                                                (Tensor.aSymTensor4
                                                                   @ n8
                                                                   @ n7
                                                                   @ n6
                                                                   @ n5
                                                                   @ n4
                                                                   @ n3
                                                                   @ n2
                                                                   @ n1)
                                                                ind
                                                                map1 }) -}
instance [safe] GHC.Base.Functor [Tensor.Tensor]
  = Tensor.$fFunctorTensor
instance [safe] GHC.Show.Show [Tensor.Tensor] = Tensor.$fShowTensor
"SPEC/Tensor $fEqInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd @ n @ Index.Lind_19 v = Tensor.$s$fEqInd4 @ n
"SPEC/Tensor $fEqInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd @ n @ Index.Lind_20 v = Tensor.$s$fEqInd6 @ n
"SPEC/Tensor $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Tensor.$s$fEqInd @ n
"SPEC/Tensor $fEqInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd @ n @ Index.Lind_9 v = Tensor.$s$fEqInd2 @ n
"SPEC/Tensor $fEqInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd @ n @ Index.Uind_19 v = Tensor.$s$fEqInd5 @ n
"SPEC/Tensor $fEqInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd @ n @ Index.Uind_20 v = Tensor.$s$fEqInd7 @ n
"SPEC/Tensor $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Tensor.$s$fEqInd1 @ n
"SPEC/Tensor $fEqInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd @ n @ Index.Uind_9 v = Tensor.$s$fEqInd3 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd_$c/= @ n @ Index.Lind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd_$c/= @ n @ Index.Lind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd_$c/= @ n @ Index.Lind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd_$c/= @ n @ Index.Uind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd_$c/= @ n @ Index.Uind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd_$c/= @ n @ Index.Uind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd @ n @ Index.Lind_19 v = Tensor.$s$fOrdInd4 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd @ n @ Index.Lind_20 v = Tensor.$s$fOrdInd6 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Tensor.$s$fOrdInd @ n
"SPEC/Tensor $fOrdInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd @ n @ Index.Lind_9 v = Tensor.$s$fOrdInd2 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd @ n @ Index.Uind_19 v = Tensor.$s$fOrdInd5 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd @ n @ Index.Uind_20 v = Tensor.$s$fOrdInd7 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Tensor.$s$fOrdInd1 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd @ n @ Index.Uind_9 v = Tensor.$s$fOrdInd3 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c< @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<4 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c< @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<6 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c< @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c< @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<2 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c< @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<5 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c< @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<7 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<1 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c< @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<3 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=4 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=6 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<= @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=2 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=5 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=7 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<=1 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=3 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c> @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>4 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c> @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>6 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c> @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c> @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>2 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c> @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>5 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c> @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>7 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>1 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c> @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>3 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=4 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=6 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>= @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=2 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=5 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=7 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>=1 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=3 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare4 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare6 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare2 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare5 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare7 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare1 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare3 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax4 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax6 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax2 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax5 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax7 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax1 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax3 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin4 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin6 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin2 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin5 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin7 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin1 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin3 @ n
"SPEC/Tensor $fShowInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd @ n @ Index.Lind_19 v
  = Tensor.$fShowTensor_$s$fShowInd4 @ n
"SPEC/Tensor $fShowInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd @ n @ Index.Lind_20 v
  = Tensor.$fShowTensor_$s$fShowInd6 @ n
"SPEC/Tensor $fShowInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd @ n @ Index.Lind_3 v
  = Tensor.$fShowTensor_$s$fShowInd @ n
"SPEC/Tensor $fShowInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd @ n @ Index.Lind_9 v
  = Tensor.$fShowTensor_$s$fShowInd2 @ n
"SPEC/Tensor $fShowInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd @ n @ Index.Uind_19 v
  = Tensor.$fShowTensor_$s$fShowInd5 @ n
"SPEC/Tensor $fShowInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd @ n @ Index.Uind_20 v
  = Tensor.$fShowTensor_$s$fShowInd7 @ n
"SPEC/Tensor $fShowInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd @ n @ Index.Uind_3 v
  = Tensor.$fShowTensor_$s$fShowInd1 @ n
"SPEC/Tensor $fShowInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd @ n @ Index.Uind_9 v
  = Tensor.$fShowTensor_$s$fShowInd3 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd_$cshow @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshow4 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd_$cshow @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshow6 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshow @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshow @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshow @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshow2 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd_$cshow @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshow5 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd_$cshow @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshow7 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshow @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshow1 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshow @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshow3 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList4 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList6 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList2 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList5 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList7 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList1 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList3 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec4 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec6 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec2 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec5 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec7 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec1 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec3 @ n
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

