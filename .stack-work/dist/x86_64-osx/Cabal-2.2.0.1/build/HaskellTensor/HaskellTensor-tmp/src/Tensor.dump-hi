
==================== FINAL INTERFACE ====================
2018-12-15 08:39:30.743982 UTC

interface main:Tensor 8043
  interface hash: 22bc82ac2a9f44cbb9c74c79feea4b7a
  ABI hash: 9c4499b0a9f488433615a1f4f28a9b18
  export-list hash: fec1157eea535063319b082e204812dd
  orphan hash: a5ac230787a679843ebf1598745ea270
  flag hash: 941ef95016433cfd417a6725e52dbf85
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Tensor.aSymTensor
  Tensor.blockSymTensor
  Tensor.cyclicSymTensor
  Tensor.evalFullTensor
  Tensor.evalTensorVals
  Tensor.getVal
  Tensor.mkTensorfromF
  Tensor.mkTensorfromFZeros
  Tensor.mkTensorfromList
  Tensor.symTensor
  Tensor.tensorAdd
  Tensor.tensorContractWith_19
  Tensor.tensorContractWith_20
  Tensor.tensorContractWith_3
  Tensor.tensorContractWith_9
  Tensor.tensorIndList
  Tensor.tensorProductWith
  Tensor.tensorSMult
  Tensor.tensorSub
  Tensor.tensorTranspose
  Tensor.unsafeGetVal
  Tensor.Tensor{Tensor.Tensor}
module dependencies: Index
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Proxy a80a60a2fdceabfeb4d110d23b808844
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.TypeNats 8f7c6aed0d8e1900cac5f62a9bc0fd0b
import  -/  base-4.11.1.0:Numeric.Natural da273ddb373e0510fde98e17e4aa338f
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Sequence 21c58838329d44e2dc13db7c04e3a8d8
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Index 60260ed90a129e1e10b6c5fafcb2ded1
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index 5df768242bb15e89c1079fab7e7d3758
  checkInd 570f4ec43fff48378153eca9b14303d2
  combineIndex d37427b86cab9b30c2ce6cd8e2c968c4
  cyclicSwapIndex a1373ab8c3f264afe57ba05e218f3a4b
  delContractionIndex_19 0b2b9b6ed852560172f2c864fa5a7ff2
  delContractionIndex_20 63a1bffefcd9860475f032474b8b96e9
  delContractionIndex_3 412f4a053469f50e9ef7e445b9603e03
  delContractionIndex_9 89c794989b95369089bef9eb9e76b3d8
  delInd 9ed412d39a1a8e714d485ad627cd5359
  getRangeList 35c271ce9c33d7029e662d493b216f1d
  isContractionIndex 1843a9729d1a8c76b7b7f3c072c98cce
  mkInd c1470ba25733eac9d3cf9089c612a176
  swapBlockPosIndex f6e0e202d7d5ae54fc71799dd1056b0d
  swapPosIndex ba35e111a2bf2c8383fc832846f5a3ce
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fFunctorTensor ::
    GHC.Base.Functor (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat.
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8)
                  (Tensor.$fFunctorTensor_$cfmap
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8)
                  (Tensor.$fFunctorTensor_$c<$
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8) -}
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fFunctorTensor_$c<$ ::
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$w$c<$
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        @ b
                        w
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fFunctorTensor_$cfmap ::
    (a -> b)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case ds of wild { Tensor.Tensor tMap ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ b
                   (Data.Map.Strict.Internal.map
                      @ a
                      @ b
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      f
                      tMap) }) -}
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fShowTensor ::
    GHC.Show.Show a =>
    GHC.Show.Show (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ n1 :: GHC.Types.Nat
                      @ n2 :: GHC.Types.Nat
                      @ n3 :: GHC.Types.Nat
                      @ n4 :: GHC.Types.Nat
                      @ n5 :: GHC.Types.Nat
                      @ n6 :: GHC.Types.Nat
                      @ n7 :: GHC.Types.Nat
                      @ n8 :: GHC.Types.Nat
                      @ a
                      (v :: GHC.Show.Show a).
                  @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                  (Tensor.$fShowTensor_$cshowsPrec
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshow
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v)
                  (Tensor.$fShowTensor_$cshowList
                     @ n1
                     @ n2
                     @ n3
                     @ n4
                     @ n5
                     @ n6
                     @ n7
                     @ n8
                     @ a
                     v) -}
737494dd887cc43ca1e040c11eb4e200
  $fShowTensor1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
22cdd232bf930dc0faa0b6cceff6d68b
  $fShowTensor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Tensor.$fShowTensor3) -}
038bda6e6e33cc813e9b34b169d0a8c8
  $fShowTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor "#) -}
a61543692b28b171b1f3e50869c1da91
  $fShowTensor4 ::
    GHC.Show.Show
      (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
       Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
       Index.Uinds_3 n7, Index.Linds_3 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Show.$fShow(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$fShowTensor_$s$fShowInd7 @ n1)
                   (Tensor.$fShowTensor_$s$fShowInd6 @ n2)
                   (Tensor.$fShowTensor_$s$fShowInd5 @ n3)
                   (Tensor.$fShowTensor_$s$fShowInd4 @ n4)
                   (Tensor.$fShowTensor_$s$fShowInd3 @ n5)
                   (Tensor.$fShowTensor_$s$fShowInd2 @ n6)
                   (Tensor.$fShowTensor_$s$fShowInd1 @ n7)
                   (Tensor.$fShowTensor_$s$fShowInd @ n8)) -}
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fShowTensor_$cshow ::
    GHC.Show.Show a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 Tensor.$w$cshow
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1 }) -}
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fShowTensor_$cshowList ::
    GHC.Show.Show a =>
    [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (Tensor.$fShowTensor_$cshowsPrec
                      @ n1
                      @ n2
                      @ n3
                      @ n4
                      @ n5
                      @ n6
                      @ n7
                      @ n8
                      @ a
                      $dShow
                      Tensor.$fShowTensor1)
                   ls
                   s) -}
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  $fShowTensor_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C1(U))),A,A)><S(S),1*U(U)><S,1*U(1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 Tensor.$w$cshowsPrec
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   w
                   ww1
                   ww3 } }) -}
fea084e814dfecbf126f800e624d8270
  $fShowTensor_$s$fShowInd ::
    GHC.Show.Show (Index.Ind n Index.Lind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_3 Index.$fShowLind_3)
                  (\ (ls :: [Index.Ind n Index.Lind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_3
                        Index.$fShowLind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
5afd7251afc4d37373d48e6a5d563937
  $fShowTensor_$s$fShowInd1 ::
    GHC.Show.Show (Index.Ind n Index.Uind_3)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_3 Index.$fShowUind_3)
                  (\ (ls :: [Index.Ind n Index.Uind_3]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_3)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_3
                        Index.$fShowUind_3
                        Index.$fShowInd1)
                     ls
                     s) -}
bbd3893352c3576dc33bf9bb7a89214e
  $fShowTensor_$s$fShowInd2 ::
    GHC.Show.Show (Index.Ind n Index.Lind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_9 Index.$fShowLind_9)
                  (\ (ls :: [Index.Ind n Index.Lind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_9
                        Index.$fShowLind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
ce9243aa1458d2e1cb346bade7786227
  $fShowTensor_$s$fShowInd3 ::
    GHC.Show.Show (Index.Ind n Index.Uind_9)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_9 Index.$fShowUind_9)
                  (\ (ls :: [Index.Ind n Index.Uind_9]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_9)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_9
                        Index.$fShowUind_9
                        Index.$fShowInd1)
                     ls
                     s) -}
4299aa1769ac59a14a5c27a1cf61d936
  $fShowTensor_$s$fShowInd4 ::
    GHC.Show.Show (Index.Ind n Index.Lind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_19
                     Index.$fShowLind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_19 Index.$fShowLind_19)
                  (\ (ls :: [Index.Ind n Index.Lind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_19
                        Index.$fShowLind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
fcc4fe18fe6e1dd4ba8e8502f172ea9e
  $fShowTensor_$s$fShowInd5 ::
    GHC.Show.Show (Index.Ind n Index.Uind_19)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_19
                     Index.$fShowUind_19)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_19 Index.$fShowUind_19)
                  (\ (ls :: [Index.Ind n Index.Uind_19]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_19)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_19
                        Index.$fShowUind_19
                        Index.$fShowInd1)
                     ls
                     s) -}
e1d4602fec3d7b9a4e0c2c1bb5287e86
  $fShowTensor_$s$fShowInd6 ::
    GHC.Show.Show (Index.Ind n Index.Lind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Lind_20
                     Index.$fShowLind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Lind_20 Index.$fShowLind_20)
                  (\ (ls :: [Index.Ind n Index.Lind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Lind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Lind_20
                        Index.$fShowLind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
5116114e52aa5fc9faa0e4be587df902
  $fShowTensor_$s$fShowInd7 ::
    GHC.Show.Show (Index.Ind n Index.Uind_20)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Index.$fShowInd_$cshowsPrec
                     @ n
                     @ Index.Uind_20
                     Index.$fShowUind_20)
                  (Index.$fShowInd_$cshow @ n @ Index.Uind_20 Index.$fShowUind_20)
                  (\ (ls :: [Index.Ind n Index.Uind_20]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Index.Ind n Index.Uind_20)
                     (Index.$fShowInd_$cshowsPrec
                        @ n
                        @ Index.Uind_20
                        Index.$fShowUind_20
                        Index.$fShowInd1)
                     ls
                     s) -}
fd754ac732aff3d9d79551d799f51147
  $s$fEqInd :: GHC.Classes.Eq (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (\ (ds :: Index.Ind n Index.Lind_3)
                     (ds1 :: Index.Ind n Index.Lind_3) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_3
                     Index.$fEqLind_3
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n) -}
72bcd35e771113ce1ef06e84dce825b2
  $s$fEqInd1 :: GHC.Classes.Eq (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (\ (ds :: Index.Ind n Index.Uind_3)
                     (ds1 :: Index.Ind n Index.Uind_3) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_3
                     Index.$fEqUind_3
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n) -}
e839cd0b85380eef63543bf50b44041a
  $s$fEqInd2 :: GHC.Classes.Eq (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (\ (ds :: Index.Ind n Index.Lind_9)
                     (ds1 :: Index.Ind n Index.Lind_9) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_9
                     Index.$fEqLind_9
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n) -}
22e1090a519ae7354782b01da81c2508
  $s$fEqInd3 :: GHC.Classes.Eq (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (\ (ds :: Index.Ind n Index.Uind_9)
                     (ds1 :: Index.Ind n Index.Uind_9) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_9
                     Index.$fEqUind_9
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n) -}
2073950a6d8897f4382cfdbf4de3e431
  $s$fEqInd4 :: GHC.Classes.Eq (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (\ (ds :: Index.Ind n Index.Lind_19)
                     (ds1 :: Index.Ind n Index.Lind_19) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_19
                     Index.$fEqLind_19
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n) -}
fce2acbc374e50e04b501af025ddc207
  $s$fEqInd5 :: GHC.Classes.Eq (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (\ (ds :: Index.Ind n Index.Uind_19)
                     (ds1 :: Index.Ind n Index.Uind_19) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_19
                     Index.$fEqUind_19
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n) -}
34bafee8d5f6188be8660bfa21a0286c
  $s$fEqInd6 :: GHC.Classes.Eq (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (\ (ds :: Index.Ind n Index.Lind_20)
                     (ds1 :: Index.Ind n Index.Lind_20) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Lind_20
                     Index.$fEqLind_20
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n) -}
c20d08c09f57dae3998726490ce5541e
  $s$fEqInd7 :: GHC.Classes.Eq (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (\ (ds :: Index.Ind n Index.Uind_20)
                     (ds1 :: Index.Ind n Index.Uind_20) ->
                   case ds of wild { Index.UnsafemkInd a1 ->
                   case ds1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fEqSeq_$c==
                     @ Index.Uind_20
                     Index.$fEqUind_20
                     a1
                     b1 } })
                  (Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n) -}
c20ca511bbbabb7fdbff14cca0549ef3
  $s$fEqInd_$s$fEqInd_$c/= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_3
                        Index.$fEqLind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
d7f7f5e0a273876e053ad10ca19d745a
  $s$fEqInd_$s$fEqInd_$c/=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_3
                        Index.$fEqUind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
94e295635a48d9768c716628f2b7169c
  $s$fEqInd_$s$fEqInd_$c/=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_9
                        Index.$fEqLind_9
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
d46dae32eb78d36ddb560ea257e9b469
  $s$fEqInd_$s$fEqInd_$c/=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_9
                        Index.$fEqUind_9
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
bb3224538334e0b5223d14ac8c8cf2c7
  $s$fEqInd_$s$fEqInd_$c/=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_19
                        Index.$fEqLind_19
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
475f28f3038a40f46ca8b8ab0e859d8e
  $s$fEqInd_$s$fEqInd_$c/=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_19
                        Index.$fEqUind_19
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
f8c77461d081b260f67c9c4c2f4e7a6d
  $s$fEqInd_$s$fEqInd_$c/=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Lind_20
                        Index.$fEqLind_20
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
f19bae7a0dc77229b3d8bcd4dd328ab4
  $s$fEqInd_$s$fEqInd_$c/=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case x of wild { Index.UnsafemkInd a1 ->
                 case y of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fEqSeq_$c==
                        @ Index.Uind_20
                        Index.$fEqUind_20
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
245fb4d9c97784527640335abcd2c64a
  $s$fOrdInd :: GHC.Classes.Ord (Index.Ind n Index.Lind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_3)
                  (Tensor.$s$fEqInd @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_3
                     Index.$fOrdLind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_3
                     Index.$fOrdLind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_3)
                     (b :: Index.Ind n Index.Lind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_3)
                     (y :: Index.Ind n Index.Lind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_3
                          Index.$fOrdLind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
6f374c945463da04a76da5c9371a38dc
  $s$fOrdInd1 :: GHC.Classes.Ord (Index.Ind n Index.Uind_3)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_3)
                  (Tensor.$s$fEqInd1 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_3
                     Index.$fOrdUind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_3
                     Index.$fOrdUind_3
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_3)
                     (b :: Index.Ind n Index.Uind_3) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_3)
                     (y :: Index.Ind n Index.Uind_3) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_3
                          Index.$fOrdUind_3
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
4fcd7bdd4487406edf55cb4f17f4dc29
  $s$fOrdInd2 :: GHC.Classes.Ord (Index.Ind n Index.Lind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_9)
                  (Tensor.$s$fEqInd2 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_9
                     Index.$fOrdLind_9
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_9
                     Index.$fOrdLind_9
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_9
                          Index.$fOrdLind_9
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_9
                     Index.$fOrdLind_9
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_9)
                     (b :: Index.Ind n Index.Lind_9) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_9
                          Index.$fOrdLind_9
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_9
                          Index.$fOrdLind_9
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_9)
                     (y :: Index.Ind n Index.Lind_9) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_9
                          Index.$fOrdLind_9
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
da4d6797815bfc49850c48928a885b20
  $s$fOrdInd3 :: GHC.Classes.Ord (Index.Ind n Index.Uind_9)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_9)
                  (Tensor.$s$fEqInd3 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_9
                     Index.$fOrdUind_9
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_9
                     Index.$fOrdUind_9
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_9
                          Index.$fOrdUind_9
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_9
                     Index.$fOrdUind_9
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_9)
                     (b :: Index.Ind n Index.Uind_9) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_9
                          Index.$fOrdUind_9
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_9
                          Index.$fOrdUind_9
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_9)
                     (y :: Index.Ind n Index.Uind_9) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_9
                          Index.$fOrdUind_9
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
700fee3e4ed7c5869fe169605e1d458e
  $s$fOrdInd4 :: GHC.Classes.Ord (Index.Ind n Index.Lind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_19)
                  (Tensor.$s$fEqInd4 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_19
                     Index.$fOrdLind_19
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_19
                     Index.$fOrdLind_19
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_19
                          Index.$fOrdLind_19
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_19
                     Index.$fOrdLind_19
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_19)
                     (b :: Index.Ind n Index.Lind_19) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_19
                          Index.$fOrdLind_19
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_19
                          Index.$fOrdLind_19
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_19)
                     (y :: Index.Ind n Index.Lind_19) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_19
                          Index.$fOrdLind_19
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
ec17abcd1542924f8633c864ca5e1905
  $s$fOrdInd5 :: GHC.Classes.Ord (Index.Ind n Index.Uind_19)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_19)
                  (Tensor.$s$fEqInd5 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_19
                     Index.$fOrdUind_19
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_19
                     Index.$fOrdUind_19
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_19
                          Index.$fOrdUind_19
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_19
                     Index.$fOrdUind_19
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_19)
                     (b :: Index.Ind n Index.Uind_19) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_19
                          Index.$fOrdUind_19
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_19
                          Index.$fOrdUind_19
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_19)
                     (y :: Index.Ind n Index.Uind_19) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_19
                          Index.$fOrdUind_19
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
782c60116cb66b26d2bf5c3052bc3066
  $s$fOrdInd6 :: GHC.Classes.Ord (Index.Ind n Index.Lind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Lind_20)
                  (Tensor.$s$fEqInd6 @ n)
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Lind_20
                     Index.$fOrdLind_20
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_20
                     Index.$fOrdLind_20
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_20
                          Index.$fOrdLind_20
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Lind_20
                     Index.$fOrdLind_20
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Lind_20)
                     (b :: Index.Ind n Index.Lind_20) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_20
                          Index.$fOrdLind_20
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_20
                          Index.$fOrdLind_20
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Lind_20)
                     (y :: Index.Ind n Index.Lind_20) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Lind_20
                          Index.$fOrdLind_20
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
c6ac9e4e31a4fd3d72833edfb231d9ca
  $s$fOrdInd7 :: GHC.Classes.Ord (Index.Ind n Index.Uind_20)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ n :: GHC.Types.Nat.
                  @ (Index.Ind n Index.Uind_20)
                  (Tensor.$s$fEqInd7 @ n)
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$ccompare
                     @ Index.Uind_20
                     Index.$fOrdUind_20
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_20
                     Index.$fOrdUind_20
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_20
                          Index.$fOrdUind_20
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   case b of wild { Index.UnsafemkInd a2 ->
                   case a1 of wild1 { Index.UnsafemkInd b1 ->
                   Data.Sequence.Internal.$fOrdSeq_$c<
                     @ Index.Uind_20
                     Index.$fOrdUind_20
                     a2
                     b1 } })
                  (\ (a1 :: Index.Ind n Index.Uind_20)
                     (b :: Index.Ind n Index.Uind_20) ->
                   case a1 of wild { Index.UnsafemkInd a2 ->
                   case b of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_20
                          Index.$fOrdUind_20
                          a2
                          b1 of wild2 {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_20
                          Index.$fOrdUind_20
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild GHC.Types.True -> wild1 } } })
                  (\ (x :: Index.Ind n Index.Uind_20)
                     (y :: Index.Ind n Index.Uind_20) ->
                   case y of wild { Index.UnsafemkInd a1 ->
                   case x of wild1 { Index.UnsafemkInd b1 ->
                   case Data.Sequence.Internal.$fOrdSeq_$c<
                          @ Index.Uind_20
                          Index.$fOrdUind_20
                          a1
                          b1 of wild2 {
                     GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
a84f7eb6bfad196198a033b3820d3b8c
  $s$fOrdInd_$c< ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_3
                   Index.$fOrdLind_3
                   a2
                   b1 } }) -}
1c3649629e7beb2c080163ea5a4bf651
  $s$fOrdInd_$c<1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_3
                   Index.$fOrdUind_3
                   a2
                   b1 } }) -}
fffe6578d8c21eabba9e22de38d8a5ff
  $s$fOrdInd_$c<2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_9
                   Index.$fOrdLind_9
                   a2
                   b1 } }) -}
b0151f42c2bfc02d332a7a0d85d23891
  $s$fOrdInd_$c<3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_9
                   Index.$fOrdUind_9
                   a2
                   b1 } }) -}
91679897488b6400e58321073005b5f7
  $s$fOrdInd_$c<4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_19
                   Index.$fOrdLind_19
                   a2
                   b1 } }) -}
c783d514b639bbdc99226c3a472d9d0a
  $s$fOrdInd_$c<5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_19
                   Index.$fOrdUind_19
                   a2
                   b1 } }) -}
7936ce749f25fc6610e4a5c06be0602a
  $s$fOrdInd_$c<6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_20
                   Index.$fOrdLind_20
                   a2
                   b1 } }) -}
ca5561526eff5c53f6b8fba22f3da855
  $s$fOrdInd_$c<7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_20
                   Index.$fOrdUind_20
                   a2
                   b1 } }) -}
0ad9a5bc2d4ef0bc3bfc900887a9e0c5
  $s$fOrdInd_$c<= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
5092420cec7a95f43b5a0d948912801a
  $s$fOrdInd_$c<=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
cd0fdb8031e70e31e2d6cd5a5d2051b1
  $s$fOrdInd_$c<=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_9
                        Index.$fOrdLind_9
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
5006a27baf26ee80e73648ae698ce6b4
  $s$fOrdInd_$c<=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_9
                        Index.$fOrdUind_9
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
c768c401a967d8676e4428a772732fbc
  $s$fOrdInd_$c<=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_19
                        Index.$fOrdLind_19
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
0bc46b2ed31247dbde26ee2ff38113c0
  $s$fOrdInd_$c<=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_19
                        Index.$fOrdUind_19
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
6d98d7bb1be26263778d5e4d7099c3b6
  $s$fOrdInd_$c<=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_20
                        Index.$fOrdLind_20
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
4d42da30b918499b4bfec18024d1b056
  $s$fOrdInd_$c<=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_20
                        Index.$fOrdUind_20
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
00b374136b62f0f83a49c371b5149eb5
  $s$fOrdInd_$c> ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_3
                   Index.$fOrdLind_3
                   a2
                   b1 } }) -}
acd205244017f4d9596d33c9c5f9ccc5
  $s$fOrdInd_$c>1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_3
                   Index.$fOrdUind_3
                   a2
                   b1 } }) -}
b71082f81d94c2de26827c69be7a5d01
  $s$fOrdInd_$c>2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_9
                   Index.$fOrdLind_9
                   a2
                   b1 } }) -}
f99fbfcc16167f416254998e28c296e1
  $s$fOrdInd_$c>3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_9
                   Index.$fOrdUind_9
                   a2
                   b1 } }) -}
d6bff91224f4299b2cdba9c41b62737b
  $s$fOrdInd_$c>4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_19
                   Index.$fOrdLind_19
                   a2
                   b1 } }) -}
b1343a6fdc1d9c4add7c2a14c62f7408
  $s$fOrdInd_$c>5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_19
                   Index.$fOrdUind_19
                   a2
                   b1 } }) -}
96d929d68d2bb29f42039cb24251aafb
  $s$fOrdInd_$c>6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Lind_20
                   Index.$fOrdLind_20
                   a2
                   b1 } }) -}
70e653a5a007932e75b84644ba65cb68
  $s$fOrdInd_$c>7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 case b of wild { Index.UnsafemkInd a2 ->
                 case a1 of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$c<
                   @ Index.Uind_20
                   Index.$fOrdUind_20
                   a2
                   b1 } }) -}
771c968f34baa922e84a20214c654087
  $s$fOrdInd_$c>= ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
906789a5f888ec1cf2390747f258dd13
  $s$fOrdInd_$c>=1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
18d97f3802aefd1549ea3a366096d10c
  $s$fOrdInd_$c>=2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_9
                        Index.$fOrdLind_9
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
a350cf135aae8904c7d7a322841d5a9a
  $s$fOrdInd_$c>=3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_9
                        Index.$fOrdUind_9
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
fbf95b37880c27830215b2d477ba6a89
  $s$fOrdInd_$c>=4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_19
                        Index.$fOrdLind_19
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
3082d9a7427960407dcb85e8319eb73a
  $s$fOrdInd_$c>=5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_19
                        Index.$fOrdUind_19
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
5bed1e2ad9dc1cd949558ef020f1ef37
  $s$fOrdInd_$c>=6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_20
                        Index.$fOrdLind_20
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b32b6483898128bf830f3c539635d9c5
  $s$fOrdInd_$c>=7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_20
                        Index.$fOrdUind_20
                        a2
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
b8b44ce53e93ed5a2bb756562c9aaed6
  $s$fOrdInd_$ccompare ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_3)
                   (b :: Index.Ind n Index.Lind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Lind_3
                   Index.$fOrdLind_3
                   a2
                   b1 } }) -}
36846ee34a79345445d6f7c4a734d719
  $s$fOrdInd_$ccompare1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_3)
                   (b :: Index.Ind n Index.Uind_3) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Uind_3
                   Index.$fOrdUind_3
                   a2
                   b1 } }) -}
d8fa4dd82633d4f8cbf7d65bba0091ce
  $s$fOrdInd_$ccompare2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_9)
                   (b :: Index.Ind n Index.Lind_9) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Lind_9
                   Index.$fOrdLind_9
                   a2
                   b1 } }) -}
287a72c646860b2eab551e5356f8d184
  $s$fOrdInd_$ccompare3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_9)
                   (b :: Index.Ind n Index.Uind_9) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Uind_9
                   Index.$fOrdUind_9
                   a2
                   b1 } }) -}
b2c1c89f5468de5b83d27b918366d62f
  $s$fOrdInd_$ccompare4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_19)
                   (b :: Index.Ind n Index.Lind_19) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Lind_19
                   Index.$fOrdLind_19
                   a2
                   b1 } }) -}
78167f19f050c1c5c334cfe858c1f7dc
  $s$fOrdInd_$ccompare5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_19)
                   (b :: Index.Ind n Index.Uind_19) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Uind_19
                   Index.$fOrdUind_19
                   a2
                   b1 } }) -}
6ba55493e612bd6ae361a85ee5939388
  $s$fOrdInd_$ccompare6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Lind_20)
                   (b :: Index.Ind n Index.Lind_20) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Lind_20
                   Index.$fOrdLind_20
                   a2
                   b1 } }) -}
0dd12b5d3f96d7f7beeda96e347b9dbd
  $s$fOrdInd_$ccompare7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S),1*U(1*U)><S(S),1*U(1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (a1 :: Index.Ind n Index.Uind_20)
                   (b :: Index.Ind n Index.Uind_20) ->
                 case a1 of wild { Index.UnsafemkInd a2 ->
                 case b of wild1 { Index.UnsafemkInd b1 ->
                 Data.Sequence.Internal.$fOrdSeq_$ccompare
                   @ Index.Uind_20
                   Index.$fOrdUind_20
                   a2
                   b1 } }) -}
d779c0d62d179a8fb2a981ad5bc780b5
  $s$fOrdInd_$cmax ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
8a517be03084bdc0c27bf0b295f390c7
  $s$fOrdInd_$cmax1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
e942301f710fb47e5e8e269b7147a2f9
  $s$fOrdInd_$cmax2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_9
                        Index.$fOrdLind_9
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
19c0acdef669a002df318ef3c931e282
  $s$fOrdInd_$cmax3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_9
                        Index.$fOrdUind_9
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
40562ecc996b7286840d27043072dba5
  $s$fOrdInd_$cmax4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_19
                        Index.$fOrdLind_19
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
81bf4e2bad66a9130faf8346f0c6aca8
  $s$fOrdInd_$cmax5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_19
                        Index.$fOrdUind_19
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
43a039bb17ec78b186f9d90a641915b0
  $s$fOrdInd_$cmax6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_20
                        Index.$fOrdLind_20
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
18b24876d8c792f8d7ded1c47c5a595b
  $s$fOrdInd_$cmax7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_20
                        Index.$fOrdUind_20
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
8f019bddfb92110ed1ef4d54c5185277
  $s$fOrdInd_$cmin ::
    Index.Ind n Index.Lind_3
    -> Index.Ind n Index.Lind_3 -> Index.Ind n Index.Lind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_3)
                   (y :: Index.Ind n Index.Lind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_3
                        Index.$fOrdLind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
8d2a7763778e6914497b9f0e363bbde1
  $s$fOrdInd_$cmin1 ::
    Index.Ind n Index.Uind_3
    -> Index.Ind n Index.Uind_3 -> Index.Ind n Index.Uind_3
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_3)
                   (y :: Index.Ind n Index.Uind_3) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_3
                        Index.$fOrdUind_3
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
2bb4c8e5f2352c17d1c0f0a4f15a291c
  $s$fOrdInd_$cmin2 ::
    Index.Ind n Index.Lind_9
    -> Index.Ind n Index.Lind_9 -> Index.Ind n Index.Lind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_9)
                   (y :: Index.Ind n Index.Lind_9) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_9
                        Index.$fOrdLind_9
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
93ea68685f141632817a899db3ae5e9c
  $s$fOrdInd_$cmin3 ::
    Index.Ind n Index.Uind_9
    -> Index.Ind n Index.Uind_9 -> Index.Ind n Index.Uind_9
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_9)
                   (y :: Index.Ind n Index.Uind_9) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_9
                        Index.$fOrdUind_9
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
456c87e11cd4870995a41f5f7f8271b2
  $s$fOrdInd_$cmin4 ::
    Index.Ind n Index.Lind_19
    -> Index.Ind n Index.Lind_19 -> Index.Ind n Index.Lind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_19)
                   (y :: Index.Ind n Index.Lind_19) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_19
                        Index.$fOrdLind_19
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
1f68eb0f33b3d6c874c24b4062f7c654
  $s$fOrdInd_$cmin5 ::
    Index.Ind n Index.Uind_19
    -> Index.Ind n Index.Uind_19 -> Index.Ind n Index.Uind_19
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_19)
                   (y :: Index.Ind n Index.Uind_19) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_19
                        Index.$fOrdUind_19
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
b08391056f7436a44bd65c5743a5fd79
  $s$fOrdInd_$cmin6 ::
    Index.Ind n Index.Lind_20
    -> Index.Ind n Index.Lind_20 -> Index.Ind n Index.Lind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Lind_20)
                   (y :: Index.Ind n Index.Lind_20) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Lind_20
                        Index.$fOrdLind_20
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
60d3aa027b8cdf962344cf33084f0dce
  $s$fOrdInd_$cmin7 ::
    Index.Ind n Index.Uind_20
    -> Index.Ind n Index.Uind_20 -> Index.Ind n Index.Uind_20
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (x :: Index.Ind n Index.Uind_20)
                   (y :: Index.Ind n Index.Uind_20) ->
                 case y of wild { Index.UnsafemkInd a1 ->
                 case x of wild1 { Index.UnsafemkInd b1 ->
                 case Data.Sequence.Internal.$fOrdSeq_$c<
                        @ Index.Uind_20
                        Index.$fOrdUind_20
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
57b5762e820c56898a0ae3749b189e50
  $s$fShowInd_$cshow :: Index.Ind n Index.Lind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_3 Index.$fShowLind_3 ww1 }) -}
e0b7a5d85cbd7fabc114a4b30d1f069b
  $s$fShowInd_$cshow1 :: Index.Ind n Index.Uind_3 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_3 Index.$fShowUind_3 ww1 }) -}
d663063ca2c381775588ad18166136df
  $s$fShowInd_$cshow2 :: Index.Ind n Index.Lind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_9 Index.$fShowLind_9 ww1 }) -}
9baac49ab6b299fe9fc8ecad300d001e
  $s$fShowInd_$cshow3 :: Index.Ind n Index.Uind_9 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_9 Index.$fShowUind_9 ww1 }) -}
2051f7e8a4edf21e9bb08f0f2f8a2030
  $s$fShowInd_$cshow4 :: Index.Ind n Index.Lind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_19 Index.$fShowLind_19 ww1 }) -}
fd373b8164dda882fef30aa8f4688b00
  $s$fShowInd_$cshow5 :: Index.Ind n Index.Uind_19 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_19 Index.$fShowUind_19 ww1 }) -}
8fd80b84ee9a45679287ab897f03d040
  $s$fShowInd_$cshow6 :: Index.Ind n Index.Lind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Lind_20 Index.$fShowLind_20 ww1 }) -}
bce12f019a4e0c29ad4a5874c9624dca
  $s$fShowInd_$cshow7 :: Index.Ind n Index.Uind_20 -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ n :: GHC.Types.Nat (w1 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { Index.UnsafemkInd ww1 ->
                 Index.$w$cshow @ n @ Index.Uind_20 Index.$fShowUind_20 ww1 }) -}
c635e00b5d8bb645e5dae302f85e1e52
  $s$fShowInd_$cshowList ::
    [Index.Ind n Index.Lind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_3
                      Index.$fShowLind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
d6fb028c25db098069672fc44a481161
  $s$fShowInd_$cshowList1 ::
    [Index.Ind n Index.Uind_3] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_3])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_3)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_3
                      Index.$fShowUind_3
                      Index.$fShowInd1)
                   ls
                   s) -}
5ba831b3113b5b190eab1c3a77fd536a
  $s$fShowInd_$cshowList2 ::
    [Index.Ind n Index.Lind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_9
                      Index.$fShowLind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
1642867188bde31929af488907a33104
  $s$fShowInd_$cshowList3 ::
    [Index.Ind n Index.Uind_9] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_9])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_9)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_9
                      Index.$fShowUind_9
                      Index.$fShowInd1)
                   ls
                   s) -}
41e3b38c3b63c71e43ac511bcbf604f4
  $s$fShowInd_$cshowList4 ::
    [Index.Ind n Index.Lind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_19
                      Index.$fShowLind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
316b338a04e07c7d4eaa6472fc9af320
  $s$fShowInd_$cshowList5 ::
    [Index.Ind n Index.Uind_19] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_19])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_19)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_19
                      Index.$fShowUind_19
                      Index.$fShowInd1)
                   ls
                   s) -}
5316c0787b51cef4e0776068bf47b815
  $s$fShowInd_$cshowList6 ::
    [Index.Ind n Index.Lind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Lind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Lind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Lind_20
                      Index.$fShowLind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
433f3f9517f3d6159d2b59a79fd7cb13
  $s$fShowInd_$cshowList7 ::
    [Index.Ind n Index.Uind_20] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (ls :: [Index.Ind n Index.Uind_20])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Index.Ind n Index.Uind_20)
                   (Index.$fShowInd_$cshowsPrec
                      @ n
                      @ Index.Uind_20
                      Index.$fShowUind_20
                      Index.$fShowInd1)
                   ls
                   s) -}
347fdb886fee0310e183aecbdc592b28
  $s$fShowInd_$cshowsPrec ::
    GHC.Types.Int -> Index.Ind n Index.Lind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_3
                   Index.$fShowLind_3
                   ww1
                   ww3 } }) -}
f1dc20566485960a4b2ec22b88c87f53
  $s$fShowInd_$cshowsPrec1 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_3 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_3) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_3
                   Index.$fShowUind_3
                   ww1
                   ww3 } }) -}
a95acda3187a4c70dcd8e585a4a53745
  $s$fShowInd_$cshowsPrec2 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_9
                   Index.$fShowLind_9
                   ww1
                   ww3 } }) -}
430a3d9307597a4dd8ec1e21f897cd20
  $s$fShowInd_$cshowsPrec3 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_9 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_9) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_9
                   Index.$fShowUind_9
                   ww1
                   ww3 } }) -}
04a040b6738bc3f4cd5fa4b8a88a21d0
  $s$fShowInd_$cshowsPrec4 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_19
                   Index.$fShowLind_19
                   ww1
                   ww3 } }) -}
3d7dd1d596df9fdc5f5226c1101b1f3c
  $s$fShowInd_$cshowsPrec5 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_19 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_19) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_19
                   Index.$fShowUind_19
                   ww1
                   ww3 } }) -}
3ef315cc2865ca4bfdb421a46f9a4b97
  $s$fShowInd_$cshowsPrec6 ::
    GHC.Types.Int -> Index.Ind n Index.Lind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Lind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Lind_20
                   Index.$fShowLind_20
                   ww1
                   ww3 } }) -}
7087f4d86b9f0546b753d546200dcf12
  $s$fShowInd_$cshowsPrec7 ::
    GHC.Types.Int -> Index.Ind n Index.Uind_20 -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ n :: GHC.Types.Nat
                   (w1 :: GHC.Types.Int)
                   (w2 :: Index.Ind n Index.Uind_20) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Index.UnsafemkInd ww3 ->
                 Index.$w$cshowsPrec
                   @ n
                   @ Index.Uind_20
                   Index.$fShowUind_20
                   ww1
                   ww3 } }) -}
5f2a1e30d1721568b15c3042721846c7
  $tc'Tensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12818042684598350646##
                   14291769805369570361##
                   Tensor.$trModule
                   Tensor.$tc'Tensor2
                   9#
                   Tensor.$tc'Tensor1) -}
5596a26efcd24c4c9dfe567f1a2f272c
  $tc'Tensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ce00cdfd7748930d095a56929eb9141
  $tc'Tensor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$tc'Tensor3) -}
35bcb15695cfd8740e67fd21fbf81243
  $tc'Tensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Tensor"#) -}
df4df1604a6cc32eefb879d8e8963b4f
  $tcTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16721014749436762582##
                   10886807482571654239##
                   Tensor.$trModule
                   Tensor.$trModule1
                   0#
                   Tensor.$tcTensor1) -}
e9a7914fe5cca5a97176b51483defd45
  $tcTensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb58da39157c7dde6e5d9cfc4f8dad63
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Tensor.$trModule3
                   Tensor.$trModule1) -}
4999b7020a19b0c26a85ce9c5f0929f1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule2) -}
d5791154d3f1a17af509c3a8e7372c52
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor"#) -}
3aa19db5c63e324ff2d3a70ecc4b28c3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Tensor.$trModule4) -}
3b60604511356ab7892a3ac039f477e7
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
5915edbc74fefe256afce96ef5089b54
  $w$c<$ ::
    a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ b
                   (w :: a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b) ->
                 (# letrec {
                      go8 :: Data.Map.Internal.Map
                               (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b
                             -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: Data.Map.Internal.Map
                                   (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) b) ->
                        case ds of wild {
                          Data.Map.Internal.Bin dt kx x l r
                          -> case w of x' { DEFAULT ->
                             case go8 l of dt1 { DEFAULT ->
                             case go8 r of dt2 { DEFAULT ->
                             Data.Map.Internal.Bin
                               @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                               @ a
                               dt
                               kx
                               x'
                               dt1
                               dt2 } } }
                          Data.Map.Internal.Tip
                          -> Data.Map.Internal.Tip
                               @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                               @ a }
                    } in
                    go8 ww #)) -}
2dea8ed2418eae26f708edc0b1bc92e5
  $w$cshow ::
    GHC.Show.Show a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Tensor.$fShowTensor2
                   (Data.Map.Internal.$w$cshowsPrec
                      @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                         Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                         Index.Uinds_3 n7, Index.Linds_3 n8)
                      @ a
                      (Tensor.$fShowTensor4 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      w
                      11#
                      ww
                      (GHC.Types.[] @ GHC.Types.Char))) -}
5b5e8ef54e68eea8f74854cec59a9402
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                          Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                          Index.Uinds_3 n7, Index.Linds_3 n8)
                       @ a
                       (Tensor.$fShowTensor4 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                       w
                       11#
                       ww1
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Tensor.$fShowTensor2 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Tensor.$fShowTensor2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
3e3f119caf2acf69ed341bad31f885b1
  $w$sfactorial :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
71a63bb4249d25fb6f629888ded2dd91
  $waSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 case Tensor.$wtensorTranspose
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        w1
                        w2
                        ww of ww1 { Unit# ww2 ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                 } in
                 case Tensor.$wtensorSub
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        $dNum
                        ww
                        ww2 of ww3 { Unit# ww4 ->
                 (# Data.Map.Strict.Internal.map
                      @ a
                      @ a
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      (GHC.Num.*
                         @ a
                         $dNum
                         (GHC.Real./
                            @ a
                            w
                            (GHC.Num.fromInteger @ a $dNum Tensor.aSymTensor2)
                            (GHC.Num.fromInteger @ a $dNum Tensor.aSymTensor1)))
                      ww4 #) } }) -}
11b92945d1baeff658226007c4f200f9
  $wblockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U,U)><L,U>,
     Inline: [0] -}
24e42558fed50183b1cfc0a356ee0952
  $wsymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 4,
     Strictness: <L,U(1*U(1*C(C1(U)),A,1*C1(C(U)),A,A,A,C(U)),1*C1(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 case Tensor.$wtensorTranspose
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        w1
                        w2
                        ww of ww1 { Unit# ww2 ->
                 (# let {
                      $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a w
                    } in
                    Data.Map.Strict.Internal.map
                      @ a
                      @ a
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      (GHC.Num.*
                         @ a
                         $dNum
                         (GHC.Real./
                            @ a
                            w
                            (GHC.Num.fromInteger @ a $dNum Tensor.aSymTensor2)
                            (GHC.Num.fromInteger @ a $dNum Tensor.aSymTensor1)))
                      (Data.Map.Strict.Internal.unionWith
                         @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                         @ a
                         (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                         (GHC.Num.+ @ a $dNum)
                         ww
                         ww2) #) }) -}
315639f3c249d7edd553b354308953a6
  $wtensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                            a) ->
                 (# Data.Map.Strict.Internal.mapKeysWith
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      @ (Index.Index
                           n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      w3
                      (Index.delContractionIndex_19
                         @ n3
                         @ n4
                         @ n1
                         @ n2
                         @ n5
                         @ n6
                         @ n7
                         @ n8
                         w
                         w1
                         w2)
                      (Data.Map.Internal.filterWithKey
                         @ (Index.Index
                              n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                         @ a
                         (\ (k :: Index.Index
                                    n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8)
                            (ds :: a)[OneShot] ->
                          Index.isContractionIndex
                            @ n1
                            @ n2
                            @ (n3 GHC.TypeNats.+ 1)
                            @ (n4 GHC.TypeNats.+ 1)
                            @ n5
                            @ n6
                            @ n7
                            @ n8
                            Tensor.tensorContractWith_1
                            w2
                            k)
                         ww) #)) -}
33aa0d10523eaef8e3e6852db9f673a7
  $wtensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                            a) ->
                 (# Data.Map.Strict.Internal.mapKeysWith
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      @ (Index.Index
                           (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      w3
                      (Index.delContractionIndex_20
                         @ n1
                         @ n2
                         @ n3
                         @ n4
                         @ n5
                         @ n6
                         @ n7
                         @ n8
                         w
                         w1
                         w2)
                      (Data.Map.Internal.filterWithKey
                         @ (Index.Index
                              (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                         @ a
                         (\ (k :: Index.Index
                                    (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8)
                            (ds :: a)[OneShot] ->
                          Index.isContractionIndex
                            @ (n1 GHC.TypeNats.+ 1)
                            @ (n2 GHC.TypeNats.+ 1)
                            @ n3
                            @ n4
                            @ n5
                            @ n6
                            @ n7
                            @ n8
                            Tensor.tensorContractWith_2
                            w2
                            k)
                         ww) #)) -}
cec78cdbdcdc804a0ab5fb5784fdd1ec
  $wtensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                            a) ->
                 (# Data.Map.Strict.Internal.mapKeysWith
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      @ (Index.Index
                           n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      w3
                      (Index.delContractionIndex_3
                         @ n7
                         @ n8
                         @ n1
                         @ n2
                         @ n3
                         @ n4
                         @ n5
                         @ n6
                         w
                         w1
                         w2)
                      (Data.Map.Internal.filterWithKey
                         @ (Index.Index
                              n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                         @ a
                         (\ (k :: Index.Index
                                    n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1))
                            (ds :: a)[OneShot] ->
                          Index.isContractionIndex
                            @ n1
                            @ n2
                            @ n3
                            @ n4
                            @ n5
                            @ n6
                            @ (n7 GHC.TypeNats.+ 1)
                            @ (n8 GHC.TypeNats.+ 1)
                            Tensor.tensorContractWith_4
                            w2
                            k)
                         ww) #)) -}
5fc2f0ac5a95bd8c8d4991bb838632c0
  $wtensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Index.Index
            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
         a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index
                               n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                            a) ->
                 (# Data.Map.Strict.Internal.mapKeysWith
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      @ (Index.Index
                           n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      w3
                      (Index.delContractionIndex_9
                         @ n5
                         @ n6
                         @ n1
                         @ n2
                         @ n3
                         @ n4
                         @ n7
                         @ n8
                         w
                         w1
                         w2)
                      (Data.Map.Internal.filterWithKey
                         @ (Index.Index
                              n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                         @ a
                         (\ (k :: Index.Index
                                    n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8)
                            (ds :: a)[OneShot] ->
                          Index.isContractionIndex
                            @ n1
                            @ n2
                            @ n3
                            @ n4
                            @ (n5 GHC.TypeNats.+ 1)
                            @ (n6 GHC.TypeNats.+ 1)
                            @ n7
                            @ n8
                            Tensor.tensorContractWith_5
                            w2
                            k)
                         ww) #)) -}
18f01472045acbf572f94bac2462095e
  $wtensorProductWith ::
    (a -> b -> c)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b
    -> (# Data.Map.Internal.Map
            (Index.Index
               (n1 GHC.TypeNats.+ m1)
               (n2 GHC.TypeNats.+ m2)
               (n3 GHC.TypeNats.+ m3)
               (n4 GHC.TypeNats.+ m4)
               (n5 GHC.TypeNats.+ m5)
               (n6 GHC.TypeNats.+ m6)
               (n7 GHC.TypeNats.+ m7)
               (n8 GHC.TypeNats.+ m8))
            c #)
  {- Arity: 3, Strictness: <L,C(C1(U))><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index m1 m2 m3 m4 m5 m6 m7 m8) b) ->
                 (# letrec {
                      go13 :: [Data.Map.Internal.Map
                                 (Index.Index
                                    (n1 GHC.TypeNats.+ m1)
                                    (n2 GHC.TypeNats.+ m2)
                                    (n3 GHC.TypeNats.+ m3)
                                    (n4 GHC.TypeNats.+ m4)
                                    (n5 GHC.TypeNats.+ m5)
                                    (n6 GHC.TypeNats.+ m6)
                                    (n7 GHC.TypeNats.+ m7)
                                    (n8 GHC.TypeNats.+ m8))
                                 c]
                              -> Data.Map.Internal.Map
                                   (Index.Uinds_20 m1, Index.Linds_20 m2, Index.Uinds_19 m3,
                                    Index.Linds_19 m4, Index.Uinds_9 m5, Index.Linds_9 m6,
                                    Index.Uinds_3 m7, Index.Linds_3 m8)
                                   b
                              -> [Data.Map.Internal.Map
                                    (Index.Index
                                       (n1 GHC.TypeNats.+ m1)
                                       (n2 GHC.TypeNats.+ m2)
                                       (n3 GHC.TypeNats.+ m3)
                                       (n4 GHC.TypeNats.+ m4)
                                       (n5 GHC.TypeNats.+ m5)
                                       (n6 GHC.TypeNats.+ m6)
                                       (n7 GHC.TypeNats.+ m7)
                                       (n8 GHC.TypeNats.+ m8))
                                    c]
                        {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                      = \ (z' :: [Data.Map.Internal.Map
                                    (Index.Index
                                       (n1 GHC.TypeNats.+ m1)
                                       (n2 GHC.TypeNats.+ m2)
                                       (n3 GHC.TypeNats.+ m3)
                                       (n4 GHC.TypeNats.+ m4)
                                       (n5 GHC.TypeNats.+ m5)
                                       (n6 GHC.TypeNats.+ m6)
                                       (n7 GHC.TypeNats.+ m7)
                                       (n8 GHC.TypeNats.+ m8))
                                    c])
                          (ds :: Data.Map.Internal.Map
                                   (Index.Uinds_20 m1, Index.Linds_20 m2, Index.Uinds_19 m3,
                                    Index.Linds_19 m4, Index.Uinds_9 m5, Index.Linds_9 m6,
                                    Index.Uinds_3 m7, Index.Linds_3 m8)
                                   b) ->
                        case ds of wild {
                          Data.Map.Internal.Bin dt kx x l r
                          -> go13
                               (GHC.Types.:
                                  @ (Data.Map.Internal.Map
                                       (Index.Index
                                          (n1 GHC.TypeNats.+ m1)
                                          (n2 GHC.TypeNats.+ m2)
                                          (n3 GHC.TypeNats.+ m3)
                                          (n4 GHC.TypeNats.+ m4)
                                          (n5 GHC.TypeNats.+ m5)
                                          (n6 GHC.TypeNats.+ m6)
                                          (n7 GHC.TypeNats.+ m7)
                                          (n8 GHC.TypeNats.+ m8))
                                       c)
                                  (let {
                                     val :: b
                                     = Data.Map.Internal.find
                                         @ (Index.Index m1 m2 m3 m4 m5 m6 m7 m8)
                                         @ b
                                         (Tensor.aSymTensor4
                                            @ m8
                                            @ m7
                                            @ m6
                                            @ m5
                                            @ m4
                                            @ m3
                                            @ m2
                                            @ m1)
                                         kx
                                         ww1
                                   } in
                                   letrec {
                                     go8 :: Data.Map.Internal.Map
                                              (Index.Index
                                                 (n1 GHC.TypeNats.+ m1)
                                                 (n2 GHC.TypeNats.+ m2)
                                                 (n3 GHC.TypeNats.+ m3)
                                                 (n4 GHC.TypeNats.+ m4)
                                                 (n5 GHC.TypeNats.+ m5)
                                                 (n6 GHC.TypeNats.+ m6)
                                                 (n7 GHC.TypeNats.+ m7)
                                                 (n8 GHC.TypeNats.+ m8))
                                              a
                                            -> Data.Map.Internal.Map
                                                 (Index.Index
                                                    (n1 GHC.TypeNats.+ m1)
                                                    (n2 GHC.TypeNats.+ m2)
                                                    (n3 GHC.TypeNats.+ m3)
                                                    (n4 GHC.TypeNats.+ m4)
                                                    (n5 GHC.TypeNats.+ m5)
                                                    (n6 GHC.TypeNats.+ m6)
                                                    (n7 GHC.TypeNats.+ m7)
                                                    (n8 GHC.TypeNats.+ m8))
                                                 c
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds1 :: Data.Map.Internal.Map
                                                   (Index.Index
                                                      (n1 GHC.TypeNats.+ m1)
                                                      (n2 GHC.TypeNats.+ m2)
                                                      (n3 GHC.TypeNats.+ m3)
                                                      (n4 GHC.TypeNats.+ m4)
                                                      (n5 GHC.TypeNats.+ m5)
                                                      (n6 GHC.TypeNats.+ m6)
                                                      (n7 GHC.TypeNats.+ m7)
                                                      (n8 GHC.TypeNats.+ m8))
                                                   a) ->
                                       case ds1 of wild1 {
                                         Data.Map.Internal.Bin dt1 kx1 x1 l1 r1
                                         -> case w x1 val of x' { DEFAULT ->
                                            case go8 l1 of dt2 { DEFAULT ->
                                            case go8 r1 of dt3 { DEFAULT ->
                                            Data.Map.Internal.Bin
                                              @ (Index.Index
                                                   (n1 GHC.TypeNats.+ m1)
                                                   (n2 GHC.TypeNats.+ m2)
                                                   (n3 GHC.TypeNats.+ m3)
                                                   (n4 GHC.TypeNats.+ m4)
                                                   (n5 GHC.TypeNats.+ m5)
                                                   (n6 GHC.TypeNats.+ m6)
                                                   (n7 GHC.TypeNats.+ m7)
                                                   (n8 GHC.TypeNats.+ m8))
                                              @ c
                                              dt1
                                              kx1
                                              x'
                                              dt2
                                              dt3 } } }
                                         Data.Map.Internal.Tip
                                         -> Data.Map.Internal.Tip
                                              @ (Index.Index
                                                   (n1 GHC.TypeNats.+ m1)
                                                   (n2 GHC.TypeNats.+ m2)
                                                   (n3 GHC.TypeNats.+ m3)
                                                   (n4 GHC.TypeNats.+ m4)
                                                   (n5 GHC.TypeNats.+ m5)
                                                   (n6 GHC.TypeNats.+ m6)
                                                   (n7 GHC.TypeNats.+ m7)
                                                   (n8 GHC.TypeNats.+ m8))
                                              @ c }
                                   } in
                                   letrec {
                                     go1 :: [(Index.Index
                                                (n1 GHC.TypeNats.+ m1)
                                                (n2 GHC.TypeNats.+ m2)
                                                (n3 GHC.TypeNats.+ m3)
                                                (n4 GHC.TypeNats.+ m4)
                                                (n5 GHC.TypeNats.+ m5)
                                                (n6 GHC.TypeNats.+ m6)
                                                (n7 GHC.TypeNats.+ m7)
                                                (n8 GHC.TypeNats.+ m8),
                                              a)]
                                            -> Data.Map.Internal.Map
                                                 (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
                                            -> [(Index.Index
                                                   (n1 GHC.TypeNats.+ m1)
                                                   (n2 GHC.TypeNats.+ m2)
                                                   (n3 GHC.TypeNats.+ m3)
                                                   (n4 GHC.TypeNats.+ m4)
                                                   (n5 GHC.TypeNats.+ m5)
                                                   (n6 GHC.TypeNats.+ m6)
                                                   (n7 GHC.TypeNats.+ m7)
                                                   (n8 GHC.TypeNats.+ m8),
                                                 a)]
                                       {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                                     = \ (z'1 :: [(Index.Index
                                                     (n1 GHC.TypeNats.+ m1)
                                                     (n2 GHC.TypeNats.+ m2)
                                                     (n3 GHC.TypeNats.+ m3)
                                                     (n4 GHC.TypeNats.+ m4)
                                                     (n5 GHC.TypeNats.+ m5)
                                                     (n6 GHC.TypeNats.+ m6)
                                                     (n7 GHC.TypeNats.+ m7)
                                                     (n8 GHC.TypeNats.+ m8),
                                                   a)])
                                         (ds1 :: Data.Map.Internal.Map
                                                   (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                                       case ds1 of wild1 {
                                         Data.Map.Internal.Bin dt1 kx1 x1 l1 r1
                                         -> go1
                                              (GHC.Types.:
                                                 @ (Index.Index
                                                      (n1 GHC.TypeNats.+ m1)
                                                      (n2 GHC.TypeNats.+ m2)
                                                      (n3 GHC.TypeNats.+ m3)
                                                      (n4 GHC.TypeNats.+ m4)
                                                      (n5 GHC.TypeNats.+ m5)
                                                      (n6 GHC.TypeNats.+ m6)
                                                      (n7 GHC.TypeNats.+ m7)
                                                      (n8 GHC.TypeNats.+ m8),
                                                    a)
                                                 (Index.combineIndex
                                                    @ n1
                                                    @ n2
                                                    @ n3
                                                    @ n4
                                                    @ n5
                                                    @ n6
                                                    @ n7
                                                    @ n8
                                                    @ m1
                                                    @ m2
                                                    @ m3
                                                    @ m4
                                                    @ m5
                                                    @ m6
                                                    @ m7
                                                    @ m8
                                                    kx1
                                                    kx,
                                                  x1)
                                                 (go1 z'1 r1))
                                              l1
                                         Data.Map.Internal.Tip -> z'1 }
                                   } in
                                   go8
                                     (Data.Map.Internal.fromList
                                        @ (Index.Index
                                             (n1 GHC.TypeNats.+ m1)
                                             (n2 GHC.TypeNats.+ m2)
                                             (n3 GHC.TypeNats.+ m3)
                                             (n4 GHC.TypeNats.+ m4)
                                             (n5 GHC.TypeNats.+ m5)
                                             (n6 GHC.TypeNats.+ m6)
                                             (n7 GHC.TypeNats.+ m7)
                                             (n8 GHC.TypeNats.+ m8))
                                        @ a
                                        (Tensor.tensorProductWith2
                                           @ n8
                                           @ m8
                                           @ n7
                                           @ m7
                                           @ n6
                                           @ m6
                                           @ n5
                                           @ m5
                                           @ n4
                                           @ m4
                                           @ n3
                                           @ m3
                                           @ n2
                                           @ m2
                                           @ n1
                                           @ m1)
                                        (go1
                                           (GHC.Types.[]
                                              @ (Index.Index
                                                   (n1 GHC.TypeNats.+ m1)
                                                   (n2 GHC.TypeNats.+ m2)
                                                   (n3 GHC.TypeNats.+ m3)
                                                   (n4 GHC.TypeNats.+ m4)
                                                   (n5 GHC.TypeNats.+ m5)
                                                   (n6 GHC.TypeNats.+ m6)
                                                   (n7 GHC.TypeNats.+ m7)
                                                   (n8 GHC.TypeNats.+ m8),
                                                 a))
                                           ww)))
                                  (go13 z' r))
                               l
                          Data.Map.Internal.Tip -> z' }
                    } in
                    Tensor.tensorProductWith1
                      @ n1
                      @ m1
                      @ n2
                      @ m2
                      @ n3
                      @ m3
                      @ n4
                      @ m4
                      @ n5
                      @ m5
                      @ n6
                      @ m6
                      @ n7
                      @ m7
                      @ n8
                      @ m8
                      @ c
                      (Data.Map.Internal.Tip
                         @ (Index.Index
                              (n1 GHC.TypeNats.+ m1)
                              (n2 GHC.TypeNats.+ m2)
                              (n3 GHC.TypeNats.+ m3)
                              (n4 GHC.TypeNats.+ m4)
                              (n5 GHC.TypeNats.+ m5)
                              (n6 GHC.TypeNats.+ m6)
                              (n7 GHC.TypeNats.+ m7)
                              (n8 GHC.TypeNats.+ m8))
                         @ c)
                      (go13
                         (GHC.Types.[]
                            @ (Data.Map.Internal.Map
                                 (Index.Index
                                    (n1 GHC.TypeNats.+ m1)
                                    (n2 GHC.TypeNats.+ m2)
                                    (n3 GHC.TypeNats.+ m3)
                                    (n4 GHC.TypeNats.+ m4)
                                    (n5 GHC.TypeNats.+ m5)
                                    (n6 GHC.TypeNats.+ m6)
                                    (n7 GHC.TypeNats.+ m7)
                                    (n8 GHC.TypeNats.+ m8))
                                 c))
                         ww1) #)) -}
df378effdaf141c2cf4844e7028996c9
  $wtensorSub ::
    GHC.Num.Num a =>
    Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3,
     Strictness: <L,U(1*C(C1(U)),A,1*C1(C(U)),1*C1(U),A,A,1*C1(U))><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
                   (ww1 :: Data.Map.Internal.Map
                             (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 (# Data.Map.Strict.Internal.unionWith
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      (GHC.Num.+ @ a w)
                      ww
                      (Data.Map.Strict.Internal.map
                         @ a
                         @ a
                         @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                         (GHC.Num.*
                            @ a
                            w
                            (GHC.Num.negate
                               @ a
                               w
                               (GHC.Num.fromInteger @ a w Tensor.aSymTensor2)))
                         ww1) #)) -}
2fecfa4db2a2948fc79e89baa8f83e82
  $wtensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
    -> (# Data.Map.Internal.Map
            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (ww :: Data.Map.Internal.Map
                            (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                 (# letrec {
                      go13 :: [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
                              -> Data.Map.Internal.Map (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a
                              -> [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
                        {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                      = \ (z' :: [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)])
                          (ds :: Data.Map.Internal.Map
                                   (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a) ->
                        case ds of wild {
                          Data.Map.Internal.Bin dt kx x l r
                          -> case kx of ww2 { (,,,,,,,) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                             go13
                               (GHC.Types.:
                                  @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)
                                  (case w of ww1 { GHC.Types.I# ww12 ->
                                   case ww12 of wild1 {
                                     DEFAULT
                                     -> case Index.swapPosIndex1
                                        ret_ty (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                        of {}
                                     1#
                                     -> (Index.swapPosInd @ n1 @ Index.Uind_20 w1 ww3, ww4, ww5,
                                         ww6, ww7, ww8, ww9, ww10)
                                     2#
                                     -> (ww3, Index.swapPosInd @ n2 @ Index.Lind_20 w1 ww4, ww5,
                                         ww6, ww7, ww8, ww9, ww10)
                                     3#
                                     -> (ww3, ww4, Index.swapPosInd @ n3 @ Index.Uind_19 w1 ww5,
                                         ww6, ww7, ww8, ww9, ww10)
                                     4#
                                     -> (ww3, ww4, ww5,
                                         Index.swapPosInd @ n4 @ Index.Lind_19 w1 ww6, ww7, ww8,
                                         ww9, ww10)
                                     5#
                                     -> (ww3, ww4, ww5, ww6,
                                         Index.swapPosInd @ n5 @ Index.Uind_9 w1 ww7, ww8, ww9,
                                         ww10)
                                     6#
                                     -> (ww3, ww4, ww5, ww6, ww7,
                                         Index.swapPosInd @ n6 @ Index.Lind_9 w1 ww8, ww9, ww10)
                                     7#
                                     -> (ww3, ww4, ww5, ww6, ww7, ww8,
                                         Index.swapPosInd @ n7 @ Index.Uind_3 w1 ww9, ww10)
                                     8#
                                     -> (ww3, ww4, ww5, ww6, ww7, ww8, ww9,
                                         Index.swapPosInd @ n8 @ Index.Lind_3 w1 ww10) } },
                                   x)
                                  (go13 z' r))
                               l }
                          Data.Map.Internal.Tip -> z' }
                    } in
                    Data.Map.Internal.fromList
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      (Tensor.aSymTensor4 @ n8 @ n7 @ n6 @ n5 @ n4 @ n3 @ n2 @ n1)
                      (go13
                         (GHC.Types.[] @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a))
                         ww) #)) -}
3907440065a4b5e56c282f0fba1005c5
  type Rank =
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int,
     GHC.Types.Int, GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
de2cb2f95a4c3ff6ea3ffdde0ef67deb
  type role Tensor nominal nominal nominal nominal nominal nominal nominal nominal representational
  data Tensor (n1 :: GHC.Types.Nat)
              (n2 :: GHC.Types.Nat)
              (n3 :: GHC.Types.Nat)
              (n4 :: GHC.Types.Nat)
              (n5 :: GHC.Types.Nat)
              (n6 :: GHC.Types.Nat)
              (n7 :: GHC.Types.Nat)
              (n8 :: GHC.Types.Nat)
              a
    = Tensor (Data.Map.Internal.Map
                (Index.Index n1 n2 n3 n4 n5 n6 n7 n8) a)
f241e5a2f097a36d205de9ab0e2766cb
  aSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$waSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
583b6c7a910309ce224966b7f1b018ea
  aSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
66a203de9553546e7e419558a68189fc
  aSymTensor2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
678548945cb1ac49d8a35d040a18e7a6
  aSymTensor3 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
d901b239608d6d56358d5f5a2b232040
  aSymTensor4 ::
    GHC.Classes.Ord (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind n1 Index.Uind_20)
                   @ (Index.Ind n2 Index.Lind_20)
                   @ (Index.Ind n3 Index.Uind_19)
                   @ (Index.Ind n4 Index.Lind_19)
                   @ (Index.Ind n5 Index.Uind_9)
                   @ (Index.Ind n6 Index.Lind_9)
                   @ (Index.Ind n7 Index.Uind_3)
                   @ (Index.Ind n8 Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ n1)
                   (Tensor.$s$fOrdInd6 @ n2)
                   (Tensor.$s$fOrdInd5 @ n3)
                   (Tensor.$s$fOrdInd4 @ n4)
                   (Tensor.$s$fOrdInd3 @ n5)
                   (Tensor.$s$fOrdInd2 @ n6)
                   (Tensor.$s$fOrdInd1 @ n7)
                   (Tensor.$s$fOrdInd @ n8)) -}
ae69d1c4053832b6a96df6f5fc573f2f
  blockSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> ([GHC.Types.Int], [GHC.Types.Int])
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U,U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: ([GHC.Types.Int], [GHC.Types.Int]))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wblockSymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
6819ca0662ceddb4990b388f5ee5c987
  cyclicSymTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> [GHC.Types.Int]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1,
     Strictness: <L,U(1*U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 let {
                   lvl19 :: a = GHC.Num.fromInteger @ a $dNum Tensor.aSymTensor2
                 } in
                 let {
                   lvl20 :: a = GHC.Num.fromInteger @ a $dNum Tensor.cyclicSymTensor1
                 } in
                 \ (i :: GHC.Types.Int)
                   (list :: [GHC.Types.Int])
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case ds of wild { Tensor.Tensor map1 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   (let {
                      f :: a -> a
                      = GHC.Num.*
                          @ a
                          $dNum
                          (GHC.Real./
                             @ a
                             $dFractional
                             lvl19
                             (GHC.Num.fromInteger
                                @ a
                                $dNum
                                (case GHC.List.$wlenAcc @ GHC.Types.Int list 0# of ww2 { DEFAULT ->
                                 case Tensor.$w$sfactorial ww2 of ww { DEFAULT ->
                                 GHC.Integer.Type.smallInteger ww } })))
                    } in
                    Data.Map.Strict.Internal.mapWithKey
                      @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                         Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                         Index.Uinds_3 n7, Index.Linds_3 n8)
                      @ a
                      @ a
                      (\ (k1 :: (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                                 Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                                 Index.Uinds_3 n7, Index.Linds_3 n8))
                         (a2 :: a)[OneShot] ->
                       case i of ww { GHC.Types.I# ww1 ->
                       case k1 of ww2 { (,,,,,,,) ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                       let {
                         exit :: a -> a <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                         = \ (eta :: a)[OneShot] -> case eta of vx { DEFAULT -> f vx }
                       } in
                       letrec {
                         go :: [(Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                                 Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                                 Index.Uinds_3 n7, Index.Linds_3 n8)]
                               -> a -> a
                           <join 2> {- Arity: 2, Strictness: <S,1*U><L,U> -}
                         = \ (ds1 :: [(Index.Uinds_20 n1, Index.Linds_20 n2,
                                       Index.Uinds_19 n3, Index.Linds_19 n4, Index.Uinds_9 n5,
                                       Index.Linds_9 n6, Index.Uinds_3 n7, Index.Linds_3 n8)])
                             (eta :: a) ->
                           case ds1 of wild1 {
                             [] -> exit eta
                             : y ys
                             -> go
                                  ys
                                  (GHC.Num.+
                                     @ a
                                     $dNum
                                     eta
                                     (Data.Map.Internal.find
                                        @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                        @ a
                                        (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                                        y
                                        map1)) }
                       } in
                       go
                         (Index.$wcyclicSwapIndex
                            @ n1
                            @ n2
                            @ n3
                            @ n4
                            @ n5
                            @ n6
                            @ n7
                            @ n8
                            ww1
                            list
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7
                            ww8
                            ww9
                            ww10)
                         lvl20 } })
                      map1) }) -}
292c410335a6ffc464f1056e5ce9d82a
  cyclicSymTensor1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0fc092d3d044d2ac079230dca1413762
  evalFullTensor ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case ds of wild { Tensor.Tensor m ->
                 Data.Map.Internal.assocs
                   @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                   @ a
                   m }) -}
0507cf8ef5ddf6a3d1fa8a94ad34a9da
  evalTensorVals :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case ds of wild { Tensor.Tensor m ->
                 Data.Map.Internal.elems_go
                   @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                      Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                      Index.Uinds_3 n7, Index.Linds_3 n8)
                   @ a
                   (GHC.Types.[] @ a)
                   m }) -}
e9629c3f31e067cd8b33566ddb175223
  getVal ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a) ->
                 let {
                   lvl19 :: a = GHC.Num.fromInteger @ a $dNum Tensor.cyclicSymTensor1
                 } in
                 \ (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 case ds of wild { Tensor.Tensor map1 ->
                 case Data.Map.Internal.member
                        @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                        @ a
                        (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                        ind
                        map1 of wild1 {
                   GHC.Types.False -> lvl19
                   GHC.Types.True
                   -> Data.Map.Internal.find
                        @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                        @ a
                        (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                        ind
                        map1 } }) -}
d25eb1d0d5a12827f4c56b25c6bb6d54
  mkTensorfromF ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8, GHC.Num.Num a,
     GHC.Classes.Eq a) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U(A,A,A,A,A,A,1*C1(U))><L,U(A,C(C1(U)))>,
     Unfolding: (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   ($dKnownNat :: GHC.TypeNats.KnownNat n1)
                   ($dKnownNat1 :: GHC.TypeNats.KnownNat n2)
                   ($dKnownNat2 :: GHC.TypeNats.KnownNat n3)
                   ($dKnownNat3 :: GHC.TypeNats.KnownNat n4)
                   ($dKnownNat4 :: GHC.TypeNats.KnownNat n5)
                   ($dKnownNat5 :: GHC.TypeNats.KnownNat n6)
                   ($dKnownNat6 :: GHC.TypeNats.KnownNat n7)
                   ($dKnownNat7 :: GHC.TypeNats.KnownNat n8)
                   ($dNum :: GHC.Num.Num a)
                   ($dEq :: GHC.Classes.Eq a) ->
                 let {
                   ds :: a = GHC.Num.fromInteger @ a $dNum Tensor.cyclicSymTensor1
                 } in
                 let {
                   lvl19 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a -> GHC.Types.Bool
                     {- Arity: 2, Strictness: <L,A><L,U>,
                        Unfolding: InlineRule (2, True, False)
                                   (\ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                                      (x :: a)[OneShot] ->
                                    GHC.Classes./= @ a $dEq x ds) -}
                   = \ (ds1 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                       (x :: a)[OneShot] ->
                     GHC.Classes./= @ a $dEq x ds
                 } in
                 \ (rank :: Tensor.Rank)
                   (f :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   (let {
                      indList :: [Index.Index n1 n2 n3 n4 n5 n6 n7 n8]
                      = Tensor.tensorIndList
                          @ n1
                          @ n2
                          @ n3
                          @ n4
                          @ n5
                          @ n6
                          @ n7
                          @ n8
                          $dKnownNat
                          $dKnownNat1
                          $dKnownNat2
                          $dKnownNat3
                          $dKnownNat4
                          $dKnownNat5
                          $dKnownNat6
                          $dKnownNat7
                          rank
                    } in
                    Data.Map.Internal.filterWithKey
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      lvl19
                      (Data.Map.Strict.Internal.fromList
                         @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                         @ a
                         (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                         (GHC.List.zip
                            @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                               Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                               Index.Uinds_3 n7, Index.Linds_3 n8)
                            @ a
                            indList
                            (GHC.Base.map
                               @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                                  Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                                  Index.Uinds_3 n7, Index.Linds_3 n8)
                               @ a
                               f
                               indList))))) -}
5c384ef0fe558d8a9f8d838b1556b0a6
  mkTensorfromFZeros ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank
    -> (Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 10,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U))><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (10, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: GHC.TypeNats.KnownNat n3)
                   (w3 :: GHC.TypeNats.KnownNat n4)
                   (w4 :: GHC.TypeNats.KnownNat n5)
                   (w5 :: GHC.TypeNats.KnownNat n6)
                   (w6 :: GHC.TypeNats.KnownNat n7)
                   (w7 :: GHC.TypeNats.KnownNat n8)
                   (w8 :: Tensor.Rank)
                   (w9 :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a) ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   (let {
                      indList :: [Index.Index n1 n2 n3 n4 n5 n6 n7 n8]
                      = Tensor.tensorIndList
                          @ n1
                          @ n2
                          @ n3
                          @ n4
                          @ n5
                          @ n6
                          @ n7
                          @ n8
                          w
                          w1
                          w2
                          w3
                          w4
                          w5
                          w6
                          w7
                          w8
                    } in
                    Data.Map.Strict.Internal.fromList
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      (GHC.List.zip
                         @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                            Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                            Index.Uinds_3 n7, Index.Linds_3 n8)
                         @ a
                         indList
                         (GHC.Base.map
                            @ (Index.Uinds_20 n1, Index.Linds_20 n2, Index.Uinds_19 n3,
                               Index.Linds_19 n4, Index.Uinds_9 n5, Index.Linds_9 n6,
                               Index.Uinds_3 n7, Index.Linds_3 n8)
                            @ a
                            w9
                            indList)))) -}
2d76e0b3c4f9d277c9773ff2cb5b77e6
  mkTensorfromList ::
    [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (l :: [(Index.Index n1 n2 n3 n4 n5 n6 n7 n8, a)]) ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   (Data.Map.Strict.Internal.fromList
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      (Tensor.aSymTensor4 @ n8 @ n7 @ n6 @ n5 @ n4 @ n3 @ n2 @ n1)
                      l)) -}
a671a1ae96ee7d20f7db971aa6f70a86
  symTensor ::
    GHC.Real.Fractional a =>
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 4,
     Strictness: <L,U(U(C(C1(U)),A,C(C(U)),A,A,A,C(U)),C(C1(U)),A,A)><L,U(U)><L,U(U(U),U(U))><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Real.Fractional a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w3 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wsymTensor
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
b03543f4dfebee64226240002a5665ef
  tensorAdd ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,1*U(1*C(C1(U)),A,A,A,A,A,A)><S,1*U(1*U)><S,1*U(1*U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (eta1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case eta of wild { Tensor.Tensor map1 ->
                 case eta1 of wild1 { Tensor.Tensor map2 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   (Data.Map.Strict.Internal.unionWith
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      @ a
                      (Tensor.aSymTensor3 @ n1 @ n2 @ n3 @ n4 @ n5 @ n6 @ n7 @ n8)
                      (GHC.Num.+ @ a $dNum)
                      map1
                      map2) } }) -}
8e1f794854d89bc2c6d3671575591521
  tensorContractWith_1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
329d389a2230dfda068ca4570ddf5b7e
  tensorContractWith_19 ::
    (GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n3)
                   (w1 :: GHC.TypeNats.KnownNat n4)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 (n3 GHC.TypeNats.+ 1) (n4 GHC.TypeNats.+ 1) n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_19
                        @ n3
                        @ n4
                        @ a
                        @ n1
                        @ n2
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
f5b2dabd16345e8ee998f4d55afc7785
  tensorContractWith_2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
6cf282d64edd6c9ec712d855bb38e06a
  tensorContractWith_20 ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ a
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n1)
                   (w1 :: GHC.TypeNats.KnownNat n2)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            (n1 GHC.TypeNats.+ 1) (n2 GHC.TypeNats.+ 1) n3 n4 n5 n6 n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_20
                        @ n1
                        @ n2
                        @ a
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
529107206dcaa10693fc48c26137b94b
  tensorContractWith_3 ::
    (GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n7)
                   (w1 :: GHC.TypeNats.KnownNat n8)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 n5 n6 (n7 GHC.TypeNats.+ 1) (n8 GHC.TypeNats.+ 1) a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_3
                        @ n7
                        @ n8
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
fd53639966fdb5f8804d2e0bc1f03852
  tensorContractWith_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
2b36f7f16c0f3479abe15dbe357bc93b
  tensorContractWith_5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
cc576f2038f8bd555f142bcde424c5f8
  tensorContractWith_9 ::
    (GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> (a -> a -> a)
    -> Tensor.Tensor
         n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U(U),U(U))><L,C(C1(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.TypeNats.KnownNat n5)
                   (w1 :: GHC.TypeNats.KnownNat n6)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int))
                   (w3 :: a -> a -> a)
                   (w4 :: Tensor.Tensor
                            n1 n2 n3 n4 (n5 GHC.TypeNats.+ 1) (n6 GHC.TypeNats.+ 1) n7 n8 a) ->
                 case w4 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorContractWith_9
                        @ n5
                        @ n6
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n7
                        @ n8
                        w
                        w1
                        w2
                        w3
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
542a32202d65f150045d79cf1b8ddc82
  tensorIndList ::
    (GHC.TypeNats.KnownNat n1, GHC.TypeNats.KnownNat n2,
     GHC.TypeNats.KnownNat n3, GHC.TypeNats.KnownNat n4,
     GHC.TypeNats.KnownNat n5, GHC.TypeNats.KnownNat n6,
     GHC.TypeNats.KnownNat n7, GHC.TypeNats.KnownNat n8) =>
    Tensor.Rank -> [Index.Index n1 n2 n3 n4 n5 n6 n7 n8]
  {- Arity: 9,
     Strictness: <L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S(S(S)LLLLLLL),1*U(1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U),1*U(1*U))> -}
6e1300f3b6ea8f7dd056901f69230be2
  tensorProductWith ::
    (a -> b -> c)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b
    -> Tensor.Tensor
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8)
         c
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U(U)><S,1*U(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   @ c
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   (w :: a -> b -> c)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor m1 m2 m3 m4 m5 m6 m7 m8 b) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorProductWith
                        @ a
                        @ b
                        @ c
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ m1
                        @ m2
                        @ m3
                        @ m4
                        @ m5
                        @ m6
                        @ m7
                        @ m8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ (n1 GHC.TypeNats.+ m1)
                   @ (n2 GHC.TypeNats.+ m2)
                   @ (n3 GHC.TypeNats.+ m3)
                   @ (n4 GHC.TypeNats.+ m4)
                   @ (n5 GHC.TypeNats.+ m5)
                   @ (n6 GHC.TypeNats.+ m6)
                   @ (n7 GHC.TypeNats.+ m7)
                   @ (n8 GHC.TypeNats.+ m8)
                   @ c
                   ww5 } } }) -}
475aa601a74ec1d33f7249543f352010
  tensorProductWith1 ::
    Data.Map.Internal.Map
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
      c
    -> [Data.Map.Internal.Map
          (Index.Index
             (n1 GHC.TypeNats.+ m1)
             (n2 GHC.TypeNats.+ m2)
             (n3 GHC.TypeNats.+ m3)
             (n4 GHC.TypeNats.+ m4)
             (n5 GHC.TypeNats.+ m5)
             (n6 GHC.TypeNats.+ m6)
             (n7 GHC.TypeNats.+ m7)
             (n8 GHC.TypeNats.+ m8))
          c]
    -> Data.Map.Internal.Map
         (Index.Index
            (n1 GHC.TypeNats.+ m1)
            (n2 GHC.TypeNats.+ m2)
            (n3 GHC.TypeNats.+ m3)
            (n4 GHC.TypeNats.+ m4)
            (n5 GHC.TypeNats.+ m5)
            (n6 GHC.TypeNats.+ m6)
            (n7 GHC.TypeNats.+ m7)
            (n8 GHC.TypeNats.+ m8))
         c
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d1a0ccdfa5220b937dcd92660fc93226
  tensorProductWith2 ::
    GHC.Classes.Ord
      (Index.Index
         (n1 GHC.TypeNats.+ m1)
         (n2 GHC.TypeNats.+ m2)
         (n3 GHC.TypeNats.+ m3)
         (n4 GHC.TypeNats.+ m4)
         (n5 GHC.TypeNats.+ m5)
         (n6 GHC.TypeNats.+ m6)
         (n7 GHC.TypeNats.+ m7)
         (n8 GHC.TypeNats.+ m8))
  {- Unfolding: (\ @ n8 :: GHC.Types.Nat
                   @ m8 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ m7 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ m6 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ m5 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ m4 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ m3 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ m2 :: GHC.Types.Nat
                   @ n1 :: GHC.Types.Nat
                   @ m1 :: GHC.Types.Nat ->
                 GHC.Classes.$fOrd(,,,,,,,)
                   @ (Index.Ind (n1 GHC.TypeNats.+ m1) Index.Uind_20)
                   @ (Index.Ind (n2 GHC.TypeNats.+ m2) Index.Lind_20)
                   @ (Index.Ind (n3 GHC.TypeNats.+ m3) Index.Uind_19)
                   @ (Index.Ind (n4 GHC.TypeNats.+ m4) Index.Lind_19)
                   @ (Index.Ind (n5 GHC.TypeNats.+ m5) Index.Uind_9)
                   @ (Index.Ind (n6 GHC.TypeNats.+ m6) Index.Lind_9)
                   @ (Index.Ind (n7 GHC.TypeNats.+ m7) Index.Uind_3)
                   @ (Index.Ind (n8 GHC.TypeNats.+ m8) Index.Lind_3)
                   (Tensor.$s$fOrdInd7 @ (n1 GHC.TypeNats.+ m1))
                   (Tensor.$s$fOrdInd6 @ (n2 GHC.TypeNats.+ m2))
                   (Tensor.$s$fOrdInd5 @ (n3 GHC.TypeNats.+ m3))
                   (Tensor.$s$fOrdInd4 @ (n4 GHC.TypeNats.+ m4))
                   (Tensor.$s$fOrdInd3 @ (n5 GHC.TypeNats.+ m5))
                   (Tensor.$s$fOrdInd2 @ (n6 GHC.TypeNats.+ m6))
                   (Tensor.$s$fOrdInd1 @ (n7 GHC.TypeNats.+ m7))
                   (Tensor.$s$fOrdInd @ (n8 GHC.TypeNats.+ m8))) -}
eda9d768e6307a83070b869854214b43
  tensorSMult ::
    GHC.Num.Num a =>
    a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C(U)),A,A,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   ($dNum :: GHC.Num.Num a)
                   (a1 :: a) ->
                 let {
                   f :: a -> a = GHC.Num.* @ a $dNum a1
                 } in
                 \ (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case ds of wild { Tensor.Tensor tMap ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   (Data.Map.Strict.Internal.map
                      @ a
                      @ a
                      @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                      f
                      tMap) }) -}
5ae6e28292f5ee5e3aebc88142b4d18f
  tensorSub ::
    GHC.Num.Num a =>
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3,
     Strictness: <L,U(C(C1(U)),A,C(C(U)),C(U),A,A,C(U))><S,1*U(1*U)><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   (w :: GHC.Num.Num a)
                   (w1 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 case w2 of ww2 { Tensor.Tensor ww3 ->
                 case Tensor.$wtensorSub
                        @ a
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        w
                        ww1
                        ww3 of ww4 { Unit# ww5 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww5 } } }) -}
3f7c7309fc31e499e4e26c886fbf7b4a
  tensorTranspose ::
    GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
  {- Arity: 3, Strictness: <L,U(U)><L,U(U(U),U(U))><S,1*U(1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (w :: GHC.Types.Int)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a) ->
                 case w2 of ww { Tensor.Tensor ww1 ->
                 case Tensor.$wtensorTranspose
                        @ n1
                        @ n2
                        @ n3
                        @ n4
                        @ n5
                        @ n6
                        @ n7
                        @ n8
                        @ a
                        w
                        w1
                        ww1 of ww2 { Unit# ww3 ->
                 Tensor.Tensor
                   @ n1
                   @ n2
                   @ n3
                   @ n4
                   @ n5
                   @ n6
                   @ n7
                   @ n8
                   @ a
                   ww3 } }) -}
d34a7f54a52ed836f7ce3a7499bc8770
  unsafeGetVal ::
    Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a
    -> Index.Index n1 n2 n3 n4 n5 n6 n7 n8 -> a
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ n1 :: GHC.Types.Nat
                   @ n2 :: GHC.Types.Nat
                   @ n3 :: GHC.Types.Nat
                   @ n4 :: GHC.Types.Nat
                   @ n5 :: GHC.Types.Nat
                   @ n6 :: GHC.Types.Nat
                   @ n7 :: GHC.Types.Nat
                   @ n8 :: GHC.Types.Nat
                   @ a
                   (ds :: Tensor.Tensor n1 n2 n3 n4 n5 n6 n7 n8 a)
                   (ind :: Index.Index n1 n2 n3 n4 n5 n6 n7 n8) ->
                 case ds of wild { Tensor.Tensor map1 ->
                 Data.Map.Internal.find
                   @ (Index.Index n1 n2 n3 n4 n5 n6 n7 n8)
                   @ a
                   (Tensor.aSymTensor4 @ n8 @ n7 @ n6 @ n5 @ n4 @ n3 @ n2 @ n1)
                   ind
                   map1 }) -}
instance [safe] GHC.Base.Functor [Tensor.Tensor]
  = Tensor.$fFunctorTensor
instance [safe] GHC.Show.Show [Tensor.Tensor] = Tensor.$fShowTensor
"SPEC/Tensor $fEqInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd @ n @ Index.Lind_19 v = Tensor.$s$fEqInd4 @ n
"SPEC/Tensor $fEqInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd @ n @ Index.Lind_20 v = Tensor.$s$fEqInd6 @ n
"SPEC/Tensor $fEqInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd @ n @ Index.Lind_3 v = Tensor.$s$fEqInd @ n
"SPEC/Tensor $fEqInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd @ n @ Index.Lind_9 v = Tensor.$s$fEqInd2 @ n
"SPEC/Tensor $fEqInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd @ n @ Index.Uind_19 v = Tensor.$s$fEqInd5 @ n
"SPEC/Tensor $fEqInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd @ n @ Index.Uind_20 v = Tensor.$s$fEqInd7 @ n
"SPEC/Tensor $fEqInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd @ n @ Index.Uind_3 v = Tensor.$s$fEqInd1 @ n
"SPEC/Tensor $fEqInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                 (v :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd @ n @ Index.Uind_9 v = Tensor.$s$fEqInd3 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_19)
  Index.$fEqInd_$c/= @ n @ Index.Lind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=4 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Lind_20)
  Index.$fEqInd_$c/= @ n @ Index.Lind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=6 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_3)
  Index.$fEqInd_$c/= @ n @ Index.Lind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/= @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Lind_9)
  Index.$fEqInd_$c/= @ n @ Index.Lind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=2 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_19)
  Index.$fEqInd_$c/= @ n @ Index.Uind_19 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=5 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dEq :: GHC.Classes.Eq Index.Uind_20)
  Index.$fEqInd_$c/= @ n @ Index.Uind_20 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=7 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_3)
  Index.$fEqInd_$c/= @ n @ Index.Uind_3 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=1 @ n
"SPEC/Tensor $fEqInd_$c/= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dEq :: GHC.Classes.Eq Index.Uind_9)
  Index.$fEqInd_$c/= @ n @ Index.Uind_9 $dEq
  = Tensor.$s$fEqInd_$s$fEqInd_$c/=3 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd @ n @ Index.Lind_19 v = Tensor.$s$fOrdInd4 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd @ n @ Index.Lind_20 v = Tensor.$s$fOrdInd6 @ n
"SPEC/Tensor $fOrdInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd @ n @ Index.Lind_3 v = Tensor.$s$fOrdInd @ n
"SPEC/Tensor $fOrdInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd @ n @ Index.Lind_9 v = Tensor.$s$fOrdInd2 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd @ n @ Index.Uind_19 v = Tensor.$s$fOrdInd5 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd @ n @ Index.Uind_20 v = Tensor.$s$fOrdInd7 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd @ n @ Index.Uind_3 v = Tensor.$s$fOrdInd1 @ n
"SPEC/Tensor $fOrdInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                  (v :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd @ n @ Index.Uind_9 v = Tensor.$s$fOrdInd3 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c< @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<4 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c< @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<6 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c< @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c< @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c< @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<2 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c< @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<5 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c< @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<7 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c< @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<1 @ n
"SPEC/Tensor $fOrdInd_$c< _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c< @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<3 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=4 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=6 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<= @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=2 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c<=5 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c<=7 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c<=1 @ n
"SPEC/Tensor $fOrdInd_$c<= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c<= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c<=3 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c> @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>4 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c> @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>6 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c> @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c> @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c> @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>2 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c> @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>5 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c> @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>7 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c> @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>1 @ n
"SPEC/Tensor $fOrdInd_$c> _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                      ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c> @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>3 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=4 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=6 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>= @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=2 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$c>=5 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$c>=7 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$c>=1 @ n
"SPEC/Tensor $fOrdInd_$c>= _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                       ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$c>= @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$c>=3 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare4 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Lind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare6 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare2 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_19)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$ccompare5 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                             ($dOrd :: GHC.Classes.Ord
                                                                         Index.Uind_20)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$ccompare7 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$ccompare1 @ n
"SPEC/Tensor $fOrdInd_$ccompare _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                            ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$ccompare @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$ccompare3 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax4 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax6 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax2 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmax5 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmax7 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmax1 @ n
"SPEC/Tensor $fOrdInd_$cmax _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmax @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmax3 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin4 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Lind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin6 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Lind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Lind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin2 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_19)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_19 $dOrd
  = Tensor.$s$fOrdInd_$cmin5 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                         ($dOrd :: GHC.Classes.Ord Index.Uind_20)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_20 $dOrd
  = Tensor.$s$fOrdInd_$cmin7 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_3)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_3 $dOrd
  = Tensor.$s$fOrdInd_$cmin1 @ n
"SPEC/Tensor $fOrdInd_$cmin _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                        ($dOrd :: GHC.Classes.Ord Index.Uind_9)
  Index.$fOrdInd_$cmin @ n @ Index.Uind_9 $dOrd
  = Tensor.$s$fOrdInd_$cmin3 @ n
"SPEC/Tensor $fShowInd _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd @ n @ Index.Lind_19 v
  = Tensor.$fShowTensor_$s$fShowInd4 @ n
"SPEC/Tensor $fShowInd _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd @ n @ Index.Lind_20 v
  = Tensor.$fShowTensor_$s$fShowInd6 @ n
"SPEC/Tensor $fShowInd _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd @ n @ Index.Lind_3 v
  = Tensor.$fShowTensor_$s$fShowInd @ n
"SPEC/Tensor $fShowInd _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd @ n @ Index.Lind_9 v
  = Tensor.$fShowTensor_$s$fShowInd2 @ n
"SPEC/Tensor $fShowInd _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd @ n @ Index.Uind_19 v
  = Tensor.$fShowTensor_$s$fShowInd5 @ n
"SPEC/Tensor $fShowInd _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                    (v :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd @ n @ Index.Uind_20 v
  = Tensor.$fShowTensor_$s$fShowInd7 @ n
"SPEC/Tensor $fShowInd _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd @ n @ Index.Uind_3 v
  = Tensor.$fShowTensor_$s$fShowInd1 @ n
"SPEC/Tensor $fShowInd _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                   (v :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd @ n @ Index.Uind_9 v
  = Tensor.$fShowTensor_$s$fShowInd3 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_19)
  Index.$fShowInd_$cshow @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshow4 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Lind_20)
  Index.$fShowInd_$cshow @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshow6 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshow @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshow @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshow @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshow2 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_19)
  Index.$fShowInd_$cshow @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshow5 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                               (w :: GHC.Show.Show Index.Uind_20)
  Index.$fShowInd_$cshow @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshow7 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshow @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshow1 @ n
"SPEC/Tensor $fShowInd_$cshow _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                              (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshow @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshow3 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList4 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList6 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Lind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Lind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList2 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_19" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_19 $dShow
  = Tensor.$s$fShowInd_$cshowList5 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_20" [orphan] forall @ n :: GHC.Types.Nat
                                                               ($dShow :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_20 $dShow
  = Tensor.$s$fShowInd_$cshowList7 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_3" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_3 $dShow
  = Tensor.$s$fShowInd_$cshowList1 @ n
"SPEC/Tensor $fShowInd_$cshowList _ @ Uind_9" [orphan] forall @ n :: GHC.Types.Nat
                                                              ($dShow :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowList @ n @ Index.Uind_9 $dShow
  = Tensor.$s$fShowInd_$cshowList3 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec4 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Lind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec6 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Lind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Lind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Lind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec2 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_19" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_19)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_19 w
  = Tensor.$s$fShowInd_$cshowsPrec5 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_20" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                    (w :: GHC.Show.Show
                                                                            Index.Uind_20)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_20 w
  = Tensor.$s$fShowInd_$cshowsPrec7 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_3" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_3)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_3 w
  = Tensor.$s$fShowInd_$cshowsPrec1 @ n
"SPEC/Tensor $fShowInd_$cshowsPrec _ @ Uind_9" [orphan] [0] forall @ n :: GHC.Types.Nat
                                                                   (w :: GHC.Show.Show Index.Uind_9)
  Index.$fShowInd_$cshowsPrec @ n @ Index.Uind_9 w
  = Tensor.$s$fShowInd_$cshowsPrec3 @ n
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

