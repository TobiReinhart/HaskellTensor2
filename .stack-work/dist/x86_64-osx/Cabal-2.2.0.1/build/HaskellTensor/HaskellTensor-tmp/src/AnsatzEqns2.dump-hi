
==================== FINAL INTERFACE ====================
2019-01-22 14:46:28.017198 UTC

interface main:AnsatzEqns2 [hpc] 8043
  interface hash: b52aa0e445155f9c312563bb66597c13
  ABI hash: 6a2cf74a2b4f79c4c81960e485e2c08c
  export-list hash: d19d3a0cdafa83117ca972888026a06f
  orphan hash: 36fa42a1d8c317177031e06d28503821
  flag hash: 034627c3e6816f7545a7b63584c609bb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  AnsatzEqns2.ansatzAB
  AnsatzEqns2.ansatzABb
  AnsatzEqns2.ansatzAIB
  AnsatzEqns2.ansatzAIBJ
  AnsatzEqns2.ansatzAaBI
  AnsatzEqns2.ansatzAaBb
  AnsatzEqns2.intCond2NoSym
  AnsatzEqns2.intCondfirstOrder
  AnsatzEqns2.mkEqnSparseAnsatzAB
  AnsatzEqns2.mkEqnSparseAnsatzABSolo
  AnsatzEqns2.mkEqnSparseAnsatzABb
  AnsatzEqns2.mkEqnSparseAnsatzAIB
  AnsatzEqns2.mkEqnSparseAnsatzAIBJ
  AnsatzEqns2.mkEqnSparseAnsatzAaBI
  AnsatzEqns2.mkEqnSparseAnsatzAaBb
  AnsatzEqns2.mkEqnSparseRemoveAIB
  AnsatzEqns2.mkEqnSparsefirstOrder
  AnsatzEqns2.mkEqnSparseintCond2NoSym
  AnsatzEqns2.removeAIB
module dependencies: BasicTensors EquivarianceEqns Index Ivar Pde
                     Tensor
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 random-1.1 tf-random-0.5
                      time-1.8.0.2 transformers-0.5.5.0
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.ByteArray
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  BasicTensors eb5b51414d2c3c3fc45fe3497d3f932c
  exports: 7bd1d97902a82e67c502cc891749fa89
  aSymI_2 85b96c1b469ca0318ab6d34ecbdffdf1
  delta_20 162a995d96c74a333b7936c74f9c8654
  delta_3 1b779d8bf6d3a2de4e2c39cbf2952342
  delta_9 71b32e9191ec29699321bcbae6e0b83a
  flatArea 88f143656f05841ce5f6bc5818ab7cee
  interArea 068502db5feb6a9b80dde94e3ee55a07
  interEqn1_2 c92cf830c592d74911b3103d773bcb06
  interEqn1_3 5671d20c260b1f499f7d26c836568368
  interI_2 1cc4e11cb2f489f60da1e2a046efdfb6
  interMetric 53b357e50bf8477d50d697f15bb13184
  invEta a329957d4f2e507cf294c76791a875aa
import  -/  EquivarianceEqns 91d578dc64c09630cc293b0e537bd69a
  exports: 753233c47284511068d96a6925317f46
import  -/  Index 08e2a14604a823b6ff2a9dd0412736b8
  exports: 02acfc58131cc32506762c89c9bc64b7
  Index fef7dd75ac4341fe9ac6422ae53896cb
  Lind_20 bc4b9092451ad6bbfee40a37af5a3be5
  Lind_9 e56724c95d48d5af2b671320de0a16e6
  Linds_3 c88a9b9457367a41a7b841cbc4cd99c9
  Uind_20 bfe4746a22221d53bc0caf3ab68bb75f
  Uind_9 60e6e8f96660ac8be150b9dcf7a9bf57
  Uinds_3 78c689db53b46c5dad666c484780219c
  getValInd 9fdbb30c9f0128d475e5de016ad1bc53
import  -/  Ivar 40f81219a01d4a021d2869f9c4ec8065
  exports: 847b7f62b7be31da91814bf314ffd8e5
import  -/  Pde ee46c0f08935aa69c73c37bcf3103bae
  exports: 5f26c9b1fc31234bc17b520659bce428
import  -/  Tensor 506762f61e5eb09856fcdcf668e157fa
  exports: 1e07b17b3ec8892664f89099181669ba
  Tensor 2f2ba18b2559fd3b006c3f606f3e15da
  Tensor c676ef3822419832be89c54f66299684
  tensorAdd c17d8b47f4737f18a61e8d192d389e87
  tensorContractWith_20 192b6213f73a7a7828516a5b8c5dbe89
  tensorContractWith_3 c385296e26e3bb0dcfa2f644b248f67b
  tensorProductWith 5c503f4acd0761ea31e37bf6d35223c2
  tensorSub fbca68c0210815bd3e38973881a34ada
  tensorTranspose 44e01331e8dca2b21922eeae8693de1e
bcf45780236983f35bb7f600e5ef36f7
  $sfind1 ::
    [GHC.Types.Int] -> Data.Map.Internal.Map [GHC.Types.Int] a -> a
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
ee2248d8e8dd9de75316f397e4cc267e
  $sfromList ::
    [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt1 { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             1#
                             dt1
                             x
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                             (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild1 {
                                  DEFAULT
                                  -> AnsatzEqns2.$sfromList1
                                       @ a
                                       (Data.Map.Internal.Bin
                                          @ (GHC.Types.Int, GHC.Types.Int)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (GHC.Types.Int, GHC.Types.Int)
                                             @ a))
                                       wild2
                                  1#
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.<# x1 y of lwild2 {
                                       DEFAULT
                                       -> AnsatzEqns2.$sfromList1
                                            @ a
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2
                                       1#
                                       -> AnsatzEqns2.$wpoly_go13
                                            @ a
                                            1#
                                            (Data.Map.Internal.Bin
                                               @ (GHC.Types.Int, GHC.Types.Int)
                                               @ a
                                               1#
                                               ww
                                               x
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a)
                                               (Data.Map.Internal.Tip
                                                  @ (GHC.Types.Int, GHC.Types.Int)
                                                  @ a))
                                            wild2 } } } }
                             1#
                             -> AnsatzEqns2.$wpoly_go13
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                                     (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a))
                                  wild2 } } } } } } } } }) -}
71a388d7b411219cd851a8d887c5b18d
  $sfromList1 ::
    Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
ffd337e277c571b02cb716cbae26a0b8
  $smapKeysWith ::
    (a -> a -> a)
    -> (k1 -> (GHC.Types.Int, GHC.Types.Int))
    -> Data.Map.Internal.Map k1 a
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,C(C1(U))><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ k1
                   (c :: a -> a -> a)
                   (f :: k1 -> (GHC.Types.Int, GHC.Types.Int))
                   (eta :: Data.Map.Internal.Map k1 a) ->
                 let {
                   f1 :: (GHC.Types.Int, GHC.Types.Int) -> a -> a -> a
                     {- Arity: 3, Strictness: <L,A><L,U><L,U>,
                        Unfolding: InlineRule (3, True, True)
                                   (\ (ds :: (GHC.Types.Int, GHC.Types.Int)) (x1 :: a) (y :: a) ->
                                    c x1 y) -}
                   = \ (ds :: (GHC.Types.Int, GHC.Types.Int))
                       (x1 :: a)[OneShot]
                       (y :: a)[OneShot] ->
                     c x1 y
                 } in
                 letrec {
                   go13 :: [((GHC.Types.Int, GHC.Types.Int), a)]
                           -> Data.Map.Internal.Map k1 a
                           -> [((GHC.Types.Int, GHC.Types.Int), a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ (z' :: [((GHC.Types.Int, GHC.Types.Int), a)])
                       (ds :: Data.Map.Internal.Map k1 a) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt1 kx x l r
                       -> go13
                            (GHC.Types.:
                               @ ((GHC.Types.Int, GHC.Types.Int), a)
                               (f kx, x)
                               (go13 z' r))
                            l
                       Data.Map.Internal.Tip -> z' }
                 } in
                 letrec {
                   go14 :: Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
                           -> [((GHC.Types.Int, GHC.Types.Int), a)]
                           -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (z :: Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a)
                       (ds :: [((GHC.Types.Int, GHC.Types.Int), a)]) ->
                     case ds of wild {
                       [] -> z
                       : x1 xs
                       -> case x1 of wild1 { (,) k x2 ->
                          case k of ww { (,) ww1 ww2 ->
                          case AnsatzEqns2.$w$sgo1 @ a f1 ww1 ww2 x2 z of z' { DEFAULT ->
                          go14 z' xs } } } }
                 } in
                 go14
                   (Data.Map.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int) @ a)
                   (go13 (GHC.Types.[] @ ((GHC.Types.Int, GHC.Types.Int), a)) eta)) -}
619b3c4d831b7fe390b7e5daf83d0061
  $stensorContractWith_1 :: GHC.Natural.Natural
  {- Unfolding: (case AnsatzEqns2.$stensorContractWith_2 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
373bd1746755f0f5a54dda7831e3cd92
  $stensorContractWith_12 :: GHC.Natural.Natural
  {- Unfolding: (case AnsatzEqns2.$stensorContractWith_13 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
7e118dc2c879dd6016e52309a71c3e44
  $stensorContractWith_13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
e6a6f45cdc77301bd05c4a6690a8160a
  $stensorContractWith_2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
58a251bbf70eba0b719281d6d905c69d
  $stensorContractWith_3 :: GHC.Natural.Natural
  {- Unfolding: (case AnsatzEqns2.$stensorContractWith_4 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
396c6e1a4a54ed66bcdc86ebb9ed303f
  $stensorContractWith_4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
0ba4c42a434d366410540b2e8de06fc3
  $stensorContractWith_6 :: GHC.Natural.Natural
  {- Unfolding: (case AnsatzEqns2.$stensorContractWith_7 of wild {
                   GHC.Integer.Type.S# i#
                   -> case GHC.Prim.>=# i# 0# of lwild {
                        DEFAULT -> GHC.Natural.underflowError @ GHC.Natural.Natural
                        1# -> GHC.Natural.NatS# (GHC.Prim.int2Word# i#) }
                   GHC.Integer.Type.Jp# dt1
                   -> case GHC.Prim.uncheckedIShiftRL#
                             (GHC.Prim.sizeofByteArray# dt1)
                             3# of wild1 {
                        DEFAULT
                        -> case GHC.Prim.sizeofByteArray# dt1 of wild2 {
                             DEFAULT -> GHC.Natural.NatJ# dt1
                             0# -> GHC.Natural.underflowError @ GHC.Natural.Natural }
                        1#
                        -> case GHC.Prim.indexWordArray# dt1 0# of wild2 { DEFAULT ->
                           GHC.Natural.NatS# wild2 } }
                   GHC.Integer.Type.Jn# ipv
                   -> GHC.Natural.underflowError @ GHC.Natural.Natural }) -}
8b7bc482700ab6689f78beb8cadb5f64
  $stensorContractWith_7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
5579a2eeb6ae586128f326b310e6f6d7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   AnsatzEqns2.$trModule3
                   AnsatzEqns2.$trModule1) -}
43817172e3a4dea61c8c44882cd3c786
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AnsatzEqns2.$trModule2) -}
621cfae3d9a8bcf76f61ca636261902d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AnsatzEqns2"#) -}
61c397503880f4c2086924f913dd0e47
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AnsatzEqns2.$trModule4) -}
b98c1ae838a14aa63083a999e9f54140
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0153fcbc7ca53cbb172f5478dac3693c
  $w$sgo1 ::
    ((GHC.Types.Int, GHC.Types.Int) -> a1 -> a1 -> a1)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(U)))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
0adad4acaa0bd3d25ff6fc2330b5dfd8
  $w$sgo13 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
e4ea060ac31a0ab5c7c0dcca1039bf4f
  $wansatzAB ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 1 0 0 0) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} True True} {__scc {main:AnsatzEqns2.ansatzAB.prod} True False} {__scc {main:AnsatzEqns2.ansatzAB.tens} True False} {__scc {main:AnsatzEqns2.ansatzAB.totalBlock1} True False} {__scc {main:AnsatzEqns2.ansatzAB.block1} True False} {__scc {main:AnsatzEqns2.ansatzAB.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                                                                                                                                     w
                                                                                                                                                                                                                                                                                                                                                     w1 of ww { Tensor.Tensor ww1 ->
                 case BasicTensors.delta_20 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.block1} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww1
                                                                                                                             ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.block2} True False} {__scc {main:AnsatzEqns2.ansatzAB.block2} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                   @ 2
                                                                                                                                                                                   @ 2
                                                                                                                                                                                   @ 0
                                                                                                                                                                                   @ 0
                                                                                                                                                                                   @ 0
                                                                                                                                                                                   @ 0
                                                                                                                                                                                   @ 1
                                                                                                                                                                                   @ 1
                                                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                                                   AnsatzEqns2.ansatzAB4
                                                                                                                                                                                   AnsatzEqns2.ansatzAB6
                                                                                                                                                                                   ww5
                                                                                                                                                                                     `cast`
                                                                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                                                                      ((,,,,,,,)
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                                                                     <1>_N))
                                                                                                                                                                                            <Index.Uind_20>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (AddDef (<1>_N,
                                                                                                                                                                                                     <1>_N))
                                                                                                                                                                                            <Index.Lind_20>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                                            <Index.Uind_19>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                                            <Index.Lind_19>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                                            <Index.Uind_9>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (Add0L (<0>_N))
                                                                                                                                                                                            <Index.Lind_9>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (Add0R (<1>_N))
                                                                                                                                                                                            <Index.Uind_3>_N)_N
                                                                                                                                                                                         (Index.Ind
                                                                                                                                                                                            (Add0R (<1>_N))
                                                                                                                                                                                            <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                      <GHC.Real.Rational>_R)_R of ww8 { Unit# ww9 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.totalBlock1} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                             @ 2
                                                                                                                                                                             @ 2
                                                                                                                                                                             @ 0
                                                                                                                                                                             @ 0
                                                                                                                                                                             @ 0
                                                                                                                                                                             @ 0
                                                                                                                                                                             @ 1
                                                                                                                                                                             @ 1
                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                             ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                           @ (Index.Index
                                                                                                                                                                                                                                2
                                                                                                                                                                                                                                2
                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                0
                                                                                                                                                                                                                                1
                                                                                                                                                                                                                                1)
                                                                                                                                                                                                                           @ GHC.Real.Rational
                                                                                                                                                                                                                           (Tensor.aSymTensor3
                                                                                                                                                                                                                              @ 2
                                                                                                                                                                                                                              @ 2
                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                              @ 0
                                                                                                                                                                                                                              @ 1
                                                                                                                                                                                                                              @ 1)
                                                                                                                                                                                                                           AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                           ww5
                                                                                                                                                                                                                             `cast`
                                                                                                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                                                                                                              ((,,,,,,,)
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (AddDef (<1>_N,
                                                                                                                                                                                                                                             <1>_N))
                                                                                                                                                                                                                                    <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (AddDef (<1>_N,
                                                                                                                                                                                                                                             <1>_N))
                                                                                                                                                                                                                                    <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                    <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                    <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                    <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (Add0L (<0>_N))
                                                                                                                                                                                                                                    <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                                                                                                    <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                 (Index.Ind
                                                                                                                                                                                                                                    (Add0R (<1>_N))
                                                                                                                                                                                                                                    <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                              <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                           ww9) of ww10 { Tensor.Tensor ww11 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.totalBlockTrans} True False} {__scc {main:AnsatzEqns2.ansatzAB.totalBlockTrans} False True} Tensor.$wtensorTranspose
                                                                                                                                                                                                     @ 2
                                                                                                                                                                                                     @ 2
                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                     @ 0
                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                     @ 1
                                                                                                                                                                                                     @ GHC.Real.Rational
                                                                                                                                                                                                     AnsatzEqns2.ansatzAB5
                                                                                                                                                                                                     AnsatzEqns2.ansatzAB6
                                                                                                                                                                                                     ww11 of ww12 { Unit# ww13 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.tens} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                      @ 2
                                                                                                                                                                      @ 2
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                    @ (Index.Index
                                                                                                                                                                                                                         2
                                                                                                                                                                                                                         2
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         1
                                                                                                                                                                                                                         1)
                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                    (Tensor.aSymTensor3
                                                                                                                                                                                                                       @ 2
                                                                                                                                                                                                                       @ 2
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 1)
                                                                                                                                                                                                                    AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                    ww11
                                                                                                                                                                                                                    ww13) of ww14 { Tensor.Tensor ww15 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.totalBlock2} True False} BasicTensors.invEta of ww16 { Tensor.Tensor ww17 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                             w2 of ww18 { Tensor.Tensor ww19 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.totalBlock2} False True} Tensor.$wtensorProductWith
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 2
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 2
                                                                                                                                  GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                  ww17
                                                                                                                                  ww19 of ww20 { Unit# ww21 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.totalBlock2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                  @ 1
                                                                                                                                  @ 1
                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 0
                                                                                                                                  @ 1
                                                                                                                                  @ 0
                                                                                                                                  AnsatzEqns2.$stensorContractWith_1
                                                                                                                                    `cast`
                                                                                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                  AnsatzEqns2.$stensorContractWith_1
                                                                                                                                    `cast`
                                                                                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                            <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                  AnsatzEqns2.ansatzAB3
                                                                                                                                  GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                  ww21
                                                                                                                                    `cast`
                                                                                                                                  (Data.Map.Internal.Map
                                                                                                                                     ((,,,,,,,)
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_20>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_20>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Uind_19>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_19>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<1>_N))
                                                                                                                                           <Index.Uind_9>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<0>_N))
                                                                                                                                           <Index.Lind_9>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                         <1>_N)))
                                                                                                                                           <Index.Uind_3>_N)_N
                                                                                                                                        (Index.Ind
                                                                                                                                           (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                         <1>_N)))
                                                                                                                                           <Index.Lind_3>_N)_N)_N
                                                                                                                                     <GHC.Real.Rational>_R)_R of ww22 { Unit# ww23 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} {__scc {main:AnsatzEqns2.ansatzAB.prod} False True} Tensor.$wtensorProductWith
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           @ GHC.Real.Rational
                                                                                                                           @ 2
                                                                                                                           @ 2
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 1
                                                                                                                           @ 1
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 0
                                                                                                                           @ 1
                                                                                                                           @ 0
                                                                                                                           @ 1
                                                                                                                           @ 1
                                                                                                                           GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                           ww15
                                                                                                                           ww23 of ww24 { Unit# ww25 ->
                 case {__scc {main:AnsatzEqns2.ansatzAB} False True} Tensor.$wtensorContractWith_3
                                                                       @ 1
                                                                       @ 1
                                                                       @ GHC.Real.Rational
                                                                       @ 2
                                                                       @ 2
                                                                       @ 0
                                                                       @ 0
                                                                       @ 1
                                                                       @ 0
                                                                       AnsatzEqns2.$stensorContractWith_1
                                                                         `cast`
                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                 <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                       AnsatzEqns2.$stensorContractWith_1
                                                                         `cast`
                                                                       (Sym (GHC.TypeNats.N:SNat[0]
                                                                                 <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                       AnsatzEqns2.ansatzAB6
                                                                       GHC.Real.$fEnumRatio_$s$c+
                                                                       ww25
                                                                         `cast`
                                                                       (Data.Map.Internal.Map
                                                                          ((,,,,,,,)
                                                                             (Index.Ind
                                                                                (Add0R (<2>_N))
                                                                                <Index.Uind_20>_N)_N
                                                                             (Index.Ind
                                                                                (Add0R (<2>_N))
                                                                                <Index.Lind_20>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Uind_19>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Lind_19>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<1>_N))
                                                                                <Index.Uind_9>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Lind_9>_N)_N
                                                                             <Index.Ind
                                                                                (1 GHC.TypeNats.+ 1)
                                                                                Index.Uind_3>_N
                                                                             <Index.Ind
                                                                                (1 GHC.TypeNats.+ 1)
                                                                                Index.Lind_3>_N)_N
                                                                          <GHC.Real.Rational>_R)_R of ww26 { Unit# ww27 ->
                 {__scc {main:AnsatzEqns2.ansatzAB} False True} Tensor.$wtensorContractWith_3
                                                                  @ 0
                                                                  @ 0
                                                                  @ GHC.Real.Rational
                                                                  @ 2
                                                                  @ 2
                                                                  @ 0
                                                                  @ 0
                                                                  @ 1
                                                                  @ 0
                                                                  AnsatzEqns2.$stensorContractWith_3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  AnsatzEqns2.$stensorContractWith_3
                                                                    `cast`
                                                                  (Sym (GHC.TypeNats.N:SNat[0]
                                                                            <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                  AnsatzEqns2.ansatzAB1
                                                                  GHC.Real.$fEnumRatio_$s$c+
                                                                  ww27
                                                                    `cast`
                                                                  (Data.Map.Internal.Map
                                                                     ((,,,,,,,)
                                                                        <Index.Ind
                                                                           2 Index.Uind_20>_N
                                                                        <Index.Ind
                                                                           2 Index.Lind_20>_N
                                                                        <Index.Ind
                                                                           0 Index.Uind_19>_N
                                                                        <Index.Ind
                                                                           0 Index.Lind_19>_N
                                                                        <Index.Ind 1 Index.Uind_9>_N
                                                                        <Index.Ind 0 Index.Lind_9>_N
                                                                        (Index.Ind
                                                                           (Sym (Add0L (<1>_N)))
                                                                           <Index.Uind_3>_N)_N
                                                                        (Index.Ind
                                                                           (Sym (Add0L (<1>_N)))
                                                                           <Index.Lind_3>_N)_N)_N
                                                                     <GHC.Real.Rational>_R)_R } } } } } } } } } } } } }) -}
8b1e1a79438c3b05b7ed12bf65fb378e
  $wansatzABb ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 1 0 1 1) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9) ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} True True} {__scc {main:AnsatzEqns2.ansatzABb.prod} True False} {__scc {main:AnsatzEqns2.ansatzABb.totalBlock1} True False} {__scc {main:AnsatzEqns2.ansatzABb.block1} True False} {__scc {main:AnsatzEqns2.ansatzABb.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                                                                                      w
                                                                                                                                                                                                                                                                                                      w1 of ww { Tensor.Tensor ww1 ->
                 case AnsatzEqns2.ansatzABb3
                        `cast`
                      (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.block1} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww1
                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.block2} True False} BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.int2} True True} BasicTensors.interEqn1_2
                                                                                                                            w
                                                                                                                            w1 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.block2} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 2
                                                                                                                               @ 2
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww8
                                                                                                                               ww10 of ww11 { Unit# ww12 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.totalBlock1} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                               ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                             @ (Index.Index
                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                  2)
                                                                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                                                                             (Tensor.aSymTensor3
                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                @ 2)
                                                                                                                                                                                                                             AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                             ww5
                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                ((,,,,,,,)
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                             ww12
                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                ((,,,,,,,)
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<2>_N))
                                                                                                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<2>_N))
                                                                                                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                <GHC.Real.Rational>_R)_R) of ww13 { Tensor.Tensor ww14 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.totalBlock2} True False} BasicTensors.invEta of ww15 { Tensor.Tensor ww16 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                               w2 of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.totalBlock2} False True} Tensor.$wtensorProductWith
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 2
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 1
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 2
                                                                                                                                    GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                    ww16
                                                                                                                                    ww18 of ww19 { Unit# ww20 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.totalBlock2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                    @ 1
                                                                                                                                    @ 1
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 1
                                                                                                                                    @ 0
                                                                                                                                    AnsatzEqns2.$stensorContractWith_1
                                                                                                                                      `cast`
                                                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                    AnsatzEqns2.$stensorContractWith_1
                                                                                                                                      `cast`
                                                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                    AnsatzEqns2.ansatzAB3
                                                                                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                    ww20
                                                                                                                                      `cast`
                                                                                                                                    (Data.Map.Internal.Map
                                                                                                                                       ((,,,,,,,)
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Uind_20>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Lind_20>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Uind_19>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Lind_19>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<1>_N))
                                                                                                                                             <Index.Uind_9>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Lind_9>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                           <1>_N)))
                                                                                                                                             <Index.Uind_3>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                           <1>_N)))
                                                                                                                                             <Index.Lind_3>_N)_N)_N
                                                                                                                                       <GHC.Real.Rational>_R)_R of ww21 { Unit# ww22 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.prod} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 2
                                                                                                                             @ 2
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 2
                                                                                                                             @ 2
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww14
                                                                                                                             ww22 of ww23 { Unit# ww24 ->
                 case {__scc {main:AnsatzEqns2.ansatzABb} False True} Tensor.$wtensorContractWith_3
                                                                        @ 2
                                                                        @ 2
                                                                        @ GHC.Real.Rational
                                                                        @ 2
                                                                        @ 2
                                                                        @ 0
                                                                        @ 0
                                                                        @ 1
                                                                        @ 0
                                                                        AnsatzEqns2.$stensorContractWith_6
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                        AnsatzEqns2.$stensorContractWith_6
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                        AnsatzEqns2.ansatzABb2
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww24
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              (Index.Ind
                                                                                 (Add0R (<2>_N))
                                                                                 <Index.Uind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0R (<2>_N))
                                                                                 <Index.Lind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<1>_N))
                                                                                 <Index.Uind_9>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_9>_N)_N
                                                                              <Index.Ind
                                                                                 (2
                                                                                  GHC.TypeNats.+ 1)
                                                                                 Index.Uind_3>_N
                                                                              <Index.Ind
                                                                                 (2
                                                                                  GHC.TypeNats.+ 1)
                                                                                 Index.Lind_3>_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww25 { Unit# ww26 ->
                 {__scc {main:AnsatzEqns2.ansatzABb} False True} Tensor.$wtensorContractWith_3
                                                                   @ 1
                                                                   @ 1
                                                                   @ GHC.Real.Rational
                                                                   @ 2
                                                                   @ 2
                                                                   @ 0
                                                                   @ 0
                                                                   @ 1
                                                                   @ 0
                                                                   AnsatzEqns2.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   AnsatzEqns2.$stensorContractWith_1
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                   AnsatzEqns2.ansatzABb1
                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                   ww26
                                                                     `cast`
                                                                   (Data.Map.Internal.Map
                                                                      ((,,,,,,,)
                                                                         <Index.Ind
                                                                            2 Index.Uind_20>_N
                                                                         <Index.Ind
                                                                            2 Index.Lind_20>_N
                                                                         <Index.Ind
                                                                            0 Index.Uind_19>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_19>_N
                                                                         <Index.Ind
                                                                            1 Index.Uind_9>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_9>_N
                                                                         (Index.Ind
                                                                            (Sym (AddDef (<1>_N,
                                                                                          <1>_N)))
                                                                            <Index.Uind_3>_N)_N
                                                                         (Index.Ind
                                                                            (Sym (AddDef (<1>_N,
                                                                                          <1>_N)))
                                                                            <Index.Lind_3>_N)_N)_N
                                                                      <GHC.Real.Rational>_R)_R } } } } } } } } } } } } }) -}
65b2ec917dece45cce4fb08c101b4caf
  $wansatzAIB ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 2 1 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} True True} {__scc {main:AnsatzEqns2.ansatzAIB.prod} True False} {__scc {main:AnsatzEqns2.ansatzAIB.totalBlock1} True False} {__scc {main:AnsatzEqns2.ansatzAIB.block1} True False} {__scc {main:AnsatzEqns2.ansatzAIB.intArea} True True} BasicTensors.interArea
                                                                                                                                                                                                                                                                                                      w
                                                                                                                                                                                                                                                                                                      w1 of ww { Tensor.Tensor ww1 ->
                 case AnsatzEqns2.ansatzAIB1
                        `cast`
                      (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.block1} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww1
                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.block2} True False} BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.int3} True True} BasicTensors.interEqn1_3
                                                                                                                            w
                                                                                                                            w1
                                                                                                                            w2
                                                                                                                            w3 of ww9 { Tensor.Tensor ww10 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.block2} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww8
                                                                                                                               ww10 of ww11 { Unit# ww12 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.totalBlock1} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ 2
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 0
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ 1
                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                               ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                             @ (Index.Index
                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                  2
                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                  0
                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                  1
                                                                                                                                                                                                                                  1)
                                                                                                                                                                                                                             @ GHC.Real.Rational
                                                                                                                                                                                                                             (Tensor.aSymTensor3
                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                @ 2
                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                @ 0
                                                                                                                                                                                                                                @ 1
                                                                                                                                                                                                                                @ 1
                                                                                                                                                                                                                                @ 1
                                                                                                                                                                                                                                @ 1)
                                                                                                                                                                                                                             AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                             ww5
                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                ((,,,,,,,)
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0R (<1>_N))
                                                                                                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                             ww12
                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                ((,,,,,,,)
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (AddDef (<1>_N,
                                                                                                                                                                                                                                               <1>_N))
                                                                                                                                                                                                                                      <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<0>_N))
                                                                                                                                                                                                                                      <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                      <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                      <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                      <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                   (Index.Ind
                                                                                                                                                                                                                                      (Add0L (<1>_N))
                                                                                                                                                                                                                                      <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                <GHC.Real.Rational>_R)_R) of ww13 { Tensor.Tensor ww14 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.totalBlock2} True False} BasicTensors.invEta of ww15 { Tensor.Tensor ww16 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                               w2 of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.totalBlock2} False True} Tensor.$wtensorProductWith
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 2
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 1
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 2
                                                                                                                                    GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                    ww16
                                                                                                                                    ww18 of ww19 { Unit# ww20 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.totalBlock2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                    @ 1
                                                                                                                                    @ 1
                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 0
                                                                                                                                    @ 1
                                                                                                                                    @ 0
                                                                                                                                    AnsatzEqns2.$stensorContractWith_1
                                                                                                                                      `cast`
                                                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                    AnsatzEqns2.$stensorContractWith_1
                                                                                                                                      `cast`
                                                                                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                    AnsatzEqns2.ansatzAB3
                                                                                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                    ww20
                                                                                                                                      `cast`
                                                                                                                                    (Data.Map.Internal.Map
                                                                                                                                       ((,,,,,,,)
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Uind_20>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Lind_20>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Uind_19>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Lind_19>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<1>_N))
                                                                                                                                             <Index.Uind_9>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<0>_N))
                                                                                                                                             <Index.Lind_9>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                           <1>_N)))
                                                                                                                                             <Index.Uind_3>_N)_N
                                                                                                                                          (Index.Ind
                                                                                                                                             (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                           <1>_N)))
                                                                                                                                             <Index.Lind_3>_N)_N)_N
                                                                                                                                       <GHC.Real.Rational>_R)_R of ww21 { Unit# ww22 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.prod} False True} Tensor.$wtensorProductWith
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ GHC.Real.Rational
                                                                                                                             @ 2
                                                                                                                             @ 2
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 0
                                                                                                                             @ 1
                                                                                                                             @ 1
                                                                                                                             GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                             ww14
                                                                                                                             ww22 of ww23 { Unit# ww24 ->
                 case {__scc {main:AnsatzEqns2.ansatzAIB} False True} Tensor.$wtensorContractWith_3
                                                                        @ 1
                                                                        @ 1
                                                                        @ GHC.Real.Rational
                                                                        @ 2
                                                                        @ 2
                                                                        @ 0
                                                                        @ 0
                                                                        @ 2
                                                                        @ 1
                                                                        AnsatzEqns2.$stensorContractWith_1
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                        AnsatzEqns2.$stensorContractWith_1
                                                                          `cast`
                                                                        (Sym (GHC.TypeNats.N:SNat[0]
                                                                                  <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                        AnsatzEqns2.ansatzAB6
                                                                        GHC.Real.$fEnumRatio_$s$c+
                                                                        ww24
                                                                          `cast`
                                                                        (Data.Map.Internal.Map
                                                                           ((,,,,,,,)
                                                                              (Index.Ind
                                                                                 (Add0R (<2>_N))
                                                                                 <Index.Uind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0R (<2>_N))
                                                                                 <Index.Lind_20>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Uind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0L (<0>_N))
                                                                                 <Index.Lind_19>_N)_N
                                                                              (Index.Ind
                                                                                 (AddDef (<1>_N,
                                                                                          <1>_N))
                                                                                 <Index.Uind_9>_N)_N
                                                                              (Index.Ind
                                                                                 (Add0R (<1>_N))
                                                                                 <Index.Lind_9>_N)_N
                                                                              <Index.Ind
                                                                                 (1
                                                                                  GHC.TypeNats.+ 1)
                                                                                 Index.Uind_3>_N
                                                                              <Index.Ind
                                                                                 (1
                                                                                  GHC.TypeNats.+ 1)
                                                                                 Index.Lind_3>_N)_N
                                                                           <GHC.Real.Rational>_R)_R of ww25 { Unit# ww26 ->
                 {__scc {main:AnsatzEqns2.ansatzAIB} False True} Tensor.$wtensorContractWith_3
                                                                   @ 0
                                                                   @ 0
                                                                   @ GHC.Real.Rational
                                                                   @ 2
                                                                   @ 2
                                                                   @ 0
                                                                   @ 0
                                                                   @ 2
                                                                   @ 1
                                                                   AnsatzEqns2.$stensorContractWith_3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   AnsatzEqns2.$stensorContractWith_3
                                                                     `cast`
                                                                   (Sym (GHC.TypeNats.N:SNat[0]
                                                                             <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                   AnsatzEqns2.ansatzAB1
                                                                   GHC.Real.$fEnumRatio_$s$c+
                                                                   ww26
                                                                     `cast`
                                                                   (Data.Map.Internal.Map
                                                                      ((,,,,,,,)
                                                                         <Index.Ind
                                                                            2 Index.Uind_20>_N
                                                                         <Index.Ind
                                                                            2 Index.Lind_20>_N
                                                                         <Index.Ind
                                                                            0 Index.Uind_19>_N
                                                                         <Index.Ind
                                                                            0 Index.Lind_19>_N
                                                                         <Index.Ind
                                                                            2 Index.Uind_9>_N
                                                                         <Index.Ind
                                                                            1 Index.Lind_9>_N
                                                                         (Index.Ind
                                                                            (Sym (Add0L (<1>_N)))
                                                                            <Index.Uind_3>_N)_N
                                                                         (Index.Ind
                                                                            (Sym (Add0L (<1>_N)))
                                                                            <Index.Lind_3>_N)_N)_N
                                                                      <GHC.Real.Rational>_R)_R } } } } } } } } } } } } }) -}
4a584e2282848d063d6996fc4612f89b
  $wansatzAIBJ ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 3 2 0 0) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
83b4c56720ae00e014641143f3de269d
  $wansatzAaBI ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 2 1 1 1) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} True True} {__scc {main:AnsatzEqns2.ansatzAaBI.prod} True False} {__scc {main:AnsatzEqns2.ansatzAaBI.totalBlock1} True False} {__scc {main:AnsatzEqns2.ansatzAaBI.block1} True False} {__scc {main:AnsatzEqns2.ansatzAaBI.int2} True True} BasicTensors.interEqn1_2
                                                                                                                                                                                                                                                                                                        w
                                                                                                                                                                                                                                                                                                        w1 of ww { Tensor.Tensor ww1 ->
                 case AnsatzEqns2.ansatzAaBI1
                        `cast`
                      (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         <GHC.Real.Rational>_R)_R of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.block1} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.block2} True False} BasicTensors.delta_20 of ww7 { Tensor.Tensor ww8 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.int3} True True} BasicTensors.interEqn1_3
                                                                                                                              w
                                                                                                                              w1
                                                                                                                              w2
                                                                                                                              w3 of ww9 { Tensor.Tensor ww10 ->
                 case BasicTensors.delta_3 of ww11 { Tensor.Tensor ww12 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww10
                                                                                                                                 ww12 of ww13 { Unit# ww14 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 2
                                                                                                                                 @ 2
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww8
                                                                                                                                 ww14
                                                                                                                                   `cast`
                                                                                                                                 (Data.Map.Internal.Map
                                                                                                                                    ((,,,,,,,)
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Uind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Lind_20>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Uind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0L (<0>_N))
                                                                                                                                          <Index.Lind_19>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Uind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (Add0R (<1>_N))
                                                                                                                                          <Index.Lind_9>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                   <1>_N))
                                                                                                                                          <Index.Uind_3>_N)_N
                                                                                                                                       (Index.Ind
                                                                                                                                          (AddDef (<1>_N,
                                                                                                                                                   <1>_N))
                                                                                                                                          <Index.Lind_3>_N)_N)_N
                                                                                                                                    <GHC.Real.Rational>_R)_R of ww15 { Unit# ww16 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.totalBlock1} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                 @ 2
                                                                                                                                                                                 @ 2
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 0
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 1
                                                                                                                                                                                 @ 2
                                                                                                                                                                                 @ 2
                                                                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                                                                 ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                               @ (Index.Index
                                                                                                                                                                                                                                    2
                                                                                                                                                                                                                                    2
                                                                                                                                                                                                                                    0
                                                                                                                                                                                                                                    0
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    1
                                                                                                                                                                                                                                    2
                                                                                                                                                                                                                                    2)
                                                                                                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                                                                                                               (Tensor.aSymTensor3
                                                                                                                                                                                                                                  @ 2
                                                                                                                                                                                                                                  @ 2
                                                                                                                                                                                                                                  @ 0
                                                                                                                                                                                                                                  @ 0
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 1
                                                                                                                                                                                                                                  @ 2
                                                                                                                                                                                                                                  @ 2)
                                                                                                                                                                                                                               AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                               ww5
                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (AddDef (<1>_N,
                                                                                                                                                                                                                                                 <1>_N))
                                                                                                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (AddDef (<1>_N,
                                                                                                                                                                                                                                                 <1>_N))
                                                                                                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<2>_N))
                                                                                                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0R (<2>_N))
                                                                                                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                  <GHC.Real.Rational>_R)_R
                                                                                                                                                                                                                               ww16
                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (AddDef (<1>_N,
                                                                                                                                                                                                                                                 <1>_N))
                                                                                                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (AddDef (<1>_N,
                                                                                                                                                                                                                                                 <1>_N))
                                                                                                                                                                                                                                        <Index.Lind_20>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<1>_N))
                                                                                                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<2>_N))
                                                                                                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                                                                                                     (Index.Ind
                                                                                                                                                                                                                                        (Add0L (<2>_N))
                                                                                                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                                                                                                  <GHC.Real.Rational>_R)_R) of ww17 { Tensor.Tensor ww18 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.totalBlock2} True False} BasicTensors.invEta of ww19 { Tensor.Tensor ww20 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.antiSym} True True} BasicTensors.aSymI_2
                                                                                                                                 w2 of ww21 { Tensor.Tensor ww22 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.totalBlock2} False True} Tensor.$wtensorProductWith
                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 2
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 1
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 2
                                                                                                                                      GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                      ww20
                                                                                                                                      ww22 of ww23 { Unit# ww24 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.totalBlock2} False True} Tensor.$wtensorContractWith_3
                                                                                                                                      @ 1
                                                                                                                                      @ 1
                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 0
                                                                                                                                      @ 1
                                                                                                                                      @ 0
                                                                                                                                      AnsatzEqns2.$stensorContractWith_1
                                                                                                                                        `cast`
                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                      AnsatzEqns2.$stensorContractWith_1
                                                                                                                                        `cast`
                                                                                                                                      (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                      AnsatzEqns2.ansatzAB3
                                                                                                                                      GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                      ww24
                                                                                                                                        `cast`
                                                                                                                                      (Data.Map.Internal.Map
                                                                                                                                         ((,,,,,,,)
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                               <Index.Uind_20>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                               <Index.Lind_20>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                               <Index.Uind_19>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                               <Index.Lind_19>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<1>_N))
                                                                                                                                               <Index.Uind_9>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<0>_N))
                                                                                                                                               <Index.Lind_9>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0R (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                             <1>_N)))
                                                                                                                                               <Index.Uind_3>_N)_N
                                                                                                                                            (Index.Ind
                                                                                                                                               (Add0L (<2>_N) ; Sym (AddDef (<1>_N,
                                                                                                                                                                             <1>_N)))
                                                                                                                                               <Index.Lind_3>_N)_N)_N
                                                                                                                                         <GHC.Real.Rational>_R)_R of ww25 { Unit# ww26 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.prod} False True} Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 2
                                                                                                                               @ 2
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 2
                                                                                                                               @ 2
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww18
                                                                                                                               ww26 of ww27 { Unit# ww28 ->
                 case {__scc {main:AnsatzEqns2.ansatzAaBI} False True} Tensor.$wtensorContractWith_3
                                                                         @ 2
                                                                         @ 2
                                                                         @ GHC.Real.Rational
                                                                         @ 2
                                                                         @ 2
                                                                         @ 0
                                                                         @ 0
                                                                         @ 2
                                                                         @ 1
                                                                         AnsatzEqns2.$stensorContractWith_6
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                         AnsatzEqns2.$stensorContractWith_6
                                                                           `cast`
                                                                         (Sym (GHC.TypeNats.N:SNat[0]
                                                                                   <2>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <2>_N)
                                                                         AnsatzEqns2.ansatzABb2
                                                                         GHC.Real.$fEnumRatio_$s$c+
                                                                         ww28
                                                                           `cast`
                                                                         (Data.Map.Internal.Map
                                                                            ((,,,,,,,)
                                                                               (Index.Ind
                                                                                  (Add0R (<2>_N))
                                                                                  <Index.Uind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<2>_N))
                                                                                  <Index.Lind_20>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Uind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0L (<0>_N))
                                                                                  <Index.Lind_19>_N)_N
                                                                               (Index.Ind
                                                                                  (AddDef (<1>_N,
                                                                                           <1>_N))
                                                                                  <Index.Uind_9>_N)_N
                                                                               (Index.Ind
                                                                                  (Add0R (<1>_N))
                                                                                  <Index.Lind_9>_N)_N
                                                                               <Index.Ind
                                                                                  (2
                                                                                   GHC.TypeNats.+ 1)
                                                                                  Index.Uind_3>_N
                                                                               <Index.Ind
                                                                                  (2
                                                                                   GHC.TypeNats.+ 1)
                                                                                  Index.Lind_3>_N)_N
                                                                            <GHC.Real.Rational>_R)_R of ww29 { Unit# ww30 ->
                 {__scc {main:AnsatzEqns2.ansatzAaBI} False True} Tensor.$wtensorContractWith_3
                                                                    @ 1
                                                                    @ 1
                                                                    @ GHC.Real.Rational
                                                                    @ 2
                                                                    @ 2
                                                                    @ 0
                                                                    @ 0
                                                                    @ 2
                                                                    @ 1
                                                                    AnsatzEqns2.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                    AnsatzEqns2.$stensorContractWith_1
                                                                      `cast`
                                                                    (Sym (GHC.TypeNats.N:SNat[0]
                                                                              <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                    AnsatzEqns2.ansatzABb1
                                                                    GHC.Real.$fEnumRatio_$s$c+
                                                                    ww30
                                                                      `cast`
                                                                    (Data.Map.Internal.Map
                                                                       ((,,,,,,,)
                                                                          <Index.Ind
                                                                             2 Index.Uind_20>_N
                                                                          <Index.Ind
                                                                             2 Index.Lind_20>_N
                                                                          <Index.Ind
                                                                             0 Index.Uind_19>_N
                                                                          <Index.Ind
                                                                             0 Index.Lind_19>_N
                                                                          <Index.Ind
                                                                             2 Index.Uind_9>_N
                                                                          <Index.Ind
                                                                             1 Index.Lind_9>_N
                                                                          (Index.Ind
                                                                             (Sym (AddDef (<1>_N,
                                                                                           <1>_N)))
                                                                             <Index.Uind_3>_N)_N
                                                                          (Index.Ind
                                                                             (Sym (AddDef (<1>_N,
                                                                                           <1>_N)))
                                                                             <Index.Lind_3>_N)_N)_N
                                                                       <GHC.Real.Rational>_R)_R } } } } } } } } } } } } } } }) -}
105bdb86e91849c8a9abb195b854b3ed
  $wansatzAaBb ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 2 2 0 0 1 0 2 2) GHC.Real.Rational #)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>, Inline: [0] -}
890c09de57a4d34c8e78f62a90e227ab
  $wintCond2NoSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> (# Data.Map.Internal.Map
            (Index.Index 1 2 0 0 1 1 2 2) GHC.Real.Rational #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
d4f08ff70ae8eeb8b3a145b19dbd8e10
  $wintCondfirstOrder ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> (# Data.Map.Internal.Map
            (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational #)
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20) ->
                 case ({__scc {main:AnsatzEqns2.intCondfirstOrder} True True} {__scc {main:AnsatzEqns2.intCondfirstOrder.total} True False} {__scc {main:AnsatzEqns2.intCondfirstOrder.block1} True False} AnsatzEqns2.intCondfirstOrder3)
                        `cast`
                      (Tensor.Tensor
                         (Add0R (<1>_N))
                         (Add0R (<1>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<0>_N))
                         (Add0L (<1>_N))
                         (Add0L (<1>_N))
                         <GHC.Real.Rational>_R)_R of ww { Tensor.Tensor ww1 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.intArea} True True} BasicTensors.interArea
                                                                                                                                               w
                                                                                                                                               w1 of ww2 { Tensor.Tensor ww3 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.block1} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                                          @ 1
                                                                                                                                                                                          @ 1
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 0
                                                                                                                                                                                          @ 1
                                                                                                                                                                                          @ 1
                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                          ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                                        @ (Index.Index
                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                             0
                                                                                                                                                                                                                                             1
                                                                                                                                                                                                                                             1)
                                                                                                                                                                                                                                        @ GHC.Real.Rational
                                                                                                                                                                                                                                        (Tensor.aSymTensor3
                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 0
                                                                                                                                                                                                                                           @ 1
                                                                                                                                                                                                                                           @ 1)
                                                                                                                                                                                                                                        AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                                        ww1
                                                                                                                                                                                                                                        ww3) of ww4 { Tensor.Tensor ww5 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.block2} True False} {__scc {main:AnsatzEqns2.intCondfirstOrder.flatA} True True} BasicTensors.flatArea
                                                                                                                                                                                                            w1 of ww6 { Tensor.Tensor ww7 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.block2} False True} Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww3
                                                                                                                                               ww7 of ww8 { Unit# ww9 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.block2} False True} Tensor.$wtensorContractWith_20
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               AnsatzEqns2.$stensorContractWith_3
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                               AnsatzEqns2.$stensorContractWith_1
                                                                                                                                                 `cast`
                                                                                                                                               (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                         <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                               AnsatzEqns2.ansatzAB6
                                                                                                                                               GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                               ww9
                                                                                                                                                 `cast`
                                                                                                                                               (Data.Map.Internal.Map
                                                                                                                                                  ((,,,,,,,)
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                        <Index.Uind_20>_N)_N
                                                                                                                                                     <Index.Ind
                                                                                                                                                        (1
                                                                                                                                                         GHC.TypeNats.+ 1)
                                                                                                                                                        Index.Lind_20>_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_19>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Uind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0L (<0>_N))
                                                                                                                                                        <Index.Lind_9>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                        <Index.Uind_3>_N)_N
                                                                                                                                                     (Index.Ind
                                                                                                                                                        (Add0R (<1>_N))
                                                                                                                                                        <Index.Lind_3>_N)_N)_N
                                                                                                                                                  <GHC.Real.Rational>_R)_R of ww10 { Unit# ww11 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.total} False True} Tensor.$wtensorProductWith
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ 1
                                                                                                                                              GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                              ww5
                                                                                                                                              ww11 of ww12 { Unit# ww13 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.total} False True} Tensor.$wtensorContractWith_20
                                                                                                                                              @ 0
                                                                                                                                              @ 1
                                                                                                                                              @ GHC.Real.Rational
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 0
                                                                                                                                              @ 2
                                                                                                                                              @ 2
                                                                                                                                              AnsatzEqns2.$stensorContractWith_3
                                                                                                                                                `cast`
                                                                                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                        <0>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <0>_N)
                                                                                                                                              AnsatzEqns2.$stensorContractWith_1
                                                                                                                                                `cast`
                                                                                                                                              (Sym (GHC.TypeNats.N:SNat[0]
                                                                                                                                                        <1>_P) ; Sym (GHC.TypeNats.N:KnownNat[0]) <1>_N)
                                                                                                                                              AnsatzEqns2.ansatzAB6
                                                                                                                                              GHC.Real.$fEnumRatio_$s$c+
                                                                                                                                              ww13
                                                                                                                                                `cast`
                                                                                                                                              (Data.Map.Internal.Map
                                                                                                                                                 ((,,,,,,,)
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (Add0R (<1>_N) ; Sym (Add0L (<1>_N)))
                                                                                                                                                       <Index.Uind_20>_N)_N
                                                                                                                                                    <Index.Ind
                                                                                                                                                       (1
                                                                                                                                                        GHC.TypeNats.+ 1)
                                                                                                                                                       Index.Lind_20>_N
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                       <Index.Uind_19>_N)_N
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                       <Index.Lind_19>_N)_N
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                       <Index.Uind_9>_N)_N
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (Add0L (<0>_N))
                                                                                                                                                       <Index.Lind_9>_N)_N
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (AddDef (<1>_N,
                                                                                                                                                                <1>_N))
                                                                                                                                                       <Index.Uind_3>_N)_N
                                                                                                                                                    (Index.Ind
                                                                                                                                                       (AddDef (<1>_N,
                                                                                                                                                                <1>_N))
                                                                                                                                                       <Index.Lind_3>_N)_N)_N
                                                                                                                                                 <GHC.Real.Rational>_R)_R of ww14 { Unit# ww15 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.totalTrans} True True} Tensor.$wtensorTranspose
                                                                                                                                                  @ 0
                                                                                                                                                  @ 1
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 0
                                                                                                                                                  @ 2
                                                                                                                                                  @ 2
                                                                                                                                                  @ GHC.Real.Rational
                                                                                                                                                  AnsatzEqns2.intCondfirstOrder2
                                                                                                                                                  AnsatzEqns2.ansatzAB6
                                                                                                                                                  ww15 of ww16 { Unit# ww17 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.totalTrans} False True} Tensor.$wtensorTranspose
                                                                                                                                                   @ 0
                                                                                                                                                   @ 1
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 0
                                                                                                                                                   @ 2
                                                                                                                                                   @ 2
                                                                                                                                                   @ GHC.Real.Rational
                                                                                                                                                   AnsatzEqns2.intCondfirstOrder1
                                                                                                                                                   AnsatzEqns2.ansatzAB6
                                                                                                                                                   ww17 of ww18 { Unit# ww19 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:Tensor.tensorSub} True True} {__scc {main:Tensor.tensorSMult} True False} {__scc {main:Tensor.tensorSMult} False True} {__scc {main:Tensor.fmap} True False} Tensor.Tensor
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 1
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 0
                                                                                                                                                                                                                                                          @ 2
                                                                                                                                                                                                                                                          @ 2
                                                                                                                                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                                                                                                                                          ({__scc {main:Tensor.fmap} False True} AnsatzEqns2.intCondfirstOrder_go8
                                                                                                                                                                                                                                                                                                   ww19) of ww20 { Tensor.Tensor ww21 ->
                 case {__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:Tensor.tensorSub} False True} {__scc {main:Tensor.tensorAdd} True False} Tensor.Tensor
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 1
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 0
                                                                                                                                                                      @ 2
                                                                                                                                                                      @ 2
                                                                                                                                                                      @ GHC.Real.Rational
                                                                                                                                                                      ({__scc {main:Tensor.tensorAdd} False True} Data.Map.Strict.Internal.unionWith
                                                                                                                                                                                                                    @ (Index.Index
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         1
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         0
                                                                                                                                                                                                                         2
                                                                                                                                                                                                                         2)
                                                                                                                                                                                                                    @ GHC.Real.Rational
                                                                                                                                                                                                                    (Tensor.aSymTensor3
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 1
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 0
                                                                                                                                                                                                                       @ 2
                                                                                                                                                                                                                       @ 2)
                                                                                                                                                                                                                    AnsatzEqns2.ansatzAB_lvl19
                                                                                                                                                                                                                    ww15
                                                                                                                                                                                                                    ww21) of ww22 { Tensor.Tensor ww23 ->
                 (# ww23 #) } } } } } } } } } } } }) -}
1c50d80ba71227d159fcbce3e619d6d1
  $wmkEqnSparseAnsatzAB ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 1 0 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           [GHC.Types.Int] GHC.Types.Int)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index 2 2 0 0 1 0 0 0) GHC.Real.Rational) ->
                 {__scc {main:AnsatzEqns2.mkEqnSparseAnsatzAB} True True} AnsatzEqns2.$smapKeysWith
                                                                            @ (GHC.Real.Ratio
                                                                                 GHC.Integer.Type.Integer)
                                                                            @ (Index.Uinds_20 2,
                                                                               Index.Linds_20 2,
                                                                               Index.Uinds_19 0,
                                                                               Index.Linds_19 0,
                                                                               Index.Uinds_9 1,
                                                                               Index.Linds_9 0,
                                                                               Index.Uinds_3 0,
                                                                               Index.Linds_3 0)
                                                                            GHC.Real.$fEnumRatio_$s$c+
                                                                            (\ (ds :: (Index.Uinds_20
                                                                                         2,
                                                                                       Index.Linds_20
                                                                                         2,
                                                                                       Index.Uinds_19
                                                                                         0,
                                                                                       Index.Linds_19
                                                                                         0,
                                                                                       Index.Uinds_9
                                                                                         1,
                                                                                       Index.Linds_9
                                                                                         0,
                                                                                       Index.Uinds_3
                                                                                         0,
                                                                                       Index.Linds_3
                                                                                         0)) ->
                                                                             {__scc {main:AnsatzEqns2.index2SparseAnsatzAB} True True} case ds of wild { (,,,,,,,) x1 x2 ds1 ds2 x5 ds3 ds4 ds5 ->
                                                                                                                                       (case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.e} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} x1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                        case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.e} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                      @ Index.Uind_20
                                                                                                                                                                                                                                                      0#
                                                                                                                                                                                                                                                      s of wild2 {
                                                                                                                                          GHC.Base.Nothing
                                                                                                                                          -> case Data.Maybe.fromJust1
                                                                                                                                             ret_ty GHC.Types.Int
                                                                                                                                             of {}
                                                                                                                                          GHC.Base.Just x
                                                                                                                                          -> case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.e} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                          @ Index.Uind_20
                                                                                                                                                                                                                                                          x of a# { DEFAULT ->
                                                                                                                                             case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.f} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild1 of wild3 { Index.UnsafemkInd s1 ->
                                                                                                                                             case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.f} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                           @ Index.Uind_20
                                                                                                                                                                                                                                                           1#
                                                                                                                                                                                                                                                           s1 of wild4 {
                                                                                                                                               GHC.Base.Nothing
                                                                                                                                               -> case Data.Maybe.fromJust1
                                                                                                                                                  ret_ty GHC.Types.Int
                                                                                                                                                  of {}
                                                                                                                                               GHC.Base.Just x4
                                                                                                                                               -> case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.f} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                               @ Index.Uind_20
                                                                                                                                                                                                                                                               x4 of a#1 { DEFAULT ->
                                                                                                                                                  case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} x5 of wild5 { Index.UnsafemkInd s2 ->
                                                                                                                                                  case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                @ Index.Uind_9
                                                                                                                                                                                                                                                                0#
                                                                                                                                                                                                                                                                s2 of wild6 {
                                                                                                                                                    GHC.Base.Nothing
                                                                                                                                                    -> case Data.Maybe.fromJust1
                                                                                                                                                       ret_ty GHC.Types.Int
                                                                                                                                                       of {}
                                                                                                                                                    GHC.Base.Just x6
                                                                                                                                                    -> case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                    @ Index.Uind_9
                                                                                                                                                                                                                                                                    x6 of a#2 { DEFAULT ->
                                                                                                                                                       GHC.Types.I#
                                                                                                                                                         (GHC.Prim.+#
                                                                                                                                                            (GHC.Prim.+#
                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                     ({__scc {main:AnsatzEqns2.index2SparseAnsatzAB.e} False True} GHC.Prim.+#
                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                     a#)
                                                                                                                                                                     1#)
                                                                                                                                                                  210#)
                                                                                                                                                               (GHC.Prim.*#
                                                                                                                                                                  (GHC.Prim.-#
                                                                                                                                                                     ({__scc {main:AnsatzEqns2.index2SparseAnsatzAB.f} False True} GHC.Prim.+#
                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                     a#1)
                                                                                                                                                                     1#)
                                                                                                                                                                  10#))
                                                                                                                                                            ({__scc {main:AnsatzEqns2.index2SparseAnsatzAB.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                            a#2)) } } } } } } } } },
                                                                                                                                        let {
                                                                                                                                          b :: GHC.Types.Int
                                                                                                                                          = {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x2 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                           case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                            1#
                                                                                                                                                                                                                                                                                                                                            s of wild2 {
                                                                                                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                of {}
                                                                                                                                                                                                                                                                                             GHC.Base.Just x
                                                                                                                                                                                                                                                                                             -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                GHC.Types.I#
                                                                                                                                                                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                                                                                     a#) } } }
                                                                                                                                        } in
                                                                                                                                        let {
                                                                                                                                          a :: GHC.Types.Int
                                                                                                                                          = {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x2 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                           case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                                                                                            s of wild2 {
                                                                                                                                                                                                                                                                                             GHC.Base.Nothing
                                                                                                                                                                                                                                                                                             -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                of {}
                                                                                                                                                                                                                                                                                             GHC.Base.Just x
                                                                                                                                                                                                                                                                                             -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                GHC.Types.I#
                                                                                                                                                                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                     1#
                                                                                                                                                                                                                                                                                                     a#) } } }
                                                                                                                                        } in
                                                                                                                                        case {__scc {main:AnsatzEqns2.index2SparseAnsatzAB.x} True True} AnsatzEqns2.$sfind1
                                                                                                                                                                                                           @ GHC.Types.Int
                                                                                                                                                                                                           (GHC.Types.:
                                                                                                                                                                                                              @ GHC.Types.Int
                                                                                                                                                                                                              (GHC.Classes.$fOrdInt_$cmin
                                                                                                                                                                                                                 a
                                                                                                                                                                                                                 b)
                                                                                                                                                                                                              (GHC.Types.:
                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                 (GHC.Classes.$fOrdInt_$cmax
                                                                                                                                                                                                                    a
                                                                                                                                                                                                                    b)
                                                                                                                                                                                                                 (GHC.Types.[]
                                                                                                                                                                                                                    @ GHC.Types.Int)))
                                                                                                                                                                                                           w of wild1 { GHC.Types.I# y ->
                                                                                                                                        GHC.Types.I#
                                                                                                                                          (GHC.Prim.+#
                                                                                                                                             316#
                                                                                                                                             y) }) })
                                                                            ww) -}
88b390276ac643cdd8a4fdb6b4009f93
  $wmkEqnSparseAnsatzABSolo ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 1 0 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           [GHC.Types.Int] GHC.Types.Int)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index 2 2 0 0 1 0 0 0) GHC.Real.Rational) ->
                 {__scc {main:AnsatzEqns2.mkEqnSparseAnsatzABSolo} True True} AnsatzEqns2.$smapKeysWith
                                                                                @ (GHC.Real.Ratio
                                                                                     GHC.Integer.Type.Integer)
                                                                                @ (Index.Uinds_20 2,
                                                                                   Index.Linds_20 2,
                                                                                   Index.Uinds_19 0,
                                                                                   Index.Linds_19 0,
                                                                                   Index.Uinds_9 1,
                                                                                   Index.Linds_9 0,
                                                                                   Index.Uinds_3 0,
                                                                                   Index.Linds_3 0)
                                                                                GHC.Real.$fEnumRatio_$s$c+
                                                                                (\ (ds :: (Index.Uinds_20
                                                                                             2,
                                                                                           Index.Linds_20
                                                                                             2,
                                                                                           Index.Uinds_19
                                                                                             0,
                                                                                           Index.Linds_19
                                                                                             0,
                                                                                           Index.Uinds_9
                                                                                             1,
                                                                                           Index.Linds_9
                                                                                             0,
                                                                                           Index.Uinds_3
                                                                                             0,
                                                                                           Index.Linds_3
                                                                                             0)) ->
                                                                                 {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo} True True} case ds of wild { (,,,,,,,) x1 x2 ds1 ds2 x5 ds3 ds4 ds5 ->
                                                                                                                                               (case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.e} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} x1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.e} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                  @ Index.Uind_20
                                                                                                                                                                                                                                                                  0#
                                                                                                                                                                                                                                                                  s of wild2 {
                                                                                                                                                  GHC.Base.Nothing
                                                                                                                                                  -> case Data.Maybe.fromJust1
                                                                                                                                                     ret_ty GHC.Types.Int
                                                                                                                                                     of {}
                                                                                                                                                  GHC.Base.Just x
                                                                                                                                                  -> case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.e} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                      @ Index.Uind_20
                                                                                                                                                                                                                                                                      x of a# { DEFAULT ->
                                                                                                                                                     case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.f} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild1 of wild3 { Index.UnsafemkInd s1 ->
                                                                                                                                                     case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.f} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                       @ Index.Uind_20
                                                                                                                                                                                                                                                                       1#
                                                                                                                                                                                                                                                                       s1 of wild4 {
                                                                                                                                                       GHC.Base.Nothing
                                                                                                                                                       -> case Data.Maybe.fromJust1
                                                                                                                                                          ret_ty GHC.Types.Int
                                                                                                                                                          of {}
                                                                                                                                                       GHC.Base.Just x4
                                                                                                                                                       -> case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.f} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                           @ Index.Uind_20
                                                                                                                                                                                                                                                                           x4 of a#1 { DEFAULT ->
                                                                                                                                                          case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} x5 of wild5 { Index.UnsafemkInd s2 ->
                                                                                                                                                          case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                            @ Index.Uind_9
                                                                                                                                                                                                                                                                            0#
                                                                                                                                                                                                                                                                            s2 of wild6 {
                                                                                                                                                            GHC.Base.Nothing
                                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                                               of {}
                                                                                                                                                            GHC.Base.Just x6
                                                                                                                                                            -> case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                @ Index.Uind_9
                                                                                                                                                                                                                                                                                x6 of a#2 { DEFAULT ->
                                                                                                                                                               GHC.Types.I#
                                                                                                                                                                 (GHC.Prim.+#
                                                                                                                                                                    (GHC.Prim.+#
                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                             ({__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.e} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                 a#)
                                                                                                                                                                             1#)
                                                                                                                                                                          210#)
                                                                                                                                                                       (GHC.Prim.*#
                                                                                                                                                                          (GHC.Prim.-#
                                                                                                                                                                             ({__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.f} False True} GHC.Prim.+#
                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                 a#1)
                                                                                                                                                                             1#)
                                                                                                                                                                          10#))
                                                                                                                                                                    ({__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                        a#2)) } } } } } } } } },
                                                                                                                                                let {
                                                                                                                                                  b :: GHC.Types.Int
                                                                                                                                                  = {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x2 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                       case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                        @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                                                                                                                        s of wild2 {
                                                                                                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                         -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                            ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                            of {}
                                                                                                                                                                                                                                                                                                         GHC.Base.Just x
                                                                                                                                                                                                                                                                                                         -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                            GHC.Types.I#
                                                                                                                                                                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                                                                 a#) } } }
                                                                                                                                                } in
                                                                                                                                                let {
                                                                                                                                                  a :: GHC.Types.Int
                                                                                                                                                  = {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x2 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                                       case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                                        @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                        0#
                                                                                                                                                                                                                                                                                                                                                        s of wild2 {
                                                                                                                                                                                                                                                                                                         GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                         -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                            ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                            of {}
                                                                                                                                                                                                                                                                                                         GHC.Base.Just x
                                                                                                                                                                                                                                                                                                         -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                            @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                            x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                            GHC.Types.I#
                                                                                                                                                                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                                 1#
                                                                                                                                                                                                                                                                                                                 a#) } } }
                                                                                                                                                } in
                                                                                                                                                case {__scc {main:AnsatzEqns2.index2SparseAnsatzABSolo.x} True True} AnsatzEqns2.$sfind1
                                                                                                                                                                                                                       @ GHC.Types.Int
                                                                                                                                                                                                                       (GHC.Types.:
                                                                                                                                                                                                                          @ GHC.Types.Int
                                                                                                                                                                                                                          (GHC.Classes.$fOrdInt_$cmin
                                                                                                                                                                                                                             a
                                                                                                                                                                                                                             b)
                                                                                                                                                                                                                          (GHC.Types.:
                                                                                                                                                                                                                             @ GHC.Types.Int
                                                                                                                                                                                                                             (GHC.Classes.$fOrdInt_$cmax
                                                                                                                                                                                                                                a
                                                                                                                                                                                                                                b)
                                                                                                                                                                                                                             (GHC.Types.[]
                                                                                                                                                                                                                                @ GHC.Types.Int)))
                                                                                                                                                                                                                       w of wild1 { GHC.Types.I# y ->
                                                                                                                                                GHC.Types.I#
                                                                                                                                                  (GHC.Prim.+#
                                                                                                                                                     22#
                                                                                                                                                     y) }) })
                                                                                ww) -}
212f740f889c08e7f8bd39216eab27bb
  $wmkEqnSparseAnsatzABb ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 1 0 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
848de0992fa57f2c090277055c4307d1
  $wmkEqnSparseAnsatzAIB ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 2 1 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
6aba93217843730dc5f7fc4cfaf14303
  $wmkEqnSparseAnsatzAIBJ ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 3 2 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
74903477732db312f9402934fff0e64e
  $wmkEqnSparseAnsatzAaBI ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 2 1 1 1) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
2b69ec5773d55667d046c2e9aeb56b5d
  $wmkEqnSparseAnsatzAaBb ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 1 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
96ad4fd393ecaaaf4e4a53d0d12898f0
  $wmkEqnSparseRemoveAIB ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 2 2 0 0 1 1 0 0) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Data.Map.Internal.Map
                           [GHC.Types.Int] GHC.Types.Int)
                   (ww :: Data.Map.Internal.Map
                            (Index.Index 2 2 0 0 1 1 0 0) GHC.Real.Rational) ->
                 {__scc {main:AnsatzEqns2.mkEqnSparseRemoveAIB} True True} AnsatzEqns2.$smapKeysWith
                                                                             @ (GHC.Real.Ratio
                                                                                  GHC.Integer.Type.Integer)
                                                                             @ (Index.Uinds_20 2,
                                                                                Index.Linds_20 2,
                                                                                Index.Uinds_19 0,
                                                                                Index.Linds_19 0,
                                                                                Index.Uinds_9 1,
                                                                                Index.Linds_9 1,
                                                                                Index.Uinds_3 0,
                                                                                Index.Linds_3 0)
                                                                             GHC.Real.$fEnumRatio_$s$c+
                                                                             (\ (ds :: (Index.Uinds_20
                                                                                          2,
                                                                                        Index.Linds_20
                                                                                          2,
                                                                                        Index.Uinds_19
                                                                                          0,
                                                                                        Index.Linds_19
                                                                                          0,
                                                                                        Index.Uinds_9
                                                                                          1,
                                                                                        Index.Linds_9
                                                                                          1,
                                                                                        Index.Uinds_3
                                                                                          0,
                                                                                        Index.Linds_3
                                                                                          0)) ->
                                                                              {__scc {main:AnsatzEqns2.index2SparseRemoveAIB} True True} case ds of wild { (,,,,,,,) x1 x2 ds1 ds2 x5 x6 ds3 ds4 ->
                                                                                                                                         (case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.e} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} x1 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                          case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.e} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                         @ Index.Uind_20
                                                                                                                                                                                                                                                         0#
                                                                                                                                                                                                                                                         s of wild2 {
                                                                                                                                            GHC.Base.Nothing
                                                                                                                                            -> case Data.Maybe.fromJust1
                                                                                                                                               ret_ty GHC.Types.Int
                                                                                                                                               of {}
                                                                                                                                            GHC.Base.Just x
                                                                                                                                            -> case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.e} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                             @ Index.Uind_20
                                                                                                                                                                                                                                                             x of a# { DEFAULT ->
                                                                                                                                               case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.f} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} wild1 of wild3 { Index.UnsafemkInd s1 ->
                                                                                                                                               case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.f} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                              @ Index.Uind_20
                                                                                                                                                                                                                                                              1#
                                                                                                                                                                                                                                                              s1 of wild4 {
                                                                                                                                                 GHC.Base.Nothing
                                                                                                                                                 -> case Data.Maybe.fromJust1
                                                                                                                                                    ret_ty GHC.Types.Int
                                                                                                                                                    of {}
                                                                                                                                                 GHC.Base.Just x4
                                                                                                                                                 -> case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.f} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                  @ Index.Uind_20
                                                                                                                                                                                                                                                                  x4 of a#1 { DEFAULT ->
                                                                                                                                                    case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.j} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} x5 of wild5 { Index.UnsafemkInd s2 ->
                                                                                                                                                    case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.j} False True} {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                   @ Index.Uind_9
                                                                                                                                                                                                                                                                   0#
                                                                                                                                                                                                                                                                   s2 of wild6 {
                                                                                                                                                      GHC.Base.Nothing
                                                                                                                                                      -> case Data.Maybe.fromJust1
                                                                                                                                                         ret_ty GHC.Types.Int
                                                                                                                                                         of {}
                                                                                                                                                      GHC.Base.Just x8
                                                                                                                                                      -> case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.j} False True} {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                       @ Index.Uind_9
                                                                                                                                                                                                                                                                       x8 of a#2 { DEFAULT ->
                                                                                                                                                         GHC.Types.I#
                                                                                                                                                           (GHC.Prim.+#
                                                                                                                                                              (GHC.Prim.+#
                                                                                                                                                                 (GHC.Prim.*#
                                                                                                                                                                    (GHC.Prim.-#
                                                                                                                                                                       ({__scc {main:AnsatzEqns2.index2SparseRemoveAIB.e} False True} GHC.Prim.+#
                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                        a#)
                                                                                                                                                                       1#)
                                                                                                                                                                    210#)
                                                                                                                                                                 (GHC.Prim.*#
                                                                                                                                                                    (GHC.Prim.-#
                                                                                                                                                                       ({__scc {main:AnsatzEqns2.index2SparseRemoveAIB.f} False True} GHC.Prim.+#
                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                        a#1)
                                                                                                                                                                       1#)
                                                                                                                                                                    10#))
                                                                                                                                                              ({__scc {main:AnsatzEqns2.index2SparseRemoveAIB.j} False True} GHC.Prim.+#
                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                               a#2)) } } } } } } } } },
                                                                                                                                          let {
                                                                                                                                            i :: GHC.Types.Int
                                                                                                                                            = {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.i} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x6 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                              case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                                                                                                                                               s of wild2 {
                                                                                                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                   ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                   of {}
                                                                                                                                                                                                                                                                                                GHC.Base.Just x
                                                                                                                                                                                                                                                                                                -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                   @ Index.Lind_9
                                                                                                                                                                                                                                                                                                                                                   x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                   GHC.Types.I#
                                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                                                                        a#) } } }
                                                                                                                                          } in
                                                                                                                                          let {
                                                                                                                                            b :: GHC.Types.Int
                                                                                                                                            = {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.b} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x2 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                              case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                               1#
                                                                                                                                                                                                                                                                                                                                               s of wild2 {
                                                                                                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                   ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                   of {}
                                                                                                                                                                                                                                                                                                GHC.Base.Just x
                                                                                                                                                                                                                                                                                                -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                   @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                   x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                   GHC.Types.I#
                                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                                                                        a#) } } }
                                                                                                                                          } in
                                                                                                                                          let {
                                                                                                                                            a :: GHC.Types.Int
                                                                                                                                            = {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.a} True True} {__scc {main:Index.fromEnum} True False} {__scc {main:Index.getValInd} True False} case x2 of wild1 { Index.UnsafemkInd s ->
                                                                                                                                                                                                                                                                                              case {__scc {main:Index.getValInd} False True} Data.Sequence.Internal.$wlookup
                                                                                                                                                                                                                                                                                                                                               @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                               0#
                                                                                                                                                                                                                                                                                                                                               s of wild2 {
                                                                                                                                                                                                                                                                                                GHC.Base.Nothing
                                                                                                                                                                                                                                                                                                -> case Data.Maybe.fromJust1
                                                                                                                                                                                                                                                                                                   ret_ty GHC.Types.Int
                                                                                                                                                                                                                                                                                                   of {}
                                                                                                                                                                                                                                                                                                GHC.Base.Just x
                                                                                                                                                                                                                                                                                                -> case {__scc {main:Index.fromEnum} False True} GHC.Prim.dataToTag#
                                                                                                                                                                                                                                                                                                                                                   @ Index.Lind_20
                                                                                                                                                                                                                                                                                                                                                   x of a# { DEFAULT ->
                                                                                                                                                                                                                                                                                                   GHC.Types.I#
                                                                                                                                                                                                                                                                                                     (GHC.Prim.+#
                                                                                                                                                                                                                                                                                                        1#
                                                                                                                                                                                                                                                                                                        a#) } } }
                                                                                                                                          } in
                                                                                                                                          case {__scc {main:AnsatzEqns2.index2SparseRemoveAIB.x} True True} AnsatzEqns2.$sfind1
                                                                                                                                                                                                              @ GHC.Types.Int
                                                                                                                                                                                                              (GHC.Types.:
                                                                                                                                                                                                                 @ GHC.Types.Int
                                                                                                                                                                                                                 a
                                                                                                                                                                                                                 (GHC.Types.:
                                                                                                                                                                                                                    @ GHC.Types.Int
                                                                                                                                                                                                                    (case b of wild1 { GHC.Types.I# x ->
                                                                                                                                                                                                                     case i of wild2 { GHC.Types.I# y ->
                                                                                                                                                                                                                     GHC.Types.I#
                                                                                                                                                                                                                       (GHC.Prim.+#
                                                                                                                                                                                                                          (GHC.Prim.+#
                                                                                                                                                                                                                             105#
                                                                                                                                                                                                                             (GHC.Prim.*#
                                                                                                                                                                                                                                (GHC.Prim.-#
                                                                                                                                                                                                                                   x
                                                                                                                                                                                                                                   1#)
                                                                                                                                                                                                                                10#))
                                                                                                                                                                                                                          y) } })
                                                                                                                                                                                                                    (GHC.Types.[]
                                                                                                                                                                                                                       @ GHC.Types.Int)))
                                                                                                                                                                                                              w of wild1 { GHC.Types.I# y ->
                                                                                                                                          GHC.Types.I#
                                                                                                                                            (GHC.Prim.+#
                                                                                                                                               316#
                                                                                                                                               y) }) })
                                                                             ww) -}
c57b9181ecc3c845dc53a1e0fa9e807f
  $wmkEqnSparseintCond2NoSym ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Data.Map.Internal.Map
         (Index.Index 1 2 0 0 1 1 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
9eb2d02dcae94080542e287f92efcc3b
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
    -> [((GHC.Types.Int, GHC.Types.Int), a)]
    -> Data.Map.Internal.Map (GHC.Types.Int, GHC.Types.Int) a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
810c721e8bebef5f204c59407273d83b
  ansatzAB ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 1 0 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wansatzAB w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
5eb632e56e8c6d5707584866621ddb19
  ansatzAB1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((AnsatzEqns2.ansatzAB2, AnsatzEqns2.ansatzAB2)) -}
1f3d979861f824fa9d21bc64581da64f
  ansatzAB2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b9bced3381c56011e7fc5eb1790759a8
  ansatzAB3 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((AnsatzEqns2.ansatzAB4, AnsatzEqns2.ansatzAB4)) -}
96460a941638d83aef3816fea7b24126
  ansatzAB4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
ea053074e1df8d0f9bca04c00fc4a67e
  ansatzAB5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
c0cb52b3f769530ed7a7183d2298ddc8
  ansatzAB6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((AnsatzEqns2.ansatzAB2, AnsatzEqns2.ansatzAB4)) -}
58ffcb24c1c9001275f2433df6952b96
  ansatzAB_lvl19 ::
    GHC.Real.Rational -> GHC.Real.Rational -> GHC.Real.Rational
  {- Unfolding: ({__scc {main:Tensor.tensorAdd} False True} GHC.Real.$fEnumRatio_$s$c+) -}
e564b2d2e06f15a153637c20a050421d
  ansatzABb ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 1 0 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wansatzABb w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
6890376ee41bafdcae0748bdf1558f5a
  ansatzABb1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((AnsatzEqns2.ansatzAB4, AnsatzEqns2.ansatzAB2)) -}
08c7f48a0db29860aaf6f073b1367178
  ansatzABb2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((AnsatzEqns2.ansatzAB2, AnsatzEqns2.ansatzAB5)) -}
98cb045a36e1748f85ea726469cf2e3b
  ansatzABb3 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:AnsatzEqns2.ansatzABb} False True} {__scc {main:AnsatzEqns2.ansatzABb.block1} False True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                        case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                        case Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww1
                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                                                                                                                        Tensor.Tensor
                                                                                                                          @ (1
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (1
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                          @ GHC.Real.Rational
                                                                                                                          ww5 } } }) -}
9198366c5559c9089b8061a5917a0aa6
  ansatzAIB ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wansatzAIB w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
d1de40abf435f98d084ea8be2ee206a9
  ansatzAIB1 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:AnsatzEqns2.ansatzAIB} False True} {__scc {main:AnsatzEqns2.ansatzAIB.block1} False True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                        case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                        case Tensor.$wtensorProductWith
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ GHC.Real.Rational
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               @ 1
                                                                                                                               @ 1
                                                                                                                               @ 0
                                                                                                                               @ 0
                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                               ww1
                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                                                                                                                        Tensor.Tensor
                                                                                                                          @ (1
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (1
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ (0
                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                          @ GHC.Real.Rational
                                                                                                                          ww5 } } }) -}
fbb0b5f89e63e55c1c7d1cc71bdbe03b
  ansatzAIBJ ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 3 2 0 0 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wansatzAIBJ w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 3
                   @ 2
                   @ 0
                   @ 0
                   @ GHC.Real.Rational
                   ww1 }) -}
4d18d6b5ef94006aca7165538dfcd9e3
  ansatzAaBI ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 2 1 1 1 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wansatzAaBI w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 2
                   @ 1
                   @ 1
                   @ 1
                   @ GHC.Real.Rational
                   ww1 }) -}
1c9e81e4cf70e08d9b687e0219d497b9
  ansatzAaBI1 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:AnsatzEqns2.ansatzAaBI} False True} {__scc {main:AnsatzEqns2.ansatzAaBI.block1} False True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                          case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                          case Tensor.$wtensorProductWith
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ GHC.Real.Rational
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 @ 1
                                                                                                                                 @ 1
                                                                                                                                 @ 0
                                                                                                                                 @ 0
                                                                                                                                 GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                 ww1
                                                                                                                                 ww3 of ww4 { Unit# ww5 ->
                                                                                                                          Tensor.Tensor
                                                                                                                            @ (1
                                                                                                                               GHC.TypeNats.+ 0)
                                                                                                                            @ (1
                                                                                                                               GHC.TypeNats.+ 0)
                                                                                                                            @ (0
                                                                                                                               GHC.TypeNats.+ 0)
                                                                                                                            @ (0
                                                                                                                               GHC.TypeNats.+ 0)
                                                                                                                            @ (0
                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                            @ (0
                                                                                                                               GHC.TypeNats.+ 1)
                                                                                                                            @ (0
                                                                                                                               GHC.TypeNats.+ 0)
                                                                                                                            @ (0
                                                                                                                               GHC.TypeNats.+ 0)
                                                                                                                            @ GHC.Real.Rational
                                                                                                                            ww5 } } }) -}
2c3481f1d11e35d220e5f3219498d286
  ansatzAaBb ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 2 2 0 0 1 0 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wansatzAaBb w w1 w2 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 2
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
86283914125f830585d333d6181b8ef0
  intCond2NoSym ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 1 2 0 0 1 1 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wintCond2NoSym w w1 w2 w3 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 1
                   @ 2
                   @ 0
                   @ 0
                   @ 1
                   @ 1
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
4b59435517cc7da525c515ea28501f47
  intCondfirstOrder ::
    Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20
    -> Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20
    -> Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9
    -> Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9
    -> Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational
  {- Arity: 4, Strictness: <L,U><L,U><L,A><L,A>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Map.Internal.Map (Index.Linds_3 4) Index.Uind_20)
                   (w1 :: Data.Map.Internal.Map (Index.Uinds_3 4) Index.Lind_20)
                   (w2 :: Data.Map.Internal.Map (Index.Linds_3 2) Index.Uind_9)
                   (w3 :: Data.Map.Internal.Map (Index.Uinds_3 2) Index.Lind_9) ->
                 case AnsatzEqns2.$wintCondfirstOrder w w1 of ww { Unit# ww1 ->
                 Tensor.Tensor
                   @ 0
                   @ 1
                   @ 0
                   @ 0
                   @ 0
                   @ 0
                   @ 2
                   @ 2
                   @ GHC.Real.Rational
                   ww1 }) -}
4fed05a88db9bfb18bbe153bd74b82fe
  intCondfirstOrder1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 7#) -}
361365106390d6143579e99dbc4b419f
  intCondfirstOrder2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
11e75532a5910ad326a2ff4f9fb0c95c
  intCondfirstOrder3 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 0)
      (1 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:AnsatzEqns2.intCondfirstOrder} False True} {__scc {main:AnsatzEqns2.intCondfirstOrder.block1} False True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                                                                                        case BasicTensors.delta_3 of ww2 { Tensor.Tensor ww3 ->
                                                                                                                                        case Tensor.$wtensorProductWith
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ GHC.Real.Rational
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 0
                                                                                                                                               @ 1
                                                                                                                                               @ 1
                                                                                                                                               GHC.Real.$fFractionalRatio_$s$c*
                                                                                                                                               ww1
                                                                                                                                               ww3 of ww4 { Unit# ww5 ->
                                                                                                                                        Tensor.Tensor
                                                                                                                                          @ (1
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (1
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 0)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                                          @ (0
                                                                                                                                             GHC.TypeNats.+ 1)
                                                                                                                                          @ GHC.Real.Rational
                                                                                                                                          ww5 } } }) -}
bf47aadf1c091ae23502070e2577f492
  intCondfirstOrder_go8 ::
    Data.Map.Internal.Map
      (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
  {- Arity: 1, Strictness: <S,1*U> -}
f140f4b621a80ae12c56638d4eff0ee2
  mkEqnSparseAnsatzAB ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 1 0 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzAB w ww1 }) -}
9c6adf537be2e62e573721712107e7a1
  mkEqnSparseAnsatzABSolo ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 1 0 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 1 0 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzABSolo w ww1 }) -}
a67f9aea36b61986d9976f04634de057
  mkEqnSparseAnsatzABb ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 1 0 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 1 0 1 1 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzABb w ww1 }) -}
95b5ce589b1c94071c0df66333a3fc43
  mkEqnSparseAnsatzAIB ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 2 1 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzAIB w ww1 }) -}
34e97962defc2b697eee7cba81bfc916
  mkEqnSparseAnsatzAIBJ ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 3 2 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 3 2 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzAIBJ w ww1 }) -}
8d9b5e3f92a4681938a1c2a843b8434d
  mkEqnSparseAnsatzAaBI ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 2 1 1 1 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 2 1 1 1 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzAaBI w ww1 }) -}
035b058e16b98d1d760a2c2c32e404cd
  mkEqnSparseAnsatzAaBb ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 1 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 1 0 2 2 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseAnsatzAaBb w ww1 }) -}
fdf16c10647cfdfd18d51a079b650b87
  mkEqnSparseRemoveAIB ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 2 2 0 0 1 1 0 0 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 2 2 0 0 1 1 0 0 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseRemoveAIB w ww1 }) -}
aec3444ebb5533e3feb3e58d8515cbc8
  mkEqnSparsefirstOrder ::
    Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 1, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Tensor.Tensor 0 1 0 0 0 0 2 2 GHC.Real.Rational) ->
                 {__scc {main:AnsatzEqns2.mkEqnSparsefirstOrder} True True} case ds of wild { Tensor.Tensor map1 ->
                                                                            AnsatzEqns2.$sfromList
                                                                              @ (GHC.Real.Ratio
                                                                                   GHC.Integer.Type.Integer)
                                                                              (AnsatzEqns2.mkEqnSparsefirstOrder_go13
                                                                                 (GHC.Types.[]
                                                                                    @ ((GHC.Types.Int,
                                                                                        GHC.Types.Int),
                                                                                       GHC.Real.Rational))
                                                                                 map1) }) -}
12d164c4eef8b15afb02e1366923b20d
  mkEqnSparsefirstOrder_go13 ::
    [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
    -> Data.Map.Internal.Map
         (Index.Index 0 1 0 0 0 0 2 2) GHC.Real.Rational
    -> [((GHC.Types.Int, GHC.Types.Int), GHC.Real.Rational)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
02cb0a7184d0d5bcaba262894578067a
  mkEqnSparseintCond2NoSym ::
    Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int
    -> Tensor.Tensor 1 2 0 0 1 1 2 2 GHC.Real.Rational
    -> Data.Map.Internal.Map
         (GHC.Types.Int, GHC.Types.Int) GHC.Real.Rational
  {- Arity: 2, Strictness: <L,U><S(S),1*U(1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Map.Internal.Map [GHC.Types.Int] GHC.Types.Int)
                   (w1 :: Tensor.Tensor 1 2 0 0 1 1 2 2 GHC.Real.Rational) ->
                 case w1 of ww { Tensor.Tensor ww1 ->
                 AnsatzEqns2.$wmkEqnSparseintCond2NoSym w ww1 }) -}
520a15b3e6fe309374d833c367083fe1
  removeAIB :: Tensor.Tensor 2 2 0 0 1 1 0 0 GHC.Real.Rational
  {- Unfolding: InlineRule (0, True, True)
                AnsatzEqns2.removeAIB1
                  `cast`
                (Tensor.Tensor
                   (AddDef (<1>_N, <1>_N))
                   (AddDef (<1>_N, <1>_N))
                   (Add0L (<0>_N))
                   (Add0L (<0>_N))
                   (Add0L (<1>_N))
                   (Add0L (<1>_N))
                   (Add0L (<0>_N))
                   (Add0L (<0>_N))
                   <GHC.Real.Rational>_R)_R -}
2801e55300983932751d4e89d4ad7bb2
  removeAIB1 ::
    Tensor.Tensor
      (1 GHC.TypeNats.+ 1)
      (1 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 1)
      (0 GHC.TypeNats.+ 0)
      (0 GHC.TypeNats.+ 0)
      GHC.Real.Rational
  {- Unfolding: ({__scc {main:AnsatzEqns2.removeAIB} True True} case BasicTensors.delta_20 of ww { Tensor.Tensor ww1 ->
                                                                case BasicTensors.delta_9 of ww2 { Tensor.Tensor ww3 ->
                                                                case Tensor.$wtensorProductWith
                                                                       @ GHC.Real.Rational
                                                                       @ GHC.Real.Rational
                                                                       @ GHC.Real.Rational
                                                                       @ 1
                                                                       @ 1
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 1
                                                                       @ 1
                                                                       @ 0
                                                                       @ 0
                                                                       GHC.Real.$fFractionalRatio_$s$c*
                                                                       ww1
                                                                       ww3 of ww4 { Unit# ww5 ->
                                                                case Tensor.$wtensorProductWith
                                                                       @ GHC.Real.Rational
                                                                       @ GHC.Real.Rational
                                                                       @ GHC.Real.Rational
                                                                       @ 1
                                                                       @ 1
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 0
                                                                       @ 1
                                                                       @ 1
                                                                       @ 0
                                                                       @ 0
                                                                       @ 1
                                                                       @ 1
                                                                       @ 0
                                                                       @ 0
                                                                       GHC.Real.$fFractionalRatio_$s$c*
                                                                       ww1
                                                                       ww5
                                                                         `cast`
                                                                       (Data.Map.Internal.Map
                                                                          ((,,,,,,,)
                                                                             (Index.Ind
                                                                                (Add0R (<1>_N))
                                                                                <Index.Uind_20>_N)_N
                                                                             (Index.Ind
                                                                                (Add0R (<1>_N))
                                                                                <Index.Lind_20>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Uind_19>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Lind_19>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<1>_N))
                                                                                <Index.Uind_9>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<1>_N))
                                                                                <Index.Lind_9>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Uind_3>_N)_N
                                                                             (Index.Ind
                                                                                (Add0L (<0>_N))
                                                                                <Index.Lind_3>_N)_N)_N
                                                                          <GHC.Real.Rational>_R)_R of ww7 { Unit# ww8 ->
                                                                Tensor.Tensor
                                                                  @ (1 GHC.TypeNats.+ 1)
                                                                  @ (1 GHC.TypeNats.+ 1)
                                                                  @ (0 GHC.TypeNats.+ 0)
                                                                  @ (0 GHC.TypeNats.+ 0)
                                                                  @ (0 GHC.TypeNats.+ 1)
                                                                  @ (0 GHC.TypeNats.+ 1)
                                                                  @ (0 GHC.TypeNats.+ 0)
                                                                  @ (0 GHC.TypeNats.+ 0)
                                                                  @ GHC.Real.Rational
                                                                  ww8 } } } }) -}
"SPEC/AnsatzEqns2 fromList @ (Int, Int) _" [orphan] forall @ a
                                                           ($dOrd :: GHC.Classes.Ord
                                                                       (GHC.Types.Int,
                                                                        GHC.Types.Int))
  Data.Map.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int)
                             @ a
                             $dOrd
  = AnsatzEqns2.$sfromList @ a
"SPEC/AnsatzEqns2 mapKeysWith @ (Int, Int) _ _" [orphan] forall @ a
                                                                @ k1
                                                                ($dOrd :: GHC.Classes.Ord
                                                                            (GHC.Types.Int,
                                                                             GHC.Types.Int))
  Data.Map.Internal.mapKeysWith @ (GHC.Types.Int, GHC.Types.Int)
                                @ a
                                @ k1
                                $dOrd
  = AnsatzEqns2.$smapKeysWith @ a @ k1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

